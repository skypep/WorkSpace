// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/android/dialer/dialercontact/dialer_contact.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "com/android/dialer/dialercontact/dialer_contact.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace android {
namespace dialer {
namespace callcomposer {

void protobuf_ShutdownFile_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto() {
  DialerContact_default_instance_.Shutdown();
  SimDetails_default_instance_.Shutdown();
}

void protobuf_InitDefaults_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  DialerContact_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SimDetails_default_instance_.DefaultConstruct();
  DialerContact_default_instance_.get_mutable()->InitAsDefaultInstance();
  SimDetails_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto_once_);
void protobuf_InitDefaults_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto_once_,
                 &protobuf_InitDefaults_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto_impl);
}
void protobuf_AddDesc_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto_once_);
void protobuf_AddDesc_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto_once_,
                 &protobuf_AddDesc_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto {
  StaticDescriptorInitializer_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto() {
    protobuf_AddDesc_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto();
  }
} static_descriptor_initializer_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForDialerContact(
    DialerContact* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DialerContact::kPhotoIdFieldNumber;
const int DialerContact::kPhotoUriFieldNumber;
const int DialerContact::kContactUriFieldNumber;
const int DialerContact::kNameOrNumberFieldNumber;
const int DialerContact::kNumberFieldNumber;
const int DialerContact::kDisplayNumberFieldNumber;
const int DialerContact::kNumberLabelFieldNumber;
const int DialerContact::kContactTypeFieldNumber;
const int DialerContact::kSimDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DialerContact::DialerContact()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.dialer.callcomposer.DialerContact)
}

void DialerContact::InitAsDefaultInstance() {
  sim_details_ = const_cast< ::com::android::dialer::callcomposer::SimDetails*>(
      ::com::android::dialer::callcomposer::SimDetails::internal_default_instance());
}

DialerContact::DialerContact(const DialerContact& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.android.dialer.callcomposer.DialerContact)
}

void DialerContact::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_or_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sim_details_ = NULL;
  ::memset(&photo_id_, 0, reinterpret_cast<char*>(&contact_type_) -
    reinterpret_cast<char*>(&photo_id_) + sizeof(contact_type_));
}

DialerContact::~DialerContact() {
  // @@protoc_insertion_point(destructor:com.android.dialer.callcomposer.DialerContact)
  SharedDtor();
}

void DialerContact::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contact_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_or_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &DialerContact_default_instance_.get()) {
    delete sim_details_;
  }
}

void DialerContact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DialerContact& DialerContact::default_instance() {
  protobuf_InitDefaults_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DialerContact> DialerContact_default_instance_;

DialerContact* DialerContact::New(::google::protobuf::Arena* arena) const {
  DialerContact* n = new DialerContact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DialerContact::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.dialer.callcomposer.DialerContact)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DialerContact, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DialerContact*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(photo_id_, contact_type_);
    if (has_photo_uri()) {
      photo_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_contact_uri()) {
      contact_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name_or_number()) {
      name_or_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_number()) {
      number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_display_number()) {
      display_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_number_label()) {
      number_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (has_sim_details()) {
    if (sim_details_ != NULL) sim_details_->::com::android::dialer::callcomposer::SimDetails::Clear();
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DialerContact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForDialerContact, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:com.android.dialer.callcomposer.DialerContact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 photo_id = 1;
      case 1: {
        if (tag == 9) {
          set_has_photo_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &photo_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_photo_uri;
        break;
      }

      // optional string photo_uri = 2;
      case 2: {
        if (tag == 18) {
         parse_photo_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_photo_uri()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_contact_uri;
        break;
      }

      // optional string contact_uri = 3;
      case 3: {
        if (tag == 26) {
         parse_contact_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact_uri()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name_or_number;
        break;
      }

      // optional string name_or_number = 4;
      case 4: {
        if (tag == 34) {
         parse_name_or_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_or_number()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_number;
        break;
      }

      // optional string number = 6;
      case 6: {
        if (tag == 50) {
         parse_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_display_number;
        break;
      }

      // optional string display_number = 7;
      case 7: {
        if (tag == 58) {
         parse_display_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_number()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_number_label;
        break;
      }

      // optional string number_label = 8;
      case 8: {
        if (tag == 66) {
         parse_number_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number_label()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_contact_type;
        break;
      }

      // optional int32 contact_type = 9;
      case 9: {
        if (tag == 72) {
         parse_contact_type:
          set_has_contact_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contact_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_sim_details;
        break;
      }

      // optional .com.android.dialer.callcomposer.SimDetails sim_details = 10;
      case 10: {
        if (tag == 82) {
         parse_sim_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sim_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.dialer.callcomposer.DialerContact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.dialer.callcomposer.DialerContact)
  return false;
#undef DO_
}

void DialerContact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.dialer.callcomposer.DialerContact)
  // optional fixed64 photo_id = 1;
  if (has_photo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->photo_id(), output);
  }

  // optional string photo_uri = 2;
  if (has_photo_uri()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->photo_uri(), output);
  }

  // optional string contact_uri = 3;
  if (has_contact_uri()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->contact_uri(), output);
  }

  // optional string name_or_number = 4;
  if (has_name_or_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name_or_number(), output);
  }

  // optional string number = 6;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->number(), output);
  }

  // optional string display_number = 7;
  if (has_display_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->display_number(), output);
  }

  // optional string number_label = 8;
  if (has_number_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->number_label(), output);
  }

  // optional int32 contact_type = 9;
  if (has_contact_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->contact_type(), output);
  }

  // optional .com.android.dialer.callcomposer.SimDetails sim_details = 10;
  if (has_sim_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->sim_details_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.dialer.callcomposer.DialerContact)
}

size_t DialerContact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.dialer.callcomposer.DialerContact)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional fixed64 photo_id = 1;
    if (has_photo_id()) {
      total_size += 1 + 8;
    }

    // optional string photo_uri = 2;
    if (has_photo_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->photo_uri());
    }

    // optional string contact_uri = 3;
    if (has_contact_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contact_uri());
    }

    // optional string name_or_number = 4;
    if (has_name_or_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_or_number());
    }

    // optional string number = 6;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }

    // optional string display_number = 7;
    if (has_display_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_number());
    }

    // optional string number_label = 8;
    if (has_number_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number_label());
    }

    // optional int32 contact_type = 9;
    if (has_contact_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contact_type());
    }

  }
  // optional .com.android.dialer.callcomposer.SimDetails sim_details = 10;
  if (has_sim_details()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sim_details_);
  }

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DialerContact::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DialerContact*>(&from));
}

void DialerContact::MergeFrom(const DialerContact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.dialer.callcomposer.DialerContact)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DialerContact::UnsafeMergeFrom(const DialerContact& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_photo_id()) {
      set_photo_id(from.photo_id());
    }
    if (from.has_photo_uri()) {
      set_has_photo_uri();
      photo_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photo_uri_);
    }
    if (from.has_contact_uri()) {
      set_has_contact_uri();
      contact_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contact_uri_);
    }
    if (from.has_name_or_number()) {
      set_has_name_or_number();
      name_or_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_or_number_);
    }
    if (from.has_number()) {
      set_has_number();
      number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_);
    }
    if (from.has_display_number()) {
      set_has_display_number();
      display_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_number_);
    }
    if (from.has_number_label()) {
      set_has_number_label();
      number_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_label_);
    }
    if (from.has_contact_type()) {
      set_contact_type(from.contact_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sim_details()) {
      mutable_sim_details()->::com::android::dialer::callcomposer::SimDetails::MergeFrom(from.sim_details());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DialerContact::CopyFrom(const DialerContact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.dialer.callcomposer.DialerContact)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DialerContact::IsInitialized() const {

  return true;
}

void DialerContact::Swap(DialerContact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DialerContact::InternalSwap(DialerContact* other) {
  std::swap(photo_id_, other->photo_id_);
  photo_uri_.Swap(&other->photo_uri_);
  contact_uri_.Swap(&other->contact_uri_);
  name_or_number_.Swap(&other->name_or_number_);
  number_.Swap(&other->number_);
  display_number_.Swap(&other->display_number_);
  number_label_.Swap(&other->number_label_);
  std::swap(contact_type_, other->contact_type_);
  std::swap(sim_details_, other->sim_details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DialerContact::GetTypeName() const {
  return "com.android.dialer.callcomposer.DialerContact";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DialerContact

// optional fixed64 photo_id = 1;
bool DialerContact::has_photo_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DialerContact::set_has_photo_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DialerContact::clear_has_photo_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DialerContact::clear_photo_id() {
  photo_id_ = GOOGLE_ULONGLONG(0);
  clear_has_photo_id();
}
::google::protobuf::uint64 DialerContact::photo_id() const {
  // @@protoc_insertion_point(field_get:com.android.dialer.callcomposer.DialerContact.photo_id)
  return photo_id_;
}
void DialerContact::set_photo_id(::google::protobuf::uint64 value) {
  set_has_photo_id();
  photo_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.dialer.callcomposer.DialerContact.photo_id)
}

// optional string photo_uri = 2;
bool DialerContact::has_photo_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DialerContact::set_has_photo_uri() {
  _has_bits_[0] |= 0x00000002u;
}
void DialerContact::clear_has_photo_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
void DialerContact::clear_photo_uri() {
  photo_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_photo_uri();
}
const ::std::string& DialerContact::photo_uri() const {
  // @@protoc_insertion_point(field_get:com.android.dialer.callcomposer.DialerContact.photo_uri)
  return photo_uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DialerContact::set_photo_uri(const ::std::string& value) {
  set_has_photo_uri();
  photo_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.dialer.callcomposer.DialerContact.photo_uri)
}
void DialerContact::set_photo_uri(const char* value) {
  set_has_photo_uri();
  photo_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.dialer.callcomposer.DialerContact.photo_uri)
}
void DialerContact::set_photo_uri(const char* value, size_t size) {
  set_has_photo_uri();
  photo_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.dialer.callcomposer.DialerContact.photo_uri)
}
::std::string* DialerContact::mutable_photo_uri() {
  set_has_photo_uri();
  // @@protoc_insertion_point(field_mutable:com.android.dialer.callcomposer.DialerContact.photo_uri)
  return photo_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DialerContact::release_photo_uri() {
  // @@protoc_insertion_point(field_release:com.android.dialer.callcomposer.DialerContact.photo_uri)
  clear_has_photo_uri();
  return photo_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DialerContact::set_allocated_photo_uri(::std::string* photo_uri) {
  if (photo_uri != NULL) {
    set_has_photo_uri();
  } else {
    clear_has_photo_uri();
  }
  photo_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo_uri);
  // @@protoc_insertion_point(field_set_allocated:com.android.dialer.callcomposer.DialerContact.photo_uri)
}

// optional string contact_uri = 3;
bool DialerContact::has_contact_uri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DialerContact::set_has_contact_uri() {
  _has_bits_[0] |= 0x00000004u;
}
void DialerContact::clear_has_contact_uri() {
  _has_bits_[0] &= ~0x00000004u;
}
void DialerContact::clear_contact_uri() {
  contact_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contact_uri();
}
const ::std::string& DialerContact::contact_uri() const {
  // @@protoc_insertion_point(field_get:com.android.dialer.callcomposer.DialerContact.contact_uri)
  return contact_uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DialerContact::set_contact_uri(const ::std::string& value) {
  set_has_contact_uri();
  contact_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.dialer.callcomposer.DialerContact.contact_uri)
}
void DialerContact::set_contact_uri(const char* value) {
  set_has_contact_uri();
  contact_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.dialer.callcomposer.DialerContact.contact_uri)
}
void DialerContact::set_contact_uri(const char* value, size_t size) {
  set_has_contact_uri();
  contact_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.dialer.callcomposer.DialerContact.contact_uri)
}
::std::string* DialerContact::mutable_contact_uri() {
  set_has_contact_uri();
  // @@protoc_insertion_point(field_mutable:com.android.dialer.callcomposer.DialerContact.contact_uri)
  return contact_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DialerContact::release_contact_uri() {
  // @@protoc_insertion_point(field_release:com.android.dialer.callcomposer.DialerContact.contact_uri)
  clear_has_contact_uri();
  return contact_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DialerContact::set_allocated_contact_uri(::std::string* contact_uri) {
  if (contact_uri != NULL) {
    set_has_contact_uri();
  } else {
    clear_has_contact_uri();
  }
  contact_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contact_uri);
  // @@protoc_insertion_point(field_set_allocated:com.android.dialer.callcomposer.DialerContact.contact_uri)
}

// optional string name_or_number = 4;
bool DialerContact::has_name_or_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DialerContact::set_has_name_or_number() {
  _has_bits_[0] |= 0x00000008u;
}
void DialerContact::clear_has_name_or_number() {
  _has_bits_[0] &= ~0x00000008u;
}
void DialerContact::clear_name_or_number() {
  name_or_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_or_number();
}
const ::std::string& DialerContact::name_or_number() const {
  // @@protoc_insertion_point(field_get:com.android.dialer.callcomposer.DialerContact.name_or_number)
  return name_or_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DialerContact::set_name_or_number(const ::std::string& value) {
  set_has_name_or_number();
  name_or_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.dialer.callcomposer.DialerContact.name_or_number)
}
void DialerContact::set_name_or_number(const char* value) {
  set_has_name_or_number();
  name_or_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.dialer.callcomposer.DialerContact.name_or_number)
}
void DialerContact::set_name_or_number(const char* value, size_t size) {
  set_has_name_or_number();
  name_or_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.dialer.callcomposer.DialerContact.name_or_number)
}
::std::string* DialerContact::mutable_name_or_number() {
  set_has_name_or_number();
  // @@protoc_insertion_point(field_mutable:com.android.dialer.callcomposer.DialerContact.name_or_number)
  return name_or_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DialerContact::release_name_or_number() {
  // @@protoc_insertion_point(field_release:com.android.dialer.callcomposer.DialerContact.name_or_number)
  clear_has_name_or_number();
  return name_or_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DialerContact::set_allocated_name_or_number(::std::string* name_or_number) {
  if (name_or_number != NULL) {
    set_has_name_or_number();
  } else {
    clear_has_name_or_number();
  }
  name_or_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_or_number);
  // @@protoc_insertion_point(field_set_allocated:com.android.dialer.callcomposer.DialerContact.name_or_number)
}

// optional string number = 6;
bool DialerContact::has_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DialerContact::set_has_number() {
  _has_bits_[0] |= 0x00000010u;
}
void DialerContact::clear_has_number() {
  _has_bits_[0] &= ~0x00000010u;
}
void DialerContact::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_number();
}
const ::std::string& DialerContact::number() const {
  // @@protoc_insertion_point(field_get:com.android.dialer.callcomposer.DialerContact.number)
  return number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DialerContact::set_number(const ::std::string& value) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.dialer.callcomposer.DialerContact.number)
}
void DialerContact::set_number(const char* value) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.dialer.callcomposer.DialerContact.number)
}
void DialerContact::set_number(const char* value, size_t size) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.dialer.callcomposer.DialerContact.number)
}
::std::string* DialerContact::mutable_number() {
  set_has_number();
  // @@protoc_insertion_point(field_mutable:com.android.dialer.callcomposer.DialerContact.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DialerContact::release_number() {
  // @@protoc_insertion_point(field_release:com.android.dialer.callcomposer.DialerContact.number)
  clear_has_number();
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DialerContact::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    set_has_number();
  } else {
    clear_has_number();
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:com.android.dialer.callcomposer.DialerContact.number)
}

// optional string display_number = 7;
bool DialerContact::has_display_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DialerContact::set_has_display_number() {
  _has_bits_[0] |= 0x00000020u;
}
void DialerContact::clear_has_display_number() {
  _has_bits_[0] &= ~0x00000020u;
}
void DialerContact::clear_display_number() {
  display_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_number();
}
const ::std::string& DialerContact::display_number() const {
  // @@protoc_insertion_point(field_get:com.android.dialer.callcomposer.DialerContact.display_number)
  return display_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DialerContact::set_display_number(const ::std::string& value) {
  set_has_display_number();
  display_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.dialer.callcomposer.DialerContact.display_number)
}
void DialerContact::set_display_number(const char* value) {
  set_has_display_number();
  display_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.dialer.callcomposer.DialerContact.display_number)
}
void DialerContact::set_display_number(const char* value, size_t size) {
  set_has_display_number();
  display_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.dialer.callcomposer.DialerContact.display_number)
}
::std::string* DialerContact::mutable_display_number() {
  set_has_display_number();
  // @@protoc_insertion_point(field_mutable:com.android.dialer.callcomposer.DialerContact.display_number)
  return display_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DialerContact::release_display_number() {
  // @@protoc_insertion_point(field_release:com.android.dialer.callcomposer.DialerContact.display_number)
  clear_has_display_number();
  return display_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DialerContact::set_allocated_display_number(::std::string* display_number) {
  if (display_number != NULL) {
    set_has_display_number();
  } else {
    clear_has_display_number();
  }
  display_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_number);
  // @@protoc_insertion_point(field_set_allocated:com.android.dialer.callcomposer.DialerContact.display_number)
}

// optional string number_label = 8;
bool DialerContact::has_number_label() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DialerContact::set_has_number_label() {
  _has_bits_[0] |= 0x00000040u;
}
void DialerContact::clear_has_number_label() {
  _has_bits_[0] &= ~0x00000040u;
}
void DialerContact::clear_number_label() {
  number_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_number_label();
}
const ::std::string& DialerContact::number_label() const {
  // @@protoc_insertion_point(field_get:com.android.dialer.callcomposer.DialerContact.number_label)
  return number_label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DialerContact::set_number_label(const ::std::string& value) {
  set_has_number_label();
  number_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.dialer.callcomposer.DialerContact.number_label)
}
void DialerContact::set_number_label(const char* value) {
  set_has_number_label();
  number_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.dialer.callcomposer.DialerContact.number_label)
}
void DialerContact::set_number_label(const char* value, size_t size) {
  set_has_number_label();
  number_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.dialer.callcomposer.DialerContact.number_label)
}
::std::string* DialerContact::mutable_number_label() {
  set_has_number_label();
  // @@protoc_insertion_point(field_mutable:com.android.dialer.callcomposer.DialerContact.number_label)
  return number_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DialerContact::release_number_label() {
  // @@protoc_insertion_point(field_release:com.android.dialer.callcomposer.DialerContact.number_label)
  clear_has_number_label();
  return number_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DialerContact::set_allocated_number_label(::std::string* number_label) {
  if (number_label != NULL) {
    set_has_number_label();
  } else {
    clear_has_number_label();
  }
  number_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number_label);
  // @@protoc_insertion_point(field_set_allocated:com.android.dialer.callcomposer.DialerContact.number_label)
}

// optional int32 contact_type = 9;
bool DialerContact::has_contact_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DialerContact::set_has_contact_type() {
  _has_bits_[0] |= 0x00000080u;
}
void DialerContact::clear_has_contact_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void DialerContact::clear_contact_type() {
  contact_type_ = 0;
  clear_has_contact_type();
}
::google::protobuf::int32 DialerContact::contact_type() const {
  // @@protoc_insertion_point(field_get:com.android.dialer.callcomposer.DialerContact.contact_type)
  return contact_type_;
}
void DialerContact::set_contact_type(::google::protobuf::int32 value) {
  set_has_contact_type();
  contact_type_ = value;
  // @@protoc_insertion_point(field_set:com.android.dialer.callcomposer.DialerContact.contact_type)
}

// optional .com.android.dialer.callcomposer.SimDetails sim_details = 10;
bool DialerContact::has_sim_details() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DialerContact::set_has_sim_details() {
  _has_bits_[0] |= 0x00000100u;
}
void DialerContact::clear_has_sim_details() {
  _has_bits_[0] &= ~0x00000100u;
}
void DialerContact::clear_sim_details() {
  if (sim_details_ != NULL) sim_details_->::com::android::dialer::callcomposer::SimDetails::Clear();
  clear_has_sim_details();
}
const ::com::android::dialer::callcomposer::SimDetails& DialerContact::sim_details() const {
  // @@protoc_insertion_point(field_get:com.android.dialer.callcomposer.DialerContact.sim_details)
  return sim_details_ != NULL ? *sim_details_
                         : *::com::android::dialer::callcomposer::SimDetails::internal_default_instance();
}
::com::android::dialer::callcomposer::SimDetails* DialerContact::mutable_sim_details() {
  set_has_sim_details();
  if (sim_details_ == NULL) {
    sim_details_ = new ::com::android::dialer::callcomposer::SimDetails;
  }
  // @@protoc_insertion_point(field_mutable:com.android.dialer.callcomposer.DialerContact.sim_details)
  return sim_details_;
}
::com::android::dialer::callcomposer::SimDetails* DialerContact::release_sim_details() {
  // @@protoc_insertion_point(field_release:com.android.dialer.callcomposer.DialerContact.sim_details)
  clear_has_sim_details();
  ::com::android::dialer::callcomposer::SimDetails* temp = sim_details_;
  sim_details_ = NULL;
  return temp;
}
void DialerContact::set_allocated_sim_details(::com::android::dialer::callcomposer::SimDetails* sim_details) {
  delete sim_details_;
  sim_details_ = sim_details;
  if (sim_details) {
    set_has_sim_details();
  } else {
    clear_has_sim_details();
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.dialer.callcomposer.DialerContact.sim_details)
}

inline const DialerContact* DialerContact::internal_default_instance() {
  return &DialerContact_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSimDetails(
    SimDetails* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimDetails::kNetworkFieldNumber;
const int SimDetails::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimDetails::SimDetails()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.dialer.callcomposer.SimDetails)
}

void SimDetails::InitAsDefaultInstance() {
}

SimDetails::SimDetails(const SimDetails& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.android.dialer.callcomposer.SimDetails)
}

void SimDetails::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_ = 0;
}

SimDetails::~SimDetails() {
  // @@protoc_insertion_point(destructor:com.android.dialer.callcomposer.SimDetails)
  SharedDtor();
}

void SimDetails::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SimDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SimDetails& SimDetails::default_instance() {
  protobuf_InitDefaults_com_2fandroid_2fdialer_2fdialercontact_2fdialer_5fcontact_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SimDetails> SimDetails_default_instance_;

SimDetails* SimDetails::New(::google::protobuf::Arena* arena) const {
  SimDetails* n = new SimDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.dialer.callcomposer.SimDetails)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_network()) {
      network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    color_ = 0;
  }
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SimDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForSimDetails, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:com.android.dialer.callcomposer.SimDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string network = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // optional int32 color = 2;
      case 2: {
        if (tag == 16) {
         parse_color:
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.dialer.callcomposer.SimDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.dialer.callcomposer.SimDetails)
  return false;
#undef DO_
}

void SimDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.dialer.callcomposer.SimDetails)
  // optional string network = 1;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->network(), output);
  }

  // optional int32 color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.dialer.callcomposer.SimDetails)
}

size_t SimDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.dialer.callcomposer.SimDetails)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string network = 1;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network());
    }

    // optional int32 color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

  }
  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SimDetails*>(&from));
}

void SimDetails::MergeFrom(const SimDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.dialer.callcomposer.SimDetails)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SimDetails::UnsafeMergeFrom(const SimDetails& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_network()) {
      set_has_network();
      network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SimDetails::CopyFrom(const SimDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.dialer.callcomposer.SimDetails)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SimDetails::IsInitialized() const {

  return true;
}

void SimDetails::Swap(SimDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimDetails::InternalSwap(SimDetails* other) {
  network_.Swap(&other->network_);
  std::swap(color_, other->color_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SimDetails::GetTypeName() const {
  return "com.android.dialer.callcomposer.SimDetails";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimDetails

// optional string network = 1;
bool SimDetails::has_network() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SimDetails::set_has_network() {
  _has_bits_[0] |= 0x00000001u;
}
void SimDetails::clear_has_network() {
  _has_bits_[0] &= ~0x00000001u;
}
void SimDetails::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_network();
}
const ::std::string& SimDetails::network() const {
  // @@protoc_insertion_point(field_get:com.android.dialer.callcomposer.SimDetails.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SimDetails::set_network(const ::std::string& value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.dialer.callcomposer.SimDetails.network)
}
void SimDetails::set_network(const char* value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.dialer.callcomposer.SimDetails.network)
}
void SimDetails::set_network(const char* value, size_t size) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.dialer.callcomposer.SimDetails.network)
}
::std::string* SimDetails::mutable_network() {
  set_has_network();
  // @@protoc_insertion_point(field_mutable:com.android.dialer.callcomposer.SimDetails.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SimDetails::release_network() {
  // @@protoc_insertion_point(field_release:com.android.dialer.callcomposer.SimDetails.network)
  clear_has_network();
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SimDetails::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    set_has_network();
  } else {
    clear_has_network();
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:com.android.dialer.callcomposer.SimDetails.network)
}

// optional int32 color = 2;
bool SimDetails::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SimDetails::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
void SimDetails::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
void SimDetails::clear_color() {
  color_ = 0;
  clear_has_color();
}
::google::protobuf::int32 SimDetails::color() const {
  // @@protoc_insertion_point(field_get:com.android.dialer.callcomposer.SimDetails.color)
  return color_;
}
void SimDetails::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:com.android.dialer.callcomposer.SimDetails.color)
}

inline const SimDetails* SimDetails::internal_default_instance() {
  return &SimDetails_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace callcomposer
}  // namespace dialer
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)
