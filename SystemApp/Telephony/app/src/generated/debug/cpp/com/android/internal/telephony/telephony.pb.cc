// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/android/internal/telephony/telephony.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "com/android/internal/telephony/telephony.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace clearcut {
namespace connectivity {

namespace {

const ::google::protobuf::Descriptor* TelephonyLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelephonyLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* Time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Time_reflection_ = NULL;
const ::google::protobuf::Descriptor* TelephonyHistogram_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelephonyHistogram_reflection_ = NULL;
const ::google::protobuf::Descriptor* TelephonySettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelephonySettings_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TelephonySettings_RilNetworkMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TelephonySettings_WiFiCallingMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TelephonyServiceState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelephonyServiceState_reflection_ = NULL;
const ::google::protobuf::Descriptor* TelephonyServiceState_TelephonyOperator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelephonyServiceState_TelephonyOperator_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TelephonyServiceState_RoamingType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ImsReasonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImsReasonInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImsConnectionState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImsConnectionState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ImsConnectionState_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ImsCapabilities_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImsCapabilities_reflection_ = NULL;
const ::google::protobuf::Descriptor* RilDataCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RilDataCall_reflection_ = NULL;
const ::google::protobuf::Descriptor* TelephonyEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelephonyEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* TelephonyEvent_RilSetupDataCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelephonyEvent_RilSetupDataCall_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TelephonyEvent_RilSetupDataCall_RilDataProfile_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TelephonyEvent_RilSetupDataCallResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelephonyEvent_RilSetupDataCallResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TelephonyEvent_RilDeactivateDataCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelephonyEvent_RilDeactivateDataCall_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TelephonyEvent_RilDeactivateDataCall_DeactivateReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TelephonyEvent_ModemRestart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelephonyEvent_ModemRestart_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TelephonyEvent_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TelephonyCallSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelephonyCallSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* TelephonyCallSession_Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelephonyCallSession_Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* TelephonyCallSession_Event_RilCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelephonyCallSession_Event_RilCall_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_RilCall_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_RilRequest_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_ImsCommand_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_PhoneState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_CallState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_RilSrvccState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SmsSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmsSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmsSession_Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmsSession_Event_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SmsSession_Event_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SmsSession_Event_Format_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SmsSession_Event_Tech_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RadioAccessTechnology_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RilErrno_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PdpType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TimeInterval_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto() {
  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "com/android/internal/telephony/telephony.proto");
  GOOGLE_CHECK(file != NULL);
  TelephonyLog_descriptor_ = file->message_type(0);
  static const int TelephonyLog_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyLog, events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyLog, call_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyLog, sms_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyLog, histograms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyLog, events_dropped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyLog, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyLog, end_time_),
  };
  TelephonyLog_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TelephonyLog_descriptor_,
      TelephonyLog::default_instance_,
      TelephonyLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyLog, _has_bits_[0]),
      -1,
      -1,
      sizeof(TelephonyLog),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyLog, _internal_metadata_),
      -1);
  Time_descriptor_ = file->message_type(1);
  static const int Time_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, system_timestamp_millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, elapsed_timestamp_millis_),
  };
  Time_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Time_descriptor_,
      Time::default_instance_,
      Time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _has_bits_[0]),
      -1,
      -1,
      sizeof(Time),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _internal_metadata_),
      -1);
  TelephonyHistogram_descriptor_ = file->message_type(2);
  static const int TelephonyHistogram_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyHistogram, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyHistogram, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyHistogram, min_time_millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyHistogram, max_time_millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyHistogram, avg_time_millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyHistogram, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyHistogram, bucket_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyHistogram, bucket_end_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyHistogram, bucket_counters_),
  };
  TelephonyHistogram_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TelephonyHistogram_descriptor_,
      TelephonyHistogram::default_instance_,
      TelephonyHistogram_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyHistogram, _has_bits_[0]),
      -1,
      -1,
      sizeof(TelephonyHistogram),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyHistogram, _internal_metadata_),
      -1);
  TelephonySettings_descriptor_ = file->message_type(3);
  static const int TelephonySettings_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonySettings, is_airplane_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonySettings, is_cellular_data_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonySettings, is_data_roaming_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonySettings, preferred_network_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonySettings, is_enhanced_4g_lte_mode_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonySettings, is_wifi_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonySettings, is_wifi_calling_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonySettings, wifi_calling_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonySettings, is_vt_over_lte_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonySettings, is_vt_over_wifi_enabled_),
  };
  TelephonySettings_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TelephonySettings_descriptor_,
      TelephonySettings::default_instance_,
      TelephonySettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonySettings, _has_bits_[0]),
      -1,
      -1,
      sizeof(TelephonySettings),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonySettings, _internal_metadata_),
      -1);
  TelephonySettings_RilNetworkMode_descriptor_ = TelephonySettings_descriptor_->enum_type(0);
  TelephonySettings_WiFiCallingMode_descriptor_ = TelephonySettings_descriptor_->enum_type(1);
  TelephonyServiceState_descriptor_ = file->message_type(4);
  static const int TelephonyServiceState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyServiceState, voice_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyServiceState, data_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyServiceState, voice_roaming_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyServiceState, data_roaming_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyServiceState, voice_rat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyServiceState, data_rat_),
  };
  TelephonyServiceState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TelephonyServiceState_descriptor_,
      TelephonyServiceState::default_instance_,
      TelephonyServiceState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyServiceState, _has_bits_[0]),
      -1,
      -1,
      sizeof(TelephonyServiceState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyServiceState, _internal_metadata_),
      -1);
  TelephonyServiceState_TelephonyOperator_descriptor_ = TelephonyServiceState_descriptor_->nested_type(0);
  static const int TelephonyServiceState_TelephonyOperator_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyServiceState_TelephonyOperator, alpha_long_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyServiceState_TelephonyOperator, alpha_short_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyServiceState_TelephonyOperator, numeric_),
  };
  TelephonyServiceState_TelephonyOperator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TelephonyServiceState_TelephonyOperator_descriptor_,
      TelephonyServiceState_TelephonyOperator::default_instance_,
      TelephonyServiceState_TelephonyOperator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyServiceState_TelephonyOperator, _has_bits_[0]),
      -1,
      -1,
      sizeof(TelephonyServiceState_TelephonyOperator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyServiceState_TelephonyOperator, _internal_metadata_),
      -1);
  TelephonyServiceState_RoamingType_descriptor_ = TelephonyServiceState_descriptor_->enum_type(0);
  ImsReasonInfo_descriptor_ = file->message_type(5);
  static const int ImsReasonInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsReasonInfo, reason_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsReasonInfo, extra_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsReasonInfo, extra_message_),
  };
  ImsReasonInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImsReasonInfo_descriptor_,
      ImsReasonInfo::default_instance_,
      ImsReasonInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsReasonInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImsReasonInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsReasonInfo, _internal_metadata_),
      -1);
  ImsConnectionState_descriptor_ = file->message_type(6);
  static const int ImsConnectionState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsConnectionState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsConnectionState, reason_info_),
  };
  ImsConnectionState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImsConnectionState_descriptor_,
      ImsConnectionState::default_instance_,
      ImsConnectionState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsConnectionState, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImsConnectionState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsConnectionState, _internal_metadata_),
      -1);
  ImsConnectionState_State_descriptor_ = ImsConnectionState_descriptor_->enum_type(0);
  ImsCapabilities_descriptor_ = file->message_type(7);
  static const int ImsCapabilities_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsCapabilities, voice_over_lte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsCapabilities, voice_over_wifi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsCapabilities, video_over_lte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsCapabilities, video_over_wifi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsCapabilities, ut_over_lte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsCapabilities, ut_over_wifi_),
  };
  ImsCapabilities_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImsCapabilities_descriptor_,
      ImsCapabilities::default_instance_,
      ImsCapabilities_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsCapabilities, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImsCapabilities),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImsCapabilities, _internal_metadata_),
      -1);
  RilDataCall_descriptor_ = file->message_type(8);
  static const int RilDataCall_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilDataCall, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilDataCall, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilDataCall, iframe_),
  };
  RilDataCall_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RilDataCall_descriptor_,
      RilDataCall::default_instance_,
      RilDataCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilDataCall, _has_bits_[0]),
      -1,
      -1,
      sizeof(RilDataCall),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RilDataCall, _internal_metadata_),
      -1);
  TelephonyEvent_descriptor_ = file->message_type(9);
  static const int TelephonyEvent_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, timestamp_millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, phone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, service_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, ims_connection_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, ims_capabilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, data_calls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, setup_data_call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, setup_data_call_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, deactivate_data_call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, data_stall_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, modem_restart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, nitz_timestamp_millis_),
  };
  TelephonyEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TelephonyEvent_descriptor_,
      TelephonyEvent::default_instance_,
      TelephonyEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, _has_bits_[0]),
      -1,
      -1,
      sizeof(TelephonyEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent, _internal_metadata_),
      -1);
  TelephonyEvent_RilSetupDataCall_descriptor_ = TelephonyEvent_descriptor_->nested_type(0);
  static const int TelephonyEvent_RilSetupDataCall_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_RilSetupDataCall, rat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_RilSetupDataCall, data_profile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_RilSetupDataCall, apn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_RilSetupDataCall, type_),
  };
  TelephonyEvent_RilSetupDataCall_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TelephonyEvent_RilSetupDataCall_descriptor_,
      TelephonyEvent_RilSetupDataCall::default_instance_,
      TelephonyEvent_RilSetupDataCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_RilSetupDataCall, _has_bits_[0]),
      -1,
      -1,
      sizeof(TelephonyEvent_RilSetupDataCall),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_RilSetupDataCall, _internal_metadata_),
      -1);
  TelephonyEvent_RilSetupDataCall_RilDataProfile_descriptor_ = TelephonyEvent_RilSetupDataCall_descriptor_->enum_type(0);
  TelephonyEvent_RilSetupDataCallResponse_descriptor_ = TelephonyEvent_descriptor_->nested_type(1);
  static const int TelephonyEvent_RilSetupDataCallResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_RilSetupDataCallResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_RilSetupDataCallResponse, suggested_retry_time_millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_RilSetupDataCallResponse, call_),
  };
  TelephonyEvent_RilSetupDataCallResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TelephonyEvent_RilSetupDataCallResponse_descriptor_,
      TelephonyEvent_RilSetupDataCallResponse::default_instance_,
      TelephonyEvent_RilSetupDataCallResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_RilSetupDataCallResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(TelephonyEvent_RilSetupDataCallResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_RilSetupDataCallResponse, _internal_metadata_),
      -1);
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_descriptor_ = TelephonyEvent_RilSetupDataCallResponse_descriptor_->enum_type(0);
  TelephonyEvent_RilDeactivateDataCall_descriptor_ = TelephonyEvent_descriptor_->nested_type(2);
  static const int TelephonyEvent_RilDeactivateDataCall_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_RilDeactivateDataCall, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_RilDeactivateDataCall, reason_),
  };
  TelephonyEvent_RilDeactivateDataCall_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TelephonyEvent_RilDeactivateDataCall_descriptor_,
      TelephonyEvent_RilDeactivateDataCall::default_instance_,
      TelephonyEvent_RilDeactivateDataCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_RilDeactivateDataCall, _has_bits_[0]),
      -1,
      -1,
      sizeof(TelephonyEvent_RilDeactivateDataCall),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_RilDeactivateDataCall, _internal_metadata_),
      -1);
  TelephonyEvent_RilDeactivateDataCall_DeactivateReason_descriptor_ = TelephonyEvent_RilDeactivateDataCall_descriptor_->enum_type(0);
  TelephonyEvent_ModemRestart_descriptor_ = TelephonyEvent_descriptor_->nested_type(3);
  static const int TelephonyEvent_ModemRestart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_ModemRestart, baseband_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_ModemRestart, reason_),
  };
  TelephonyEvent_ModemRestart_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TelephonyEvent_ModemRestart_descriptor_,
      TelephonyEvent_ModemRestart::default_instance_,
      TelephonyEvent_ModemRestart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_ModemRestart, _has_bits_[0]),
      -1,
      -1,
      sizeof(TelephonyEvent_ModemRestart),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyEvent_ModemRestart, _internal_metadata_),
      -1);
  TelephonyEvent_Type_descriptor_ = TelephonyEvent_descriptor_->enum_type(0);
  TelephonyCallSession_descriptor_ = file->message_type(10);
  static const int TelephonyCallSession_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession, start_time_minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession, phone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession, events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession, events_dropped_),
  };
  TelephonyCallSession_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TelephonyCallSession_descriptor_,
      TelephonyCallSession::default_instance_,
      TelephonyCallSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession, _has_bits_[0]),
      -1,
      -1,
      sizeof(TelephonyCallSession),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession, _internal_metadata_),
      -1);
  TelephonyCallSession_Event_descriptor_ = TelephonyCallSession_descriptor_->nested_type(0);
  static const int TelephonyCallSession_Event_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, service_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, ims_connection_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, ims_capabilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, data_calls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, phone_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, call_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, call_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, merged_call_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, calls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, ril_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, ril_request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, srvcc_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, ims_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, reason_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, src_access_tech_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, target_access_tech_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, nitz_timestamp_millis_),
  };
  TelephonyCallSession_Event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TelephonyCallSession_Event_descriptor_,
      TelephonyCallSession_Event::default_instance_,
      TelephonyCallSession_Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, _has_bits_[0]),
      -1,
      -1,
      sizeof(TelephonyCallSession_Event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event, _internal_metadata_),
      -1);
  TelephonyCallSession_Event_RilCall_descriptor_ = TelephonyCallSession_Event_descriptor_->nested_type(0);
  static const int TelephonyCallSession_Event_RilCall_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event_RilCall, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event_RilCall, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event_RilCall, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event_RilCall, call_end_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event_RilCall, is_multiparty_),
  };
  TelephonyCallSession_Event_RilCall_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TelephonyCallSession_Event_RilCall_descriptor_,
      TelephonyCallSession_Event_RilCall::default_instance_,
      TelephonyCallSession_Event_RilCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event_RilCall, _has_bits_[0]),
      -1,
      -1,
      sizeof(TelephonyCallSession_Event_RilCall),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelephonyCallSession_Event_RilCall, _internal_metadata_),
      -1);
  TelephonyCallSession_Event_RilCall_Type_descriptor_ = TelephonyCallSession_Event_RilCall_descriptor_->enum_type(0);
  TelephonyCallSession_Event_Type_descriptor_ = TelephonyCallSession_Event_descriptor_->enum_type(0);
  TelephonyCallSession_Event_RilRequest_descriptor_ = TelephonyCallSession_Event_descriptor_->enum_type(1);
  TelephonyCallSession_Event_ImsCommand_descriptor_ = TelephonyCallSession_Event_descriptor_->enum_type(2);
  TelephonyCallSession_Event_PhoneState_descriptor_ = TelephonyCallSession_Event_descriptor_->enum_type(3);
  TelephonyCallSession_Event_CallState_descriptor_ = TelephonyCallSession_Event_descriptor_->enum_type(4);
  TelephonyCallSession_Event_RilSrvccState_descriptor_ = TelephonyCallSession_Event_descriptor_->enum_type(5);
  SmsSession_descriptor_ = file->message_type(11);
  static const int SmsSession_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession, start_time_minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession, phone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession, events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession, events_dropped_),
  };
  SmsSession_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SmsSession_descriptor_,
      SmsSession::default_instance_,
      SmsSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession, _has_bits_[0]),
      -1,
      -1,
      sizeof(SmsSession),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession, _internal_metadata_),
      -1);
  SmsSession_Event_descriptor_ = SmsSession_descriptor_->nested_type(0);
  static const int SmsSession_Event_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession_Event, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession_Event, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession_Event, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession_Event, service_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession_Event, ims_connection_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession_Event, ims_capabilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession_Event, data_calls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession_Event, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession_Event, tech_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession_Event, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession_Event, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession_Event, ril_request_id_),
  };
  SmsSession_Event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SmsSession_Event_descriptor_,
      SmsSession_Event::default_instance_,
      SmsSession_Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession_Event, _has_bits_[0]),
      -1,
      -1,
      sizeof(SmsSession_Event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsSession_Event, _internal_metadata_),
      -1);
  SmsSession_Event_Type_descriptor_ = SmsSession_Event_descriptor_->enum_type(0);
  SmsSession_Event_Format_descriptor_ = SmsSession_Event_descriptor_->enum_type(1);
  SmsSession_Event_Tech_descriptor_ = SmsSession_Event_descriptor_->enum_type(2);
  RadioAccessTechnology_descriptor_ = file->enum_type(0);
  RilErrno_descriptor_ = file->enum_type(1);
  PdpType_descriptor_ = file->enum_type(2);
  TimeInterval_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TelephonyLog_descriptor_, &TelephonyLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Time_descriptor_, &Time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TelephonyHistogram_descriptor_, &TelephonyHistogram::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TelephonySettings_descriptor_, &TelephonySettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TelephonyServiceState_descriptor_, &TelephonyServiceState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TelephonyServiceState_TelephonyOperator_descriptor_, &TelephonyServiceState_TelephonyOperator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImsReasonInfo_descriptor_, &ImsReasonInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImsConnectionState_descriptor_, &ImsConnectionState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImsCapabilities_descriptor_, &ImsCapabilities::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RilDataCall_descriptor_, &RilDataCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TelephonyEvent_descriptor_, &TelephonyEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TelephonyEvent_RilSetupDataCall_descriptor_, &TelephonyEvent_RilSetupDataCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TelephonyEvent_RilSetupDataCallResponse_descriptor_, &TelephonyEvent_RilSetupDataCallResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TelephonyEvent_RilDeactivateDataCall_descriptor_, &TelephonyEvent_RilDeactivateDataCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TelephonyEvent_ModemRestart_descriptor_, &TelephonyEvent_ModemRestart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TelephonyCallSession_descriptor_, &TelephonyCallSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TelephonyCallSession_Event_descriptor_, &TelephonyCallSession_Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TelephonyCallSession_Event_RilCall_descriptor_, &TelephonyCallSession_Event_RilCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SmsSession_descriptor_, &SmsSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SmsSession_Event_descriptor_, &SmsSession_Event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto() {
  delete TelephonyLog::default_instance_;
  delete TelephonyLog_reflection_;
  delete Time::default_instance_;
  delete Time_reflection_;
  delete TelephonyHistogram::default_instance_;
  delete TelephonyHistogram_reflection_;
  delete TelephonySettings::default_instance_;
  delete TelephonySettings_reflection_;
  delete TelephonyServiceState::default_instance_;
  delete TelephonyServiceState_reflection_;
  delete TelephonyServiceState_TelephonyOperator::default_instance_;
  delete TelephonyServiceState_TelephonyOperator_reflection_;
  delete ImsReasonInfo::default_instance_;
  delete ImsReasonInfo_reflection_;
  delete ImsConnectionState::default_instance_;
  delete ImsConnectionState_reflection_;
  delete ImsCapabilities::default_instance_;
  delete ImsCapabilities_reflection_;
  delete RilDataCall::default_instance_;
  delete RilDataCall_reflection_;
  delete TelephonyEvent::default_instance_;
  delete TelephonyEvent_reflection_;
  delete TelephonyEvent_RilSetupDataCall::default_instance_;
  delete TelephonyEvent_RilSetupDataCall_reflection_;
  delete TelephonyEvent_RilSetupDataCallResponse::default_instance_;
  delete TelephonyEvent_RilSetupDataCallResponse_reflection_;
  delete TelephonyEvent_RilDeactivateDataCall::default_instance_;
  delete TelephonyEvent_RilDeactivateDataCall_reflection_;
  delete TelephonyEvent_ModemRestart::default_instance_;
  delete TelephonyEvent_ModemRestart_reflection_;
  delete TelephonyCallSession::default_instance_;
  delete TelephonyCallSession_reflection_;
  delete TelephonyCallSession_Event::default_instance_;
  delete TelephonyCallSession_Event_reflection_;
  delete TelephonyCallSession_Event_RilCall::default_instance_;
  delete TelephonyCallSession_Event_RilCall_reflection_;
  delete SmsSession::default_instance_;
  delete SmsSession_reflection_;
  delete SmsSession_Event::default_instance_;
  delete SmsSession_Event_reflection_;
}

void protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n.com/android/internal/telephony/telepho"
    "ny.proto\022\025clearcut.connectivity\"\371\002\n\014Tele"
    "phonyLog\0225\n\006events\030\001 \003(\0132%.clearcut.conn"
    "ectivity.TelephonyEvent\022B\n\rcall_sessions"
    "\030\002 \003(\0132+.clearcut.connectivity.Telephony"
    "CallSession\0227\n\014sms_sessions\030\003 \003(\0132!.clea"
    "rcut.connectivity.SmsSession\022=\n\nhistogra"
    "ms\030\004 \003(\0132).clearcut.connectivity.Telepho"
    "nyHistogram\022\026\n\016events_dropped\030\005 \001(\010\022/\n\ns"
    "tart_time\030\006 \001(\0132\033.clearcut.connectivity."
    "Time\022-\n\010end_time\030\007 \001(\0132\033.clearcut.connec"
    "tivity.Time\"I\n\004Time\022\037\n\027system_timestamp_"
    "millis\030\001 \001(\003\022 \n\030elapsed_timestamp_millis"
    "\030\002 \001(\003\"\326\001\n\022TelephonyHistogram\022\020\n\010categor"
    "y\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\027\n\017min_time_millis\030\003"
    " \001(\005\022\027\n\017max_time_millis\030\004 \001(\005\022\027\n\017avg_tim"
    "e_millis\030\005 \001(\005\022\r\n\005count\030\006 \001(\005\022\024\n\014bucket_"
    "count\030\007 \001(\005\022\031\n\021bucket_end_points\030\010 \003(\005\022\027"
    "\n\017bucket_counters\030\t \003(\005\"\332\n\n\021TelephonySet"
    "tings\022\030\n\020is_airplane_mode\030\001 \001(\010\022 \n\030is_ce"
    "llular_data_enabled\030\002 \001(\010\022\037\n\027is_data_roa"
    "ming_enabled\030\003 \001(\010\022W\n\026preferred_network_"
    "mode\030\004 \001(\01627.clearcut.connectivity.Telep"
    "honySettings.RilNetworkMode\022\'\n\037is_enhanc"
    "ed_4g_lte_mode_enabled\030\005 \001(\010\022\027\n\017is_wifi_"
    "enabled\030\006 \001(\010\022\037\n\027is_wifi_calling_enabled"
    "\030\007 \001(\010\022S\n\021wifi_calling_mode\030\010 \001(\01628.clea"
    "rcut.connectivity.TelephonySettings.WiFi"
    "CallingMode\022\036\n\026is_vt_over_lte_enabled\030\t "
    "\001(\010\022\037\n\027is_vt_over_wifi_enabled\030\n \001(\010\"\226\006\n"
    "\016RilNetworkMode\022\030\n\024NETWORK_MODE_UNKNOWN\020"
    "\000\022\033\n\027NETWORK_MODE_WCDMA_PREF\020\001\022\031\n\025NETWOR"
    "K_MODE_GSM_ONLY\020\002\022\033\n\027NETWORK_MODE_WCDMA_"
    "ONLY\020\003\022\031\n\025NETWORK_MODE_GSM_UMTS\020\004\022\025\n\021NET"
    "WORK_MODE_CDMA\020\005\022\035\n\031NETWORK_MODE_CDMA_NO"
    "_EVDO\020\006\022\035\n\031NETWORK_MODE_EVDO_NO_CDMA\020\007\022\027"
    "\n\023NETWORK_MODE_GLOBAL\020\010\022\036\n\032NETWORK_MODE_"
    "LTE_CDMA_EVDO\020\t\022\036\n\032NETWORK_MODE_LTE_GSM_"
    "WCDMA\020\n\022(\n$NETWORK_MODE_LTE_CDMA_EVDO_GS"
    "M_WCDMA\020\013\022\031\n\025NETWORK_MODE_LTE_ONLY\020\014\022\032\n\026"
    "NETWORK_MODE_LTE_WCDMA\020\r\022\035\n\031NETWORK_MODE"
    "_TDSCDMA_ONLY\020\016\022\036\n\032NETWORK_MODE_TDSCDMA_"
    "WCDMA\020\017\022\034\n\030NETWORK_MODE_LTE_TDSCDMA\020\020\022\034\n"
    "\030NETWORK_MODE_TDSCDMA_GSM\020\021\022 \n\034NETWORK_M"
    "ODE_LTE_TDSCDMA_GSM\020\022\022\"\n\036NETWORK_MODE_TD"
    "SCDMA_GSM_WCDMA\020\023\022\"\n\036NETWORK_MODE_LTE_TD"
    "SCDMA_WCDMA\020\024\022&\n\"NETWORK_MODE_LTE_TDSCDM"
    "A_GSM_WCDMA\020\025\022,\n(NETWORK_MODE_TDSCDMA_CD"
    "MA_EVDO_GSM_WCDMA\020\026\0220\n,NETWORK_MODE_LTE_"
    "TDSCDMA_CDMA_EVDO_GSM_WCDMA\020\027\"}\n\017WiFiCal"
    "lingMode\022\024\n\020WFC_MODE_UNKNOWN\020\000\022\026\n\022WFC_MO"
    "DE_WIFI_ONLY\020\001\022\037\n\033WFC_MODE_CELLULAR_PREF"
    "ERRED\020\002\022\033\n\027WFC_MODE_WIFI_PREFERRED\020\003\"\343\005\n"
    "\025TelephonyServiceState\022V\n\016voice_operator"
    "\030\001 \001(\0132>.clearcut.connectivity.Telephony"
    "ServiceState.TelephonyOperator\022U\n\rdata_o"
    "perator\030\002 \001(\0132>.clearcut.connectivity.Te"
    "lephonyServiceState.TelephonyOperator\022]\n"
    "\022voice_roaming_type\030\003 \001(\01628.clearcut.con"
    "nectivity.TelephonyServiceState.RoamingT"
    "ype:\007UNKNOWN\022\\\n\021data_roaming_type\030\004 \001(\0162"
    "8.clearcut.connectivity.TelephonyService"
    "State.RoamingType:\007UNKNOWN\022H\n\tvoice_rat\030"
    "\005 \001(\0162,.clearcut.connectivity.RadioAcces"
    "sTechnology:\007UNKNOWN\022G\n\010data_rat\030\006 \001(\0162,"
    ".clearcut.connectivity.RadioAccessTechno"
    "logy:\007UNKNOWN\032M\n\021TelephonyOperator\022\022\n\nal"
    "pha_long\030\001 \001(\t\022\023\n\013alpha_short\030\002 \001(\t\022\017\n\007n"
    "umeric\030\003 \001(\t\"|\n\013RoamingType\022\024\n\007UNKNOWN\020\377"
    "\377\377\377\377\377\377\377\377\001\022\034\n\030ROAMING_TYPE_NOT_ROAMING\020\000\022"
    "\031\n\025ROAMING_TYPE_DOMESTIC\020\002\022\036\n\032ROAMING_TY"
    "PE_INTERNATIONAL\020\003\"O\n\rImsReasonInfo\022\023\n\013r"
    "eason_code\030\001 \001(\005\022\022\n\nextra_code\030\002 \001(\005\022\025\n\r"
    "extra_message\030\003 \001(\t\"\371\001\n\022ImsConnectionSta"
    "te\022>\n\005state\030\001 \001(\0162/.clearcut.connectivit"
    "y.ImsConnectionState.State\0229\n\013reason_inf"
    "o\030\002 \001(\0132$.clearcut.connectivity.ImsReaso"
    "nInfo\"h\n\005State\022\021\n\rSTATE_UNKNOWN\020\000\022\r\n\tCON"
    "NECTED\020\001\022\017\n\013PROGRESSING\020\002\022\020\n\014DISCONNECTE"
    "D\020\003\022\013\n\007RESUMED\020\004\022\r\n\tSUSPENDED\020\005\"\236\001\n\017ImsC"
    "apabilities\022\026\n\016voice_over_lte\030\001 \001(\010\022\027\n\017v"
    "oice_over_wifi\030\002 \001(\010\022\026\n\016video_over_lte\030\003"
    " \001(\010\022\027\n\017video_over_wifi\030\004 \001(\010\022\023\n\013ut_over"
    "_lte\030\005 \001(\010\022\024\n\014ut_over_wifi\030\006 \001(\010\"X\n\013RilD"
    "ataCall\022\013\n\003cid\030\001 \001(\005\022,\n\004type\030\002 \001(\0162\036.cle"
    "arcut.connectivity.PdpType\022\016\n\006iframe\030\003 \001"
    "(\t\"\274#\n\016TelephonyEvent\022\030\n\020timestamp_milli"
    "s\030\001 \001(\003\022\020\n\010phone_id\030\002 \001(\005\0228\n\004type\030\003 \001(\0162"
    "*.clearcut.connectivity.TelephonyEvent.T"
    "ype\022:\n\010settings\030\004 \001(\0132(.clearcut.connect"
    "ivity.TelephonySettings\022C\n\rservice_state"
    "\030\005 \001(\0132,.clearcut.connectivity.Telephony"
    "ServiceState\022G\n\024ims_connection_state\030\006 \001"
    "(\0132).clearcut.connectivity.ImsConnection"
    "State\022@\n\020ims_capabilities\030\007 \001(\0132&.clearc"
    "ut.connectivity.ImsCapabilities\0226\n\ndata_"
    "calls\030\010 \003(\0132\".clearcut.connectivity.RilD"
    "ataCall\022.\n\005error\030\t \001(\0162\037.clearcut.connec"
    "tivity.RilErrno\022O\n\017setup_data_call\030\n \001(\013"
    "26.clearcut.connectivity.TelephonyEvent."
    "RilSetupDataCall\022`\n\030setup_data_call_resp"
    "onse\030\013 \001(\0132>.clearcut.connectivity.Telep"
    "honyEvent.RilSetupDataCallResponse\022Y\n\024de"
    "activate_data_call\030\014 \001(\0132;.clearcut.conn"
    "ectivity.TelephonyEvent.RilDeactivateDat"
    "aCall\022\031\n\021data_stall_action\030\r \001(\005\022I\n\rmode"
    "m_restart\030\016 \001(\01322.clearcut.connectivity."
    "TelephonyEvent.ModemRestart\022\035\n\025nitz_time"
    "stamp_millis\030\017 \001(\003\032\340\003\n\020RilSetupDataCall\022"
    "B\n\003rat\030\001 \001(\0162,.clearcut.connectivity.Rad"
    "ioAccessTechnology:\007UNKNOWN\022[\n\014data_prof"
    "ile\030\002 \001(\0162E.clearcut.connectivity.Teleph"
    "onyEvent.RilSetupDataCall.RilDataProfile"
    "\022\013\n\003apn\030\003 \001(\t\022,\n\004type\030\004 \001(\0162\036.clearcut.c"
    "onnectivity.PdpType\"\357\001\n\016RilDataProfile\022\024"
    "\n\020RIL_DATA_UNKNOWN\020\000\022\034\n\030RIL_DATA_PROFILE"
    "_DEFAULT\020\001\022\035\n\031RIL_DATA_PROFILE_TETHERED\020"
    "\002\022\030\n\024RIL_DATA_PROFILE_IMS\020\003\022\031\n\025RIL_DATA_"
    "PROFILE_FOTA\020\004\022\030\n\024RIL_DATA_PROFILE_CBS\020\005"
    "\022\035\n\031RIL_DATA_PROFILE_OEM_BASE\020\006\022\034\n\030RIL_D"
    "ATA_PROFILE_INVALID\020\007\032\270\023\n\030RilSetupDataCa"
    "llResponse\022c\n\006status\030\001 \001(\0162S.clearcut.co"
    "nnectivity.TelephonyEvent.RilSetupDataCa"
    "llResponse.RilDataCallFailCause\022#\n\033sugge"
    "sted_retry_time_millis\030\002 \001(\005\0220\n\004call\030\003 \001"
    "(\0132\".clearcut.connectivity.RilDataCall\"\337"
    "\021\n\024RilDataCallFailCause\022\024\n\020PDP_FAIL_UNKN"
    "OWN\020\000\022\021\n\rPDP_FAIL_NONE\020\001\022\034\n\030PDP_FAIL_OPE"
    "RATOR_BARRED\020\010\022\033\n\027PDP_FAIL_NAS_SIGNALLIN"
    "G\020\016\022\026\n\022PDP_FAIL_LLC_SNDCP\020\031\022#\n\037PDP_FAIL_"
    "INSUFFICIENT_RESOURCES\020\032\022\037\n\033PDP_FAIL_MIS"
    "SING_UKNOWN_APN\020\033\022%\n!PDP_FAIL_UNKNOWN_PD"
    "P_ADDRESS_TYPE\020\034\022 \n\034PDP_FAIL_USER_AUTHEN"
    "TICATION\020\035\022#\n\037PDP_FAIL_ACTIVATION_REJECT"
    "_GGSN\020\036\022*\n&PDP_FAIL_ACTIVATION_REJECT_UN"
    "SPECIFIED\020\037\022)\n%PDP_FAIL_SERVICE_OPTION_N"
    "OT_SUPPORTED\020 \022*\n&PDP_FAIL_SERVICE_OPTIO"
    "N_NOT_SUBSCRIBED\020!\022(\n$PDP_FAIL_SERVICE_O"
    "PTION_OUT_OF_ORDER\020\"\022\031\n\025PDP_FAIL_NSAPI_I"
    "N_USE\020#\022!\n\035PDP_FAIL_REGULAR_DEACTIVATION"
    "\020$\022\035\n\031PDP_FAIL_QOS_NOT_ACCEPTED\020%\022\034\n\030PDP"
    "_FAIL_NETWORK_FAILURE\020&\022\"\n\036PDP_FAIL_UMTS"
    "_REACTIVATION_REQ\020\'\022\035\n\031PDP_FAIL_FEATURE_"
    "NOT_SUPP\020(\022\037\n\033PDP_FAIL_TFT_SEMANTIC_ERRO"
    "R\020)\022\034\n\030PDP_FAIL_TFT_SYTAX_ERROR\020*\022 \n\034PDP"
    "_FAIL_UNKNOWN_PDP_CONTEXT\020+\022\"\n\036PDP_FAIL_"
    "FILTER_SEMANTIC_ERROR\020,\022\037\n\033PDP_FAIL_FILT"
    "ER_SYTAX_ERROR\020-\022#\n\037PDP_FAIL_PDP_WITHOUT"
    "_ACTIVE_TFT\020.\022\036\n\032PDP_FAIL_ONLY_IPV4_ALLO"
    "WED\0202\022\036\n\032PDP_FAIL_ONLY_IPV6_ALLOWED\0203\022\'\n"
    "#PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED\0204\022\""
    "\n\036PDP_FAIL_ESM_INFO_NOT_RECEIVED\0205\022$\n PD"
    "P_FAIL_PDN_CONN_DOES_NOT_EXIST\0206\022/\n+PDP_"
    "FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED\020"
    "7\022+\n\'PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REA"
    "CHED\020A\022,\n(PDP_FAIL_UNSUPPORTED_APN_IN_CU"
    "RRENT_PLMN\020B\022#\n\037PDP_FAIL_INVALID_TRANSAC"
    "TION_ID\020Q\022\'\n#PDP_FAIL_MESSAGE_INCORRECT_"
    "SEMANTIC\020_\022#\n\037PDP_FAIL_INVALID_MANDATORY"
    "_INFO\020`\022%\n!PDP_FAIL_MESSAGE_TYPE_UNSUPPO"
    "RTED\020a\022)\n%PDP_FAIL_MSG_TYPE_NONCOMPATIBL"
    "E_STATE\020b\022!\n\035PDP_FAIL_UNKNOWN_INFO_ELEME"
    "NT\020c\022!\n\035PDP_FAIL_CONDITIONAL_IE_ERROR\020d\022"
    "0\n,PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOM"
    "PATIBLE\020e\022\034\n\030PDP_FAIL_PROTOCOL_ERRORS\020o\022"
    "\036\n\032PDP_FAIL_APN_TYPE_CONFLICT\020p\022\037\n\033PDP_F"
    "AIL_INVALID_PCSCF_ADDR\020q\0223\n/PDP_FAIL_INT"
    "ERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN\020r\022\036\n"
    "\032PDP_FAIL_EMM_ACCESS_BARRED\020s\022!\n\035PDP_FAI"
    "L_EMERGENCY_IFACE_ONLY\020t\022\033\n\027PDP_FAIL_IFA"
    "CE_MISMATCH\020u\022#\n\037PDP_FAIL_COMPANION_IFAC"
    "E_IN_USE\020v\022 \n\034PDP_FAIL_IP_ADDRESS_MISMAT"
    "CH\020w\022*\n&PDP_FAIL_IFACE_AND_POL_FAMILY_MI"
    "SMATCH\020x\022-\n)PDP_FAIL_EMM_ACCESS_BARRED_I"
    "NFINITE_RETRY\020y\022+\n\'PDP_FAIL_AUTH_FAILURE"
    "_ON_EMERGENCY_CALL\020z\022-\n PDP_FAIL_VOICE_R"
    "EGISTRATION_FAIL\020\377\377\377\377\377\377\377\377\377\001\022,\n\037PDP_FAIL_"
    "DATA_REGISTRATION_FAIL\020\376\377\377\377\377\377\377\377\377\001\022!\n\024PDP"
    "_FAIL_SIGNAL_LOST\020\375\377\377\377\377\377\377\377\377\001\022-\n PDP_FAIL"
    "_PREF_RADIO_TECH_CHANGED\020\374\377\377\377\377\377\377\377\377\001\022%\n\030P"
    "DP_FAIL_RADIO_POWER_OFF\020\373\377\377\377\377\377\377\377\377\001\022*\n\035PD"
    "P_FAIL_TETHERED_CALL_ACTIVE\020\372\377\377\377\377\377\377\377\377\001\022 "
    "\n\032PDP_FAIL_ERROR_UNSPECIFIED\020\377\377\003\032\224\002\n\025Ril"
    "DeactivateDataCall\022\013\n\003cid\030\001 \001(\005\022\\\n\006reaso"
    "n\030\002 \001(\0162L.clearcut.connectivity.Telephon"
    "yEvent.RilDeactivateDataCall.DeactivateR"
    "eason\"\217\001\n\020DeactivateReason\022\035\n\031DEACTIVATE"
    "_REASON_UNKNOWN\020\000\022\032\n\026DEACTIVATE_REASON_N"
    "ONE\020\001\022\037\n\033DEACTIVATE_REASON_RADIO_OFF\020\002\022\037"
    "\n\033DEACTIVATE_REASON_PDP_RESET\020\003\0328\n\014Modem"
    "Restart\022\030\n\020baseband_version\030\001 \001(\t\022\016\n\006rea"
    "son\030\002 \001(\t\"\315\002\n\004Type\022\013\n\007UNKNOWN\020\000\022\024\n\020SETTI"
    "NGS_CHANGED\020\001\022\035\n\031RIL_SERVICE_STATE_CHANG"
    "ED\020\002\022 \n\034IMS_CONNECTION_STATE_CHANGED\020\003\022\034"
    "\n\030IMS_CAPABILITIES_CHANGED\020\004\022\023\n\017DATA_CAL"
    "L_SETUP\020\005\022\034\n\030DATA_CALL_SETUP_RESPONSE\020\006\022"
    "\032\n\026DATA_CALL_LIST_CHANGED\020\007\022\030\n\024DATA_CALL"
    "_DEACTIVATE\020\010\022!\n\035DATA_CALL_DEACTIVATE_RE"
    "SPONSE\020\t\022\025\n\021DATA_STALL_ACTION\020\n\022\021\n\rMODEM"
    "_RESTART\020\013\022\r\n\tNITZ_TIME\020\014\"\236\031\n\024TelephonyC"
    "allSession\022\032\n\022start_time_minutes\030\001 \001(\005\022\020"
    "\n\010phone_id\030\002 \001(\005\022A\n\006events\030\003 \003(\01321.clear"
    "cut.connectivity.TelephonyCallSession.Ev"
    "ent\022\026\n\016events_dropped\030\004 \001(\010\032\374\027\n\005Event\022D\n"
    "\004type\030\001 \001(\01626.clearcut.connectivity.Tele"
    "phonyCallSession.Event.Type\0222\n\005delay\030\002 \001"
    "(\0162#.clearcut.connectivity.TimeInterval\022"
    ":\n\010settings\030\003 \001(\0132(.clearcut.connectivit"
    "y.TelephonySettings\022C\n\rservice_state\030\004 \001"
    "(\0132,.clearcut.connectivity.TelephonyServ"
    "iceState\022G\n\024ims_connection_state\030\005 \001(\0132)"
    ".clearcut.connectivity.ImsConnectionStat"
    "e\022@\n\020ims_capabilities\030\006 \001(\0132&.clearcut.c"
    "onnectivity.ImsCapabilities\0226\n\ndata_call"
    "s\030\007 \003(\0132\".clearcut.connectivity.RilDataC"
    "all\022Q\n\013phone_state\030\010 \001(\0162<.clearcut.conn"
    "ectivity.TelephonyCallSession.Event.Phon"
    "eState\022O\n\ncall_state\030\t \001(\0162;.clearcut.co"
    "nnectivity.TelephonyCallSession.Event.Ca"
    "llState\022\022\n\ncall_index\030\n \001(\005\022\031\n\021merged_ca"
    "ll_index\030\013 \001(\005\022H\n\005calls\030\014 \003(\01329.clearcut"
    ".connectivity.TelephonyCallSession.Event"
    ".RilCall\022.\n\005error\030\r \001(\0162\037.clearcut.conne"
    "ctivity.RilErrno\022Q\n\013ril_request\030\016 \001(\0162<."
    "clearcut.connectivity.TelephonyCallSessi"
    "on.Event.RilRequest\022\026\n\016ril_request_id\030\017 "
    "\001(\005\022T\n\013srvcc_state\030\020 \001(\0162\?.clearcut.conn"
    "ectivity.TelephonyCallSession.Event.RilS"
    "rvccState\022Q\n\013ims_command\030\021 \001(\0162<.clearcu"
    "t.connectivity.TelephonyCallSession.Even"
    "t.ImsCommand\0229\n\013reason_info\030\022 \001(\0132$.clea"
    "rcut.connectivity.ImsReasonInfo\022N\n\017src_a"
    "ccess_tech\030\023 \001(\0162,.clearcut.connectivity"
    ".RadioAccessTechnology:\007UNKNOWN\022Q\n\022targe"
    "t_access_tech\030\024 \001(\0162,.clearcut.connectiv"
    "ity.RadioAccessTechnology:\007UNKNOWN\022\035\n\025ni"
    "tz_timestamp_millis\030\025 \001(\003\032\207\002\n\007RilCall\022\r\n"
    "\005index\030\001 \001(\005\022J\n\005state\030\002 \001(\0162;.clearcut.c"
    "onnectivity.TelephonyCallSession.Event.C"
    "allState\022L\n\004type\030\003 \001(\0162>.clearcut.connec"
    "tivity.TelephonyCallSession.Event.RilCal"
    "l.Type\022\027\n\017call_end_reason\030\004 \001(\005\022\025\n\ris_mu"
    "ltiparty\030\005 \001(\010\"#\n\004Type\022\013\n\007UNKNOWN\020\000\022\006\n\002M"
    "O\020\001\022\006\n\002MT\020\002\"\224\004\n\004Type\022\021\n\rEVENT_UNKNOWN\020\000\022"
    "\024\n\020SETTINGS_CHANGED\020\001\022\035\n\031RIL_SERVICE_STA"
    "TE_CHANGED\020\002\022 \n\034IMS_CONNECTION_STATE_CHA"
    "NGED\020\003\022\034\n\030IMS_CAPABILITIES_CHANGED\020\004\022\032\n\026"
    "DATA_CALL_LIST_CHANGED\020\005\022\017\n\013RIL_REQUEST\020"
    "\006\022\020\n\014RIL_RESPONSE\020\007\022\021\n\rRIL_CALL_RING\020\010\022\022"
    "\n\016RIL_CALL_SRVCC\020\t\022\031\n\025RIL_CALL_LIST_CHAN"
    "GED\020\n\022\017\n\013IMS_COMMAND\020\013\022\030\n\024IMS_COMMAND_RE"
    "CEIVED\020\014\022\026\n\022IMS_COMMAND_FAILED\020\r\022\030\n\024IMS_"
    "COMMAND_COMPLETE\020\016\022\024\n\020IMS_CALL_RECEIVE\020\017"
    "\022\032\n\026IMS_CALL_STATE_CHANGED\020\020\022\027\n\023IMS_CALL"
    "_TERMINATED\020\021\022\025\n\021IMS_CALL_HANDOVER\020\022\022\034\n\030"
    "IMS_CALL_HANDOVER_FAILED\020\023\022\027\n\023PHONE_STAT"
    "E_CHANGED\020\024\022\r\n\tNITZ_TIME\020\025\"\360\001\n\nRilReques"
    "t\022\027\n\023RIL_REQUEST_UNKNOWN\020\000\022\024\n\020RIL_REQUES"
    "T_DIAL\020\001\022\026\n\022RIL_REQUEST_ANSWER\020\002\022\026\n\022RIL_"
    "REQUEST_HANGUP\020\003\022 \n\034RIL_REQUEST_SET_CALL"
    "_WAITING\020\004\022)\n%RIL_REQUEST_SWITCH_HOLDING"
    "_AND_ACTIVE\020\005\022\032\n\026RIL_REQUEST_CDMA_FLASH\020"
    "\006\022\032\n\026RIL_REQUEST_CONFERENCE\020\007\"\237\002\n\nImsCom"
    "mand\022\023\n\017IMS_CMD_UNKNOWN\020\000\022\021\n\rIMS_CMD_STA"
    "RT\020\001\022\022\n\016IMS_CMD_ACCEPT\020\002\022\022\n\016IMS_CMD_REJE"
    "CT\020\003\022\025\n\021IMS_CMD_TERMINATE\020\004\022\020\n\014IMS_CMD_H"
    "OLD\020\005\022\022\n\016IMS_CMD_RESUME\020\006\022\021\n\rIMS_CMD_MER"
    "GE\020\007\022\022\n\016IMS_CMD_UPDATE\020\010\022\035\n\031IMS_CMD_CONF"
    "ERENCE_EXTEND\020\t\022\036\n\032IMS_CMD_INVITE_PARTIC"
    "IPANT\020\n\022\036\n\032IMS_CMD_REMOVE_PARTICIPANT\020\013\""
    "U\n\nPhoneState\022\021\n\rSTATE_UNKNOWN\020\000\022\016\n\nSTAT"
    "E_IDLE\020\001\022\021\n\rSTATE_RINGING\020\002\022\021\n\rSTATE_OFF"
    "HOOK\020\003\"\310\001\n\tCallState\022\020\n\014CALL_UNKNOWN\020\000\022\r"
    "\n\tCALL_IDLE\020\001\022\017\n\013CALL_ACTIVE\020\002\022\020\n\014CALL_H"
    "OLDING\020\003\022\020\n\014CALL_DIALING\020\004\022\021\n\rCALL_ALERT"
    "ING\020\005\022\021\n\rCALL_INCOMING\020\006\022\020\n\014CALL_WAITING"
    "\020\007\022\025\n\021CALL_DISCONNECTED\020\010\022\026\n\022CALL_DISCON"
    "NECTING\020\t\"\177\n\rRilSrvccState\022\024\n\020HANDOVER_U"
    "NKNOWN\020\000\022\024\n\020HANDOVER_STARTED\020\001\022\026\n\022HANDOV"
    "ER_COMPLETED\020\002\022\023\n\017HANDOVER_FAILED\020\003\022\025\n\021H"
    "ANDOVER_CANCELED\020\004\"\221\t\n\nSmsSession\022\032\n\022sta"
    "rt_time_minutes\030\001 \001(\005\022\020\n\010phone_id\030\002 \001(\005\022"
    "7\n\006events\030\003 \003(\0132\'.clearcut.connectivity."
    "SmsSession.Event\022\026\n\016events_dropped\030\004 \001(\010"
    "\032\203\010\n\005Event\022:\n\004type\030\001 \001(\0162,.clearcut.conn"
    "ectivity.SmsSession.Event.Type\0222\n\005delay\030"
    "\002 \001(\0162#.clearcut.connectivity.TimeInterv"
    "al\022:\n\010settings\030\003 \001(\0132(.clearcut.connecti"
    "vity.TelephonySettings\022C\n\rservice_state\030"
    "\004 \001(\0132,.clearcut.connectivity.TelephonyS"
    "erviceState\022G\n\024ims_connection_state\030\005 \001("
    "\0132).clearcut.connectivity.ImsConnectionS"
    "tate\022@\n\020ims_capabilities\030\006 \001(\0132&.clearcu"
    "t.connectivity.ImsCapabilities\0226\n\ndata_c"
    "alls\030\007 \003(\0132\".clearcut.connectivity.RilDa"
    "taCall\022>\n\006format\030\010 \001(\0162..clearcut.connec"
    "tivity.SmsSession.Event.Format\022:\n\004tech\030\t"
    " \001(\0162,.clearcut.connectivity.SmsSession."
    "Event.Tech\022\022\n\nerror_code\030\n \001(\005\022.\n\005error\030"
    "\013 \001(\0162\037.clearcut.connectivity.RilErrno\022\026"
    "\n\016ril_request_id\030\014 \001(\005\"\337\001\n\004Type\022\021\n\rEVENT"
    "_UNKNOWN\020\000\022\024\n\020SETTINGS_CHANGED\020\001\022\035\n\031RIL_"
    "SERVICE_STATE_CHANGED\020\002\022 \n\034IMS_CONNECTIO"
    "N_STATE_CHANGED\020\003\022\034\n\030IMS_CAPABILITIES_CH"
    "ANGED\020\004\022\032\n\026DATA_CALL_LIST_CHANGED\020\005\022\014\n\010S"
    "MS_SEND\020\006\022\023\n\017SMS_SEND_RESULT\020\007\022\020\n\014SMS_RE"
    "CEIVED\020\010\"K\n\006Format\022\026\n\022SMS_FORMAT_UNKNOWN"
    "\020\000\022\023\n\017SMS_FORMAT_3GPP\020\001\022\024\n\020SMS_FORMAT_3G"
    "PP2\020\002\"\?\n\004Tech\022\017\n\013SMS_UNKNOWN\020\000\022\013\n\007SMS_GS"
    "M\020\001\022\014\n\010SMS_CDMA\020\002\022\013\n\007SMS_IMS\020\003*\332\002\n\025Radio"
    "AccessTechnology\022\024\n\007UNKNOWN\020\377\377\377\377\377\377\377\377\377\001\022\017"
    "\n\013RAT_UNKNOWN\020\000\022\014\n\010RAT_GPRS\020\001\022\014\n\010RAT_EDG"
    "E\020\002\022\014\n\010RAT_UMTS\020\003\022\r\n\tRAT_IS95A\020\004\022\r\n\tRAT_"
    "IS95B\020\005\022\r\n\tRAT_1XRTT\020\006\022\016\n\nRAT_EVDO_0\020\007\022\016"
    "\n\nRAT_EVDO_A\020\010\022\r\n\tRAT_HSDPA\020\t\022\r\n\tRAT_HSU"
    "PA\020\n\022\014\n\010RAT_HSPA\020\013\022\016\n\nRAT_EVDO_B\020\014\022\r\n\tRA"
    "T_EHRPD\020\r\022\013\n\007RAT_LTE\020\016\022\r\n\tRAT_HSPAP\020\017\022\013\n"
    "\007RAT_GSM\020\020\022\020\n\014RAT_TD_SCDMA\020\021\022\r\n\tRAT_IWLA"
    "N\020\022\022\016\n\nRAT_LTE_CA\020\023*\254\007\n\010RilErrno\022\021\n\rRIL_"
    "E_UNKNOWN\020\000\022\021\n\rRIL_E_SUCCESS\020\001\022\035\n\031RIL_E_"
    "RADIO_NOT_AVAILABLE\020\002\022\031\n\025RIL_E_GENERIC_F"
    "AILURE\020\003\022\034\n\030RIL_E_PASSWORD_INCORRECT\020\004\022\022"
    "\n\016RIL_E_SIM_PIN2\020\005\022\022\n\016RIL_E_SIM_PUK2\020\006\022\037"
    "\n\033RIL_E_REQUEST_NOT_SUPPORTED\020\007\022\023\n\017RIL_E"
    "_CANCELLED\020\010\022*\n&RIL_E_OP_NOT_ALLOWED_DUR"
    "ING_VOICE_CALL\020\t\022)\n%RIL_E_OP_NOT_ALLOWED"
    "_BEFORE_REG_TO_NW\020\n\022\035\n\031RIL_E_SMS_SEND_FA"
    "IL_RETRY\020\013\022\024\n\020RIL_E_SIM_ABSENT\020\014\022$\n RIL_"
    "E_SUBSCRIPTION_NOT_AVAILABLE\020\r\022\034\n\030RIL_E_"
    "MODE_NOT_SUPPORTED\020\016\022\033\n\027RIL_E_FDN_CHECK_"
    "FAILURE\020\017\022\033\n\027RIL_E_ILLEGAL_SIM_OR_ME\020\020\022\032"
    "\n\026RIL_E_MISSING_RESOURCE\020\021\022\031\n\025RIL_E_NO_S"
    "UCH_ELEMENT\020\022\022\037\n\033RIL_E_DIAL_MODIFIED_TO_"
    "USSD\020\023\022\035\n\031RIL_E_DIAL_MODIFIED_TO_SS\020\024\022\037\n"
    "\033RIL_E_DIAL_MODIFIED_TO_DIAL\020\025\022\037\n\033RIL_E_"
    "USSD_MODIFIED_TO_DIAL\020\026\022\035\n\031RIL_E_USSD_MO"
    "DIFIED_TO_SS\020\027\022\037\n\033RIL_E_USSD_MODIFIED_TO"
    "_USSD\020\030\022\035\n\031RIL_E_SS_MODIFIED_TO_DIAL\020\031\022\035"
    "\n\031RIL_E_SS_MODIFIED_TO_USSD\020\032\022$\n RIL_E_S"
    "UBSCRIPTION_NOT_SUPPORTED\020\033\022\033\n\027RIL_E_SS_"
    "MODIFIED_TO_SS\020\034\022\037\n\027RIL_E_LCE_NOT_SUPPOR"
    "TED\020$\032\002\010\001\022\037\n\033RIL_E_LCE_NOT_SUPPORTED_NEW"
    "\020%*e\n\007PdpType\022\017\n\013PDP_UNKNOWN\020\000\022\017\n\013PDP_TY"
    "PE_IP\020\001\022\021\n\rPDP_TYPE_IPV6\020\002\022\023\n\017PDP_TYPE_I"
    "PV4V6\020\003\022\020\n\014PDP_TYPE_PPP\020\004*\340\002\n\014TimeInterv"
    "al\022\016\n\nTI_UNKNOWN\020\000\022\020\n\014TI_10_MILLIS\020\001\022\020\n\014"
    "TI_20_MILLIS\020\002\022\020\n\014TI_50_MILLIS\020\003\022\021\n\rTI_1"
    "00_MILLIS\020\004\022\021\n\rTI_200_MILLIS\020\005\022\021\n\rTI_500"
    "_MILLIS\020\006\022\014\n\010TI_1_SEC\020\007\022\014\n\010TI_2_SEC\020\010\022\014\n"
    "\010TI_5_SEC\020\t\022\r\n\tTI_10_SEC\020\n\022\r\n\tTI_30_SEC\020"
    "\013\022\017\n\013TI_1_MINUTE\020\014\022\020\n\014TI_3_MINUTES\020\r\022\021\n\r"
    "TI_10_MINUTES\020\016\022\021\n\rTI_30_MINUTES\020\017\022\r\n\tTI"
    "_1_HOUR\020\020\022\016\n\nTI_2_HOURS\020\021\022\016\n\nTI_4_HOURS\020"
    "\022\022\021\n\rTI_MANY_HOURS\020\023B0\n\036com.android.inte"
    "rnal.telephonyB\016TelephonyProto", 14190);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "com/android/internal/telephony/telephony.proto", &protobuf_RegisterTypes);
  TelephonyLog::default_instance_ = new TelephonyLog();
  Time::default_instance_ = new Time();
  TelephonyHistogram::default_instance_ = new TelephonyHistogram();
  TelephonySettings::default_instance_ = new TelephonySettings();
  TelephonyServiceState::default_instance_ = new TelephonyServiceState();
  TelephonyServiceState_TelephonyOperator::default_instance_ = new TelephonyServiceState_TelephonyOperator();
  ImsReasonInfo::default_instance_ = new ImsReasonInfo();
  ImsConnectionState::default_instance_ = new ImsConnectionState();
  ImsCapabilities::default_instance_ = new ImsCapabilities();
  RilDataCall::default_instance_ = new RilDataCall();
  TelephonyEvent::default_instance_ = new TelephonyEvent();
  TelephonyEvent_RilSetupDataCall::default_instance_ = new TelephonyEvent_RilSetupDataCall();
  TelephonyEvent_RilSetupDataCallResponse::default_instance_ = new TelephonyEvent_RilSetupDataCallResponse();
  TelephonyEvent_RilDeactivateDataCall::default_instance_ = new TelephonyEvent_RilDeactivateDataCall();
  TelephonyEvent_ModemRestart::default_instance_ = new TelephonyEvent_ModemRestart();
  TelephonyCallSession::default_instance_ = new TelephonyCallSession();
  TelephonyCallSession_Event::default_instance_ = new TelephonyCallSession_Event();
  TelephonyCallSession_Event_RilCall::default_instance_ = new TelephonyCallSession_Event_RilCall();
  SmsSession::default_instance_ = new SmsSession();
  SmsSession_Event::default_instance_ = new SmsSession_Event();
  TelephonyLog::default_instance_->InitAsDefaultInstance();
  Time::default_instance_->InitAsDefaultInstance();
  TelephonyHistogram::default_instance_->InitAsDefaultInstance();
  TelephonySettings::default_instance_->InitAsDefaultInstance();
  TelephonyServiceState::default_instance_->InitAsDefaultInstance();
  TelephonyServiceState_TelephonyOperator::default_instance_->InitAsDefaultInstance();
  ImsReasonInfo::default_instance_->InitAsDefaultInstance();
  ImsConnectionState::default_instance_->InitAsDefaultInstance();
  ImsCapabilities::default_instance_->InitAsDefaultInstance();
  RilDataCall::default_instance_->InitAsDefaultInstance();
  TelephonyEvent::default_instance_->InitAsDefaultInstance();
  TelephonyEvent_RilSetupDataCall::default_instance_->InitAsDefaultInstance();
  TelephonyEvent_RilSetupDataCallResponse::default_instance_->InitAsDefaultInstance();
  TelephonyEvent_RilDeactivateDataCall::default_instance_->InitAsDefaultInstance();
  TelephonyEvent_ModemRestart::default_instance_->InitAsDefaultInstance();
  TelephonyCallSession::default_instance_->InitAsDefaultInstance();
  TelephonyCallSession_Event::default_instance_->InitAsDefaultInstance();
  TelephonyCallSession_Event_RilCall::default_instance_->InitAsDefaultInstance();
  SmsSession::default_instance_->InitAsDefaultInstance();
  SmsSession_Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto {
  StaticDescriptorInitializer_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto() {
    protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  }
} static_descriptor_initializer_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto_;
const ::google::protobuf::EnumDescriptor* RadioAccessTechnology_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadioAccessTechnology_descriptor_;
}
bool RadioAccessTechnology_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RilErrno_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RilErrno_descriptor_;
}
bool RilErrno_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 36:
    case 37:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PdpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PdpType_descriptor_;
}
bool PdpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimeInterval_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeInterval_descriptor_;
}
bool TimeInterval_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelephonyLog::kEventsFieldNumber;
const int TelephonyLog::kCallSessionsFieldNumber;
const int TelephonyLog::kSmsSessionsFieldNumber;
const int TelephonyLog::kHistogramsFieldNumber;
const int TelephonyLog::kEventsDroppedFieldNumber;
const int TelephonyLog::kStartTimeFieldNumber;
const int TelephonyLog::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelephonyLog::TelephonyLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.TelephonyLog)
}

void TelephonyLog::InitAsDefaultInstance() {
  start_time_ = const_cast< ::clearcut::connectivity::Time*>(&::clearcut::connectivity::Time::default_instance());
  end_time_ = const_cast< ::clearcut::connectivity::Time*>(&::clearcut::connectivity::Time::default_instance());
}

TelephonyLog::TelephonyLog(const TelephonyLog& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.TelephonyLog)
}

void TelephonyLog::SharedCtor() {
  _cached_size_ = 0;
  events_dropped_ = false;
  start_time_ = NULL;
  end_time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelephonyLog::~TelephonyLog() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.TelephonyLog)
  SharedDtor();
}

void TelephonyLog::SharedDtor() {
  if (this != default_instance_) {
    delete start_time_;
    delete end_time_;
  }
}

void TelephonyLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelephonyLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyLog_descriptor_;
}

const TelephonyLog& TelephonyLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

TelephonyLog* TelephonyLog::default_instance_ = NULL;

TelephonyLog* TelephonyLog::New(::google::protobuf::Arena* arena) const {
  TelephonyLog* n = new TelephonyLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelephonyLog::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.TelephonyLog)
  if (_has_bits_[0 / 32] & 112u) {
    events_dropped_ = false;
    if (has_start_time()) {
      if (start_time_ != NULL) start_time_->::clearcut::connectivity::Time::Clear();
    }
    if (has_end_time()) {
      if (end_time_ != NULL) end_time_->::clearcut::connectivity::Time::Clear();
    }
  }
  events_.Clear();
  call_sessions_.Clear();
  sms_sessions_.Clear();
  histograms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TelephonyLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.TelephonyLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .clearcut.connectivity.TelephonyEvent events = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_events;
        if (input->ExpectTag(18)) goto parse_loop_call_sessions;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_call_sessions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_call_sessions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_call_sessions;
        if (input->ExpectTag(26)) goto parse_loop_sms_sessions;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .clearcut.connectivity.SmsSession sms_sessions = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sms_sessions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sms_sessions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_sms_sessions;
        if (input->ExpectTag(34)) goto parse_loop_histograms;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_histograms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_histograms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_histograms;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_events_dropped;
        break;
      }

      // optional bool events_dropped = 5;
      case 5: {
        if (tag == 40) {
         parse_events_dropped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &events_dropped_)));
          set_has_events_dropped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_start_time;
        break;
      }

      // optional .clearcut.connectivity.Time start_time = 6;
      case 6: {
        if (tag == 50) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_end_time;
        break;
      }

      // optional .clearcut.connectivity.Time end_time = 7;
      case 7: {
        if (tag == 58) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.TelephonyLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.TelephonyLog)
  return false;
#undef DO_
}

void TelephonyLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.TelephonyLog)
  // repeated .clearcut.connectivity.TelephonyEvent events = 1;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->events(i), output);
  }

  // repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;
  for (unsigned int i = 0, n = this->call_sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->call_sessions(i), output);
  }

  // repeated .clearcut.connectivity.SmsSession sms_sessions = 3;
  for (unsigned int i = 0, n = this->sms_sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sms_sessions(i), output);
  }

  // repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;
  for (unsigned int i = 0, n = this->histograms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->histograms(i), output);
  }

  // optional bool events_dropped = 5;
  if (has_events_dropped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->events_dropped(), output);
  }

  // optional .clearcut.connectivity.Time start_time = 6;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->start_time_, output);
  }

  // optional .clearcut.connectivity.Time end_time = 7;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->end_time_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.TelephonyLog)
}

::google::protobuf::uint8* TelephonyLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.TelephonyLog)
  // repeated .clearcut.connectivity.TelephonyEvent events = 1;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->events(i), false, target);
  }

  // repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;
  for (unsigned int i = 0, n = this->call_sessions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->call_sessions(i), false, target);
  }

  // repeated .clearcut.connectivity.SmsSession sms_sessions = 3;
  for (unsigned int i = 0, n = this->sms_sessions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->sms_sessions(i), false, target);
  }

  // repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;
  for (unsigned int i = 0, n = this->histograms_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->histograms(i), false, target);
  }

  // optional bool events_dropped = 5;
  if (has_events_dropped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->events_dropped(), target);
  }

  // optional .clearcut.connectivity.Time start_time = 6;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->start_time_, false, target);
  }

  // optional .clearcut.connectivity.Time end_time = 7;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->end_time_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.TelephonyLog)
  return target;
}

int TelephonyLog::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.TelephonyLog)
  int total_size = 0;

  if (_has_bits_[4 / 32] & 112u) {
    // optional bool events_dropped = 5;
    if (has_events_dropped()) {
      total_size += 1 + 1;
    }

    // optional .clearcut.connectivity.Time start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_time_);
    }

    // optional .clearcut.connectivity.Time end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->end_time_);
    }

  }
  // repeated .clearcut.connectivity.TelephonyEvent events = 1;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  // repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;
  total_size += 1 * this->call_sessions_size();
  for (int i = 0; i < this->call_sessions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->call_sessions(i));
  }

  // repeated .clearcut.connectivity.SmsSession sms_sessions = 3;
  total_size += 1 * this->sms_sessions_size();
  for (int i = 0; i < this->sms_sessions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sms_sessions(i));
  }

  // repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;
  total_size += 1 * this->histograms_size();
  for (int i = 0; i < this->histograms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->histograms(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelephonyLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.TelephonyLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TelephonyLog* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TelephonyLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.TelephonyLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.TelephonyLog)
    MergeFrom(*source);
  }
}

void TelephonyLog::MergeFrom(const TelephonyLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.TelephonyLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  events_.MergeFrom(from.events_);
  call_sessions_.MergeFrom(from.call_sessions_);
  sms_sessions_.MergeFrom(from.sms_sessions_);
  histograms_.MergeFrom(from.histograms_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_events_dropped()) {
      set_events_dropped(from.events_dropped());
    }
    if (from.has_start_time()) {
      mutable_start_time()->::clearcut::connectivity::Time::MergeFrom(from.start_time());
    }
    if (from.has_end_time()) {
      mutable_end_time()->::clearcut::connectivity::Time::MergeFrom(from.end_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TelephonyLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.TelephonyLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelephonyLog::CopyFrom(const TelephonyLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.TelephonyLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelephonyLog::IsInitialized() const {

  return true;
}

void TelephonyLog::Swap(TelephonyLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelephonyLog::InternalSwap(TelephonyLog* other) {
  events_.UnsafeArenaSwap(&other->events_);
  call_sessions_.UnsafeArenaSwap(&other->call_sessions_);
  sms_sessions_.UnsafeArenaSwap(&other->sms_sessions_);
  histograms_.UnsafeArenaSwap(&other->histograms_);
  std::swap(events_dropped_, other->events_dropped_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelephonyLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelephonyLog_descriptor_;
  metadata.reflection = TelephonyLog_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TelephonyLog

// repeated .clearcut.connectivity.TelephonyEvent events = 1;
int TelephonyLog::events_size() const {
  return events_.size();
}
void TelephonyLog::clear_events() {
  events_.Clear();
}
const ::clearcut::connectivity::TelephonyEvent& TelephonyLog::events(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyLog.events)
  return events_.Get(index);
}
::clearcut::connectivity::TelephonyEvent* TelephonyLog::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyLog.events)
  return events_.Mutable(index);
}
::clearcut::connectivity::TelephonyEvent* TelephonyLog::add_events() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyLog.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyEvent >*
TelephonyLog::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyLog.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyEvent >&
TelephonyLog::events() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyLog.events)
  return events_;
}

// repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;
int TelephonyLog::call_sessions_size() const {
  return call_sessions_.size();
}
void TelephonyLog::clear_call_sessions() {
  call_sessions_.Clear();
}
const ::clearcut::connectivity::TelephonyCallSession& TelephonyLog::call_sessions(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyLog.call_sessions)
  return call_sessions_.Get(index);
}
::clearcut::connectivity::TelephonyCallSession* TelephonyLog::mutable_call_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyLog.call_sessions)
  return call_sessions_.Mutable(index);
}
::clearcut::connectivity::TelephonyCallSession* TelephonyLog::add_call_sessions() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyLog.call_sessions)
  return call_sessions_.Add();
}
::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession >*
TelephonyLog::mutable_call_sessions() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyLog.call_sessions)
  return &call_sessions_;
}
const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession >&
TelephonyLog::call_sessions() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyLog.call_sessions)
  return call_sessions_;
}

// repeated .clearcut.connectivity.SmsSession sms_sessions = 3;
int TelephonyLog::sms_sessions_size() const {
  return sms_sessions_.size();
}
void TelephonyLog::clear_sms_sessions() {
  sms_sessions_.Clear();
}
const ::clearcut::connectivity::SmsSession& TelephonyLog::sms_sessions(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyLog.sms_sessions)
  return sms_sessions_.Get(index);
}
::clearcut::connectivity::SmsSession* TelephonyLog::mutable_sms_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyLog.sms_sessions)
  return sms_sessions_.Mutable(index);
}
::clearcut::connectivity::SmsSession* TelephonyLog::add_sms_sessions() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyLog.sms_sessions)
  return sms_sessions_.Add();
}
::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::SmsSession >*
TelephonyLog::mutable_sms_sessions() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyLog.sms_sessions)
  return &sms_sessions_;
}
const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::SmsSession >&
TelephonyLog::sms_sessions() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyLog.sms_sessions)
  return sms_sessions_;
}

// repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;
int TelephonyLog::histograms_size() const {
  return histograms_.size();
}
void TelephonyLog::clear_histograms() {
  histograms_.Clear();
}
const ::clearcut::connectivity::TelephonyHistogram& TelephonyLog::histograms(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyLog.histograms)
  return histograms_.Get(index);
}
::clearcut::connectivity::TelephonyHistogram* TelephonyLog::mutable_histograms(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyLog.histograms)
  return histograms_.Mutable(index);
}
::clearcut::connectivity::TelephonyHistogram* TelephonyLog::add_histograms() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyLog.histograms)
  return histograms_.Add();
}
::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyHistogram >*
TelephonyLog::mutable_histograms() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyLog.histograms)
  return &histograms_;
}
const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyHistogram >&
TelephonyLog::histograms() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyLog.histograms)
  return histograms_;
}

// optional bool events_dropped = 5;
bool TelephonyLog::has_events_dropped() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TelephonyLog::set_has_events_dropped() {
  _has_bits_[0] |= 0x00000010u;
}
void TelephonyLog::clear_has_events_dropped() {
  _has_bits_[0] &= ~0x00000010u;
}
void TelephonyLog::clear_events_dropped() {
  events_dropped_ = false;
  clear_has_events_dropped();
}
 bool TelephonyLog::events_dropped() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyLog.events_dropped)
  return events_dropped_;
}
 void TelephonyLog::set_events_dropped(bool value) {
  set_has_events_dropped();
  events_dropped_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyLog.events_dropped)
}

// optional .clearcut.connectivity.Time start_time = 6;
bool TelephonyLog::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TelephonyLog::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
void TelephonyLog::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void TelephonyLog::clear_start_time() {
  if (start_time_ != NULL) start_time_->::clearcut::connectivity::Time::Clear();
  clear_has_start_time();
}
const ::clearcut::connectivity::Time& TelephonyLog::start_time() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyLog.start_time)
  return start_time_ != NULL ? *start_time_ : *default_instance_->start_time_;
}
::clearcut::connectivity::Time* TelephonyLog::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == NULL) {
    start_time_ = new ::clearcut::connectivity::Time;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyLog.start_time)
  return start_time_;
}
::clearcut::connectivity::Time* TelephonyLog::release_start_time() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyLog.start_time)
  clear_has_start_time();
  ::clearcut::connectivity::Time* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
void TelephonyLog::set_allocated_start_time(::clearcut::connectivity::Time* start_time) {
  delete start_time_;
  start_time_ = start_time;
  if (start_time) {
    set_has_start_time();
  } else {
    clear_has_start_time();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyLog.start_time)
}

// optional .clearcut.connectivity.Time end_time = 7;
bool TelephonyLog::has_end_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TelephonyLog::set_has_end_time() {
  _has_bits_[0] |= 0x00000040u;
}
void TelephonyLog::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void TelephonyLog::clear_end_time() {
  if (end_time_ != NULL) end_time_->::clearcut::connectivity::Time::Clear();
  clear_has_end_time();
}
const ::clearcut::connectivity::Time& TelephonyLog::end_time() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyLog.end_time)
  return end_time_ != NULL ? *end_time_ : *default_instance_->end_time_;
}
::clearcut::connectivity::Time* TelephonyLog::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == NULL) {
    end_time_ = new ::clearcut::connectivity::Time;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyLog.end_time)
  return end_time_;
}
::clearcut::connectivity::Time* TelephonyLog::release_end_time() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyLog.end_time)
  clear_has_end_time();
  ::clearcut::connectivity::Time* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
void TelephonyLog::set_allocated_end_time(::clearcut::connectivity::Time* end_time) {
  delete end_time_;
  end_time_ = end_time;
  if (end_time) {
    set_has_end_time();
  } else {
    clear_has_end_time();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyLog.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Time::kSystemTimestampMillisFieldNumber;
const int Time::kElapsedTimestampMillisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Time::Time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.Time)
}

void Time::InitAsDefaultInstance() {
}

Time::Time(const Time& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.Time)
}

void Time::SharedCtor() {
  _cached_size_ = 0;
  system_timestamp_millis_ = GOOGLE_LONGLONG(0);
  elapsed_timestamp_millis_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.Time)
  SharedDtor();
}

void Time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Time_descriptor_;
}

const Time& Time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

Time* Time::default_instance_ = NULL;

Time* Time::New(::google::protobuf::Arena* arena) const {
  Time* n = new Time;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.Time)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Time, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Time*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(system_timestamp_millis_, elapsed_timestamp_millis_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 system_timestamp_millis = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &system_timestamp_millis_)));
          set_has_system_timestamp_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_elapsed_timestamp_millis;
        break;
      }

      // optional int64 elapsed_timestamp_millis = 2;
      case 2: {
        if (tag == 16) {
         parse_elapsed_timestamp_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &elapsed_timestamp_millis_)));
          set_has_elapsed_timestamp_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.Time)
  return false;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.Time)
  // optional int64 system_timestamp_millis = 1;
  if (has_system_timestamp_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->system_timestamp_millis(), output);
  }

  // optional int64 elapsed_timestamp_millis = 2;
  if (has_elapsed_timestamp_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->elapsed_timestamp_millis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.Time)
}

::google::protobuf::uint8* Time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.Time)
  // optional int64 system_timestamp_millis = 1;
  if (has_system_timestamp_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->system_timestamp_millis(), target);
  }

  // optional int64 elapsed_timestamp_millis = 2;
  if (has_elapsed_timestamp_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->elapsed_timestamp_millis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.Time)
  return target;
}

int Time::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.Time)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 system_timestamp_millis = 1;
    if (has_system_timestamp_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->system_timestamp_millis());
    }

    // optional int64 elapsed_timestamp_millis = 2;
    if (has_elapsed_timestamp_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->elapsed_timestamp_millis());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.Time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Time* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.Time)
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.Time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_system_timestamp_millis()) {
      set_system_timestamp_millis(from.system_timestamp_millis());
    }
    if (from.has_elapsed_timestamp_millis()) {
      set_elapsed_timestamp_millis(from.elapsed_timestamp_millis());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {

  return true;
}

void Time::Swap(Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Time::InternalSwap(Time* other) {
  std::swap(system_timestamp_millis_, other->system_timestamp_millis_);
  std::swap(elapsed_timestamp_millis_, other->elapsed_timestamp_millis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Time_descriptor_;
  metadata.reflection = Time_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Time

// optional int64 system_timestamp_millis = 1;
bool Time::has_system_timestamp_millis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Time::set_has_system_timestamp_millis() {
  _has_bits_[0] |= 0x00000001u;
}
void Time::clear_has_system_timestamp_millis() {
  _has_bits_[0] &= ~0x00000001u;
}
void Time::clear_system_timestamp_millis() {
  system_timestamp_millis_ = GOOGLE_LONGLONG(0);
  clear_has_system_timestamp_millis();
}
 ::google::protobuf::int64 Time::system_timestamp_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.Time.system_timestamp_millis)
  return system_timestamp_millis_;
}
 void Time::set_system_timestamp_millis(::google::protobuf::int64 value) {
  set_has_system_timestamp_millis();
  system_timestamp_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.Time.system_timestamp_millis)
}

// optional int64 elapsed_timestamp_millis = 2;
bool Time::has_elapsed_timestamp_millis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Time::set_has_elapsed_timestamp_millis() {
  _has_bits_[0] |= 0x00000002u;
}
void Time::clear_has_elapsed_timestamp_millis() {
  _has_bits_[0] &= ~0x00000002u;
}
void Time::clear_elapsed_timestamp_millis() {
  elapsed_timestamp_millis_ = GOOGLE_LONGLONG(0);
  clear_has_elapsed_timestamp_millis();
}
 ::google::protobuf::int64 Time::elapsed_timestamp_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.Time.elapsed_timestamp_millis)
  return elapsed_timestamp_millis_;
}
 void Time::set_elapsed_timestamp_millis(::google::protobuf::int64 value) {
  set_has_elapsed_timestamp_millis();
  elapsed_timestamp_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.Time.elapsed_timestamp_millis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelephonyHistogram::kCategoryFieldNumber;
const int TelephonyHistogram::kIdFieldNumber;
const int TelephonyHistogram::kMinTimeMillisFieldNumber;
const int TelephonyHistogram::kMaxTimeMillisFieldNumber;
const int TelephonyHistogram::kAvgTimeMillisFieldNumber;
const int TelephonyHistogram::kCountFieldNumber;
const int TelephonyHistogram::kBucketCountFieldNumber;
const int TelephonyHistogram::kBucketEndPointsFieldNumber;
const int TelephonyHistogram::kBucketCountersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelephonyHistogram::TelephonyHistogram()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.TelephonyHistogram)
}

void TelephonyHistogram::InitAsDefaultInstance() {
}

TelephonyHistogram::TelephonyHistogram(const TelephonyHistogram& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.TelephonyHistogram)
}

void TelephonyHistogram::SharedCtor() {
  _cached_size_ = 0;
  category_ = 0;
  id_ = 0;
  min_time_millis_ = 0;
  max_time_millis_ = 0;
  avg_time_millis_ = 0;
  count_ = 0;
  bucket_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelephonyHistogram::~TelephonyHistogram() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.TelephonyHistogram)
  SharedDtor();
}

void TelephonyHistogram::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TelephonyHistogram::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelephonyHistogram::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyHistogram_descriptor_;
}

const TelephonyHistogram& TelephonyHistogram::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

TelephonyHistogram* TelephonyHistogram::default_instance_ = NULL;

TelephonyHistogram* TelephonyHistogram::New(::google::protobuf::Arena* arena) const {
  TelephonyHistogram* n = new TelephonyHistogram;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelephonyHistogram::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.TelephonyHistogram)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TelephonyHistogram, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TelephonyHistogram*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(category_, count_);
    bucket_count_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  bucket_end_points_.Clear();
  bucket_counters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TelephonyHistogram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.TelephonyHistogram)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 category = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_time_millis;
        break;
      }

      // optional int32 min_time_millis = 3;
      case 3: {
        if (tag == 24) {
         parse_min_time_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_time_millis_)));
          set_has_min_time_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_time_millis;
        break;
      }

      // optional int32 max_time_millis = 4;
      case 4: {
        if (tag == 32) {
         parse_max_time_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_time_millis_)));
          set_has_max_time_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_avg_time_millis;
        break;
      }

      // optional int32 avg_time_millis = 5;
      case 5: {
        if (tag == 40) {
         parse_avg_time_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avg_time_millis_)));
          set_has_avg_time_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional int32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bucket_count;
        break;
      }

      // optional int32 bucket_count = 7;
      case 7: {
        if (tag == 56) {
         parse_bucket_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucket_count_)));
          set_has_bucket_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bucket_end_points;
        break;
      }

      // repeated int32 bucket_end_points = 8;
      case 8: {
        if (tag == 64) {
         parse_bucket_end_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_bucket_end_points())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bucket_end_points())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bucket_end_points;
        if (input->ExpectTag(72)) goto parse_bucket_counters;
        break;
      }

      // repeated int32 bucket_counters = 9;
      case 9: {
        if (tag == 72) {
         parse_bucket_counters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_bucket_counters())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bucket_counters())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bucket_counters;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.TelephonyHistogram)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.TelephonyHistogram)
  return false;
#undef DO_
}

void TelephonyHistogram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.TelephonyHistogram)
  // optional int32 category = 1;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 min_time_millis = 3;
  if (has_min_time_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_time_millis(), output);
  }

  // optional int32 max_time_millis = 4;
  if (has_max_time_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_time_millis(), output);
  }

  // optional int32 avg_time_millis = 5;
  if (has_avg_time_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->avg_time_millis(), output);
  }

  // optional int32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }

  // optional int32 bucket_count = 7;
  if (has_bucket_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bucket_count(), output);
  }

  // repeated int32 bucket_end_points = 8;
  for (int i = 0; i < this->bucket_end_points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->bucket_end_points(i), output);
  }

  // repeated int32 bucket_counters = 9;
  for (int i = 0; i < this->bucket_counters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->bucket_counters(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.TelephonyHistogram)
}

::google::protobuf::uint8* TelephonyHistogram::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.TelephonyHistogram)
  // optional int32 category = 1;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->category(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 min_time_millis = 3;
  if (has_min_time_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_time_millis(), target);
  }

  // optional int32 max_time_millis = 4;
  if (has_max_time_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_time_millis(), target);
  }

  // optional int32 avg_time_millis = 5;
  if (has_avg_time_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->avg_time_millis(), target);
  }

  // optional int32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }

  // optional int32 bucket_count = 7;
  if (has_bucket_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bucket_count(), target);
  }

  // repeated int32 bucket_end_points = 8;
  for (int i = 0; i < this->bucket_end_points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->bucket_end_points(i), target);
  }

  // repeated int32 bucket_counters = 9;
  for (int i = 0; i < this->bucket_counters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->bucket_counters(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.TelephonyHistogram)
  return target;
}

int TelephonyHistogram::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.TelephonyHistogram)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 category = 1;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 min_time_millis = 3;
    if (has_min_time_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_time_millis());
    }

    // optional int32 max_time_millis = 4;
    if (has_max_time_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_time_millis());
    }

    // optional int32 avg_time_millis = 5;
    if (has_avg_time_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avg_time_millis());
    }

    // optional int32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 bucket_count = 7;
    if (has_bucket_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bucket_count());
    }

  }
  // repeated int32 bucket_end_points = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->bucket_end_points_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bucket_end_points(i));
    }
    total_size += 1 * this->bucket_end_points_size() + data_size;
  }

  // repeated int32 bucket_counters = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->bucket_counters_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bucket_counters(i));
    }
    total_size += 1 * this->bucket_counters_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelephonyHistogram::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.TelephonyHistogram)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TelephonyHistogram* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TelephonyHistogram>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.TelephonyHistogram)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.TelephonyHistogram)
    MergeFrom(*source);
  }
}

void TelephonyHistogram::MergeFrom(const TelephonyHistogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.TelephonyHistogram)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  bucket_end_points_.MergeFrom(from.bucket_end_points_);
  bucket_counters_.MergeFrom(from.bucket_counters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_min_time_millis()) {
      set_min_time_millis(from.min_time_millis());
    }
    if (from.has_max_time_millis()) {
      set_max_time_millis(from.max_time_millis());
    }
    if (from.has_avg_time_millis()) {
      set_avg_time_millis(from.avg_time_millis());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_bucket_count()) {
      set_bucket_count(from.bucket_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TelephonyHistogram::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.TelephonyHistogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelephonyHistogram::CopyFrom(const TelephonyHistogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.TelephonyHistogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelephonyHistogram::IsInitialized() const {

  return true;
}

void TelephonyHistogram::Swap(TelephonyHistogram* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelephonyHistogram::InternalSwap(TelephonyHistogram* other) {
  std::swap(category_, other->category_);
  std::swap(id_, other->id_);
  std::swap(min_time_millis_, other->min_time_millis_);
  std::swap(max_time_millis_, other->max_time_millis_);
  std::swap(avg_time_millis_, other->avg_time_millis_);
  std::swap(count_, other->count_);
  std::swap(bucket_count_, other->bucket_count_);
  bucket_end_points_.UnsafeArenaSwap(&other->bucket_end_points_);
  bucket_counters_.UnsafeArenaSwap(&other->bucket_counters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelephonyHistogram::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelephonyHistogram_descriptor_;
  metadata.reflection = TelephonyHistogram_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TelephonyHistogram

// optional int32 category = 1;
bool TelephonyHistogram::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TelephonyHistogram::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
void TelephonyHistogram::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
void TelephonyHistogram::clear_category() {
  category_ = 0;
  clear_has_category();
}
 ::google::protobuf::int32 TelephonyHistogram::category() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.category)
  return category_;
}
 void TelephonyHistogram::set_category(::google::protobuf::int32 value) {
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.category)
}

// optional int32 id = 2;
bool TelephonyHistogram::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TelephonyHistogram::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TelephonyHistogram::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TelephonyHistogram::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 TelephonyHistogram::id() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.id)
  return id_;
}
 void TelephonyHistogram::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.id)
}

// optional int32 min_time_millis = 3;
bool TelephonyHistogram::has_min_time_millis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TelephonyHistogram::set_has_min_time_millis() {
  _has_bits_[0] |= 0x00000004u;
}
void TelephonyHistogram::clear_has_min_time_millis() {
  _has_bits_[0] &= ~0x00000004u;
}
void TelephonyHistogram::clear_min_time_millis() {
  min_time_millis_ = 0;
  clear_has_min_time_millis();
}
 ::google::protobuf::int32 TelephonyHistogram::min_time_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.min_time_millis)
  return min_time_millis_;
}
 void TelephonyHistogram::set_min_time_millis(::google::protobuf::int32 value) {
  set_has_min_time_millis();
  min_time_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.min_time_millis)
}

// optional int32 max_time_millis = 4;
bool TelephonyHistogram::has_max_time_millis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TelephonyHistogram::set_has_max_time_millis() {
  _has_bits_[0] |= 0x00000008u;
}
void TelephonyHistogram::clear_has_max_time_millis() {
  _has_bits_[0] &= ~0x00000008u;
}
void TelephonyHistogram::clear_max_time_millis() {
  max_time_millis_ = 0;
  clear_has_max_time_millis();
}
 ::google::protobuf::int32 TelephonyHistogram::max_time_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.max_time_millis)
  return max_time_millis_;
}
 void TelephonyHistogram::set_max_time_millis(::google::protobuf::int32 value) {
  set_has_max_time_millis();
  max_time_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.max_time_millis)
}

// optional int32 avg_time_millis = 5;
bool TelephonyHistogram::has_avg_time_millis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TelephonyHistogram::set_has_avg_time_millis() {
  _has_bits_[0] |= 0x00000010u;
}
void TelephonyHistogram::clear_has_avg_time_millis() {
  _has_bits_[0] &= ~0x00000010u;
}
void TelephonyHistogram::clear_avg_time_millis() {
  avg_time_millis_ = 0;
  clear_has_avg_time_millis();
}
 ::google::protobuf::int32 TelephonyHistogram::avg_time_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.avg_time_millis)
  return avg_time_millis_;
}
 void TelephonyHistogram::set_avg_time_millis(::google::protobuf::int32 value) {
  set_has_avg_time_millis();
  avg_time_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.avg_time_millis)
}

// optional int32 count = 6;
bool TelephonyHistogram::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TelephonyHistogram::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
void TelephonyHistogram::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void TelephonyHistogram::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 TelephonyHistogram::count() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.count)
  return count_;
}
 void TelephonyHistogram::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.count)
}

// optional int32 bucket_count = 7;
bool TelephonyHistogram::has_bucket_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TelephonyHistogram::set_has_bucket_count() {
  _has_bits_[0] |= 0x00000040u;
}
void TelephonyHistogram::clear_has_bucket_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void TelephonyHistogram::clear_bucket_count() {
  bucket_count_ = 0;
  clear_has_bucket_count();
}
 ::google::protobuf::int32 TelephonyHistogram::bucket_count() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.bucket_count)
  return bucket_count_;
}
 void TelephonyHistogram::set_bucket_count(::google::protobuf::int32 value) {
  set_has_bucket_count();
  bucket_count_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.bucket_count)
}

// repeated int32 bucket_end_points = 8;
int TelephonyHistogram::bucket_end_points_size() const {
  return bucket_end_points_.size();
}
void TelephonyHistogram::clear_bucket_end_points() {
  bucket_end_points_.Clear();
}
 ::google::protobuf::int32 TelephonyHistogram::bucket_end_points(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.bucket_end_points)
  return bucket_end_points_.Get(index);
}
 void TelephonyHistogram::set_bucket_end_points(int index, ::google::protobuf::int32 value) {
  bucket_end_points_.Set(index, value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.bucket_end_points)
}
 void TelephonyHistogram::add_bucket_end_points(::google::protobuf::int32 value) {
  bucket_end_points_.Add(value);
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyHistogram.bucket_end_points)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TelephonyHistogram::bucket_end_points() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyHistogram.bucket_end_points)
  return bucket_end_points_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TelephonyHistogram::mutable_bucket_end_points() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyHistogram.bucket_end_points)
  return &bucket_end_points_;
}

// repeated int32 bucket_counters = 9;
int TelephonyHistogram::bucket_counters_size() const {
  return bucket_counters_.size();
}
void TelephonyHistogram::clear_bucket_counters() {
  bucket_counters_.Clear();
}
 ::google::protobuf::int32 TelephonyHistogram::bucket_counters(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.bucket_counters)
  return bucket_counters_.Get(index);
}
 void TelephonyHistogram::set_bucket_counters(int index, ::google::protobuf::int32 value) {
  bucket_counters_.Set(index, value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.bucket_counters)
}
 void TelephonyHistogram::add_bucket_counters(::google::protobuf::int32 value) {
  bucket_counters_.Add(value);
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyHistogram.bucket_counters)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TelephonyHistogram::bucket_counters() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyHistogram.bucket_counters)
  return bucket_counters_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TelephonyHistogram::mutable_bucket_counters() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyHistogram.bucket_counters)
  return &bucket_counters_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TelephonySettings_RilNetworkMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonySettings_RilNetworkMode_descriptor_;
}
bool TelephonySettings_RilNetworkMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_UNKNOWN;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_WCDMA_PREF;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_GSM_ONLY;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_WCDMA_ONLY;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_GSM_UMTS;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_CDMA;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_CDMA_NO_EVDO;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_EVDO_NO_CDMA;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_GLOBAL;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_LTE_CDMA_EVDO;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_LTE_GSM_WCDMA;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_LTE_ONLY;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_LTE_WCDMA;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_TDSCDMA_ONLY;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_TDSCDMA_WCDMA;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_LTE_TDSCDMA;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_TDSCDMA_GSM;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_LTE_TDSCDMA_GSM;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_TDSCDMA_GSM_WCDMA;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_LTE_TDSCDMA_WCDMA;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA;
const TelephonySettings_RilNetworkMode TelephonySettings::NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA;
const TelephonySettings_RilNetworkMode TelephonySettings::RilNetworkMode_MIN;
const TelephonySettings_RilNetworkMode TelephonySettings::RilNetworkMode_MAX;
const int TelephonySettings::RilNetworkMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TelephonySettings_WiFiCallingMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonySettings_WiFiCallingMode_descriptor_;
}
bool TelephonySettings_WiFiCallingMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TelephonySettings_WiFiCallingMode TelephonySettings::WFC_MODE_UNKNOWN;
const TelephonySettings_WiFiCallingMode TelephonySettings::WFC_MODE_WIFI_ONLY;
const TelephonySettings_WiFiCallingMode TelephonySettings::WFC_MODE_CELLULAR_PREFERRED;
const TelephonySettings_WiFiCallingMode TelephonySettings::WFC_MODE_WIFI_PREFERRED;
const TelephonySettings_WiFiCallingMode TelephonySettings::WiFiCallingMode_MIN;
const TelephonySettings_WiFiCallingMode TelephonySettings::WiFiCallingMode_MAX;
const int TelephonySettings::WiFiCallingMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelephonySettings::kIsAirplaneModeFieldNumber;
const int TelephonySettings::kIsCellularDataEnabledFieldNumber;
const int TelephonySettings::kIsDataRoamingEnabledFieldNumber;
const int TelephonySettings::kPreferredNetworkModeFieldNumber;
const int TelephonySettings::kIsEnhanced4GLteModeEnabledFieldNumber;
const int TelephonySettings::kIsWifiEnabledFieldNumber;
const int TelephonySettings::kIsWifiCallingEnabledFieldNumber;
const int TelephonySettings::kWifiCallingModeFieldNumber;
const int TelephonySettings::kIsVtOverLteEnabledFieldNumber;
const int TelephonySettings::kIsVtOverWifiEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelephonySettings::TelephonySettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.TelephonySettings)
}

void TelephonySettings::InitAsDefaultInstance() {
}

TelephonySettings::TelephonySettings(const TelephonySettings& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.TelephonySettings)
}

void TelephonySettings::SharedCtor() {
  _cached_size_ = 0;
  is_airplane_mode_ = false;
  is_cellular_data_enabled_ = false;
  is_data_roaming_enabled_ = false;
  preferred_network_mode_ = 0;
  is_enhanced_4g_lte_mode_enabled_ = false;
  is_wifi_enabled_ = false;
  is_wifi_calling_enabled_ = false;
  wifi_calling_mode_ = 0;
  is_vt_over_lte_enabled_ = false;
  is_vt_over_wifi_enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelephonySettings::~TelephonySettings() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.TelephonySettings)
  SharedDtor();
}

void TelephonySettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TelephonySettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelephonySettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonySettings_descriptor_;
}

const TelephonySettings& TelephonySettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

TelephonySettings* TelephonySettings::default_instance_ = NULL;

TelephonySettings* TelephonySettings::New(::google::protobuf::Arena* arena) const {
  TelephonySettings* n = new TelephonySettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelephonySettings::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.TelephonySettings)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TelephonySettings, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TelephonySettings*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(is_airplane_mode_, is_wifi_calling_enabled_);
  }
  ZR_(is_vt_over_lte_enabled_, is_vt_over_wifi_enabled_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TelephonySettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.TelephonySettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_airplane_mode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_airplane_mode_)));
          set_has_is_airplane_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_cellular_data_enabled;
        break;
      }

      // optional bool is_cellular_data_enabled = 2;
      case 2: {
        if (tag == 16) {
         parse_is_cellular_data_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_cellular_data_enabled_)));
          set_has_is_cellular_data_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_data_roaming_enabled;
        break;
      }

      // optional bool is_data_roaming_enabled = 3;
      case 3: {
        if (tag == 24) {
         parse_is_data_roaming_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_data_roaming_enabled_)));
          set_has_is_data_roaming_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_preferred_network_mode;
        break;
      }

      // optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;
      case 4: {
        if (tag == 32) {
         parse_preferred_network_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonySettings_RilNetworkMode_IsValid(value)) {
            set_preferred_network_mode(static_cast< ::clearcut::connectivity::TelephonySettings_RilNetworkMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_enhanced_4g_lte_mode_enabled;
        break;
      }

      // optional bool is_enhanced_4g_lte_mode_enabled = 5;
      case 5: {
        if (tag == 40) {
         parse_is_enhanced_4g_lte_mode_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enhanced_4g_lte_mode_enabled_)));
          set_has_is_enhanced_4g_lte_mode_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_wifi_enabled;
        break;
      }

      // optional bool is_wifi_enabled = 6;
      case 6: {
        if (tag == 48) {
         parse_is_wifi_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wifi_enabled_)));
          set_has_is_wifi_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_wifi_calling_enabled;
        break;
      }

      // optional bool is_wifi_calling_enabled = 7;
      case 7: {
        if (tag == 56) {
         parse_is_wifi_calling_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wifi_calling_enabled_)));
          set_has_is_wifi_calling_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_wifi_calling_mode;
        break;
      }

      // optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;
      case 8: {
        if (tag == 64) {
         parse_wifi_calling_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonySettings_WiFiCallingMode_IsValid(value)) {
            set_wifi_calling_mode(static_cast< ::clearcut::connectivity::TelephonySettings_WiFiCallingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_vt_over_lte_enabled;
        break;
      }

      // optional bool is_vt_over_lte_enabled = 9;
      case 9: {
        if (tag == 72) {
         parse_is_vt_over_lte_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vt_over_lte_enabled_)));
          set_has_is_vt_over_lte_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_is_vt_over_wifi_enabled;
        break;
      }

      // optional bool is_vt_over_wifi_enabled = 10;
      case 10: {
        if (tag == 80) {
         parse_is_vt_over_wifi_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vt_over_wifi_enabled_)));
          set_has_is_vt_over_wifi_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.TelephonySettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.TelephonySettings)
  return false;
#undef DO_
}

void TelephonySettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.TelephonySettings)
  // optional bool is_airplane_mode = 1;
  if (has_is_airplane_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_airplane_mode(), output);
  }

  // optional bool is_cellular_data_enabled = 2;
  if (has_is_cellular_data_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_cellular_data_enabled(), output);
  }

  // optional bool is_data_roaming_enabled = 3;
  if (has_is_data_roaming_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_data_roaming_enabled(), output);
  }

  // optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;
  if (has_preferred_network_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->preferred_network_mode(), output);
  }

  // optional bool is_enhanced_4g_lte_mode_enabled = 5;
  if (has_is_enhanced_4g_lte_mode_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_enhanced_4g_lte_mode_enabled(), output);
  }

  // optional bool is_wifi_enabled = 6;
  if (has_is_wifi_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_wifi_enabled(), output);
  }

  // optional bool is_wifi_calling_enabled = 7;
  if (has_is_wifi_calling_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_wifi_calling_enabled(), output);
  }

  // optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;
  if (has_wifi_calling_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->wifi_calling_mode(), output);
  }

  // optional bool is_vt_over_lte_enabled = 9;
  if (has_is_vt_over_lte_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_vt_over_lte_enabled(), output);
  }

  // optional bool is_vt_over_wifi_enabled = 10;
  if (has_is_vt_over_wifi_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_vt_over_wifi_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.TelephonySettings)
}

::google::protobuf::uint8* TelephonySettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.TelephonySettings)
  // optional bool is_airplane_mode = 1;
  if (has_is_airplane_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_airplane_mode(), target);
  }

  // optional bool is_cellular_data_enabled = 2;
  if (has_is_cellular_data_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_cellular_data_enabled(), target);
  }

  // optional bool is_data_roaming_enabled = 3;
  if (has_is_data_roaming_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_data_roaming_enabled(), target);
  }

  // optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;
  if (has_preferred_network_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->preferred_network_mode(), target);
  }

  // optional bool is_enhanced_4g_lte_mode_enabled = 5;
  if (has_is_enhanced_4g_lte_mode_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_enhanced_4g_lte_mode_enabled(), target);
  }

  // optional bool is_wifi_enabled = 6;
  if (has_is_wifi_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_wifi_enabled(), target);
  }

  // optional bool is_wifi_calling_enabled = 7;
  if (has_is_wifi_calling_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_wifi_calling_enabled(), target);
  }

  // optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;
  if (has_wifi_calling_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->wifi_calling_mode(), target);
  }

  // optional bool is_vt_over_lte_enabled = 9;
  if (has_is_vt_over_lte_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_vt_over_lte_enabled(), target);
  }

  // optional bool is_vt_over_wifi_enabled = 10;
  if (has_is_vt_over_wifi_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_vt_over_wifi_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.TelephonySettings)
  return target;
}

int TelephonySettings::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.TelephonySettings)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool is_airplane_mode = 1;
    if (has_is_airplane_mode()) {
      total_size += 1 + 1;
    }

    // optional bool is_cellular_data_enabled = 2;
    if (has_is_cellular_data_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool is_data_roaming_enabled = 3;
    if (has_is_data_roaming_enabled()) {
      total_size += 1 + 1;
    }

    // optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;
    if (has_preferred_network_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->preferred_network_mode());
    }

    // optional bool is_enhanced_4g_lte_mode_enabled = 5;
    if (has_is_enhanced_4g_lte_mode_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool is_wifi_enabled = 6;
    if (has_is_wifi_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool is_wifi_calling_enabled = 7;
    if (has_is_wifi_calling_enabled()) {
      total_size += 1 + 1;
    }

    // optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;
    if (has_wifi_calling_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wifi_calling_mode());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool is_vt_over_lte_enabled = 9;
    if (has_is_vt_over_lte_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool is_vt_over_wifi_enabled = 10;
    if (has_is_vt_over_wifi_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelephonySettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.TelephonySettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TelephonySettings* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TelephonySettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.TelephonySettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.TelephonySettings)
    MergeFrom(*source);
  }
}

void TelephonySettings::MergeFrom(const TelephonySettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.TelephonySettings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_airplane_mode()) {
      set_is_airplane_mode(from.is_airplane_mode());
    }
    if (from.has_is_cellular_data_enabled()) {
      set_is_cellular_data_enabled(from.is_cellular_data_enabled());
    }
    if (from.has_is_data_roaming_enabled()) {
      set_is_data_roaming_enabled(from.is_data_roaming_enabled());
    }
    if (from.has_preferred_network_mode()) {
      set_preferred_network_mode(from.preferred_network_mode());
    }
    if (from.has_is_enhanced_4g_lte_mode_enabled()) {
      set_is_enhanced_4g_lte_mode_enabled(from.is_enhanced_4g_lte_mode_enabled());
    }
    if (from.has_is_wifi_enabled()) {
      set_is_wifi_enabled(from.is_wifi_enabled());
    }
    if (from.has_is_wifi_calling_enabled()) {
      set_is_wifi_calling_enabled(from.is_wifi_calling_enabled());
    }
    if (from.has_wifi_calling_mode()) {
      set_wifi_calling_mode(from.wifi_calling_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_vt_over_lte_enabled()) {
      set_is_vt_over_lte_enabled(from.is_vt_over_lte_enabled());
    }
    if (from.has_is_vt_over_wifi_enabled()) {
      set_is_vt_over_wifi_enabled(from.is_vt_over_wifi_enabled());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TelephonySettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.TelephonySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelephonySettings::CopyFrom(const TelephonySettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.TelephonySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelephonySettings::IsInitialized() const {

  return true;
}

void TelephonySettings::Swap(TelephonySettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelephonySettings::InternalSwap(TelephonySettings* other) {
  std::swap(is_airplane_mode_, other->is_airplane_mode_);
  std::swap(is_cellular_data_enabled_, other->is_cellular_data_enabled_);
  std::swap(is_data_roaming_enabled_, other->is_data_roaming_enabled_);
  std::swap(preferred_network_mode_, other->preferred_network_mode_);
  std::swap(is_enhanced_4g_lte_mode_enabled_, other->is_enhanced_4g_lte_mode_enabled_);
  std::swap(is_wifi_enabled_, other->is_wifi_enabled_);
  std::swap(is_wifi_calling_enabled_, other->is_wifi_calling_enabled_);
  std::swap(wifi_calling_mode_, other->wifi_calling_mode_);
  std::swap(is_vt_over_lte_enabled_, other->is_vt_over_lte_enabled_);
  std::swap(is_vt_over_wifi_enabled_, other->is_vt_over_wifi_enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelephonySettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelephonySettings_descriptor_;
  metadata.reflection = TelephonySettings_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TelephonySettings

// optional bool is_airplane_mode = 1;
bool TelephonySettings::has_is_airplane_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TelephonySettings::set_has_is_airplane_mode() {
  _has_bits_[0] |= 0x00000001u;
}
void TelephonySettings::clear_has_is_airplane_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
void TelephonySettings::clear_is_airplane_mode() {
  is_airplane_mode_ = false;
  clear_has_is_airplane_mode();
}
 bool TelephonySettings::is_airplane_mode() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_airplane_mode)
  return is_airplane_mode_;
}
 void TelephonySettings::set_is_airplane_mode(bool value) {
  set_has_is_airplane_mode();
  is_airplane_mode_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_airplane_mode)
}

// optional bool is_cellular_data_enabled = 2;
bool TelephonySettings::has_is_cellular_data_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TelephonySettings::set_has_is_cellular_data_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
void TelephonySettings::clear_has_is_cellular_data_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
void TelephonySettings::clear_is_cellular_data_enabled() {
  is_cellular_data_enabled_ = false;
  clear_has_is_cellular_data_enabled();
}
 bool TelephonySettings::is_cellular_data_enabled() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_cellular_data_enabled)
  return is_cellular_data_enabled_;
}
 void TelephonySettings::set_is_cellular_data_enabled(bool value) {
  set_has_is_cellular_data_enabled();
  is_cellular_data_enabled_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_cellular_data_enabled)
}

// optional bool is_data_roaming_enabled = 3;
bool TelephonySettings::has_is_data_roaming_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TelephonySettings::set_has_is_data_roaming_enabled() {
  _has_bits_[0] |= 0x00000004u;
}
void TelephonySettings::clear_has_is_data_roaming_enabled() {
  _has_bits_[0] &= ~0x00000004u;
}
void TelephonySettings::clear_is_data_roaming_enabled() {
  is_data_roaming_enabled_ = false;
  clear_has_is_data_roaming_enabled();
}
 bool TelephonySettings::is_data_roaming_enabled() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_data_roaming_enabled)
  return is_data_roaming_enabled_;
}
 void TelephonySettings::set_is_data_roaming_enabled(bool value) {
  set_has_is_data_roaming_enabled();
  is_data_roaming_enabled_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_data_roaming_enabled)
}

// optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;
bool TelephonySettings::has_preferred_network_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TelephonySettings::set_has_preferred_network_mode() {
  _has_bits_[0] |= 0x00000008u;
}
void TelephonySettings::clear_has_preferred_network_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
void TelephonySettings::clear_preferred_network_mode() {
  preferred_network_mode_ = 0;
  clear_has_preferred_network_mode();
}
 ::clearcut::connectivity::TelephonySettings_RilNetworkMode TelephonySettings::preferred_network_mode() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.preferred_network_mode)
  return static_cast< ::clearcut::connectivity::TelephonySettings_RilNetworkMode >(preferred_network_mode_);
}
 void TelephonySettings::set_preferred_network_mode(::clearcut::connectivity::TelephonySettings_RilNetworkMode value) {
  assert(::clearcut::connectivity::TelephonySettings_RilNetworkMode_IsValid(value));
  set_has_preferred_network_mode();
  preferred_network_mode_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.preferred_network_mode)
}

// optional bool is_enhanced_4g_lte_mode_enabled = 5;
bool TelephonySettings::has_is_enhanced_4g_lte_mode_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TelephonySettings::set_has_is_enhanced_4g_lte_mode_enabled() {
  _has_bits_[0] |= 0x00000010u;
}
void TelephonySettings::clear_has_is_enhanced_4g_lte_mode_enabled() {
  _has_bits_[0] &= ~0x00000010u;
}
void TelephonySettings::clear_is_enhanced_4g_lte_mode_enabled() {
  is_enhanced_4g_lte_mode_enabled_ = false;
  clear_has_is_enhanced_4g_lte_mode_enabled();
}
 bool TelephonySettings::is_enhanced_4g_lte_mode_enabled() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_enhanced_4g_lte_mode_enabled)
  return is_enhanced_4g_lte_mode_enabled_;
}
 void TelephonySettings::set_is_enhanced_4g_lte_mode_enabled(bool value) {
  set_has_is_enhanced_4g_lte_mode_enabled();
  is_enhanced_4g_lte_mode_enabled_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_enhanced_4g_lte_mode_enabled)
}

// optional bool is_wifi_enabled = 6;
bool TelephonySettings::has_is_wifi_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TelephonySettings::set_has_is_wifi_enabled() {
  _has_bits_[0] |= 0x00000020u;
}
void TelephonySettings::clear_has_is_wifi_enabled() {
  _has_bits_[0] &= ~0x00000020u;
}
void TelephonySettings::clear_is_wifi_enabled() {
  is_wifi_enabled_ = false;
  clear_has_is_wifi_enabled();
}
 bool TelephonySettings::is_wifi_enabled() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_wifi_enabled)
  return is_wifi_enabled_;
}
 void TelephonySettings::set_is_wifi_enabled(bool value) {
  set_has_is_wifi_enabled();
  is_wifi_enabled_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_wifi_enabled)
}

// optional bool is_wifi_calling_enabled = 7;
bool TelephonySettings::has_is_wifi_calling_enabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TelephonySettings::set_has_is_wifi_calling_enabled() {
  _has_bits_[0] |= 0x00000040u;
}
void TelephonySettings::clear_has_is_wifi_calling_enabled() {
  _has_bits_[0] &= ~0x00000040u;
}
void TelephonySettings::clear_is_wifi_calling_enabled() {
  is_wifi_calling_enabled_ = false;
  clear_has_is_wifi_calling_enabled();
}
 bool TelephonySettings::is_wifi_calling_enabled() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_wifi_calling_enabled)
  return is_wifi_calling_enabled_;
}
 void TelephonySettings::set_is_wifi_calling_enabled(bool value) {
  set_has_is_wifi_calling_enabled();
  is_wifi_calling_enabled_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_wifi_calling_enabled)
}

// optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;
bool TelephonySettings::has_wifi_calling_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TelephonySettings::set_has_wifi_calling_mode() {
  _has_bits_[0] |= 0x00000080u;
}
void TelephonySettings::clear_has_wifi_calling_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
void TelephonySettings::clear_wifi_calling_mode() {
  wifi_calling_mode_ = 0;
  clear_has_wifi_calling_mode();
}
 ::clearcut::connectivity::TelephonySettings_WiFiCallingMode TelephonySettings::wifi_calling_mode() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.wifi_calling_mode)
  return static_cast< ::clearcut::connectivity::TelephonySettings_WiFiCallingMode >(wifi_calling_mode_);
}
 void TelephonySettings::set_wifi_calling_mode(::clearcut::connectivity::TelephonySettings_WiFiCallingMode value) {
  assert(::clearcut::connectivity::TelephonySettings_WiFiCallingMode_IsValid(value));
  set_has_wifi_calling_mode();
  wifi_calling_mode_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.wifi_calling_mode)
}

// optional bool is_vt_over_lte_enabled = 9;
bool TelephonySettings::has_is_vt_over_lte_enabled() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TelephonySettings::set_has_is_vt_over_lte_enabled() {
  _has_bits_[0] |= 0x00000100u;
}
void TelephonySettings::clear_has_is_vt_over_lte_enabled() {
  _has_bits_[0] &= ~0x00000100u;
}
void TelephonySettings::clear_is_vt_over_lte_enabled() {
  is_vt_over_lte_enabled_ = false;
  clear_has_is_vt_over_lte_enabled();
}
 bool TelephonySettings::is_vt_over_lte_enabled() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_vt_over_lte_enabled)
  return is_vt_over_lte_enabled_;
}
 void TelephonySettings::set_is_vt_over_lte_enabled(bool value) {
  set_has_is_vt_over_lte_enabled();
  is_vt_over_lte_enabled_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_vt_over_lte_enabled)
}

// optional bool is_vt_over_wifi_enabled = 10;
bool TelephonySettings::has_is_vt_over_wifi_enabled() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TelephonySettings::set_has_is_vt_over_wifi_enabled() {
  _has_bits_[0] |= 0x00000200u;
}
void TelephonySettings::clear_has_is_vt_over_wifi_enabled() {
  _has_bits_[0] &= ~0x00000200u;
}
void TelephonySettings::clear_is_vt_over_wifi_enabled() {
  is_vt_over_wifi_enabled_ = false;
  clear_has_is_vt_over_wifi_enabled();
}
 bool TelephonySettings::is_vt_over_wifi_enabled() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_vt_over_wifi_enabled)
  return is_vt_over_wifi_enabled_;
}
 void TelephonySettings::set_is_vt_over_wifi_enabled(bool value) {
  set_has_is_vt_over_wifi_enabled();
  is_vt_over_wifi_enabled_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_vt_over_wifi_enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TelephonyServiceState_RoamingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyServiceState_RoamingType_descriptor_;
}
bool TelephonyServiceState_RoamingType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TelephonyServiceState_RoamingType TelephonyServiceState::UNKNOWN;
const TelephonyServiceState_RoamingType TelephonyServiceState::ROAMING_TYPE_NOT_ROAMING;
const TelephonyServiceState_RoamingType TelephonyServiceState::ROAMING_TYPE_DOMESTIC;
const TelephonyServiceState_RoamingType TelephonyServiceState::ROAMING_TYPE_INTERNATIONAL;
const TelephonyServiceState_RoamingType TelephonyServiceState::RoamingType_MIN;
const TelephonyServiceState_RoamingType TelephonyServiceState::RoamingType_MAX;
const int TelephonyServiceState::RoamingType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelephonyServiceState_TelephonyOperator::kAlphaLongFieldNumber;
const int TelephonyServiceState_TelephonyOperator::kAlphaShortFieldNumber;
const int TelephonyServiceState_TelephonyOperator::kNumericFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelephonyServiceState_TelephonyOperator::TelephonyServiceState_TelephonyOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
}

void TelephonyServiceState_TelephonyOperator::InitAsDefaultInstance() {
}

TelephonyServiceState_TelephonyOperator::TelephonyServiceState_TelephonyOperator(const TelephonyServiceState_TelephonyOperator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
}

void TelephonyServiceState_TelephonyOperator::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  alpha_long_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alpha_short_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  numeric_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelephonyServiceState_TelephonyOperator::~TelephonyServiceState_TelephonyOperator() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
  SharedDtor();
}

void TelephonyServiceState_TelephonyOperator::SharedDtor() {
  alpha_long_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alpha_short_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  numeric_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TelephonyServiceState_TelephonyOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelephonyServiceState_TelephonyOperator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyServiceState_TelephonyOperator_descriptor_;
}

const TelephonyServiceState_TelephonyOperator& TelephonyServiceState_TelephonyOperator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

TelephonyServiceState_TelephonyOperator* TelephonyServiceState_TelephonyOperator::default_instance_ = NULL;

TelephonyServiceState_TelephonyOperator* TelephonyServiceState_TelephonyOperator::New(::google::protobuf::Arena* arena) const {
  TelephonyServiceState_TelephonyOperator* n = new TelephonyServiceState_TelephonyOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelephonyServiceState_TelephonyOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_alpha_long()) {
      alpha_long_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_alpha_short()) {
      alpha_short_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_numeric()) {
      numeric_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TelephonyServiceState_TelephonyOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string alpha_long = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alpha_long()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alpha_long().data(), this->alpha_long().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alpha_short;
        break;
      }

      // optional string alpha_short = 2;
      case 2: {
        if (tag == 18) {
         parse_alpha_short:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alpha_short()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alpha_short().data(), this->alpha_short().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_numeric;
        break;
      }

      // optional string numeric = 3;
      case 3: {
        if (tag == 26) {
         parse_numeric:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_numeric()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->numeric().data(), this->numeric().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
  return false;
#undef DO_
}

void TelephonyServiceState_TelephonyOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
  // optional string alpha_long = 1;
  if (has_alpha_long()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alpha_long().data(), this->alpha_long().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->alpha_long(), output);
  }

  // optional string alpha_short = 2;
  if (has_alpha_short()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alpha_short().data(), this->alpha_short().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->alpha_short(), output);
  }

  // optional string numeric = 3;
  if (has_numeric()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->numeric().data(), this->numeric().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->numeric(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
}

::google::protobuf::uint8* TelephonyServiceState_TelephonyOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
  // optional string alpha_long = 1;
  if (has_alpha_long()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alpha_long().data(), this->alpha_long().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alpha_long(), target);
  }

  // optional string alpha_short = 2;
  if (has_alpha_short()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alpha_short().data(), this->alpha_short().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alpha_short(), target);
  }

  // optional string numeric = 3;
  if (has_numeric()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->numeric().data(), this->numeric().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->numeric(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
  return target;
}

int TelephonyServiceState_TelephonyOperator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string alpha_long = 1;
    if (has_alpha_long()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alpha_long());
    }

    // optional string alpha_short = 2;
    if (has_alpha_short()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alpha_short());
    }

    // optional string numeric = 3;
    if (has_numeric()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->numeric());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelephonyServiceState_TelephonyOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TelephonyServiceState_TelephonyOperator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TelephonyServiceState_TelephonyOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
    MergeFrom(*source);
  }
}

void TelephonyServiceState_TelephonyOperator::MergeFrom(const TelephonyServiceState_TelephonyOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alpha_long()) {
      set_has_alpha_long();
      alpha_long_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alpha_long_);
    }
    if (from.has_alpha_short()) {
      set_has_alpha_short();
      alpha_short_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alpha_short_);
    }
    if (from.has_numeric()) {
      set_has_numeric();
      numeric_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.numeric_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TelephonyServiceState_TelephonyOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelephonyServiceState_TelephonyOperator::CopyFrom(const TelephonyServiceState_TelephonyOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelephonyServiceState_TelephonyOperator::IsInitialized() const {

  return true;
}

void TelephonyServiceState_TelephonyOperator::Swap(TelephonyServiceState_TelephonyOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelephonyServiceState_TelephonyOperator::InternalSwap(TelephonyServiceState_TelephonyOperator* other) {
  alpha_long_.Swap(&other->alpha_long_);
  alpha_short_.Swap(&other->alpha_short_);
  numeric_.Swap(&other->numeric_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelephonyServiceState_TelephonyOperator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelephonyServiceState_TelephonyOperator_descriptor_;
  metadata.reflection = TelephonyServiceState_TelephonyOperator_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelephonyServiceState::kVoiceOperatorFieldNumber;
const int TelephonyServiceState::kDataOperatorFieldNumber;
const int TelephonyServiceState::kVoiceRoamingTypeFieldNumber;
const int TelephonyServiceState::kDataRoamingTypeFieldNumber;
const int TelephonyServiceState::kVoiceRatFieldNumber;
const int TelephonyServiceState::kDataRatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelephonyServiceState::TelephonyServiceState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.TelephonyServiceState)
}

void TelephonyServiceState::InitAsDefaultInstance() {
  voice_operator_ = const_cast< ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator*>(&::clearcut::connectivity::TelephonyServiceState_TelephonyOperator::default_instance());
  data_operator_ = const_cast< ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator*>(&::clearcut::connectivity::TelephonyServiceState_TelephonyOperator::default_instance());
}

TelephonyServiceState::TelephonyServiceState(const TelephonyServiceState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.TelephonyServiceState)
}

void TelephonyServiceState::SharedCtor() {
  _cached_size_ = 0;
  voice_operator_ = NULL;
  data_operator_ = NULL;
  voice_roaming_type_ = -1;
  data_roaming_type_ = -1;
  voice_rat_ = -1;
  data_rat_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelephonyServiceState::~TelephonyServiceState() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.TelephonyServiceState)
  SharedDtor();
}

void TelephonyServiceState::SharedDtor() {
  if (this != default_instance_) {
    delete voice_operator_;
    delete data_operator_;
  }
}

void TelephonyServiceState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelephonyServiceState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyServiceState_descriptor_;
}

const TelephonyServiceState& TelephonyServiceState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

TelephonyServiceState* TelephonyServiceState::default_instance_ = NULL;

TelephonyServiceState* TelephonyServiceState::New(::google::protobuf::Arena* arena) const {
  TelephonyServiceState* n = new TelephonyServiceState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelephonyServiceState::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.TelephonyServiceState)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_voice_operator()) {
      if (voice_operator_ != NULL) voice_operator_->::clearcut::connectivity::TelephonyServiceState_TelephonyOperator::Clear();
    }
    if (has_data_operator()) {
      if (data_operator_ != NULL) data_operator_->::clearcut::connectivity::TelephonyServiceState_TelephonyOperator::Clear();
    }
    voice_roaming_type_ = -1;
    data_roaming_type_ = -1;
    voice_rat_ = -1;
    data_rat_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TelephonyServiceState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.TelephonyServiceState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voice_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data_operator;
        break;
      }

      // optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;
      case 2: {
        if (tag == 18) {
         parse_data_operator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_operator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_voice_roaming_type;
        break;
      }

      // optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];
      case 3: {
        if (tag == 24) {
         parse_voice_roaming_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonyServiceState_RoamingType_IsValid(value)) {
            set_voice_roaming_type(static_cast< ::clearcut::connectivity::TelephonyServiceState_RoamingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_data_roaming_type;
        break;
      }

      // optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];
      case 4: {
        if (tag == 32) {
         parse_data_roaming_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonyServiceState_RoamingType_IsValid(value)) {
            set_data_roaming_type(static_cast< ::clearcut::connectivity::TelephonyServiceState_RoamingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_voice_rat;
        break;
      }

      // optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];
      case 5: {
        if (tag == 40) {
         parse_voice_rat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::RadioAccessTechnology_IsValid(value)) {
            set_voice_rat(static_cast< ::clearcut::connectivity::RadioAccessTechnology >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_data_rat;
        break;
      }

      // optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];
      case 6: {
        if (tag == 48) {
         parse_data_rat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::RadioAccessTechnology_IsValid(value)) {
            set_data_rat(static_cast< ::clearcut::connectivity::RadioAccessTechnology >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.TelephonyServiceState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.TelephonyServiceState)
  return false;
#undef DO_
}

void TelephonyServiceState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.TelephonyServiceState)
  // optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;
  if (has_voice_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->voice_operator_, output);
  }

  // optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;
  if (has_data_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_operator_, output);
  }

  // optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];
  if (has_voice_roaming_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->voice_roaming_type(), output);
  }

  // optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];
  if (has_data_roaming_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->data_roaming_type(), output);
  }

  // optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];
  if (has_voice_rat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->voice_rat(), output);
  }

  // optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];
  if (has_data_rat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->data_rat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.TelephonyServiceState)
}

::google::protobuf::uint8* TelephonyServiceState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.TelephonyServiceState)
  // optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;
  if (has_voice_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->voice_operator_, false, target);
  }

  // optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;
  if (has_data_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_operator_, false, target);
  }

  // optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];
  if (has_voice_roaming_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->voice_roaming_type(), target);
  }

  // optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];
  if (has_data_roaming_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->data_roaming_type(), target);
  }

  // optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];
  if (has_voice_rat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->voice_rat(), target);
  }

  // optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];
  if (has_data_rat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->data_rat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.TelephonyServiceState)
  return target;
}

int TelephonyServiceState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.TelephonyServiceState)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;
    if (has_voice_operator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->voice_operator_);
    }

    // optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;
    if (has_data_operator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_operator_);
    }

    // optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];
    if (has_voice_roaming_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->voice_roaming_type());
    }

    // optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];
    if (has_data_roaming_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_roaming_type());
    }

    // optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];
    if (has_voice_rat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->voice_rat());
    }

    // optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];
    if (has_data_rat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_rat());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelephonyServiceState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.TelephonyServiceState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TelephonyServiceState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TelephonyServiceState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.TelephonyServiceState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.TelephonyServiceState)
    MergeFrom(*source);
  }
}

void TelephonyServiceState::MergeFrom(const TelephonyServiceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.TelephonyServiceState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voice_operator()) {
      mutable_voice_operator()->::clearcut::connectivity::TelephonyServiceState_TelephonyOperator::MergeFrom(from.voice_operator());
    }
    if (from.has_data_operator()) {
      mutable_data_operator()->::clearcut::connectivity::TelephonyServiceState_TelephonyOperator::MergeFrom(from.data_operator());
    }
    if (from.has_voice_roaming_type()) {
      set_voice_roaming_type(from.voice_roaming_type());
    }
    if (from.has_data_roaming_type()) {
      set_data_roaming_type(from.data_roaming_type());
    }
    if (from.has_voice_rat()) {
      set_voice_rat(from.voice_rat());
    }
    if (from.has_data_rat()) {
      set_data_rat(from.data_rat());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TelephonyServiceState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.TelephonyServiceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelephonyServiceState::CopyFrom(const TelephonyServiceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.TelephonyServiceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelephonyServiceState::IsInitialized() const {

  return true;
}

void TelephonyServiceState::Swap(TelephonyServiceState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelephonyServiceState::InternalSwap(TelephonyServiceState* other) {
  std::swap(voice_operator_, other->voice_operator_);
  std::swap(data_operator_, other->data_operator_);
  std::swap(voice_roaming_type_, other->voice_roaming_type_);
  std::swap(data_roaming_type_, other->data_roaming_type_);
  std::swap(voice_rat_, other->voice_rat_);
  std::swap(data_rat_, other->data_rat_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelephonyServiceState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelephonyServiceState_descriptor_;
  metadata.reflection = TelephonyServiceState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TelephonyServiceState_TelephonyOperator

// optional string alpha_long = 1;
bool TelephonyServiceState_TelephonyOperator::has_alpha_long() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TelephonyServiceState_TelephonyOperator::set_has_alpha_long() {
  _has_bits_[0] |= 0x00000001u;
}
void TelephonyServiceState_TelephonyOperator::clear_has_alpha_long() {
  _has_bits_[0] &= ~0x00000001u;
}
void TelephonyServiceState_TelephonyOperator::clear_alpha_long() {
  alpha_long_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alpha_long();
}
 const ::std::string& TelephonyServiceState_TelephonyOperator::alpha_long() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long)
  return alpha_long_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelephonyServiceState_TelephonyOperator::set_alpha_long(const ::std::string& value) {
  set_has_alpha_long();
  alpha_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long)
}
 void TelephonyServiceState_TelephonyOperator::set_alpha_long(const char* value) {
  set_has_alpha_long();
  alpha_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long)
}
 void TelephonyServiceState_TelephonyOperator::set_alpha_long(const char* value, size_t size) {
  set_has_alpha_long();
  alpha_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long)
}
 ::std::string* TelephonyServiceState_TelephonyOperator::mutable_alpha_long() {
  set_has_alpha_long();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long)
  return alpha_long_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TelephonyServiceState_TelephonyOperator::release_alpha_long() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long)
  clear_has_alpha_long();
  return alpha_long_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelephonyServiceState_TelephonyOperator::set_allocated_alpha_long(::std::string* alpha_long) {
  if (alpha_long != NULL) {
    set_has_alpha_long();
  } else {
    clear_has_alpha_long();
  }
  alpha_long_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alpha_long);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long)
}

// optional string alpha_short = 2;
bool TelephonyServiceState_TelephonyOperator::has_alpha_short() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TelephonyServiceState_TelephonyOperator::set_has_alpha_short() {
  _has_bits_[0] |= 0x00000002u;
}
void TelephonyServiceState_TelephonyOperator::clear_has_alpha_short() {
  _has_bits_[0] &= ~0x00000002u;
}
void TelephonyServiceState_TelephonyOperator::clear_alpha_short() {
  alpha_short_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alpha_short();
}
 const ::std::string& TelephonyServiceState_TelephonyOperator::alpha_short() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short)
  return alpha_short_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelephonyServiceState_TelephonyOperator::set_alpha_short(const ::std::string& value) {
  set_has_alpha_short();
  alpha_short_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short)
}
 void TelephonyServiceState_TelephonyOperator::set_alpha_short(const char* value) {
  set_has_alpha_short();
  alpha_short_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short)
}
 void TelephonyServiceState_TelephonyOperator::set_alpha_short(const char* value, size_t size) {
  set_has_alpha_short();
  alpha_short_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short)
}
 ::std::string* TelephonyServiceState_TelephonyOperator::mutable_alpha_short() {
  set_has_alpha_short();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short)
  return alpha_short_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TelephonyServiceState_TelephonyOperator::release_alpha_short() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short)
  clear_has_alpha_short();
  return alpha_short_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelephonyServiceState_TelephonyOperator::set_allocated_alpha_short(::std::string* alpha_short) {
  if (alpha_short != NULL) {
    set_has_alpha_short();
  } else {
    clear_has_alpha_short();
  }
  alpha_short_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alpha_short);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short)
}

// optional string numeric = 3;
bool TelephonyServiceState_TelephonyOperator::has_numeric() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TelephonyServiceState_TelephonyOperator::set_has_numeric() {
  _has_bits_[0] |= 0x00000004u;
}
void TelephonyServiceState_TelephonyOperator::clear_has_numeric() {
  _has_bits_[0] &= ~0x00000004u;
}
void TelephonyServiceState_TelephonyOperator::clear_numeric() {
  numeric_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_numeric();
}
 const ::std::string& TelephonyServiceState_TelephonyOperator::numeric() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric)
  return numeric_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelephonyServiceState_TelephonyOperator::set_numeric(const ::std::string& value) {
  set_has_numeric();
  numeric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric)
}
 void TelephonyServiceState_TelephonyOperator::set_numeric(const char* value) {
  set_has_numeric();
  numeric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric)
}
 void TelephonyServiceState_TelephonyOperator::set_numeric(const char* value, size_t size) {
  set_has_numeric();
  numeric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric)
}
 ::std::string* TelephonyServiceState_TelephonyOperator::mutable_numeric() {
  set_has_numeric();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric)
  return numeric_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TelephonyServiceState_TelephonyOperator::release_numeric() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric)
  clear_has_numeric();
  return numeric_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelephonyServiceState_TelephonyOperator::set_allocated_numeric(::std::string* numeric) {
  if (numeric != NULL) {
    set_has_numeric();
  } else {
    clear_has_numeric();
  }
  numeric_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), numeric);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric)
}

// -------------------------------------------------------------------

// TelephonyServiceState

// optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;
bool TelephonyServiceState::has_voice_operator() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TelephonyServiceState::set_has_voice_operator() {
  _has_bits_[0] |= 0x00000001u;
}
void TelephonyServiceState::clear_has_voice_operator() {
  _has_bits_[0] &= ~0x00000001u;
}
void TelephonyServiceState::clear_voice_operator() {
  if (voice_operator_ != NULL) voice_operator_->::clearcut::connectivity::TelephonyServiceState_TelephonyOperator::Clear();
  clear_has_voice_operator();
}
const ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator& TelephonyServiceState::voice_operator() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.voice_operator)
  return voice_operator_ != NULL ? *voice_operator_ : *default_instance_->voice_operator_;
}
::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* TelephonyServiceState::mutable_voice_operator() {
  set_has_voice_operator();
  if (voice_operator_ == NULL) {
    voice_operator_ = new ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyServiceState.voice_operator)
  return voice_operator_;
}
::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* TelephonyServiceState::release_voice_operator() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyServiceState.voice_operator)
  clear_has_voice_operator();
  ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* temp = voice_operator_;
  voice_operator_ = NULL;
  return temp;
}
void TelephonyServiceState::set_allocated_voice_operator(::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* voice_operator) {
  delete voice_operator_;
  voice_operator_ = voice_operator;
  if (voice_operator) {
    set_has_voice_operator();
  } else {
    clear_has_voice_operator();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyServiceState.voice_operator)
}

// optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;
bool TelephonyServiceState::has_data_operator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TelephonyServiceState::set_has_data_operator() {
  _has_bits_[0] |= 0x00000002u;
}
void TelephonyServiceState::clear_has_data_operator() {
  _has_bits_[0] &= ~0x00000002u;
}
void TelephonyServiceState::clear_data_operator() {
  if (data_operator_ != NULL) data_operator_->::clearcut::connectivity::TelephonyServiceState_TelephonyOperator::Clear();
  clear_has_data_operator();
}
const ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator& TelephonyServiceState::data_operator() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.data_operator)
  return data_operator_ != NULL ? *data_operator_ : *default_instance_->data_operator_;
}
::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* TelephonyServiceState::mutable_data_operator() {
  set_has_data_operator();
  if (data_operator_ == NULL) {
    data_operator_ = new ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyServiceState.data_operator)
  return data_operator_;
}
::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* TelephonyServiceState::release_data_operator() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyServiceState.data_operator)
  clear_has_data_operator();
  ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* temp = data_operator_;
  data_operator_ = NULL;
  return temp;
}
void TelephonyServiceState::set_allocated_data_operator(::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* data_operator) {
  delete data_operator_;
  data_operator_ = data_operator;
  if (data_operator) {
    set_has_data_operator();
  } else {
    clear_has_data_operator();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyServiceState.data_operator)
}

// optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];
bool TelephonyServiceState::has_voice_roaming_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TelephonyServiceState::set_has_voice_roaming_type() {
  _has_bits_[0] |= 0x00000004u;
}
void TelephonyServiceState::clear_has_voice_roaming_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void TelephonyServiceState::clear_voice_roaming_type() {
  voice_roaming_type_ = -1;
  clear_has_voice_roaming_type();
}
 ::clearcut::connectivity::TelephonyServiceState_RoamingType TelephonyServiceState::voice_roaming_type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.voice_roaming_type)
  return static_cast< ::clearcut::connectivity::TelephonyServiceState_RoamingType >(voice_roaming_type_);
}
 void TelephonyServiceState::set_voice_roaming_type(::clearcut::connectivity::TelephonyServiceState_RoamingType value) {
  assert(::clearcut::connectivity::TelephonyServiceState_RoamingType_IsValid(value));
  set_has_voice_roaming_type();
  voice_roaming_type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyServiceState.voice_roaming_type)
}

// optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];
bool TelephonyServiceState::has_data_roaming_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TelephonyServiceState::set_has_data_roaming_type() {
  _has_bits_[0] |= 0x00000008u;
}
void TelephonyServiceState::clear_has_data_roaming_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void TelephonyServiceState::clear_data_roaming_type() {
  data_roaming_type_ = -1;
  clear_has_data_roaming_type();
}
 ::clearcut::connectivity::TelephonyServiceState_RoamingType TelephonyServiceState::data_roaming_type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.data_roaming_type)
  return static_cast< ::clearcut::connectivity::TelephonyServiceState_RoamingType >(data_roaming_type_);
}
 void TelephonyServiceState::set_data_roaming_type(::clearcut::connectivity::TelephonyServiceState_RoamingType value) {
  assert(::clearcut::connectivity::TelephonyServiceState_RoamingType_IsValid(value));
  set_has_data_roaming_type();
  data_roaming_type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyServiceState.data_roaming_type)
}

// optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];
bool TelephonyServiceState::has_voice_rat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TelephonyServiceState::set_has_voice_rat() {
  _has_bits_[0] |= 0x00000010u;
}
void TelephonyServiceState::clear_has_voice_rat() {
  _has_bits_[0] &= ~0x00000010u;
}
void TelephonyServiceState::clear_voice_rat() {
  voice_rat_ = -1;
  clear_has_voice_rat();
}
 ::clearcut::connectivity::RadioAccessTechnology TelephonyServiceState::voice_rat() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.voice_rat)
  return static_cast< ::clearcut::connectivity::RadioAccessTechnology >(voice_rat_);
}
 void TelephonyServiceState::set_voice_rat(::clearcut::connectivity::RadioAccessTechnology value) {
  assert(::clearcut::connectivity::RadioAccessTechnology_IsValid(value));
  set_has_voice_rat();
  voice_rat_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyServiceState.voice_rat)
}

// optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];
bool TelephonyServiceState::has_data_rat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TelephonyServiceState::set_has_data_rat() {
  _has_bits_[0] |= 0x00000020u;
}
void TelephonyServiceState::clear_has_data_rat() {
  _has_bits_[0] &= ~0x00000020u;
}
void TelephonyServiceState::clear_data_rat() {
  data_rat_ = -1;
  clear_has_data_rat();
}
 ::clearcut::connectivity::RadioAccessTechnology TelephonyServiceState::data_rat() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.data_rat)
  return static_cast< ::clearcut::connectivity::RadioAccessTechnology >(data_rat_);
}
 void TelephonyServiceState::set_data_rat(::clearcut::connectivity::RadioAccessTechnology value) {
  assert(::clearcut::connectivity::RadioAccessTechnology_IsValid(value));
  set_has_data_rat();
  data_rat_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyServiceState.data_rat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImsReasonInfo::kReasonCodeFieldNumber;
const int ImsReasonInfo::kExtraCodeFieldNumber;
const int ImsReasonInfo::kExtraMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImsReasonInfo::ImsReasonInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.ImsReasonInfo)
}

void ImsReasonInfo::InitAsDefaultInstance() {
}

ImsReasonInfo::ImsReasonInfo(const ImsReasonInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.ImsReasonInfo)
}

void ImsReasonInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_code_ = 0;
  extra_code_ = 0;
  extra_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImsReasonInfo::~ImsReasonInfo() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.ImsReasonInfo)
  SharedDtor();
}

void ImsReasonInfo::SharedDtor() {
  extra_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ImsReasonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImsReasonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImsReasonInfo_descriptor_;
}

const ImsReasonInfo& ImsReasonInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

ImsReasonInfo* ImsReasonInfo::default_instance_ = NULL;

ImsReasonInfo* ImsReasonInfo::New(::google::protobuf::Arena* arena) const {
  ImsReasonInfo* n = new ImsReasonInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImsReasonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.ImsReasonInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImsReasonInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImsReasonInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(reason_code_, extra_code_);
    if (has_extra_message()) {
      extra_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImsReasonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.ImsReasonInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reason_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_code_)));
          set_has_reason_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_extra_code;
        break;
      }

      // optional int32 extra_code = 2;
      case 2: {
        if (tag == 16) {
         parse_extra_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_code_)));
          set_has_extra_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_extra_message;
        break;
      }

      // optional string extra_message = 3;
      case 3: {
        if (tag == 26) {
         parse_extra_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra_message().data(), this->extra_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clearcut.connectivity.ImsReasonInfo.extra_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.ImsReasonInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.ImsReasonInfo)
  return false;
#undef DO_
}

void ImsReasonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.ImsReasonInfo)
  // optional int32 reason_code = 1;
  if (has_reason_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reason_code(), output);
  }

  // optional int32 extra_code = 2;
  if (has_extra_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->extra_code(), output);
  }

  // optional string extra_message = 3;
  if (has_extra_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_message().data(), this->extra_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.ImsReasonInfo.extra_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->extra_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.ImsReasonInfo)
}

::google::protobuf::uint8* ImsReasonInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.ImsReasonInfo)
  // optional int32 reason_code = 1;
  if (has_reason_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reason_code(), target);
  }

  // optional int32 extra_code = 2;
  if (has_extra_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->extra_code(), target);
  }

  // optional string extra_message = 3;
  if (has_extra_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_message().data(), this->extra_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.ImsReasonInfo.extra_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extra_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.ImsReasonInfo)
  return target;
}

int ImsReasonInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.ImsReasonInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 reason_code = 1;
    if (has_reason_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason_code());
    }

    // optional int32 extra_code = 2;
    if (has_extra_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extra_code());
    }

    // optional string extra_message = 3;
    if (has_extra_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_message());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImsReasonInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.ImsReasonInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImsReasonInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImsReasonInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.ImsReasonInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.ImsReasonInfo)
    MergeFrom(*source);
  }
}

void ImsReasonInfo::MergeFrom(const ImsReasonInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.ImsReasonInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason_code()) {
      set_reason_code(from.reason_code());
    }
    if (from.has_extra_code()) {
      set_extra_code(from.extra_code());
    }
    if (from.has_extra_message()) {
      set_has_extra_message();
      extra_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImsReasonInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.ImsReasonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImsReasonInfo::CopyFrom(const ImsReasonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.ImsReasonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImsReasonInfo::IsInitialized() const {

  return true;
}

void ImsReasonInfo::Swap(ImsReasonInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImsReasonInfo::InternalSwap(ImsReasonInfo* other) {
  std::swap(reason_code_, other->reason_code_);
  std::swap(extra_code_, other->extra_code_);
  extra_message_.Swap(&other->extra_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImsReasonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImsReasonInfo_descriptor_;
  metadata.reflection = ImsReasonInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImsReasonInfo

// optional int32 reason_code = 1;
bool ImsReasonInfo::has_reason_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImsReasonInfo::set_has_reason_code() {
  _has_bits_[0] |= 0x00000001u;
}
void ImsReasonInfo::clear_has_reason_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImsReasonInfo::clear_reason_code() {
  reason_code_ = 0;
  clear_has_reason_code();
}
 ::google::protobuf::int32 ImsReasonInfo::reason_code() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsReasonInfo.reason_code)
  return reason_code_;
}
 void ImsReasonInfo::set_reason_code(::google::protobuf::int32 value) {
  set_has_reason_code();
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsReasonInfo.reason_code)
}

// optional int32 extra_code = 2;
bool ImsReasonInfo::has_extra_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImsReasonInfo::set_has_extra_code() {
  _has_bits_[0] |= 0x00000002u;
}
void ImsReasonInfo::clear_has_extra_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImsReasonInfo::clear_extra_code() {
  extra_code_ = 0;
  clear_has_extra_code();
}
 ::google::protobuf::int32 ImsReasonInfo::extra_code() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsReasonInfo.extra_code)
  return extra_code_;
}
 void ImsReasonInfo::set_extra_code(::google::protobuf::int32 value) {
  set_has_extra_code();
  extra_code_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsReasonInfo.extra_code)
}

// optional string extra_message = 3;
bool ImsReasonInfo::has_extra_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImsReasonInfo::set_has_extra_message() {
  _has_bits_[0] |= 0x00000004u;
}
void ImsReasonInfo::clear_has_extra_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImsReasonInfo::clear_extra_message() {
  extra_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra_message();
}
 const ::std::string& ImsReasonInfo::extra_message() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsReasonInfo.extra_message)
  return extra_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImsReasonInfo::set_extra_message(const ::std::string& value) {
  set_has_extra_message();
  extra_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsReasonInfo.extra_message)
}
 void ImsReasonInfo::set_extra_message(const char* value) {
  set_has_extra_message();
  extra_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.ImsReasonInfo.extra_message)
}
 void ImsReasonInfo::set_extra_message(const char* value, size_t size) {
  set_has_extra_message();
  extra_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.ImsReasonInfo.extra_message)
}
 ::std::string* ImsReasonInfo::mutable_extra_message() {
  set_has_extra_message();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.ImsReasonInfo.extra_message)
  return extra_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImsReasonInfo::release_extra_message() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.ImsReasonInfo.extra_message)
  clear_has_extra_message();
  return extra_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImsReasonInfo::set_allocated_extra_message(::std::string* extra_message) {
  if (extra_message != NULL) {
    set_has_extra_message();
  } else {
    clear_has_extra_message();
  }
  extra_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra_message);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.ImsReasonInfo.extra_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ImsConnectionState_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImsConnectionState_State_descriptor_;
}
bool ImsConnectionState_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImsConnectionState_State ImsConnectionState::STATE_UNKNOWN;
const ImsConnectionState_State ImsConnectionState::CONNECTED;
const ImsConnectionState_State ImsConnectionState::PROGRESSING;
const ImsConnectionState_State ImsConnectionState::DISCONNECTED;
const ImsConnectionState_State ImsConnectionState::RESUMED;
const ImsConnectionState_State ImsConnectionState::SUSPENDED;
const ImsConnectionState_State ImsConnectionState::State_MIN;
const ImsConnectionState_State ImsConnectionState::State_MAX;
const int ImsConnectionState::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImsConnectionState::kStateFieldNumber;
const int ImsConnectionState::kReasonInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImsConnectionState::ImsConnectionState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.ImsConnectionState)
}

void ImsConnectionState::InitAsDefaultInstance() {
  reason_info_ = const_cast< ::clearcut::connectivity::ImsReasonInfo*>(&::clearcut::connectivity::ImsReasonInfo::default_instance());
}

ImsConnectionState::ImsConnectionState(const ImsConnectionState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.ImsConnectionState)
}

void ImsConnectionState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  reason_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImsConnectionState::~ImsConnectionState() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.ImsConnectionState)
  SharedDtor();
}

void ImsConnectionState::SharedDtor() {
  if (this != default_instance_) {
    delete reason_info_;
  }
}

void ImsConnectionState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImsConnectionState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImsConnectionState_descriptor_;
}

const ImsConnectionState& ImsConnectionState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

ImsConnectionState* ImsConnectionState::default_instance_ = NULL;

ImsConnectionState* ImsConnectionState::New(::google::protobuf::Arena* arena) const {
  ImsConnectionState* n = new ImsConnectionState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImsConnectionState::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.ImsConnectionState)
  if (_has_bits_[0 / 32] & 3u) {
    state_ = 0;
    if (has_reason_info()) {
      if (reason_info_ != NULL) reason_info_->::clearcut::connectivity::ImsReasonInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImsConnectionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.ImsConnectionState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .clearcut.connectivity.ImsConnectionState.State state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::ImsConnectionState_State_IsValid(value)) {
            set_state(static_cast< ::clearcut::connectivity::ImsConnectionState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason_info;
        break;
      }

      // optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;
      case 2: {
        if (tag == 18) {
         parse_reason_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reason_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.ImsConnectionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.ImsConnectionState)
  return false;
#undef DO_
}

void ImsConnectionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.ImsConnectionState)
  // optional .clearcut.connectivity.ImsConnectionState.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;
  if (has_reason_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->reason_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.ImsConnectionState)
}

::google::protobuf::uint8* ImsConnectionState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.ImsConnectionState)
  // optional .clearcut.connectivity.ImsConnectionState.State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;
  if (has_reason_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->reason_info_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.ImsConnectionState)
  return target;
}

int ImsConnectionState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.ImsConnectionState)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .clearcut.connectivity.ImsConnectionState.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;
    if (has_reason_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reason_info_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImsConnectionState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.ImsConnectionState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImsConnectionState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImsConnectionState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.ImsConnectionState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.ImsConnectionState)
    MergeFrom(*source);
  }
}

void ImsConnectionState::MergeFrom(const ImsConnectionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.ImsConnectionState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_reason_info()) {
      mutable_reason_info()->::clearcut::connectivity::ImsReasonInfo::MergeFrom(from.reason_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImsConnectionState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.ImsConnectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImsConnectionState::CopyFrom(const ImsConnectionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.ImsConnectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImsConnectionState::IsInitialized() const {

  return true;
}

void ImsConnectionState::Swap(ImsConnectionState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImsConnectionState::InternalSwap(ImsConnectionState* other) {
  std::swap(state_, other->state_);
  std::swap(reason_info_, other->reason_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImsConnectionState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImsConnectionState_descriptor_;
  metadata.reflection = ImsConnectionState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImsConnectionState

// optional .clearcut.connectivity.ImsConnectionState.State state = 1;
bool ImsConnectionState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImsConnectionState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void ImsConnectionState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImsConnectionState::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::clearcut::connectivity::ImsConnectionState_State ImsConnectionState::state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsConnectionState.state)
  return static_cast< ::clearcut::connectivity::ImsConnectionState_State >(state_);
}
 void ImsConnectionState::set_state(::clearcut::connectivity::ImsConnectionState_State value) {
  assert(::clearcut::connectivity::ImsConnectionState_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsConnectionState.state)
}

// optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;
bool ImsConnectionState::has_reason_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImsConnectionState::set_has_reason_info() {
  _has_bits_[0] |= 0x00000002u;
}
void ImsConnectionState::clear_has_reason_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImsConnectionState::clear_reason_info() {
  if (reason_info_ != NULL) reason_info_->::clearcut::connectivity::ImsReasonInfo::Clear();
  clear_has_reason_info();
}
const ::clearcut::connectivity::ImsReasonInfo& ImsConnectionState::reason_info() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsConnectionState.reason_info)
  return reason_info_ != NULL ? *reason_info_ : *default_instance_->reason_info_;
}
::clearcut::connectivity::ImsReasonInfo* ImsConnectionState::mutable_reason_info() {
  set_has_reason_info();
  if (reason_info_ == NULL) {
    reason_info_ = new ::clearcut::connectivity::ImsReasonInfo;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.ImsConnectionState.reason_info)
  return reason_info_;
}
::clearcut::connectivity::ImsReasonInfo* ImsConnectionState::release_reason_info() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.ImsConnectionState.reason_info)
  clear_has_reason_info();
  ::clearcut::connectivity::ImsReasonInfo* temp = reason_info_;
  reason_info_ = NULL;
  return temp;
}
void ImsConnectionState::set_allocated_reason_info(::clearcut::connectivity::ImsReasonInfo* reason_info) {
  delete reason_info_;
  reason_info_ = reason_info;
  if (reason_info) {
    set_has_reason_info();
  } else {
    clear_has_reason_info();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.ImsConnectionState.reason_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImsCapabilities::kVoiceOverLteFieldNumber;
const int ImsCapabilities::kVoiceOverWifiFieldNumber;
const int ImsCapabilities::kVideoOverLteFieldNumber;
const int ImsCapabilities::kVideoOverWifiFieldNumber;
const int ImsCapabilities::kUtOverLteFieldNumber;
const int ImsCapabilities::kUtOverWifiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImsCapabilities::ImsCapabilities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.ImsCapabilities)
}

void ImsCapabilities::InitAsDefaultInstance() {
}

ImsCapabilities::ImsCapabilities(const ImsCapabilities& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.ImsCapabilities)
}

void ImsCapabilities::SharedCtor() {
  _cached_size_ = 0;
  voice_over_lte_ = false;
  voice_over_wifi_ = false;
  video_over_lte_ = false;
  video_over_wifi_ = false;
  ut_over_lte_ = false;
  ut_over_wifi_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImsCapabilities::~ImsCapabilities() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.ImsCapabilities)
  SharedDtor();
}

void ImsCapabilities::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImsCapabilities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImsCapabilities::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImsCapabilities_descriptor_;
}

const ImsCapabilities& ImsCapabilities::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

ImsCapabilities* ImsCapabilities::default_instance_ = NULL;

ImsCapabilities* ImsCapabilities::New(::google::protobuf::Arena* arena) const {
  ImsCapabilities* n = new ImsCapabilities;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImsCapabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.ImsCapabilities)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImsCapabilities, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImsCapabilities*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(voice_over_lte_, ut_over_wifi_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImsCapabilities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.ImsCapabilities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool voice_over_lte = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voice_over_lte_)));
          set_has_voice_over_lte();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_voice_over_wifi;
        break;
      }

      // optional bool voice_over_wifi = 2;
      case 2: {
        if (tag == 16) {
         parse_voice_over_wifi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voice_over_wifi_)));
          set_has_voice_over_wifi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_video_over_lte;
        break;
      }

      // optional bool video_over_lte = 3;
      case 3: {
        if (tag == 24) {
         parse_video_over_lte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &video_over_lte_)));
          set_has_video_over_lte();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_video_over_wifi;
        break;
      }

      // optional bool video_over_wifi = 4;
      case 4: {
        if (tag == 32) {
         parse_video_over_wifi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &video_over_wifi_)));
          set_has_video_over_wifi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ut_over_lte;
        break;
      }

      // optional bool ut_over_lte = 5;
      case 5: {
        if (tag == 40) {
         parse_ut_over_lte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ut_over_lte_)));
          set_has_ut_over_lte();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ut_over_wifi;
        break;
      }

      // optional bool ut_over_wifi = 6;
      case 6: {
        if (tag == 48) {
         parse_ut_over_wifi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ut_over_wifi_)));
          set_has_ut_over_wifi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.ImsCapabilities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.ImsCapabilities)
  return false;
#undef DO_
}

void ImsCapabilities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.ImsCapabilities)
  // optional bool voice_over_lte = 1;
  if (has_voice_over_lte()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->voice_over_lte(), output);
  }

  // optional bool voice_over_wifi = 2;
  if (has_voice_over_wifi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->voice_over_wifi(), output);
  }

  // optional bool video_over_lte = 3;
  if (has_video_over_lte()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->video_over_lte(), output);
  }

  // optional bool video_over_wifi = 4;
  if (has_video_over_wifi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->video_over_wifi(), output);
  }

  // optional bool ut_over_lte = 5;
  if (has_ut_over_lte()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ut_over_lte(), output);
  }

  // optional bool ut_over_wifi = 6;
  if (has_ut_over_wifi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ut_over_wifi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.ImsCapabilities)
}

::google::protobuf::uint8* ImsCapabilities::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.ImsCapabilities)
  // optional bool voice_over_lte = 1;
  if (has_voice_over_lte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->voice_over_lte(), target);
  }

  // optional bool voice_over_wifi = 2;
  if (has_voice_over_wifi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->voice_over_wifi(), target);
  }

  // optional bool video_over_lte = 3;
  if (has_video_over_lte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->video_over_lte(), target);
  }

  // optional bool video_over_wifi = 4;
  if (has_video_over_wifi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->video_over_wifi(), target);
  }

  // optional bool ut_over_lte = 5;
  if (has_ut_over_lte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ut_over_lte(), target);
  }

  // optional bool ut_over_wifi = 6;
  if (has_ut_over_wifi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ut_over_wifi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.ImsCapabilities)
  return target;
}

int ImsCapabilities::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.ImsCapabilities)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional bool voice_over_lte = 1;
    if (has_voice_over_lte()) {
      total_size += 1 + 1;
    }

    // optional bool voice_over_wifi = 2;
    if (has_voice_over_wifi()) {
      total_size += 1 + 1;
    }

    // optional bool video_over_lte = 3;
    if (has_video_over_lte()) {
      total_size += 1 + 1;
    }

    // optional bool video_over_wifi = 4;
    if (has_video_over_wifi()) {
      total_size += 1 + 1;
    }

    // optional bool ut_over_lte = 5;
    if (has_ut_over_lte()) {
      total_size += 1 + 1;
    }

    // optional bool ut_over_wifi = 6;
    if (has_ut_over_wifi()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImsCapabilities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.ImsCapabilities)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImsCapabilities* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImsCapabilities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.ImsCapabilities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.ImsCapabilities)
    MergeFrom(*source);
  }
}

void ImsCapabilities::MergeFrom(const ImsCapabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.ImsCapabilities)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voice_over_lte()) {
      set_voice_over_lte(from.voice_over_lte());
    }
    if (from.has_voice_over_wifi()) {
      set_voice_over_wifi(from.voice_over_wifi());
    }
    if (from.has_video_over_lte()) {
      set_video_over_lte(from.video_over_lte());
    }
    if (from.has_video_over_wifi()) {
      set_video_over_wifi(from.video_over_wifi());
    }
    if (from.has_ut_over_lte()) {
      set_ut_over_lte(from.ut_over_lte());
    }
    if (from.has_ut_over_wifi()) {
      set_ut_over_wifi(from.ut_over_wifi());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImsCapabilities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.ImsCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImsCapabilities::CopyFrom(const ImsCapabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.ImsCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImsCapabilities::IsInitialized() const {

  return true;
}

void ImsCapabilities::Swap(ImsCapabilities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImsCapabilities::InternalSwap(ImsCapabilities* other) {
  std::swap(voice_over_lte_, other->voice_over_lte_);
  std::swap(voice_over_wifi_, other->voice_over_wifi_);
  std::swap(video_over_lte_, other->video_over_lte_);
  std::swap(video_over_wifi_, other->video_over_wifi_);
  std::swap(ut_over_lte_, other->ut_over_lte_);
  std::swap(ut_over_wifi_, other->ut_over_wifi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImsCapabilities::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImsCapabilities_descriptor_;
  metadata.reflection = ImsCapabilities_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImsCapabilities

// optional bool voice_over_lte = 1;
bool ImsCapabilities::has_voice_over_lte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImsCapabilities::set_has_voice_over_lte() {
  _has_bits_[0] |= 0x00000001u;
}
void ImsCapabilities::clear_has_voice_over_lte() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImsCapabilities::clear_voice_over_lte() {
  voice_over_lte_ = false;
  clear_has_voice_over_lte();
}
 bool ImsCapabilities::voice_over_lte() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsCapabilities.voice_over_lte)
  return voice_over_lte_;
}
 void ImsCapabilities::set_voice_over_lte(bool value) {
  set_has_voice_over_lte();
  voice_over_lte_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsCapabilities.voice_over_lte)
}

// optional bool voice_over_wifi = 2;
bool ImsCapabilities::has_voice_over_wifi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImsCapabilities::set_has_voice_over_wifi() {
  _has_bits_[0] |= 0x00000002u;
}
void ImsCapabilities::clear_has_voice_over_wifi() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImsCapabilities::clear_voice_over_wifi() {
  voice_over_wifi_ = false;
  clear_has_voice_over_wifi();
}
 bool ImsCapabilities::voice_over_wifi() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsCapabilities.voice_over_wifi)
  return voice_over_wifi_;
}
 void ImsCapabilities::set_voice_over_wifi(bool value) {
  set_has_voice_over_wifi();
  voice_over_wifi_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsCapabilities.voice_over_wifi)
}

// optional bool video_over_lte = 3;
bool ImsCapabilities::has_video_over_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImsCapabilities::set_has_video_over_lte() {
  _has_bits_[0] |= 0x00000004u;
}
void ImsCapabilities::clear_has_video_over_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImsCapabilities::clear_video_over_lte() {
  video_over_lte_ = false;
  clear_has_video_over_lte();
}
 bool ImsCapabilities::video_over_lte() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsCapabilities.video_over_lte)
  return video_over_lte_;
}
 void ImsCapabilities::set_video_over_lte(bool value) {
  set_has_video_over_lte();
  video_over_lte_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsCapabilities.video_over_lte)
}

// optional bool video_over_wifi = 4;
bool ImsCapabilities::has_video_over_wifi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImsCapabilities::set_has_video_over_wifi() {
  _has_bits_[0] |= 0x00000008u;
}
void ImsCapabilities::clear_has_video_over_wifi() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImsCapabilities::clear_video_over_wifi() {
  video_over_wifi_ = false;
  clear_has_video_over_wifi();
}
 bool ImsCapabilities::video_over_wifi() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsCapabilities.video_over_wifi)
  return video_over_wifi_;
}
 void ImsCapabilities::set_video_over_wifi(bool value) {
  set_has_video_over_wifi();
  video_over_wifi_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsCapabilities.video_over_wifi)
}

// optional bool ut_over_lte = 5;
bool ImsCapabilities::has_ut_over_lte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImsCapabilities::set_has_ut_over_lte() {
  _has_bits_[0] |= 0x00000010u;
}
void ImsCapabilities::clear_has_ut_over_lte() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImsCapabilities::clear_ut_over_lte() {
  ut_over_lte_ = false;
  clear_has_ut_over_lte();
}
 bool ImsCapabilities::ut_over_lte() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsCapabilities.ut_over_lte)
  return ut_over_lte_;
}
 void ImsCapabilities::set_ut_over_lte(bool value) {
  set_has_ut_over_lte();
  ut_over_lte_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsCapabilities.ut_over_lte)
}

// optional bool ut_over_wifi = 6;
bool ImsCapabilities::has_ut_over_wifi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImsCapabilities::set_has_ut_over_wifi() {
  _has_bits_[0] |= 0x00000020u;
}
void ImsCapabilities::clear_has_ut_over_wifi() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImsCapabilities::clear_ut_over_wifi() {
  ut_over_wifi_ = false;
  clear_has_ut_over_wifi();
}
 bool ImsCapabilities::ut_over_wifi() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsCapabilities.ut_over_wifi)
  return ut_over_wifi_;
}
 void ImsCapabilities::set_ut_over_wifi(bool value) {
  set_has_ut_over_wifi();
  ut_over_wifi_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsCapabilities.ut_over_wifi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RilDataCall::kCidFieldNumber;
const int RilDataCall::kTypeFieldNumber;
const int RilDataCall::kIframeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RilDataCall::RilDataCall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.RilDataCall)
}

void RilDataCall::InitAsDefaultInstance() {
}

RilDataCall::RilDataCall(const RilDataCall& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.RilDataCall)
}

void RilDataCall::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cid_ = 0;
  type_ = 0;
  iframe_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RilDataCall::~RilDataCall() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.RilDataCall)
  SharedDtor();
}

void RilDataCall::SharedDtor() {
  iframe_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RilDataCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RilDataCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RilDataCall_descriptor_;
}

const RilDataCall& RilDataCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

RilDataCall* RilDataCall::default_instance_ = NULL;

RilDataCall* RilDataCall::New(::google::protobuf::Arena* arena) const {
  RilDataCall* n = new RilDataCall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RilDataCall::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.RilDataCall)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RilDataCall, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RilDataCall*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(cid_, type_);
    if (has_iframe()) {
      iframe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RilDataCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.RilDataCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .clearcut.connectivity.PdpType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::PdpType_IsValid(value)) {
            set_type(static_cast< ::clearcut::connectivity::PdpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_iframe;
        break;
      }

      // optional string iframe = 3;
      case 3: {
        if (tag == 26) {
         parse_iframe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iframe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iframe().data(), this->iframe().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clearcut.connectivity.RilDataCall.iframe");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.RilDataCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.RilDataCall)
  return false;
#undef DO_
}

void RilDataCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.RilDataCall)
  // optional int32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cid(), output);
  }

  // optional .clearcut.connectivity.PdpType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string iframe = 3;
  if (has_iframe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iframe().data(), this->iframe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.RilDataCall.iframe");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->iframe(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.RilDataCall)
}

::google::protobuf::uint8* RilDataCall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.RilDataCall)
  // optional int32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cid(), target);
  }

  // optional .clearcut.connectivity.PdpType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string iframe = 3;
  if (has_iframe()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iframe().data(), this->iframe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.RilDataCall.iframe");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->iframe(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.RilDataCall)
  return target;
}

int RilDataCall::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.RilDataCall)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cid());
    }

    // optional .clearcut.connectivity.PdpType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string iframe = 3;
    if (has_iframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iframe());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RilDataCall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.RilDataCall)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RilDataCall* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RilDataCall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.RilDataCall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.RilDataCall)
    MergeFrom(*source);
  }
}

void RilDataCall::MergeFrom(const RilDataCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.RilDataCall)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_iframe()) {
      set_has_iframe();
      iframe_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iframe_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RilDataCall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.RilDataCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RilDataCall::CopyFrom(const RilDataCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.RilDataCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RilDataCall::IsInitialized() const {

  return true;
}

void RilDataCall::Swap(RilDataCall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RilDataCall::InternalSwap(RilDataCall* other) {
  std::swap(cid_, other->cid_);
  std::swap(type_, other->type_);
  iframe_.Swap(&other->iframe_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RilDataCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RilDataCall_descriptor_;
  metadata.reflection = RilDataCall_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RilDataCall

// optional int32 cid = 1;
bool RilDataCall::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RilDataCall::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
void RilDataCall::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RilDataCall::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
 ::google::protobuf::int32 RilDataCall::cid() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.RilDataCall.cid)
  return cid_;
}
 void RilDataCall::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.RilDataCall.cid)
}

// optional .clearcut.connectivity.PdpType type = 2;
bool RilDataCall::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RilDataCall::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void RilDataCall::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void RilDataCall::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::clearcut::connectivity::PdpType RilDataCall::type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.RilDataCall.type)
  return static_cast< ::clearcut::connectivity::PdpType >(type_);
}
 void RilDataCall::set_type(::clearcut::connectivity::PdpType value) {
  assert(::clearcut::connectivity::PdpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.RilDataCall.type)
}

// optional string iframe = 3;
bool RilDataCall::has_iframe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RilDataCall::set_has_iframe() {
  _has_bits_[0] |= 0x00000004u;
}
void RilDataCall::clear_has_iframe() {
  _has_bits_[0] &= ~0x00000004u;
}
void RilDataCall::clear_iframe() {
  iframe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iframe();
}
 const ::std::string& RilDataCall::iframe() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.RilDataCall.iframe)
  return iframe_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RilDataCall::set_iframe(const ::std::string& value) {
  set_has_iframe();
  iframe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.RilDataCall.iframe)
}
 void RilDataCall::set_iframe(const char* value) {
  set_has_iframe();
  iframe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.RilDataCall.iframe)
}
 void RilDataCall::set_iframe(const char* value, size_t size) {
  set_has_iframe();
  iframe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.RilDataCall.iframe)
}
 ::std::string* RilDataCall::mutable_iframe() {
  set_has_iframe();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.RilDataCall.iframe)
  return iframe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RilDataCall::release_iframe() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.RilDataCall.iframe)
  clear_has_iframe();
  return iframe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RilDataCall::set_allocated_iframe(::std::string* iframe) {
  if (iframe != NULL) {
    set_has_iframe();
  } else {
    clear_has_iframe();
  }
  iframe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iframe);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.RilDataCall.iframe)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TelephonyEvent_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyEvent_Type_descriptor_;
}
bool TelephonyEvent_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TelephonyEvent_Type TelephonyEvent::UNKNOWN;
const TelephonyEvent_Type TelephonyEvent::SETTINGS_CHANGED;
const TelephonyEvent_Type TelephonyEvent::RIL_SERVICE_STATE_CHANGED;
const TelephonyEvent_Type TelephonyEvent::IMS_CONNECTION_STATE_CHANGED;
const TelephonyEvent_Type TelephonyEvent::IMS_CAPABILITIES_CHANGED;
const TelephonyEvent_Type TelephonyEvent::DATA_CALL_SETUP;
const TelephonyEvent_Type TelephonyEvent::DATA_CALL_SETUP_RESPONSE;
const TelephonyEvent_Type TelephonyEvent::DATA_CALL_LIST_CHANGED;
const TelephonyEvent_Type TelephonyEvent::DATA_CALL_DEACTIVATE;
const TelephonyEvent_Type TelephonyEvent::DATA_CALL_DEACTIVATE_RESPONSE;
const TelephonyEvent_Type TelephonyEvent::DATA_STALL_ACTION;
const TelephonyEvent_Type TelephonyEvent::MODEM_RESTART;
const TelephonyEvent_Type TelephonyEvent::NITZ_TIME;
const TelephonyEvent_Type TelephonyEvent::Type_MIN;
const TelephonyEvent_Type TelephonyEvent::Type_MAX;
const int TelephonyEvent::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TelephonyEvent_RilSetupDataCall_RilDataProfile_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyEvent_RilSetupDataCall_RilDataProfile_descriptor_;
}
bool TelephonyEvent_RilSetupDataCall_RilDataProfile_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TelephonyEvent_RilSetupDataCall_RilDataProfile TelephonyEvent_RilSetupDataCall::RIL_DATA_UNKNOWN;
const TelephonyEvent_RilSetupDataCall_RilDataProfile TelephonyEvent_RilSetupDataCall::RIL_DATA_PROFILE_DEFAULT;
const TelephonyEvent_RilSetupDataCall_RilDataProfile TelephonyEvent_RilSetupDataCall::RIL_DATA_PROFILE_TETHERED;
const TelephonyEvent_RilSetupDataCall_RilDataProfile TelephonyEvent_RilSetupDataCall::RIL_DATA_PROFILE_IMS;
const TelephonyEvent_RilSetupDataCall_RilDataProfile TelephonyEvent_RilSetupDataCall::RIL_DATA_PROFILE_FOTA;
const TelephonyEvent_RilSetupDataCall_RilDataProfile TelephonyEvent_RilSetupDataCall::RIL_DATA_PROFILE_CBS;
const TelephonyEvent_RilSetupDataCall_RilDataProfile TelephonyEvent_RilSetupDataCall::RIL_DATA_PROFILE_OEM_BASE;
const TelephonyEvent_RilSetupDataCall_RilDataProfile TelephonyEvent_RilSetupDataCall::RIL_DATA_PROFILE_INVALID;
const TelephonyEvent_RilSetupDataCall_RilDataProfile TelephonyEvent_RilSetupDataCall::RilDataProfile_MIN;
const TelephonyEvent_RilSetupDataCall_RilDataProfile TelephonyEvent_RilSetupDataCall::RilDataProfile_MAX;
const int TelephonyEvent_RilSetupDataCall::RilDataProfile_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelephonyEvent_RilSetupDataCall::kRatFieldNumber;
const int TelephonyEvent_RilSetupDataCall::kDataProfileFieldNumber;
const int TelephonyEvent_RilSetupDataCall::kApnFieldNumber;
const int TelephonyEvent_RilSetupDataCall::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelephonyEvent_RilSetupDataCall::TelephonyEvent_RilSetupDataCall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
}

void TelephonyEvent_RilSetupDataCall::InitAsDefaultInstance() {
}

TelephonyEvent_RilSetupDataCall::TelephonyEvent_RilSetupDataCall(const TelephonyEvent_RilSetupDataCall& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
}

void TelephonyEvent_RilSetupDataCall::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rat_ = -1;
  data_profile_ = 0;
  apn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelephonyEvent_RilSetupDataCall::~TelephonyEvent_RilSetupDataCall() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
  SharedDtor();
}

void TelephonyEvent_RilSetupDataCall::SharedDtor() {
  apn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TelephonyEvent_RilSetupDataCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelephonyEvent_RilSetupDataCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyEvent_RilSetupDataCall_descriptor_;
}

const TelephonyEvent_RilSetupDataCall& TelephonyEvent_RilSetupDataCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

TelephonyEvent_RilSetupDataCall* TelephonyEvent_RilSetupDataCall::default_instance_ = NULL;

TelephonyEvent_RilSetupDataCall* TelephonyEvent_RilSetupDataCall::New(::google::protobuf::Arena* arena) const {
  TelephonyEvent_RilSetupDataCall* n = new TelephonyEvent_RilSetupDataCall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelephonyEvent_RilSetupDataCall::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
  if (_has_bits_[0 / 32] & 15u) {
    rat_ = -1;
    data_profile_ = 0;
    if (has_apn()) {
      apn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TelephonyEvent_RilSetupDataCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::RadioAccessTechnology_IsValid(value)) {
            set_rat(static_cast< ::clearcut::connectivity::RadioAccessTechnology >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_profile;
        break;
      }

      // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;
      case 2: {
        if (tag == 16) {
         parse_data_profile:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonyEvent_RilSetupDataCall_RilDataProfile_IsValid(value)) {
            set_data_profile(static_cast< ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall_RilDataProfile >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_apn;
        break;
      }

      // optional string apn = 3;
      case 3: {
        if (tag == 26) {
         parse_apn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->apn().data(), this->apn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .clearcut.connectivity.PdpType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::PdpType_IsValid(value)) {
            set_type(static_cast< ::clearcut::connectivity::PdpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
  return false;
#undef DO_
}

void TelephonyEvent_RilSetupDataCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
  // optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];
  if (has_rat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rat(), output);
  }

  // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;
  if (has_data_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_profile(), output);
  }

  // optional string apn = 3;
  if (has_apn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apn().data(), this->apn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->apn(), output);
  }

  // optional .clearcut.connectivity.PdpType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
}

::google::protobuf::uint8* TelephonyEvent_RilSetupDataCall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
  // optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];
  if (has_rat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rat(), target);
  }

  // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;
  if (has_data_profile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_profile(), target);
  }

  // optional string apn = 3;
  if (has_apn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apn().data(), this->apn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->apn(), target);
  }

  // optional .clearcut.connectivity.PdpType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
  return target;
}

int TelephonyEvent_RilSetupDataCall::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];
    if (has_rat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rat());
    }

    // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;
    if (has_data_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_profile());
    }

    // optional string apn = 3;
    if (has_apn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apn());
    }

    // optional .clearcut.connectivity.PdpType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelephonyEvent_RilSetupDataCall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TelephonyEvent_RilSetupDataCall* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TelephonyEvent_RilSetupDataCall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
    MergeFrom(*source);
  }
}

void TelephonyEvent_RilSetupDataCall::MergeFrom(const TelephonyEvent_RilSetupDataCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rat()) {
      set_rat(from.rat());
    }
    if (from.has_data_profile()) {
      set_data_profile(from.data_profile());
    }
    if (from.has_apn()) {
      set_has_apn();
      apn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apn_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TelephonyEvent_RilSetupDataCall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelephonyEvent_RilSetupDataCall::CopyFrom(const TelephonyEvent_RilSetupDataCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelephonyEvent_RilSetupDataCall::IsInitialized() const {

  return true;
}

void TelephonyEvent_RilSetupDataCall::Swap(TelephonyEvent_RilSetupDataCall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelephonyEvent_RilSetupDataCall::InternalSwap(TelephonyEvent_RilSetupDataCall* other) {
  std::swap(rat_, other->rat_);
  std::swap(data_profile_, other->data_profile_);
  apn_.Swap(&other->apn_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelephonyEvent_RilSetupDataCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelephonyEvent_RilSetupDataCall_descriptor_;
  metadata.reflection = TelephonyEvent_RilSetupDataCall_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_descriptor_;
}
bool TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_IsValid(int value) {
  switch(value) {
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
    case 1:
    case 8:
    case 14:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 65:
    case 66:
    case 81:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 65535:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_UNKNOWN;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_NONE;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_OPERATOR_BARRED;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_NAS_SIGNALLING;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_LLC_SNDCP;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_INSUFFICIENT_RESOURCES;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_MISSING_UKNOWN_APN;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_UNKNOWN_PDP_ADDRESS_TYPE;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_USER_AUTHENTICATION;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_ACTIVATION_REJECT_GGSN;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_ACTIVATION_REJECT_UNSPECIFIED;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_SERVICE_OPTION_NOT_SUPPORTED;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_SERVICE_OPTION_OUT_OF_ORDER;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_NSAPI_IN_USE;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_REGULAR_DEACTIVATION;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_QOS_NOT_ACCEPTED;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_NETWORK_FAILURE;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_UMTS_REACTIVATION_REQ;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_FEATURE_NOT_SUPP;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_TFT_SEMANTIC_ERROR;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_TFT_SYTAX_ERROR;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_UNKNOWN_PDP_CONTEXT;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_FILTER_SEMANTIC_ERROR;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_FILTER_SYTAX_ERROR;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_PDP_WITHOUT_ACTIVE_TFT;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_ONLY_IPV4_ALLOWED;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_ONLY_IPV6_ALLOWED;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_ESM_INFO_NOT_RECEIVED;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_PDN_CONN_DOES_NOT_EXIST;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_INVALID_TRANSACTION_ID;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_MESSAGE_INCORRECT_SEMANTIC;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_INVALID_MANDATORY_INFO;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_MESSAGE_TYPE_UNSUPPORTED;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_UNKNOWN_INFO_ELEMENT;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_CONDITIONAL_IE_ERROR;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_PROTOCOL_ERRORS;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_APN_TYPE_CONFLICT;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_INVALID_PCSCF_ADDR;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_EMM_ACCESS_BARRED;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_EMERGENCY_IFACE_ONLY;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_IFACE_MISMATCH;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_COMPANION_IFACE_IN_USE;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_IP_ADDRESS_MISMATCH;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_IFACE_AND_POL_FAMILY_MISMATCH;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_VOICE_REGISTRATION_FAIL;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_DATA_REGISTRATION_FAIL;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_SIGNAL_LOST;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_PREF_RADIO_TECH_CHANGED;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_RADIO_POWER_OFF;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_TETHERED_CALL_ACTIVE;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::PDP_FAIL_ERROR_UNSPECIFIED;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::RilDataCallFailCause_MIN;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::RilDataCallFailCause_MAX;
const int TelephonyEvent_RilSetupDataCallResponse::RilDataCallFailCause_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelephonyEvent_RilSetupDataCallResponse::kStatusFieldNumber;
const int TelephonyEvent_RilSetupDataCallResponse::kSuggestedRetryTimeMillisFieldNumber;
const int TelephonyEvent_RilSetupDataCallResponse::kCallFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelephonyEvent_RilSetupDataCallResponse::TelephonyEvent_RilSetupDataCallResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
}

void TelephonyEvent_RilSetupDataCallResponse::InitAsDefaultInstance() {
  call_ = const_cast< ::clearcut::connectivity::RilDataCall*>(&::clearcut::connectivity::RilDataCall::default_instance());
}

TelephonyEvent_RilSetupDataCallResponse::TelephonyEvent_RilSetupDataCallResponse(const TelephonyEvent_RilSetupDataCallResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
}

void TelephonyEvent_RilSetupDataCallResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  suggested_retry_time_millis_ = 0;
  call_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelephonyEvent_RilSetupDataCallResponse::~TelephonyEvent_RilSetupDataCallResponse() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
  SharedDtor();
}

void TelephonyEvent_RilSetupDataCallResponse::SharedDtor() {
  if (this != default_instance_) {
    delete call_;
  }
}

void TelephonyEvent_RilSetupDataCallResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelephonyEvent_RilSetupDataCallResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyEvent_RilSetupDataCallResponse_descriptor_;
}

const TelephonyEvent_RilSetupDataCallResponse& TelephonyEvent_RilSetupDataCallResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

TelephonyEvent_RilSetupDataCallResponse* TelephonyEvent_RilSetupDataCallResponse::default_instance_ = NULL;

TelephonyEvent_RilSetupDataCallResponse* TelephonyEvent_RilSetupDataCallResponse::New(::google::protobuf::Arena* arena) const {
  TelephonyEvent_RilSetupDataCallResponse* n = new TelephonyEvent_RilSetupDataCallResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelephonyEvent_RilSetupDataCallResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TelephonyEvent_RilSetupDataCallResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TelephonyEvent_RilSetupDataCallResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(status_, suggested_retry_time_millis_);
    if (has_call()) {
      if (call_ != NULL) call_->::clearcut::connectivity::RilDataCall::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TelephonyEvent_RilSetupDataCallResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_IsValid(value)) {
            set_status(static_cast< ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_suggested_retry_time_millis;
        break;
      }

      // optional int32 suggested_retry_time_millis = 2;
      case 2: {
        if (tag == 16) {
         parse_suggested_retry_time_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suggested_retry_time_millis_)));
          set_has_suggested_retry_time_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_call;
        break;
      }

      // optional .clearcut.connectivity.RilDataCall call = 3;
      case 3: {
        if (tag == 26) {
         parse_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
  return false;
#undef DO_
}

void TelephonyEvent_RilSetupDataCallResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
  // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional int32 suggested_retry_time_millis = 2;
  if (has_suggested_retry_time_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->suggested_retry_time_millis(), output);
  }

  // optional .clearcut.connectivity.RilDataCall call = 3;
  if (has_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->call_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
}

::google::protobuf::uint8* TelephonyEvent_RilSetupDataCallResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
  // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional int32 suggested_retry_time_millis = 2;
  if (has_suggested_retry_time_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->suggested_retry_time_millis(), target);
  }

  // optional .clearcut.connectivity.RilDataCall call = 3;
  if (has_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->call_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
  return target;
}

int TelephonyEvent_RilSetupDataCallResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 suggested_retry_time_millis = 2;
    if (has_suggested_retry_time_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suggested_retry_time_millis());
    }

    // optional .clearcut.connectivity.RilDataCall call = 3;
    if (has_call()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->call_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelephonyEvent_RilSetupDataCallResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TelephonyEvent_RilSetupDataCallResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TelephonyEvent_RilSetupDataCallResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
    MergeFrom(*source);
  }
}

void TelephonyEvent_RilSetupDataCallResponse::MergeFrom(const TelephonyEvent_RilSetupDataCallResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_suggested_retry_time_millis()) {
      set_suggested_retry_time_millis(from.suggested_retry_time_millis());
    }
    if (from.has_call()) {
      mutable_call()->::clearcut::connectivity::RilDataCall::MergeFrom(from.call());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TelephonyEvent_RilSetupDataCallResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelephonyEvent_RilSetupDataCallResponse::CopyFrom(const TelephonyEvent_RilSetupDataCallResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelephonyEvent_RilSetupDataCallResponse::IsInitialized() const {

  return true;
}

void TelephonyEvent_RilSetupDataCallResponse::Swap(TelephonyEvent_RilSetupDataCallResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelephonyEvent_RilSetupDataCallResponse::InternalSwap(TelephonyEvent_RilSetupDataCallResponse* other) {
  std::swap(status_, other->status_);
  std::swap(suggested_retry_time_millis_, other->suggested_retry_time_millis_);
  std::swap(call_, other->call_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelephonyEvent_RilSetupDataCallResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelephonyEvent_RilSetupDataCallResponse_descriptor_;
  metadata.reflection = TelephonyEvent_RilSetupDataCallResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* TelephonyEvent_RilDeactivateDataCall_DeactivateReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyEvent_RilDeactivateDataCall_DeactivateReason_descriptor_;
}
bool TelephonyEvent_RilDeactivateDataCall_DeactivateReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TelephonyEvent_RilDeactivateDataCall_DeactivateReason TelephonyEvent_RilDeactivateDataCall::DEACTIVATE_REASON_UNKNOWN;
const TelephonyEvent_RilDeactivateDataCall_DeactivateReason TelephonyEvent_RilDeactivateDataCall::DEACTIVATE_REASON_NONE;
const TelephonyEvent_RilDeactivateDataCall_DeactivateReason TelephonyEvent_RilDeactivateDataCall::DEACTIVATE_REASON_RADIO_OFF;
const TelephonyEvent_RilDeactivateDataCall_DeactivateReason TelephonyEvent_RilDeactivateDataCall::DEACTIVATE_REASON_PDP_RESET;
const TelephonyEvent_RilDeactivateDataCall_DeactivateReason TelephonyEvent_RilDeactivateDataCall::DeactivateReason_MIN;
const TelephonyEvent_RilDeactivateDataCall_DeactivateReason TelephonyEvent_RilDeactivateDataCall::DeactivateReason_MAX;
const int TelephonyEvent_RilDeactivateDataCall::DeactivateReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelephonyEvent_RilDeactivateDataCall::kCidFieldNumber;
const int TelephonyEvent_RilDeactivateDataCall::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelephonyEvent_RilDeactivateDataCall::TelephonyEvent_RilDeactivateDataCall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
}

void TelephonyEvent_RilDeactivateDataCall::InitAsDefaultInstance() {
}

TelephonyEvent_RilDeactivateDataCall::TelephonyEvent_RilDeactivateDataCall(const TelephonyEvent_RilDeactivateDataCall& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
}

void TelephonyEvent_RilDeactivateDataCall::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelephonyEvent_RilDeactivateDataCall::~TelephonyEvent_RilDeactivateDataCall() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
  SharedDtor();
}

void TelephonyEvent_RilDeactivateDataCall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TelephonyEvent_RilDeactivateDataCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelephonyEvent_RilDeactivateDataCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyEvent_RilDeactivateDataCall_descriptor_;
}

const TelephonyEvent_RilDeactivateDataCall& TelephonyEvent_RilDeactivateDataCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

TelephonyEvent_RilDeactivateDataCall* TelephonyEvent_RilDeactivateDataCall::default_instance_ = NULL;

TelephonyEvent_RilDeactivateDataCall* TelephonyEvent_RilDeactivateDataCall::New(::google::protobuf::Arena* arena) const {
  TelephonyEvent_RilDeactivateDataCall* n = new TelephonyEvent_RilDeactivateDataCall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelephonyEvent_RilDeactivateDataCall::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TelephonyEvent_RilDeactivateDataCall, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TelephonyEvent_RilDeactivateDataCall*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cid_, reason_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TelephonyEvent_RilDeactivateDataCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;
      case 2: {
        if (tag == 16) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall_DeactivateReason_IsValid(value)) {
            set_reason(static_cast< ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall_DeactivateReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
  return false;
#undef DO_
}

void TelephonyEvent_RilDeactivateDataCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
  // optional int32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cid(), output);
  }

  // optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
}

::google::protobuf::uint8* TelephonyEvent_RilDeactivateDataCall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
  // optional int32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cid(), target);
  }

  // optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
  return target;
}

int TelephonyEvent_RilDeactivateDataCall::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cid());
    }

    // optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelephonyEvent_RilDeactivateDataCall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TelephonyEvent_RilDeactivateDataCall* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TelephonyEvent_RilDeactivateDataCall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
    MergeFrom(*source);
  }
}

void TelephonyEvent_RilDeactivateDataCall::MergeFrom(const TelephonyEvent_RilDeactivateDataCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TelephonyEvent_RilDeactivateDataCall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelephonyEvent_RilDeactivateDataCall::CopyFrom(const TelephonyEvent_RilDeactivateDataCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelephonyEvent_RilDeactivateDataCall::IsInitialized() const {

  return true;
}

void TelephonyEvent_RilDeactivateDataCall::Swap(TelephonyEvent_RilDeactivateDataCall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelephonyEvent_RilDeactivateDataCall::InternalSwap(TelephonyEvent_RilDeactivateDataCall* other) {
  std::swap(cid_, other->cid_);
  std::swap(reason_, other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelephonyEvent_RilDeactivateDataCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelephonyEvent_RilDeactivateDataCall_descriptor_;
  metadata.reflection = TelephonyEvent_RilDeactivateDataCall_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelephonyEvent_ModemRestart::kBasebandVersionFieldNumber;
const int TelephonyEvent_ModemRestart::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelephonyEvent_ModemRestart::TelephonyEvent_ModemRestart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.TelephonyEvent.ModemRestart)
}

void TelephonyEvent_ModemRestart::InitAsDefaultInstance() {
}

TelephonyEvent_ModemRestart::TelephonyEvent_ModemRestart(const TelephonyEvent_ModemRestart& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.TelephonyEvent.ModemRestart)
}

void TelephonyEvent_ModemRestart::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  baseband_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelephonyEvent_ModemRestart::~TelephonyEvent_ModemRestart() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.TelephonyEvent.ModemRestart)
  SharedDtor();
}

void TelephonyEvent_ModemRestart::SharedDtor() {
  baseband_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TelephonyEvent_ModemRestart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelephonyEvent_ModemRestart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyEvent_ModemRestart_descriptor_;
}

const TelephonyEvent_ModemRestart& TelephonyEvent_ModemRestart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

TelephonyEvent_ModemRestart* TelephonyEvent_ModemRestart::default_instance_ = NULL;

TelephonyEvent_ModemRestart* TelephonyEvent_ModemRestart::New(::google::protobuf::Arena* arena) const {
  TelephonyEvent_ModemRestart* n = new TelephonyEvent_ModemRestart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelephonyEvent_ModemRestart::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.TelephonyEvent.ModemRestart)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseband_version()) {
      baseband_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TelephonyEvent_ModemRestart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.TelephonyEvent.ModemRestart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string baseband_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_baseband_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->baseband_version().data(), this->baseband_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clearcut.connectivity.TelephonyEvent.ModemRestart.reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.TelephonyEvent.ModemRestart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.TelephonyEvent.ModemRestart)
  return false;
#undef DO_
}

void TelephonyEvent_ModemRestart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.TelephonyEvent.ModemRestart)
  // optional string baseband_version = 1;
  if (has_baseband_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->baseband_version().data(), this->baseband_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->baseband_version(), output);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.TelephonyEvent.ModemRestart.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.TelephonyEvent.ModemRestart)
}

::google::protobuf::uint8* TelephonyEvent_ModemRestart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.TelephonyEvent.ModemRestart)
  // optional string baseband_version = 1;
  if (has_baseband_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->baseband_version().data(), this->baseband_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->baseband_version(), target);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clearcut.connectivity.TelephonyEvent.ModemRestart.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.TelephonyEvent.ModemRestart)
  return target;
}

int TelephonyEvent_ModemRestart::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.TelephonyEvent.ModemRestart)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string baseband_version = 1;
    if (has_baseband_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->baseband_version());
    }

    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelephonyEvent_ModemRestart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.TelephonyEvent.ModemRestart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TelephonyEvent_ModemRestart* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TelephonyEvent_ModemRestart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.TelephonyEvent.ModemRestart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.TelephonyEvent.ModemRestart)
    MergeFrom(*source);
  }
}

void TelephonyEvent_ModemRestart::MergeFrom(const TelephonyEvent_ModemRestart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.TelephonyEvent.ModemRestart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseband_version()) {
      set_has_baseband_version();
      baseband_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.baseband_version_);
    }
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TelephonyEvent_ModemRestart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.TelephonyEvent.ModemRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelephonyEvent_ModemRestart::CopyFrom(const TelephonyEvent_ModemRestart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.TelephonyEvent.ModemRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelephonyEvent_ModemRestart::IsInitialized() const {

  return true;
}

void TelephonyEvent_ModemRestart::Swap(TelephonyEvent_ModemRestart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelephonyEvent_ModemRestart::InternalSwap(TelephonyEvent_ModemRestart* other) {
  baseband_version_.Swap(&other->baseband_version_);
  reason_.Swap(&other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelephonyEvent_ModemRestart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelephonyEvent_ModemRestart_descriptor_;
  metadata.reflection = TelephonyEvent_ModemRestart_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelephonyEvent::kTimestampMillisFieldNumber;
const int TelephonyEvent::kPhoneIdFieldNumber;
const int TelephonyEvent::kTypeFieldNumber;
const int TelephonyEvent::kSettingsFieldNumber;
const int TelephonyEvent::kServiceStateFieldNumber;
const int TelephonyEvent::kImsConnectionStateFieldNumber;
const int TelephonyEvent::kImsCapabilitiesFieldNumber;
const int TelephonyEvent::kDataCallsFieldNumber;
const int TelephonyEvent::kErrorFieldNumber;
const int TelephonyEvent::kSetupDataCallFieldNumber;
const int TelephonyEvent::kSetupDataCallResponseFieldNumber;
const int TelephonyEvent::kDeactivateDataCallFieldNumber;
const int TelephonyEvent::kDataStallActionFieldNumber;
const int TelephonyEvent::kModemRestartFieldNumber;
const int TelephonyEvent::kNitzTimestampMillisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelephonyEvent::TelephonyEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.TelephonyEvent)
}

void TelephonyEvent::InitAsDefaultInstance() {
  settings_ = const_cast< ::clearcut::connectivity::TelephonySettings*>(&::clearcut::connectivity::TelephonySettings::default_instance());
  service_state_ = const_cast< ::clearcut::connectivity::TelephonyServiceState*>(&::clearcut::connectivity::TelephonyServiceState::default_instance());
  ims_connection_state_ = const_cast< ::clearcut::connectivity::ImsConnectionState*>(&::clearcut::connectivity::ImsConnectionState::default_instance());
  ims_capabilities_ = const_cast< ::clearcut::connectivity::ImsCapabilities*>(&::clearcut::connectivity::ImsCapabilities::default_instance());
  setup_data_call_ = const_cast< ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall*>(&::clearcut::connectivity::TelephonyEvent_RilSetupDataCall::default_instance());
  setup_data_call_response_ = const_cast< ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse*>(&::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse::default_instance());
  deactivate_data_call_ = const_cast< ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall*>(&::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall::default_instance());
  modem_restart_ = const_cast< ::clearcut::connectivity::TelephonyEvent_ModemRestart*>(&::clearcut::connectivity::TelephonyEvent_ModemRestart::default_instance());
}

TelephonyEvent::TelephonyEvent(const TelephonyEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.TelephonyEvent)
}

void TelephonyEvent::SharedCtor() {
  _cached_size_ = 0;
  timestamp_millis_ = GOOGLE_LONGLONG(0);
  phone_id_ = 0;
  type_ = 0;
  settings_ = NULL;
  service_state_ = NULL;
  ims_connection_state_ = NULL;
  ims_capabilities_ = NULL;
  error_ = 0;
  setup_data_call_ = NULL;
  setup_data_call_response_ = NULL;
  deactivate_data_call_ = NULL;
  data_stall_action_ = 0;
  modem_restart_ = NULL;
  nitz_timestamp_millis_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelephonyEvent::~TelephonyEvent() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.TelephonyEvent)
  SharedDtor();
}

void TelephonyEvent::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
    delete service_state_;
    delete ims_connection_state_;
    delete ims_capabilities_;
    delete setup_data_call_;
    delete setup_data_call_response_;
    delete deactivate_data_call_;
    delete modem_restart_;
  }
}

void TelephonyEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelephonyEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyEvent_descriptor_;
}

const TelephonyEvent& TelephonyEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

TelephonyEvent* TelephonyEvent::default_instance_ = NULL;

TelephonyEvent* TelephonyEvent::New(::google::protobuf::Arena* arena) const {
  TelephonyEvent* n = new TelephonyEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelephonyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.TelephonyEvent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TelephonyEvent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TelephonyEvent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(timestamp_millis_, type_);
    if (has_settings()) {
      if (settings_ != NULL) settings_->::clearcut::connectivity::TelephonySettings::Clear();
    }
    if (has_service_state()) {
      if (service_state_ != NULL) service_state_->::clearcut::connectivity::TelephonyServiceState::Clear();
    }
    if (has_ims_connection_state()) {
      if (ims_connection_state_ != NULL) ims_connection_state_->::clearcut::connectivity::ImsConnectionState::Clear();
    }
    if (has_ims_capabilities()) {
      if (ims_capabilities_ != NULL) ims_capabilities_->::clearcut::connectivity::ImsCapabilities::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ZR_(error_, data_stall_action_);
    if (has_setup_data_call()) {
      if (setup_data_call_ != NULL) setup_data_call_->::clearcut::connectivity::TelephonyEvent_RilSetupDataCall::Clear();
    }
    if (has_setup_data_call_response()) {
      if (setup_data_call_response_ != NULL) setup_data_call_response_->::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse::Clear();
    }
    if (has_deactivate_data_call()) {
      if (deactivate_data_call_ != NULL) deactivate_data_call_->::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall::Clear();
    }
    if (has_modem_restart()) {
      if (modem_restart_ != NULL) modem_restart_->::clearcut::connectivity::TelephonyEvent_ModemRestart::Clear();
    }
    nitz_timestamp_millis_ = GOOGLE_LONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  data_calls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TelephonyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.TelephonyEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_millis = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_millis_)));
          set_has_timestamp_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_phone_id;
        break;
      }

      // optional int32 phone_id = 2;
      case 2: {
        if (tag == 16) {
         parse_phone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phone_id_)));
          set_has_phone_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .clearcut.connectivity.TelephonyEvent.Type type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonyEvent_Type_IsValid(value)) {
            set_type(static_cast< ::clearcut::connectivity::TelephonyEvent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_settings;
        break;
      }

      // optional .clearcut.connectivity.TelephonySettings settings = 4;
      case 4: {
        if (tag == 34) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_service_state;
        break;
      }

      // optional .clearcut.connectivity.TelephonyServiceState service_state = 5;
      case 5: {
        if (tag == 42) {
         parse_service_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ims_connection_state;
        break;
      }

      // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;
      case 6: {
        if (tag == 50) {
         parse_ims_connection_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ims_connection_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ims_capabilities;
        break;
      }

      // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;
      case 7: {
        if (tag == 58) {
         parse_ims_capabilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ims_capabilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data_calls;
        break;
      }

      // repeated .clearcut.connectivity.RilDataCall data_calls = 8;
      case 8: {
        if (tag == 66) {
         parse_data_calls:
          DO_(input->IncrementRecursionDepth());
         parse_loop_data_calls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data_calls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_data_calls;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(72)) goto parse_error;
        break;
      }

      // optional .clearcut.connectivity.RilErrno error = 9;
      case 9: {
        if (tag == 72) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::RilErrno_IsValid(value)) {
            set_error(static_cast< ::clearcut::connectivity::RilErrno >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_setup_data_call;
        break;
      }

      // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;
      case 10: {
        if (tag == 82) {
         parse_setup_data_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setup_data_call()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_setup_data_call_response;
        break;
      }

      // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;
      case 11: {
        if (tag == 90) {
         parse_setup_data_call_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setup_data_call_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_deactivate_data_call;
        break;
      }

      // optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;
      case 12: {
        if (tag == 98) {
         parse_deactivate_data_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deactivate_data_call()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_data_stall_action;
        break;
      }

      // optional int32 data_stall_action = 13;
      case 13: {
        if (tag == 104) {
         parse_data_stall_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_stall_action_)));
          set_has_data_stall_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_modem_restart;
        break;
      }

      // optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;
      case 14: {
        if (tag == 114) {
         parse_modem_restart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modem_restart()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_nitz_timestamp_millis;
        break;
      }

      // optional int64 nitz_timestamp_millis = 15;
      case 15: {
        if (tag == 120) {
         parse_nitz_timestamp_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nitz_timestamp_millis_)));
          set_has_nitz_timestamp_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.TelephonyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.TelephonyEvent)
  return false;
#undef DO_
}

void TelephonyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.TelephonyEvent)
  // optional int64 timestamp_millis = 1;
  if (has_timestamp_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_millis(), output);
  }

  // optional int32 phone_id = 2;
  if (has_phone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->phone_id(), output);
  }

  // optional .clearcut.connectivity.TelephonyEvent.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .clearcut.connectivity.TelephonySettings settings = 4;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->settings_, output);
  }

  // optional .clearcut.connectivity.TelephonyServiceState service_state = 5;
  if (has_service_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->service_state_, output);
  }

  // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;
  if (has_ims_connection_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ims_connection_state_, output);
  }

  // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;
  if (has_ims_capabilities()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->ims_capabilities_, output);
  }

  // repeated .clearcut.connectivity.RilDataCall data_calls = 8;
  for (unsigned int i = 0, n = this->data_calls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->data_calls(i), output);
  }

  // optional .clearcut.connectivity.RilErrno error = 9;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->error(), output);
  }

  // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;
  if (has_setup_data_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->setup_data_call_, output);
  }

  // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;
  if (has_setup_data_call_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->setup_data_call_response_, output);
  }

  // optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;
  if (has_deactivate_data_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->deactivate_data_call_, output);
  }

  // optional int32 data_stall_action = 13;
  if (has_data_stall_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->data_stall_action(), output);
  }

  // optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;
  if (has_modem_restart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->modem_restart_, output);
  }

  // optional int64 nitz_timestamp_millis = 15;
  if (has_nitz_timestamp_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->nitz_timestamp_millis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.TelephonyEvent)
}

::google::protobuf::uint8* TelephonyEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.TelephonyEvent)
  // optional int64 timestamp_millis = 1;
  if (has_timestamp_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp_millis(), target);
  }

  // optional int32 phone_id = 2;
  if (has_phone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->phone_id(), target);
  }

  // optional .clearcut.connectivity.TelephonyEvent.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .clearcut.connectivity.TelephonySettings settings = 4;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->settings_, false, target);
  }

  // optional .clearcut.connectivity.TelephonyServiceState service_state = 5;
  if (has_service_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->service_state_, false, target);
  }

  // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;
  if (has_ims_connection_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ims_connection_state_, false, target);
  }

  // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;
  if (has_ims_capabilities()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->ims_capabilities_, false, target);
  }

  // repeated .clearcut.connectivity.RilDataCall data_calls = 8;
  for (unsigned int i = 0, n = this->data_calls_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->data_calls(i), false, target);
  }

  // optional .clearcut.connectivity.RilErrno error = 9;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->error(), target);
  }

  // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;
  if (has_setup_data_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->setup_data_call_, false, target);
  }

  // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;
  if (has_setup_data_call_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->setup_data_call_response_, false, target);
  }

  // optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;
  if (has_deactivate_data_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->deactivate_data_call_, false, target);
  }

  // optional int32 data_stall_action = 13;
  if (has_data_stall_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->data_stall_action(), target);
  }

  // optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;
  if (has_modem_restart()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->modem_restart_, false, target);
  }

  // optional int64 nitz_timestamp_millis = 15;
  if (has_nitz_timestamp_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->nitz_timestamp_millis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.TelephonyEvent)
  return target;
}

int TelephonyEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.TelephonyEvent)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional int64 timestamp_millis = 1;
    if (has_timestamp_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_millis());
    }

    // optional int32 phone_id = 2;
    if (has_phone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phone_id());
    }

    // optional .clearcut.connectivity.TelephonyEvent.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .clearcut.connectivity.TelephonySettings settings = 4;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->settings_);
    }

    // optional .clearcut.connectivity.TelephonyServiceState service_state = 5;
    if (has_service_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->service_state_);
    }

    // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;
    if (has_ims_connection_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ims_connection_state_);
    }

    // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;
    if (has_ims_capabilities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ims_capabilities_);
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional .clearcut.connectivity.RilErrno error = 9;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;
    if (has_setup_data_call()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->setup_data_call_);
    }

    // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;
    if (has_setup_data_call_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->setup_data_call_response_);
    }

    // optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;
    if (has_deactivate_data_call()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->deactivate_data_call_);
    }

    // optional int32 data_stall_action = 13;
    if (has_data_stall_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_stall_action());
    }

    // optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;
    if (has_modem_restart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->modem_restart_);
    }

    // optional int64 nitz_timestamp_millis = 15;
    if (has_nitz_timestamp_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nitz_timestamp_millis());
    }

  }
  // repeated .clearcut.connectivity.RilDataCall data_calls = 8;
  total_size += 1 * this->data_calls_size();
  for (int i = 0; i < this->data_calls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_calls(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelephonyEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.TelephonyEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TelephonyEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TelephonyEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.TelephonyEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.TelephonyEvent)
    MergeFrom(*source);
  }
}

void TelephonyEvent::MergeFrom(const TelephonyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.TelephonyEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_calls_.MergeFrom(from.data_calls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_millis()) {
      set_timestamp_millis(from.timestamp_millis());
    }
    if (from.has_phone_id()) {
      set_phone_id(from.phone_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_settings()) {
      mutable_settings()->::clearcut::connectivity::TelephonySettings::MergeFrom(from.settings());
    }
    if (from.has_service_state()) {
      mutable_service_state()->::clearcut::connectivity::TelephonyServiceState::MergeFrom(from.service_state());
    }
    if (from.has_ims_connection_state()) {
      mutable_ims_connection_state()->::clearcut::connectivity::ImsConnectionState::MergeFrom(from.ims_connection_state());
    }
    if (from.has_ims_capabilities()) {
      mutable_ims_capabilities()->::clearcut::connectivity::ImsCapabilities::MergeFrom(from.ims_capabilities());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_setup_data_call()) {
      mutable_setup_data_call()->::clearcut::connectivity::TelephonyEvent_RilSetupDataCall::MergeFrom(from.setup_data_call());
    }
    if (from.has_setup_data_call_response()) {
      mutable_setup_data_call_response()->::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse::MergeFrom(from.setup_data_call_response());
    }
    if (from.has_deactivate_data_call()) {
      mutable_deactivate_data_call()->::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall::MergeFrom(from.deactivate_data_call());
    }
    if (from.has_data_stall_action()) {
      set_data_stall_action(from.data_stall_action());
    }
    if (from.has_modem_restart()) {
      mutable_modem_restart()->::clearcut::connectivity::TelephonyEvent_ModemRestart::MergeFrom(from.modem_restart());
    }
    if (from.has_nitz_timestamp_millis()) {
      set_nitz_timestamp_millis(from.nitz_timestamp_millis());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TelephonyEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.TelephonyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelephonyEvent::CopyFrom(const TelephonyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.TelephonyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelephonyEvent::IsInitialized() const {

  return true;
}

void TelephonyEvent::Swap(TelephonyEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelephonyEvent::InternalSwap(TelephonyEvent* other) {
  std::swap(timestamp_millis_, other->timestamp_millis_);
  std::swap(phone_id_, other->phone_id_);
  std::swap(type_, other->type_);
  std::swap(settings_, other->settings_);
  std::swap(service_state_, other->service_state_);
  std::swap(ims_connection_state_, other->ims_connection_state_);
  std::swap(ims_capabilities_, other->ims_capabilities_);
  data_calls_.UnsafeArenaSwap(&other->data_calls_);
  std::swap(error_, other->error_);
  std::swap(setup_data_call_, other->setup_data_call_);
  std::swap(setup_data_call_response_, other->setup_data_call_response_);
  std::swap(deactivate_data_call_, other->deactivate_data_call_);
  std::swap(data_stall_action_, other->data_stall_action_);
  std::swap(modem_restart_, other->modem_restart_);
  std::swap(nitz_timestamp_millis_, other->nitz_timestamp_millis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelephonyEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelephonyEvent_descriptor_;
  metadata.reflection = TelephonyEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TelephonyEvent_RilSetupDataCall

// optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];
bool TelephonyEvent_RilSetupDataCall::has_rat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TelephonyEvent_RilSetupDataCall::set_has_rat() {
  _has_bits_[0] |= 0x00000001u;
}
void TelephonyEvent_RilSetupDataCall::clear_has_rat() {
  _has_bits_[0] &= ~0x00000001u;
}
void TelephonyEvent_RilSetupDataCall::clear_rat() {
  rat_ = -1;
  clear_has_rat();
}
 ::clearcut::connectivity::RadioAccessTechnology TelephonyEvent_RilSetupDataCall::rat() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.rat)
  return static_cast< ::clearcut::connectivity::RadioAccessTechnology >(rat_);
}
 void TelephonyEvent_RilSetupDataCall::set_rat(::clearcut::connectivity::RadioAccessTechnology value) {
  assert(::clearcut::connectivity::RadioAccessTechnology_IsValid(value));
  set_has_rat();
  rat_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.rat)
}

// optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;
bool TelephonyEvent_RilSetupDataCall::has_data_profile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TelephonyEvent_RilSetupDataCall::set_has_data_profile() {
  _has_bits_[0] |= 0x00000002u;
}
void TelephonyEvent_RilSetupDataCall::clear_has_data_profile() {
  _has_bits_[0] &= ~0x00000002u;
}
void TelephonyEvent_RilSetupDataCall::clear_data_profile() {
  data_profile_ = 0;
  clear_has_data_profile();
}
 ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall_RilDataProfile TelephonyEvent_RilSetupDataCall::data_profile() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.data_profile)
  return static_cast< ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall_RilDataProfile >(data_profile_);
}
 void TelephonyEvent_RilSetupDataCall::set_data_profile(::clearcut::connectivity::TelephonyEvent_RilSetupDataCall_RilDataProfile value) {
  assert(::clearcut::connectivity::TelephonyEvent_RilSetupDataCall_RilDataProfile_IsValid(value));
  set_has_data_profile();
  data_profile_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.data_profile)
}

// optional string apn = 3;
bool TelephonyEvent_RilSetupDataCall::has_apn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TelephonyEvent_RilSetupDataCall::set_has_apn() {
  _has_bits_[0] |= 0x00000004u;
}
void TelephonyEvent_RilSetupDataCall::clear_has_apn() {
  _has_bits_[0] &= ~0x00000004u;
}
void TelephonyEvent_RilSetupDataCall::clear_apn() {
  apn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_apn();
}
 const ::std::string& TelephonyEvent_RilSetupDataCall::apn() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn)
  return apn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelephonyEvent_RilSetupDataCall::set_apn(const ::std::string& value) {
  set_has_apn();
  apn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn)
}
 void TelephonyEvent_RilSetupDataCall::set_apn(const char* value) {
  set_has_apn();
  apn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn)
}
 void TelephonyEvent_RilSetupDataCall::set_apn(const char* value, size_t size) {
  set_has_apn();
  apn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn)
}
 ::std::string* TelephonyEvent_RilSetupDataCall::mutable_apn() {
  set_has_apn();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn)
  return apn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TelephonyEvent_RilSetupDataCall::release_apn() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn)
  clear_has_apn();
  return apn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelephonyEvent_RilSetupDataCall::set_allocated_apn(::std::string* apn) {
  if (apn != NULL) {
    set_has_apn();
  } else {
    clear_has_apn();
  }
  apn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apn);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn)
}

// optional .clearcut.connectivity.PdpType type = 4;
bool TelephonyEvent_RilSetupDataCall::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TelephonyEvent_RilSetupDataCall::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void TelephonyEvent_RilSetupDataCall::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void TelephonyEvent_RilSetupDataCall::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::clearcut::connectivity::PdpType TelephonyEvent_RilSetupDataCall::type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.type)
  return static_cast< ::clearcut::connectivity::PdpType >(type_);
}
 void TelephonyEvent_RilSetupDataCall::set_type(::clearcut::connectivity::PdpType value) {
  assert(::clearcut::connectivity::PdpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.type)
}

// -------------------------------------------------------------------

// TelephonyEvent_RilSetupDataCallResponse

// optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;
bool TelephonyEvent_RilSetupDataCallResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TelephonyEvent_RilSetupDataCallResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void TelephonyEvent_RilSetupDataCallResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void TelephonyEvent_RilSetupDataCallResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::status() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.status)
  return static_cast< ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause >(status_);
}
 void TelephonyEvent_RilSetupDataCallResponse::set_status(::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause value) {
  assert(::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.status)
}

// optional int32 suggested_retry_time_millis = 2;
bool TelephonyEvent_RilSetupDataCallResponse::has_suggested_retry_time_millis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TelephonyEvent_RilSetupDataCallResponse::set_has_suggested_retry_time_millis() {
  _has_bits_[0] |= 0x00000002u;
}
void TelephonyEvent_RilSetupDataCallResponse::clear_has_suggested_retry_time_millis() {
  _has_bits_[0] &= ~0x00000002u;
}
void TelephonyEvent_RilSetupDataCallResponse::clear_suggested_retry_time_millis() {
  suggested_retry_time_millis_ = 0;
  clear_has_suggested_retry_time_millis();
}
 ::google::protobuf::int32 TelephonyEvent_RilSetupDataCallResponse::suggested_retry_time_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.suggested_retry_time_millis)
  return suggested_retry_time_millis_;
}
 void TelephonyEvent_RilSetupDataCallResponse::set_suggested_retry_time_millis(::google::protobuf::int32 value) {
  set_has_suggested_retry_time_millis();
  suggested_retry_time_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.suggested_retry_time_millis)
}

// optional .clearcut.connectivity.RilDataCall call = 3;
bool TelephonyEvent_RilSetupDataCallResponse::has_call() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TelephonyEvent_RilSetupDataCallResponse::set_has_call() {
  _has_bits_[0] |= 0x00000004u;
}
void TelephonyEvent_RilSetupDataCallResponse::clear_has_call() {
  _has_bits_[0] &= ~0x00000004u;
}
void TelephonyEvent_RilSetupDataCallResponse::clear_call() {
  if (call_ != NULL) call_->::clearcut::connectivity::RilDataCall::Clear();
  clear_has_call();
}
const ::clearcut::connectivity::RilDataCall& TelephonyEvent_RilSetupDataCallResponse::call() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.call)
  return call_ != NULL ? *call_ : *default_instance_->call_;
}
::clearcut::connectivity::RilDataCall* TelephonyEvent_RilSetupDataCallResponse::mutable_call() {
  set_has_call();
  if (call_ == NULL) {
    call_ = new ::clearcut::connectivity::RilDataCall;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.call)
  return call_;
}
::clearcut::connectivity::RilDataCall* TelephonyEvent_RilSetupDataCallResponse::release_call() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.call)
  clear_has_call();
  ::clearcut::connectivity::RilDataCall* temp = call_;
  call_ = NULL;
  return temp;
}
void TelephonyEvent_RilSetupDataCallResponse::set_allocated_call(::clearcut::connectivity::RilDataCall* call) {
  delete call_;
  call_ = call;
  if (call) {
    set_has_call();
  } else {
    clear_has_call();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.call)
}

// -------------------------------------------------------------------

// TelephonyEvent_RilDeactivateDataCall

// optional int32 cid = 1;
bool TelephonyEvent_RilDeactivateDataCall::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TelephonyEvent_RilDeactivateDataCall::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
void TelephonyEvent_RilDeactivateDataCall::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TelephonyEvent_RilDeactivateDataCall::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
 ::google::protobuf::int32 TelephonyEvent_RilDeactivateDataCall::cid() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.cid)
  return cid_;
}
 void TelephonyEvent_RilDeactivateDataCall::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.cid)
}

// optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;
bool TelephonyEvent_RilDeactivateDataCall::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TelephonyEvent_RilDeactivateDataCall::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
void TelephonyEvent_RilDeactivateDataCall::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
void TelephonyEvent_RilDeactivateDataCall::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
 ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall_DeactivateReason TelephonyEvent_RilDeactivateDataCall::reason() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.reason)
  return static_cast< ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall_DeactivateReason >(reason_);
}
 void TelephonyEvent_RilDeactivateDataCall::set_reason(::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall_DeactivateReason value) {
  assert(::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall_DeactivateReason_IsValid(value));
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.reason)
}

// -------------------------------------------------------------------

// TelephonyEvent_ModemRestart

// optional string baseband_version = 1;
bool TelephonyEvent_ModemRestart::has_baseband_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TelephonyEvent_ModemRestart::set_has_baseband_version() {
  _has_bits_[0] |= 0x00000001u;
}
void TelephonyEvent_ModemRestart::clear_has_baseband_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void TelephonyEvent_ModemRestart::clear_baseband_version() {
  baseband_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_baseband_version();
}
 const ::std::string& TelephonyEvent_ModemRestart::baseband_version() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version)
  return baseband_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelephonyEvent_ModemRestart::set_baseband_version(const ::std::string& value) {
  set_has_baseband_version();
  baseband_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version)
}
 void TelephonyEvent_ModemRestart::set_baseband_version(const char* value) {
  set_has_baseband_version();
  baseband_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version)
}
 void TelephonyEvent_ModemRestart::set_baseband_version(const char* value, size_t size) {
  set_has_baseband_version();
  baseband_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version)
}
 ::std::string* TelephonyEvent_ModemRestart::mutable_baseband_version() {
  set_has_baseband_version();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version)
  return baseband_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TelephonyEvent_ModemRestart::release_baseband_version() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version)
  clear_has_baseband_version();
  return baseband_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelephonyEvent_ModemRestart::set_allocated_baseband_version(::std::string* baseband_version) {
  if (baseband_version != NULL) {
    set_has_baseband_version();
  } else {
    clear_has_baseband_version();
  }
  baseband_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), baseband_version);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version)
}

// optional string reason = 2;
bool TelephonyEvent_ModemRestart::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TelephonyEvent_ModemRestart::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
void TelephonyEvent_ModemRestart::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
void TelephonyEvent_ModemRestart::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& TelephonyEvent_ModemRestart::reason() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.ModemRestart.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelephonyEvent_ModemRestart::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.ModemRestart.reason)
}
 void TelephonyEvent_ModemRestart::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.TelephonyEvent.ModemRestart.reason)
}
 void TelephonyEvent_ModemRestart::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.TelephonyEvent.ModemRestart.reason)
}
 ::std::string* TelephonyEvent_ModemRestart::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.ModemRestart.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TelephonyEvent_ModemRestart::release_reason() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.ModemRestart.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelephonyEvent_ModemRestart::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.ModemRestart.reason)
}

// -------------------------------------------------------------------

// TelephonyEvent

// optional int64 timestamp_millis = 1;
bool TelephonyEvent::has_timestamp_millis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TelephonyEvent::set_has_timestamp_millis() {
  _has_bits_[0] |= 0x00000001u;
}
void TelephonyEvent::clear_has_timestamp_millis() {
  _has_bits_[0] &= ~0x00000001u;
}
void TelephonyEvent::clear_timestamp_millis() {
  timestamp_millis_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_millis();
}
 ::google::protobuf::int64 TelephonyEvent::timestamp_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.timestamp_millis)
  return timestamp_millis_;
}
 void TelephonyEvent::set_timestamp_millis(::google::protobuf::int64 value) {
  set_has_timestamp_millis();
  timestamp_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.timestamp_millis)
}

// optional int32 phone_id = 2;
bool TelephonyEvent::has_phone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TelephonyEvent::set_has_phone_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TelephonyEvent::clear_has_phone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TelephonyEvent::clear_phone_id() {
  phone_id_ = 0;
  clear_has_phone_id();
}
 ::google::protobuf::int32 TelephonyEvent::phone_id() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.phone_id)
  return phone_id_;
}
 void TelephonyEvent::set_phone_id(::google::protobuf::int32 value) {
  set_has_phone_id();
  phone_id_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.phone_id)
}

// optional .clearcut.connectivity.TelephonyEvent.Type type = 3;
bool TelephonyEvent::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TelephonyEvent::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void TelephonyEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void TelephonyEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::clearcut::connectivity::TelephonyEvent_Type TelephonyEvent::type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.type)
  return static_cast< ::clearcut::connectivity::TelephonyEvent_Type >(type_);
}
 void TelephonyEvent::set_type(::clearcut::connectivity::TelephonyEvent_Type value) {
  assert(::clearcut::connectivity::TelephonyEvent_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.type)
}

// optional .clearcut.connectivity.TelephonySettings settings = 4;
bool TelephonyEvent::has_settings() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TelephonyEvent::set_has_settings() {
  _has_bits_[0] |= 0x00000008u;
}
void TelephonyEvent::clear_has_settings() {
  _has_bits_[0] &= ~0x00000008u;
}
void TelephonyEvent::clear_settings() {
  if (settings_ != NULL) settings_->::clearcut::connectivity::TelephonySettings::Clear();
  clear_has_settings();
}
const ::clearcut::connectivity::TelephonySettings& TelephonyEvent::settings() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
::clearcut::connectivity::TelephonySettings* TelephonyEvent::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) {
    settings_ = new ::clearcut::connectivity::TelephonySettings;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.settings)
  return settings_;
}
::clearcut::connectivity::TelephonySettings* TelephonyEvent::release_settings() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.settings)
  clear_has_settings();
  ::clearcut::connectivity::TelephonySettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
void TelephonyEvent::set_allocated_settings(::clearcut::connectivity::TelephonySettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.settings)
}

// optional .clearcut.connectivity.TelephonyServiceState service_state = 5;
bool TelephonyEvent::has_service_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TelephonyEvent::set_has_service_state() {
  _has_bits_[0] |= 0x00000010u;
}
void TelephonyEvent::clear_has_service_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void TelephonyEvent::clear_service_state() {
  if (service_state_ != NULL) service_state_->::clearcut::connectivity::TelephonyServiceState::Clear();
  clear_has_service_state();
}
const ::clearcut::connectivity::TelephonyServiceState& TelephonyEvent::service_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.service_state)
  return service_state_ != NULL ? *service_state_ : *default_instance_->service_state_;
}
::clearcut::connectivity::TelephonyServiceState* TelephonyEvent::mutable_service_state() {
  set_has_service_state();
  if (service_state_ == NULL) {
    service_state_ = new ::clearcut::connectivity::TelephonyServiceState;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.service_state)
  return service_state_;
}
::clearcut::connectivity::TelephonyServiceState* TelephonyEvent::release_service_state() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.service_state)
  clear_has_service_state();
  ::clearcut::connectivity::TelephonyServiceState* temp = service_state_;
  service_state_ = NULL;
  return temp;
}
void TelephonyEvent::set_allocated_service_state(::clearcut::connectivity::TelephonyServiceState* service_state) {
  delete service_state_;
  service_state_ = service_state;
  if (service_state) {
    set_has_service_state();
  } else {
    clear_has_service_state();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.service_state)
}

// optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;
bool TelephonyEvent::has_ims_connection_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TelephonyEvent::set_has_ims_connection_state() {
  _has_bits_[0] |= 0x00000020u;
}
void TelephonyEvent::clear_has_ims_connection_state() {
  _has_bits_[0] &= ~0x00000020u;
}
void TelephonyEvent::clear_ims_connection_state() {
  if (ims_connection_state_ != NULL) ims_connection_state_->::clearcut::connectivity::ImsConnectionState::Clear();
  clear_has_ims_connection_state();
}
const ::clearcut::connectivity::ImsConnectionState& TelephonyEvent::ims_connection_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.ims_connection_state)
  return ims_connection_state_ != NULL ? *ims_connection_state_ : *default_instance_->ims_connection_state_;
}
::clearcut::connectivity::ImsConnectionState* TelephonyEvent::mutable_ims_connection_state() {
  set_has_ims_connection_state();
  if (ims_connection_state_ == NULL) {
    ims_connection_state_ = new ::clearcut::connectivity::ImsConnectionState;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.ims_connection_state)
  return ims_connection_state_;
}
::clearcut::connectivity::ImsConnectionState* TelephonyEvent::release_ims_connection_state() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.ims_connection_state)
  clear_has_ims_connection_state();
  ::clearcut::connectivity::ImsConnectionState* temp = ims_connection_state_;
  ims_connection_state_ = NULL;
  return temp;
}
void TelephonyEvent::set_allocated_ims_connection_state(::clearcut::connectivity::ImsConnectionState* ims_connection_state) {
  delete ims_connection_state_;
  ims_connection_state_ = ims_connection_state;
  if (ims_connection_state) {
    set_has_ims_connection_state();
  } else {
    clear_has_ims_connection_state();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.ims_connection_state)
}

// optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;
bool TelephonyEvent::has_ims_capabilities() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TelephonyEvent::set_has_ims_capabilities() {
  _has_bits_[0] |= 0x00000040u;
}
void TelephonyEvent::clear_has_ims_capabilities() {
  _has_bits_[0] &= ~0x00000040u;
}
void TelephonyEvent::clear_ims_capabilities() {
  if (ims_capabilities_ != NULL) ims_capabilities_->::clearcut::connectivity::ImsCapabilities::Clear();
  clear_has_ims_capabilities();
}
const ::clearcut::connectivity::ImsCapabilities& TelephonyEvent::ims_capabilities() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.ims_capabilities)
  return ims_capabilities_ != NULL ? *ims_capabilities_ : *default_instance_->ims_capabilities_;
}
::clearcut::connectivity::ImsCapabilities* TelephonyEvent::mutable_ims_capabilities() {
  set_has_ims_capabilities();
  if (ims_capabilities_ == NULL) {
    ims_capabilities_ = new ::clearcut::connectivity::ImsCapabilities;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.ims_capabilities)
  return ims_capabilities_;
}
::clearcut::connectivity::ImsCapabilities* TelephonyEvent::release_ims_capabilities() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.ims_capabilities)
  clear_has_ims_capabilities();
  ::clearcut::connectivity::ImsCapabilities* temp = ims_capabilities_;
  ims_capabilities_ = NULL;
  return temp;
}
void TelephonyEvent::set_allocated_ims_capabilities(::clearcut::connectivity::ImsCapabilities* ims_capabilities) {
  delete ims_capabilities_;
  ims_capabilities_ = ims_capabilities;
  if (ims_capabilities) {
    set_has_ims_capabilities();
  } else {
    clear_has_ims_capabilities();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.ims_capabilities)
}

// repeated .clearcut.connectivity.RilDataCall data_calls = 8;
int TelephonyEvent::data_calls_size() const {
  return data_calls_.size();
}
void TelephonyEvent::clear_data_calls() {
  data_calls_.Clear();
}
const ::clearcut::connectivity::RilDataCall& TelephonyEvent::data_calls(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.data_calls)
  return data_calls_.Get(index);
}
::clearcut::connectivity::RilDataCall* TelephonyEvent::mutable_data_calls(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.data_calls)
  return data_calls_.Mutable(index);
}
::clearcut::connectivity::RilDataCall* TelephonyEvent::add_data_calls() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyEvent.data_calls)
  return data_calls_.Add();
}
::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >*
TelephonyEvent::mutable_data_calls() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyEvent.data_calls)
  return &data_calls_;
}
const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >&
TelephonyEvent::data_calls() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyEvent.data_calls)
  return data_calls_;
}

// optional .clearcut.connectivity.RilErrno error = 9;
bool TelephonyEvent::has_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TelephonyEvent::set_has_error() {
  _has_bits_[0] |= 0x00000100u;
}
void TelephonyEvent::clear_has_error() {
  _has_bits_[0] &= ~0x00000100u;
}
void TelephonyEvent::clear_error() {
  error_ = 0;
  clear_has_error();
}
 ::clearcut::connectivity::RilErrno TelephonyEvent::error() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.error)
  return static_cast< ::clearcut::connectivity::RilErrno >(error_);
}
 void TelephonyEvent::set_error(::clearcut::connectivity::RilErrno value) {
  assert(::clearcut::connectivity::RilErrno_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.error)
}

// optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;
bool TelephonyEvent::has_setup_data_call() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TelephonyEvent::set_has_setup_data_call() {
  _has_bits_[0] |= 0x00000200u;
}
void TelephonyEvent::clear_has_setup_data_call() {
  _has_bits_[0] &= ~0x00000200u;
}
void TelephonyEvent::clear_setup_data_call() {
  if (setup_data_call_ != NULL) setup_data_call_->::clearcut::connectivity::TelephonyEvent_RilSetupDataCall::Clear();
  clear_has_setup_data_call();
}
const ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall& TelephonyEvent::setup_data_call() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.setup_data_call)
  return setup_data_call_ != NULL ? *setup_data_call_ : *default_instance_->setup_data_call_;
}
::clearcut::connectivity::TelephonyEvent_RilSetupDataCall* TelephonyEvent::mutable_setup_data_call() {
  set_has_setup_data_call();
  if (setup_data_call_ == NULL) {
    setup_data_call_ = new ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.setup_data_call)
  return setup_data_call_;
}
::clearcut::connectivity::TelephonyEvent_RilSetupDataCall* TelephonyEvent::release_setup_data_call() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.setup_data_call)
  clear_has_setup_data_call();
  ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall* temp = setup_data_call_;
  setup_data_call_ = NULL;
  return temp;
}
void TelephonyEvent::set_allocated_setup_data_call(::clearcut::connectivity::TelephonyEvent_RilSetupDataCall* setup_data_call) {
  delete setup_data_call_;
  setup_data_call_ = setup_data_call;
  if (setup_data_call) {
    set_has_setup_data_call();
  } else {
    clear_has_setup_data_call();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.setup_data_call)
}

// optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;
bool TelephonyEvent::has_setup_data_call_response() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TelephonyEvent::set_has_setup_data_call_response() {
  _has_bits_[0] |= 0x00000400u;
}
void TelephonyEvent::clear_has_setup_data_call_response() {
  _has_bits_[0] &= ~0x00000400u;
}
void TelephonyEvent::clear_setup_data_call_response() {
  if (setup_data_call_response_ != NULL) setup_data_call_response_->::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse::Clear();
  clear_has_setup_data_call_response();
}
const ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse& TelephonyEvent::setup_data_call_response() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.setup_data_call_response)
  return setup_data_call_response_ != NULL ? *setup_data_call_response_ : *default_instance_->setup_data_call_response_;
}
::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse* TelephonyEvent::mutable_setup_data_call_response() {
  set_has_setup_data_call_response();
  if (setup_data_call_response_ == NULL) {
    setup_data_call_response_ = new ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.setup_data_call_response)
  return setup_data_call_response_;
}
::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse* TelephonyEvent::release_setup_data_call_response() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.setup_data_call_response)
  clear_has_setup_data_call_response();
  ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse* temp = setup_data_call_response_;
  setup_data_call_response_ = NULL;
  return temp;
}
void TelephonyEvent::set_allocated_setup_data_call_response(::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse* setup_data_call_response) {
  delete setup_data_call_response_;
  setup_data_call_response_ = setup_data_call_response;
  if (setup_data_call_response) {
    set_has_setup_data_call_response();
  } else {
    clear_has_setup_data_call_response();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.setup_data_call_response)
}

// optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;
bool TelephonyEvent::has_deactivate_data_call() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TelephonyEvent::set_has_deactivate_data_call() {
  _has_bits_[0] |= 0x00000800u;
}
void TelephonyEvent::clear_has_deactivate_data_call() {
  _has_bits_[0] &= ~0x00000800u;
}
void TelephonyEvent::clear_deactivate_data_call() {
  if (deactivate_data_call_ != NULL) deactivate_data_call_->::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall::Clear();
  clear_has_deactivate_data_call();
}
const ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall& TelephonyEvent::deactivate_data_call() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.deactivate_data_call)
  return deactivate_data_call_ != NULL ? *deactivate_data_call_ : *default_instance_->deactivate_data_call_;
}
::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall* TelephonyEvent::mutable_deactivate_data_call() {
  set_has_deactivate_data_call();
  if (deactivate_data_call_ == NULL) {
    deactivate_data_call_ = new ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.deactivate_data_call)
  return deactivate_data_call_;
}
::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall* TelephonyEvent::release_deactivate_data_call() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.deactivate_data_call)
  clear_has_deactivate_data_call();
  ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall* temp = deactivate_data_call_;
  deactivate_data_call_ = NULL;
  return temp;
}
void TelephonyEvent::set_allocated_deactivate_data_call(::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall* deactivate_data_call) {
  delete deactivate_data_call_;
  deactivate_data_call_ = deactivate_data_call;
  if (deactivate_data_call) {
    set_has_deactivate_data_call();
  } else {
    clear_has_deactivate_data_call();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.deactivate_data_call)
}

// optional int32 data_stall_action = 13;
bool TelephonyEvent::has_data_stall_action() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TelephonyEvent::set_has_data_stall_action() {
  _has_bits_[0] |= 0x00001000u;
}
void TelephonyEvent::clear_has_data_stall_action() {
  _has_bits_[0] &= ~0x00001000u;
}
void TelephonyEvent::clear_data_stall_action() {
  data_stall_action_ = 0;
  clear_has_data_stall_action();
}
 ::google::protobuf::int32 TelephonyEvent::data_stall_action() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.data_stall_action)
  return data_stall_action_;
}
 void TelephonyEvent::set_data_stall_action(::google::protobuf::int32 value) {
  set_has_data_stall_action();
  data_stall_action_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.data_stall_action)
}

// optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;
bool TelephonyEvent::has_modem_restart() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TelephonyEvent::set_has_modem_restart() {
  _has_bits_[0] |= 0x00002000u;
}
void TelephonyEvent::clear_has_modem_restart() {
  _has_bits_[0] &= ~0x00002000u;
}
void TelephonyEvent::clear_modem_restart() {
  if (modem_restart_ != NULL) modem_restart_->::clearcut::connectivity::TelephonyEvent_ModemRestart::Clear();
  clear_has_modem_restart();
}
const ::clearcut::connectivity::TelephonyEvent_ModemRestart& TelephonyEvent::modem_restart() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.modem_restart)
  return modem_restart_ != NULL ? *modem_restart_ : *default_instance_->modem_restart_;
}
::clearcut::connectivity::TelephonyEvent_ModemRestart* TelephonyEvent::mutable_modem_restart() {
  set_has_modem_restart();
  if (modem_restart_ == NULL) {
    modem_restart_ = new ::clearcut::connectivity::TelephonyEvent_ModemRestart;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.modem_restart)
  return modem_restart_;
}
::clearcut::connectivity::TelephonyEvent_ModemRestart* TelephonyEvent::release_modem_restart() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.modem_restart)
  clear_has_modem_restart();
  ::clearcut::connectivity::TelephonyEvent_ModemRestart* temp = modem_restart_;
  modem_restart_ = NULL;
  return temp;
}
void TelephonyEvent::set_allocated_modem_restart(::clearcut::connectivity::TelephonyEvent_ModemRestart* modem_restart) {
  delete modem_restart_;
  modem_restart_ = modem_restart;
  if (modem_restart) {
    set_has_modem_restart();
  } else {
    clear_has_modem_restart();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.modem_restart)
}

// optional int64 nitz_timestamp_millis = 15;
bool TelephonyEvent::has_nitz_timestamp_millis() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TelephonyEvent::set_has_nitz_timestamp_millis() {
  _has_bits_[0] |= 0x00004000u;
}
void TelephonyEvent::clear_has_nitz_timestamp_millis() {
  _has_bits_[0] &= ~0x00004000u;
}
void TelephonyEvent::clear_nitz_timestamp_millis() {
  nitz_timestamp_millis_ = GOOGLE_LONGLONG(0);
  clear_has_nitz_timestamp_millis();
}
 ::google::protobuf::int64 TelephonyEvent::nitz_timestamp_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.nitz_timestamp_millis)
  return nitz_timestamp_millis_;
}
 void TelephonyEvent::set_nitz_timestamp_millis(::google::protobuf::int64 value) {
  set_has_nitz_timestamp_millis();
  nitz_timestamp_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.nitz_timestamp_millis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyCallSession_Event_Type_descriptor_;
}
bool TelephonyCallSession_Event_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::EVENT_UNKNOWN;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::SETTINGS_CHANGED;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::RIL_SERVICE_STATE_CHANGED;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::IMS_CONNECTION_STATE_CHANGED;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::IMS_CAPABILITIES_CHANGED;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::DATA_CALL_LIST_CHANGED;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::RIL_REQUEST;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::RIL_RESPONSE;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::RIL_CALL_RING;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::RIL_CALL_SRVCC;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::RIL_CALL_LIST_CHANGED;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::IMS_COMMAND;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::IMS_COMMAND_RECEIVED;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::IMS_COMMAND_FAILED;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::IMS_COMMAND_COMPLETE;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::IMS_CALL_RECEIVE;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::IMS_CALL_STATE_CHANGED;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::IMS_CALL_TERMINATED;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::IMS_CALL_HANDOVER;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::IMS_CALL_HANDOVER_FAILED;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::PHONE_STATE_CHANGED;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::NITZ_TIME;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::Type_MIN;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event::Type_MAX;
const int TelephonyCallSession_Event::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_RilRequest_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyCallSession_Event_RilRequest_descriptor_;
}
bool TelephonyCallSession_Event_RilRequest_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TelephonyCallSession_Event_RilRequest TelephonyCallSession_Event::RIL_REQUEST_UNKNOWN;
const TelephonyCallSession_Event_RilRequest TelephonyCallSession_Event::RIL_REQUEST_DIAL;
const TelephonyCallSession_Event_RilRequest TelephonyCallSession_Event::RIL_REQUEST_ANSWER;
const TelephonyCallSession_Event_RilRequest TelephonyCallSession_Event::RIL_REQUEST_HANGUP;
const TelephonyCallSession_Event_RilRequest TelephonyCallSession_Event::RIL_REQUEST_SET_CALL_WAITING;
const TelephonyCallSession_Event_RilRequest TelephonyCallSession_Event::RIL_REQUEST_SWITCH_HOLDING_AND_ACTIVE;
const TelephonyCallSession_Event_RilRequest TelephonyCallSession_Event::RIL_REQUEST_CDMA_FLASH;
const TelephonyCallSession_Event_RilRequest TelephonyCallSession_Event::RIL_REQUEST_CONFERENCE;
const TelephonyCallSession_Event_RilRequest TelephonyCallSession_Event::RilRequest_MIN;
const TelephonyCallSession_Event_RilRequest TelephonyCallSession_Event::RilRequest_MAX;
const int TelephonyCallSession_Event::RilRequest_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_ImsCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyCallSession_Event_ImsCommand_descriptor_;
}
bool TelephonyCallSession_Event_ImsCommand_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::IMS_CMD_UNKNOWN;
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::IMS_CMD_START;
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::IMS_CMD_ACCEPT;
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::IMS_CMD_REJECT;
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::IMS_CMD_TERMINATE;
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::IMS_CMD_HOLD;
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::IMS_CMD_RESUME;
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::IMS_CMD_MERGE;
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::IMS_CMD_UPDATE;
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::IMS_CMD_CONFERENCE_EXTEND;
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::IMS_CMD_INVITE_PARTICIPANT;
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::IMS_CMD_REMOVE_PARTICIPANT;
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::ImsCommand_MIN;
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::ImsCommand_MAX;
const int TelephonyCallSession_Event::ImsCommand_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_PhoneState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyCallSession_Event_PhoneState_descriptor_;
}
bool TelephonyCallSession_Event_PhoneState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TelephonyCallSession_Event_PhoneState TelephonyCallSession_Event::STATE_UNKNOWN;
const TelephonyCallSession_Event_PhoneState TelephonyCallSession_Event::STATE_IDLE;
const TelephonyCallSession_Event_PhoneState TelephonyCallSession_Event::STATE_RINGING;
const TelephonyCallSession_Event_PhoneState TelephonyCallSession_Event::STATE_OFFHOOK;
const TelephonyCallSession_Event_PhoneState TelephonyCallSession_Event::PhoneState_MIN;
const TelephonyCallSession_Event_PhoneState TelephonyCallSession_Event::PhoneState_MAX;
const int TelephonyCallSession_Event::PhoneState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_CallState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyCallSession_Event_CallState_descriptor_;
}
bool TelephonyCallSession_Event_CallState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TelephonyCallSession_Event_CallState TelephonyCallSession_Event::CALL_UNKNOWN;
const TelephonyCallSession_Event_CallState TelephonyCallSession_Event::CALL_IDLE;
const TelephonyCallSession_Event_CallState TelephonyCallSession_Event::CALL_ACTIVE;
const TelephonyCallSession_Event_CallState TelephonyCallSession_Event::CALL_HOLDING;
const TelephonyCallSession_Event_CallState TelephonyCallSession_Event::CALL_DIALING;
const TelephonyCallSession_Event_CallState TelephonyCallSession_Event::CALL_ALERTING;
const TelephonyCallSession_Event_CallState TelephonyCallSession_Event::CALL_INCOMING;
const TelephonyCallSession_Event_CallState TelephonyCallSession_Event::CALL_WAITING;
const TelephonyCallSession_Event_CallState TelephonyCallSession_Event::CALL_DISCONNECTED;
const TelephonyCallSession_Event_CallState TelephonyCallSession_Event::CALL_DISCONNECTING;
const TelephonyCallSession_Event_CallState TelephonyCallSession_Event::CallState_MIN;
const TelephonyCallSession_Event_CallState TelephonyCallSession_Event::CallState_MAX;
const int TelephonyCallSession_Event::CallState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_RilSrvccState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyCallSession_Event_RilSrvccState_descriptor_;
}
bool TelephonyCallSession_Event_RilSrvccState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TelephonyCallSession_Event_RilSrvccState TelephonyCallSession_Event::HANDOVER_UNKNOWN;
const TelephonyCallSession_Event_RilSrvccState TelephonyCallSession_Event::HANDOVER_STARTED;
const TelephonyCallSession_Event_RilSrvccState TelephonyCallSession_Event::HANDOVER_COMPLETED;
const TelephonyCallSession_Event_RilSrvccState TelephonyCallSession_Event::HANDOVER_FAILED;
const TelephonyCallSession_Event_RilSrvccState TelephonyCallSession_Event::HANDOVER_CANCELED;
const TelephonyCallSession_Event_RilSrvccState TelephonyCallSession_Event::RilSrvccState_MIN;
const TelephonyCallSession_Event_RilSrvccState TelephonyCallSession_Event::RilSrvccState_MAX;
const int TelephonyCallSession_Event::RilSrvccState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_RilCall_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyCallSession_Event_RilCall_Type_descriptor_;
}
bool TelephonyCallSession_Event_RilCall_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TelephonyCallSession_Event_RilCall_Type TelephonyCallSession_Event_RilCall::UNKNOWN;
const TelephonyCallSession_Event_RilCall_Type TelephonyCallSession_Event_RilCall::MO;
const TelephonyCallSession_Event_RilCall_Type TelephonyCallSession_Event_RilCall::MT;
const TelephonyCallSession_Event_RilCall_Type TelephonyCallSession_Event_RilCall::Type_MIN;
const TelephonyCallSession_Event_RilCall_Type TelephonyCallSession_Event_RilCall::Type_MAX;
const int TelephonyCallSession_Event_RilCall::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelephonyCallSession_Event_RilCall::kIndexFieldNumber;
const int TelephonyCallSession_Event_RilCall::kStateFieldNumber;
const int TelephonyCallSession_Event_RilCall::kTypeFieldNumber;
const int TelephonyCallSession_Event_RilCall::kCallEndReasonFieldNumber;
const int TelephonyCallSession_Event_RilCall::kIsMultipartyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelephonyCallSession_Event_RilCall::TelephonyCallSession_Event_RilCall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
}

void TelephonyCallSession_Event_RilCall::InitAsDefaultInstance() {
}

TelephonyCallSession_Event_RilCall::TelephonyCallSession_Event_RilCall(const TelephonyCallSession_Event_RilCall& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
}

void TelephonyCallSession_Event_RilCall::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  state_ = 0;
  type_ = 0;
  call_end_reason_ = 0;
  is_multiparty_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelephonyCallSession_Event_RilCall::~TelephonyCallSession_Event_RilCall() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
  SharedDtor();
}

void TelephonyCallSession_Event_RilCall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TelephonyCallSession_Event_RilCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelephonyCallSession_Event_RilCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyCallSession_Event_RilCall_descriptor_;
}

const TelephonyCallSession_Event_RilCall& TelephonyCallSession_Event_RilCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

TelephonyCallSession_Event_RilCall* TelephonyCallSession_Event_RilCall::default_instance_ = NULL;

TelephonyCallSession_Event_RilCall* TelephonyCallSession_Event_RilCall::New(::google::protobuf::Arena* arena) const {
  TelephonyCallSession_Event_RilCall* n = new TelephonyCallSession_Event_RilCall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelephonyCallSession_Event_RilCall::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TelephonyCallSession_Event_RilCall, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TelephonyCallSession_Event_RilCall*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(index_, is_multiparty_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TelephonyCallSession_Event_RilCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonyCallSession_Event_CallState_IsValid(value)) {
            set_state(static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_CallState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonyCallSession_Event_RilCall_Type_IsValid(value)) {
            set_type(static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_RilCall_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_call_end_reason;
        break;
      }

      // optional int32 call_end_reason = 4;
      case 4: {
        if (tag == 32) {
         parse_call_end_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_end_reason_)));
          set_has_call_end_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_multiparty;
        break;
      }

      // optional bool is_multiparty = 5;
      case 5: {
        if (tag == 40) {
         parse_is_multiparty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_multiparty_)));
          set_has_is_multiparty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
  return false;
#undef DO_
}

void TelephonyCallSession_Event_RilCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 call_end_reason = 4;
  if (has_call_end_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->call_end_reason(), output);
  }

  // optional bool is_multiparty = 5;
  if (has_is_multiparty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_multiparty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
}

::google::protobuf::uint8* TelephonyCallSession_Event_RilCall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional int32 call_end_reason = 4;
  if (has_call_end_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->call_end_reason(), target);
  }

  // optional bool is_multiparty = 5;
  if (has_is_multiparty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_multiparty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
  return target;
}

int TelephonyCallSession_Event_RilCall::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 call_end_reason = 4;
    if (has_call_end_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->call_end_reason());
    }

    // optional bool is_multiparty = 5;
    if (has_is_multiparty()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelephonyCallSession_Event_RilCall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TelephonyCallSession_Event_RilCall* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TelephonyCallSession_Event_RilCall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
    MergeFrom(*source);
  }
}

void TelephonyCallSession_Event_RilCall::MergeFrom(const TelephonyCallSession_Event_RilCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_call_end_reason()) {
      set_call_end_reason(from.call_end_reason());
    }
    if (from.has_is_multiparty()) {
      set_is_multiparty(from.is_multiparty());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TelephonyCallSession_Event_RilCall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelephonyCallSession_Event_RilCall::CopyFrom(const TelephonyCallSession_Event_RilCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelephonyCallSession_Event_RilCall::IsInitialized() const {

  return true;
}

void TelephonyCallSession_Event_RilCall::Swap(TelephonyCallSession_Event_RilCall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelephonyCallSession_Event_RilCall::InternalSwap(TelephonyCallSession_Event_RilCall* other) {
  std::swap(index_, other->index_);
  std::swap(state_, other->state_);
  std::swap(type_, other->type_);
  std::swap(call_end_reason_, other->call_end_reason_);
  std::swap(is_multiparty_, other->is_multiparty_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelephonyCallSession_Event_RilCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelephonyCallSession_Event_RilCall_descriptor_;
  metadata.reflection = TelephonyCallSession_Event_RilCall_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelephonyCallSession_Event::kTypeFieldNumber;
const int TelephonyCallSession_Event::kDelayFieldNumber;
const int TelephonyCallSession_Event::kSettingsFieldNumber;
const int TelephonyCallSession_Event::kServiceStateFieldNumber;
const int TelephonyCallSession_Event::kImsConnectionStateFieldNumber;
const int TelephonyCallSession_Event::kImsCapabilitiesFieldNumber;
const int TelephonyCallSession_Event::kDataCallsFieldNumber;
const int TelephonyCallSession_Event::kPhoneStateFieldNumber;
const int TelephonyCallSession_Event::kCallStateFieldNumber;
const int TelephonyCallSession_Event::kCallIndexFieldNumber;
const int TelephonyCallSession_Event::kMergedCallIndexFieldNumber;
const int TelephonyCallSession_Event::kCallsFieldNumber;
const int TelephonyCallSession_Event::kErrorFieldNumber;
const int TelephonyCallSession_Event::kRilRequestFieldNumber;
const int TelephonyCallSession_Event::kRilRequestIdFieldNumber;
const int TelephonyCallSession_Event::kSrvccStateFieldNumber;
const int TelephonyCallSession_Event::kImsCommandFieldNumber;
const int TelephonyCallSession_Event::kReasonInfoFieldNumber;
const int TelephonyCallSession_Event::kSrcAccessTechFieldNumber;
const int TelephonyCallSession_Event::kTargetAccessTechFieldNumber;
const int TelephonyCallSession_Event::kNitzTimestampMillisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelephonyCallSession_Event::TelephonyCallSession_Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.TelephonyCallSession.Event)
}

void TelephonyCallSession_Event::InitAsDefaultInstance() {
  settings_ = const_cast< ::clearcut::connectivity::TelephonySettings*>(&::clearcut::connectivity::TelephonySettings::default_instance());
  service_state_ = const_cast< ::clearcut::connectivity::TelephonyServiceState*>(&::clearcut::connectivity::TelephonyServiceState::default_instance());
  ims_connection_state_ = const_cast< ::clearcut::connectivity::ImsConnectionState*>(&::clearcut::connectivity::ImsConnectionState::default_instance());
  ims_capabilities_ = const_cast< ::clearcut::connectivity::ImsCapabilities*>(&::clearcut::connectivity::ImsCapabilities::default_instance());
  reason_info_ = const_cast< ::clearcut::connectivity::ImsReasonInfo*>(&::clearcut::connectivity::ImsReasonInfo::default_instance());
}

TelephonyCallSession_Event::TelephonyCallSession_Event(const TelephonyCallSession_Event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.TelephonyCallSession.Event)
}

void TelephonyCallSession_Event::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  delay_ = 0;
  settings_ = NULL;
  service_state_ = NULL;
  ims_connection_state_ = NULL;
  ims_capabilities_ = NULL;
  phone_state_ = 0;
  call_state_ = 0;
  call_index_ = 0;
  merged_call_index_ = 0;
  error_ = 0;
  ril_request_ = 0;
  ril_request_id_ = 0;
  srvcc_state_ = 0;
  ims_command_ = 0;
  reason_info_ = NULL;
  src_access_tech_ = -1;
  target_access_tech_ = -1;
  nitz_timestamp_millis_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelephonyCallSession_Event::~TelephonyCallSession_Event() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.TelephonyCallSession.Event)
  SharedDtor();
}

void TelephonyCallSession_Event::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
    delete service_state_;
    delete ims_connection_state_;
    delete ims_capabilities_;
    delete reason_info_;
  }
}

void TelephonyCallSession_Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelephonyCallSession_Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyCallSession_Event_descriptor_;
}

const TelephonyCallSession_Event& TelephonyCallSession_Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

TelephonyCallSession_Event* TelephonyCallSession_Event::default_instance_ = NULL;

TelephonyCallSession_Event* TelephonyCallSession_Event::New(::google::protobuf::Arena* arena) const {
  TelephonyCallSession_Event* n = new TelephonyCallSession_Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelephonyCallSession_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.TelephonyCallSession.Event)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TelephonyCallSession_Event, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TelephonyCallSession_Event*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 191u) {
    ZR_(type_, delay_);
    if (has_settings()) {
      if (settings_ != NULL) settings_->::clearcut::connectivity::TelephonySettings::Clear();
    }
    if (has_service_state()) {
      if (service_state_ != NULL) service_state_->::clearcut::connectivity::TelephonyServiceState::Clear();
    }
    if (has_ims_connection_state()) {
      if (ims_connection_state_ != NULL) ims_connection_state_->::clearcut::connectivity::ImsConnectionState::Clear();
    }
    if (has_ims_capabilities()) {
      if (ims_capabilities_ != NULL) ims_capabilities_->::clearcut::connectivity::ImsCapabilities::Clear();
    }
    phone_state_ = 0;
  }
  if (_has_bits_[8 / 32] & 63232u) {
    ZR_(call_state_, merged_call_index_);
    ZR_(error_, srvcc_state_);
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ims_command_ = 0;
    if (has_reason_info()) {
      if (reason_info_ != NULL) reason_info_->::clearcut::connectivity::ImsReasonInfo::Clear();
    }
    src_access_tech_ = -1;
    target_access_tech_ = -1;
    nitz_timestamp_millis_ = GOOGLE_LONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  data_calls_.Clear();
  calls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TelephonyCallSession_Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.TelephonyCallSession.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonyCallSession_Event_Type_IsValid(value)) {
            set_type(static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_delay;
        break;
      }

      // optional .clearcut.connectivity.TimeInterval delay = 2;
      case 2: {
        if (tag == 16) {
         parse_delay:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TimeInterval_IsValid(value)) {
            set_delay(static_cast< ::clearcut::connectivity::TimeInterval >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_settings;
        break;
      }

      // optional .clearcut.connectivity.TelephonySettings settings = 3;
      case 3: {
        if (tag == 26) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_service_state;
        break;
      }

      // optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
      case 4: {
        if (tag == 34) {
         parse_service_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ims_connection_state;
        break;
      }

      // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
      case 5: {
        if (tag == 42) {
         parse_ims_connection_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ims_connection_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ims_capabilities;
        break;
      }

      // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
      case 6: {
        if (tag == 50) {
         parse_ims_capabilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ims_capabilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data_calls;
        break;
      }

      // repeated .clearcut.connectivity.RilDataCall data_calls = 7;
      case 7: {
        if (tag == 58) {
         parse_data_calls:
          DO_(input->IncrementRecursionDepth());
         parse_loop_data_calls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data_calls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_data_calls;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(64)) goto parse_phone_state;
        break;
      }

      // optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;
      case 8: {
        if (tag == 64) {
         parse_phone_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonyCallSession_Event_PhoneState_IsValid(value)) {
            set_phone_state(static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_PhoneState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_call_state;
        break;
      }

      // optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;
      case 9: {
        if (tag == 72) {
         parse_call_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonyCallSession_Event_CallState_IsValid(value)) {
            set_call_state(static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_CallState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_call_index;
        break;
      }

      // optional int32 call_index = 10;
      case 10: {
        if (tag == 80) {
         parse_call_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_index_)));
          set_has_call_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_merged_call_index;
        break;
      }

      // optional int32 merged_call_index = 11;
      case 11: {
        if (tag == 88) {
         parse_merged_call_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &merged_call_index_)));
          set_has_merged_call_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_calls;
        break;
      }

      // repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;
      case 12: {
        if (tag == 98) {
         parse_calls:
          DO_(input->IncrementRecursionDepth());
         parse_loop_calls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_calls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_calls;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(104)) goto parse_error;
        break;
      }

      // optional .clearcut.connectivity.RilErrno error = 13;
      case 13: {
        if (tag == 104) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::RilErrno_IsValid(value)) {
            set_error(static_cast< ::clearcut::connectivity::RilErrno >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ril_request;
        break;
      }

      // optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;
      case 14: {
        if (tag == 112) {
         parse_ril_request:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonyCallSession_Event_RilRequest_IsValid(value)) {
            set_ril_request(static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_RilRequest >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_ril_request_id;
        break;
      }

      // optional int32 ril_request_id = 15;
      case 15: {
        if (tag == 120) {
         parse_ril_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ril_request_id_)));
          set_has_ril_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_srvcc_state;
        break;
      }

      // optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;
      case 16: {
        if (tag == 128) {
         parse_srvcc_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonyCallSession_Event_RilSrvccState_IsValid(value)) {
            set_srvcc_state(static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_RilSrvccState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_ims_command;
        break;
      }

      // optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;
      case 17: {
        if (tag == 136) {
         parse_ims_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TelephonyCallSession_Event_ImsCommand_IsValid(value)) {
            set_ims_command(static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_ImsCommand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_reason_info;
        break;
      }

      // optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;
      case 18: {
        if (tag == 146) {
         parse_reason_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reason_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_src_access_tech;
        break;
      }

      // optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];
      case 19: {
        if (tag == 152) {
         parse_src_access_tech:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::RadioAccessTechnology_IsValid(value)) {
            set_src_access_tech(static_cast< ::clearcut::connectivity::RadioAccessTechnology >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_target_access_tech;
        break;
      }

      // optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];
      case 20: {
        if (tag == 160) {
         parse_target_access_tech:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::RadioAccessTechnology_IsValid(value)) {
            set_target_access_tech(static_cast< ::clearcut::connectivity::RadioAccessTechnology >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_nitz_timestamp_millis;
        break;
      }

      // optional int64 nitz_timestamp_millis = 21;
      case 21: {
        if (tag == 168) {
         parse_nitz_timestamp_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nitz_timestamp_millis_)));
          set_has_nitz_timestamp_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.TelephonyCallSession.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.TelephonyCallSession.Event)
  return false;
#undef DO_
}

void TelephonyCallSession_Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.TelephonyCallSession.Event)
  // optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .clearcut.connectivity.TimeInterval delay = 2;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->delay(), output);
  }

  // optional .clearcut.connectivity.TelephonySettings settings = 3;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->settings_, output);
  }

  // optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
  if (has_service_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->service_state_, output);
  }

  // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
  if (has_ims_connection_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ims_connection_state_, output);
  }

  // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
  if (has_ims_capabilities()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ims_capabilities_, output);
  }

  // repeated .clearcut.connectivity.RilDataCall data_calls = 7;
  for (unsigned int i = 0, n = this->data_calls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data_calls(i), output);
  }

  // optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;
  if (has_phone_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->phone_state(), output);
  }

  // optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;
  if (has_call_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->call_state(), output);
  }

  // optional int32 call_index = 10;
  if (has_call_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->call_index(), output);
  }

  // optional int32 merged_call_index = 11;
  if (has_merged_call_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->merged_call_index(), output);
  }

  // repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;
  for (unsigned int i = 0, n = this->calls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->calls(i), output);
  }

  // optional .clearcut.connectivity.RilErrno error = 13;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->error(), output);
  }

  // optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;
  if (has_ril_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->ril_request(), output);
  }

  // optional int32 ril_request_id = 15;
  if (has_ril_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ril_request_id(), output);
  }

  // optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;
  if (has_srvcc_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->srvcc_state(), output);
  }

  // optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;
  if (has_ims_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->ims_command(), output);
  }

  // optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;
  if (has_reason_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->reason_info_, output);
  }

  // optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];
  if (has_src_access_tech()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->src_access_tech(), output);
  }

  // optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];
  if (has_target_access_tech()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->target_access_tech(), output);
  }

  // optional int64 nitz_timestamp_millis = 21;
  if (has_nitz_timestamp_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->nitz_timestamp_millis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.TelephonyCallSession.Event)
}

::google::protobuf::uint8* TelephonyCallSession_Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.TelephonyCallSession.Event)
  // optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .clearcut.connectivity.TimeInterval delay = 2;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->delay(), target);
  }

  // optional .clearcut.connectivity.TelephonySettings settings = 3;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->settings_, false, target);
  }

  // optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
  if (has_service_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->service_state_, false, target);
  }

  // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
  if (has_ims_connection_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ims_connection_state_, false, target);
  }

  // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
  if (has_ims_capabilities()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ims_capabilities_, false, target);
  }

  // repeated .clearcut.connectivity.RilDataCall data_calls = 7;
  for (unsigned int i = 0, n = this->data_calls_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->data_calls(i), false, target);
  }

  // optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;
  if (has_phone_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->phone_state(), target);
  }

  // optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;
  if (has_call_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->call_state(), target);
  }

  // optional int32 call_index = 10;
  if (has_call_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->call_index(), target);
  }

  // optional int32 merged_call_index = 11;
  if (has_merged_call_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->merged_call_index(), target);
  }

  // repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;
  for (unsigned int i = 0, n = this->calls_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->calls(i), false, target);
  }

  // optional .clearcut.connectivity.RilErrno error = 13;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->error(), target);
  }

  // optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;
  if (has_ril_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->ril_request(), target);
  }

  // optional int32 ril_request_id = 15;
  if (has_ril_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->ril_request_id(), target);
  }

  // optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;
  if (has_srvcc_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->srvcc_state(), target);
  }

  // optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;
  if (has_ims_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->ims_command(), target);
  }

  // optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;
  if (has_reason_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->reason_info_, false, target);
  }

  // optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];
  if (has_src_access_tech()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->src_access_tech(), target);
  }

  // optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];
  if (has_target_access_tech()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->target_access_tech(), target);
  }

  // optional int64 nitz_timestamp_millis = 21;
  if (has_nitz_timestamp_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->nitz_timestamp_millis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.TelephonyCallSession.Event)
  return target;
}

int TelephonyCallSession_Event::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.TelephonyCallSession.Event)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 191u) {
    // optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .clearcut.connectivity.TimeInterval delay = 2;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->delay());
    }

    // optional .clearcut.connectivity.TelephonySettings settings = 3;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->settings_);
    }

    // optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
    if (has_service_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->service_state_);
    }

    // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
    if (has_ims_connection_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ims_connection_state_);
    }

    // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
    if (has_ims_capabilities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ims_capabilities_);
    }

    // optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;
    if (has_phone_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phone_state());
    }

  }
  if (_has_bits_[8 / 32] & 63232u) {
    // optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;
    if (has_call_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->call_state());
    }

    // optional int32 call_index = 10;
    if (has_call_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->call_index());
    }

    // optional int32 merged_call_index = 11;
    if (has_merged_call_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->merged_call_index());
    }

    // optional .clearcut.connectivity.RilErrno error = 13;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;
    if (has_ril_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ril_request());
    }

    // optional int32 ril_request_id = 15;
    if (has_ril_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ril_request_id());
    }

    // optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;
    if (has_srvcc_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->srvcc_state());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;
    if (has_ims_command()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ims_command());
    }

    // optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;
    if (has_reason_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reason_info_);
    }

    // optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];
    if (has_src_access_tech()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src_access_tech());
    }

    // optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];
    if (has_target_access_tech()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_access_tech());
    }

    // optional int64 nitz_timestamp_millis = 21;
    if (has_nitz_timestamp_millis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nitz_timestamp_millis());
    }

  }
  // repeated .clearcut.connectivity.RilDataCall data_calls = 7;
  total_size += 1 * this->data_calls_size();
  for (int i = 0; i < this->data_calls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_calls(i));
  }

  // repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;
  total_size += 1 * this->calls_size();
  for (int i = 0; i < this->calls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calls(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelephonyCallSession_Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.TelephonyCallSession.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TelephonyCallSession_Event* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TelephonyCallSession_Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.TelephonyCallSession.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.TelephonyCallSession.Event)
    MergeFrom(*source);
  }
}

void TelephonyCallSession_Event::MergeFrom(const TelephonyCallSession_Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.TelephonyCallSession.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_calls_.MergeFrom(from.data_calls_);
  calls_.MergeFrom(from.calls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_settings()) {
      mutable_settings()->::clearcut::connectivity::TelephonySettings::MergeFrom(from.settings());
    }
    if (from.has_service_state()) {
      mutable_service_state()->::clearcut::connectivity::TelephonyServiceState::MergeFrom(from.service_state());
    }
    if (from.has_ims_connection_state()) {
      mutable_ims_connection_state()->::clearcut::connectivity::ImsConnectionState::MergeFrom(from.ims_connection_state());
    }
    if (from.has_ims_capabilities()) {
      mutable_ims_capabilities()->::clearcut::connectivity::ImsCapabilities::MergeFrom(from.ims_capabilities());
    }
    if (from.has_phone_state()) {
      set_phone_state(from.phone_state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_call_state()) {
      set_call_state(from.call_state());
    }
    if (from.has_call_index()) {
      set_call_index(from.call_index());
    }
    if (from.has_merged_call_index()) {
      set_merged_call_index(from.merged_call_index());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_ril_request()) {
      set_ril_request(from.ril_request());
    }
    if (from.has_ril_request_id()) {
      set_ril_request_id(from.ril_request_id());
    }
    if (from.has_srvcc_state()) {
      set_srvcc_state(from.srvcc_state());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ims_command()) {
      set_ims_command(from.ims_command());
    }
    if (from.has_reason_info()) {
      mutable_reason_info()->::clearcut::connectivity::ImsReasonInfo::MergeFrom(from.reason_info());
    }
    if (from.has_src_access_tech()) {
      set_src_access_tech(from.src_access_tech());
    }
    if (from.has_target_access_tech()) {
      set_target_access_tech(from.target_access_tech());
    }
    if (from.has_nitz_timestamp_millis()) {
      set_nitz_timestamp_millis(from.nitz_timestamp_millis());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TelephonyCallSession_Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.TelephonyCallSession.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelephonyCallSession_Event::CopyFrom(const TelephonyCallSession_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.TelephonyCallSession.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelephonyCallSession_Event::IsInitialized() const {

  return true;
}

void TelephonyCallSession_Event::Swap(TelephonyCallSession_Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelephonyCallSession_Event::InternalSwap(TelephonyCallSession_Event* other) {
  std::swap(type_, other->type_);
  std::swap(delay_, other->delay_);
  std::swap(settings_, other->settings_);
  std::swap(service_state_, other->service_state_);
  std::swap(ims_connection_state_, other->ims_connection_state_);
  std::swap(ims_capabilities_, other->ims_capabilities_);
  data_calls_.UnsafeArenaSwap(&other->data_calls_);
  std::swap(phone_state_, other->phone_state_);
  std::swap(call_state_, other->call_state_);
  std::swap(call_index_, other->call_index_);
  std::swap(merged_call_index_, other->merged_call_index_);
  calls_.UnsafeArenaSwap(&other->calls_);
  std::swap(error_, other->error_);
  std::swap(ril_request_, other->ril_request_);
  std::swap(ril_request_id_, other->ril_request_id_);
  std::swap(srvcc_state_, other->srvcc_state_);
  std::swap(ims_command_, other->ims_command_);
  std::swap(reason_info_, other->reason_info_);
  std::swap(src_access_tech_, other->src_access_tech_);
  std::swap(target_access_tech_, other->target_access_tech_);
  std::swap(nitz_timestamp_millis_, other->nitz_timestamp_millis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelephonyCallSession_Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelephonyCallSession_Event_descriptor_;
  metadata.reflection = TelephonyCallSession_Event_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelephonyCallSession::kStartTimeMinutesFieldNumber;
const int TelephonyCallSession::kPhoneIdFieldNumber;
const int TelephonyCallSession::kEventsFieldNumber;
const int TelephonyCallSession::kEventsDroppedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelephonyCallSession::TelephonyCallSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.TelephonyCallSession)
}

void TelephonyCallSession::InitAsDefaultInstance() {
}

TelephonyCallSession::TelephonyCallSession(const TelephonyCallSession& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.TelephonyCallSession)
}

void TelephonyCallSession::SharedCtor() {
  _cached_size_ = 0;
  start_time_minutes_ = 0;
  phone_id_ = 0;
  events_dropped_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelephonyCallSession::~TelephonyCallSession() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.TelephonyCallSession)
  SharedDtor();
}

void TelephonyCallSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TelephonyCallSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelephonyCallSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelephonyCallSession_descriptor_;
}

const TelephonyCallSession& TelephonyCallSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

TelephonyCallSession* TelephonyCallSession::default_instance_ = NULL;

TelephonyCallSession* TelephonyCallSession::New(::google::protobuf::Arena* arena) const {
  TelephonyCallSession* n = new TelephonyCallSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelephonyCallSession::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.TelephonyCallSession)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TelephonyCallSession, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TelephonyCallSession*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 11u) {
    ZR_(start_time_minutes_, phone_id_);
    events_dropped_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TelephonyCallSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.TelephonyCallSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 start_time_minutes = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_minutes_)));
          set_has_start_time_minutes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_phone_id;
        break;
      }

      // optional int32 phone_id = 2;
      case 2: {
        if (tag == 16) {
         parse_phone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phone_id_)));
          set_has_phone_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_events;
        break;
      }

      // repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;
      case 3: {
        if (tag == 26) {
         parse_events:
          DO_(input->IncrementRecursionDepth());
         parse_loop_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_events;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_events_dropped;
        break;
      }

      // optional bool events_dropped = 4;
      case 4: {
        if (tag == 32) {
         parse_events_dropped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &events_dropped_)));
          set_has_events_dropped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.TelephonyCallSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.TelephonyCallSession)
  return false;
#undef DO_
}

void TelephonyCallSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.TelephonyCallSession)
  // optional int32 start_time_minutes = 1;
  if (has_start_time_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start_time_minutes(), output);
  }

  // optional int32 phone_id = 2;
  if (has_phone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->phone_id(), output);
  }

  // repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->events(i), output);
  }

  // optional bool events_dropped = 4;
  if (has_events_dropped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->events_dropped(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.TelephonyCallSession)
}

::google::protobuf::uint8* TelephonyCallSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.TelephonyCallSession)
  // optional int32 start_time_minutes = 1;
  if (has_start_time_minutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start_time_minutes(), target);
  }

  // optional int32 phone_id = 2;
  if (has_phone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->phone_id(), target);
  }

  // repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->events(i), false, target);
  }

  // optional bool events_dropped = 4;
  if (has_events_dropped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->events_dropped(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.TelephonyCallSession)
  return target;
}

int TelephonyCallSession::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.TelephonyCallSession)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 11u) {
    // optional int32 start_time_minutes = 1;
    if (has_start_time_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time_minutes());
    }

    // optional int32 phone_id = 2;
    if (has_phone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phone_id());
    }

    // optional bool events_dropped = 4;
    if (has_events_dropped()) {
      total_size += 1 + 1;
    }

  }
  // repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelephonyCallSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.TelephonyCallSession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TelephonyCallSession* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TelephonyCallSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.TelephonyCallSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.TelephonyCallSession)
    MergeFrom(*source);
  }
}

void TelephonyCallSession::MergeFrom(const TelephonyCallSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.TelephonyCallSession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time_minutes()) {
      set_start_time_minutes(from.start_time_minutes());
    }
    if (from.has_phone_id()) {
      set_phone_id(from.phone_id());
    }
    if (from.has_events_dropped()) {
      set_events_dropped(from.events_dropped());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TelephonyCallSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.TelephonyCallSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelephonyCallSession::CopyFrom(const TelephonyCallSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.TelephonyCallSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelephonyCallSession::IsInitialized() const {

  return true;
}

void TelephonyCallSession::Swap(TelephonyCallSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelephonyCallSession::InternalSwap(TelephonyCallSession* other) {
  std::swap(start_time_minutes_, other->start_time_minutes_);
  std::swap(phone_id_, other->phone_id_);
  events_.UnsafeArenaSwap(&other->events_);
  std::swap(events_dropped_, other->events_dropped_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelephonyCallSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelephonyCallSession_descriptor_;
  metadata.reflection = TelephonyCallSession_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TelephonyCallSession_Event_RilCall

// optional int32 index = 1;
bool TelephonyCallSession_Event_RilCall::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TelephonyCallSession_Event_RilCall::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
void TelephonyCallSession_Event_RilCall::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void TelephonyCallSession_Event_RilCall::clear_index() {
  index_ = 0;
  clear_has_index();
}
 ::google::protobuf::int32 TelephonyCallSession_Event_RilCall::index() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.RilCall.index)
  return index_;
}
 void TelephonyCallSession_Event_RilCall::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.RilCall.index)
}

// optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;
bool TelephonyCallSession_Event_RilCall::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TelephonyCallSession_Event_RilCall::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void TelephonyCallSession_Event_RilCall::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void TelephonyCallSession_Event_RilCall::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::clearcut::connectivity::TelephonyCallSession_Event_CallState TelephonyCallSession_Event_RilCall::state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.RilCall.state)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_CallState >(state_);
}
 void TelephonyCallSession_Event_RilCall::set_state(::clearcut::connectivity::TelephonyCallSession_Event_CallState value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_CallState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.RilCall.state)
}

// optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;
bool TelephonyCallSession_Event_RilCall::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TelephonyCallSession_Event_RilCall::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void TelephonyCallSession_Event_RilCall::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void TelephonyCallSession_Event_RilCall::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::clearcut::connectivity::TelephonyCallSession_Event_RilCall_Type TelephonyCallSession_Event_RilCall::type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.RilCall.type)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_RilCall_Type >(type_);
}
 void TelephonyCallSession_Event_RilCall::set_type(::clearcut::connectivity::TelephonyCallSession_Event_RilCall_Type value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_RilCall_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.RilCall.type)
}

// optional int32 call_end_reason = 4;
bool TelephonyCallSession_Event_RilCall::has_call_end_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TelephonyCallSession_Event_RilCall::set_has_call_end_reason() {
  _has_bits_[0] |= 0x00000008u;
}
void TelephonyCallSession_Event_RilCall::clear_has_call_end_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
void TelephonyCallSession_Event_RilCall::clear_call_end_reason() {
  call_end_reason_ = 0;
  clear_has_call_end_reason();
}
 ::google::protobuf::int32 TelephonyCallSession_Event_RilCall::call_end_reason() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.RilCall.call_end_reason)
  return call_end_reason_;
}
 void TelephonyCallSession_Event_RilCall::set_call_end_reason(::google::protobuf::int32 value) {
  set_has_call_end_reason();
  call_end_reason_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.RilCall.call_end_reason)
}

// optional bool is_multiparty = 5;
bool TelephonyCallSession_Event_RilCall::has_is_multiparty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TelephonyCallSession_Event_RilCall::set_has_is_multiparty() {
  _has_bits_[0] |= 0x00000010u;
}
void TelephonyCallSession_Event_RilCall::clear_has_is_multiparty() {
  _has_bits_[0] &= ~0x00000010u;
}
void TelephonyCallSession_Event_RilCall::clear_is_multiparty() {
  is_multiparty_ = false;
  clear_has_is_multiparty();
}
 bool TelephonyCallSession_Event_RilCall::is_multiparty() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.RilCall.is_multiparty)
  return is_multiparty_;
}
 void TelephonyCallSession_Event_RilCall::set_is_multiparty(bool value) {
  set_has_is_multiparty();
  is_multiparty_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.RilCall.is_multiparty)
}

// -------------------------------------------------------------------

// TelephonyCallSession_Event

// optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;
bool TelephonyCallSession_Event::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TelephonyCallSession_Event::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void TelephonyCallSession_Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void TelephonyCallSession_Event::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::clearcut::connectivity::TelephonyCallSession_Event_Type TelephonyCallSession_Event::type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.type)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_Type >(type_);
}
 void TelephonyCallSession_Event::set_type(::clearcut::connectivity::TelephonyCallSession_Event_Type value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.type)
}

// optional .clearcut.connectivity.TimeInterval delay = 2;
bool TelephonyCallSession_Event::has_delay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TelephonyCallSession_Event::set_has_delay() {
  _has_bits_[0] |= 0x00000002u;
}
void TelephonyCallSession_Event::clear_has_delay() {
  _has_bits_[0] &= ~0x00000002u;
}
void TelephonyCallSession_Event::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
 ::clearcut::connectivity::TimeInterval TelephonyCallSession_Event::delay() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.delay)
  return static_cast< ::clearcut::connectivity::TimeInterval >(delay_);
}
 void TelephonyCallSession_Event::set_delay(::clearcut::connectivity::TimeInterval value) {
  assert(::clearcut::connectivity::TimeInterval_IsValid(value));
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.delay)
}

// optional .clearcut.connectivity.TelephonySettings settings = 3;
bool TelephonyCallSession_Event::has_settings() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TelephonyCallSession_Event::set_has_settings() {
  _has_bits_[0] |= 0x00000004u;
}
void TelephonyCallSession_Event::clear_has_settings() {
  _has_bits_[0] &= ~0x00000004u;
}
void TelephonyCallSession_Event::clear_settings() {
  if (settings_ != NULL) settings_->::clearcut::connectivity::TelephonySettings::Clear();
  clear_has_settings();
}
const ::clearcut::connectivity::TelephonySettings& TelephonyCallSession_Event::settings() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
::clearcut::connectivity::TelephonySettings* TelephonyCallSession_Event::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) {
    settings_ = new ::clearcut::connectivity::TelephonySettings;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.Event.settings)
  return settings_;
}
::clearcut::connectivity::TelephonySettings* TelephonyCallSession_Event::release_settings() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyCallSession.Event.settings)
  clear_has_settings();
  ::clearcut::connectivity::TelephonySettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
void TelephonyCallSession_Event::set_allocated_settings(::clearcut::connectivity::TelephonySettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyCallSession.Event.settings)
}

// optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
bool TelephonyCallSession_Event::has_service_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TelephonyCallSession_Event::set_has_service_state() {
  _has_bits_[0] |= 0x00000008u;
}
void TelephonyCallSession_Event::clear_has_service_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void TelephonyCallSession_Event::clear_service_state() {
  if (service_state_ != NULL) service_state_->::clearcut::connectivity::TelephonyServiceState::Clear();
  clear_has_service_state();
}
const ::clearcut::connectivity::TelephonyServiceState& TelephonyCallSession_Event::service_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.service_state)
  return service_state_ != NULL ? *service_state_ : *default_instance_->service_state_;
}
::clearcut::connectivity::TelephonyServiceState* TelephonyCallSession_Event::mutable_service_state() {
  set_has_service_state();
  if (service_state_ == NULL) {
    service_state_ = new ::clearcut::connectivity::TelephonyServiceState;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.Event.service_state)
  return service_state_;
}
::clearcut::connectivity::TelephonyServiceState* TelephonyCallSession_Event::release_service_state() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyCallSession.Event.service_state)
  clear_has_service_state();
  ::clearcut::connectivity::TelephonyServiceState* temp = service_state_;
  service_state_ = NULL;
  return temp;
}
void TelephonyCallSession_Event::set_allocated_service_state(::clearcut::connectivity::TelephonyServiceState* service_state) {
  delete service_state_;
  service_state_ = service_state;
  if (service_state) {
    set_has_service_state();
  } else {
    clear_has_service_state();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyCallSession.Event.service_state)
}

// optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
bool TelephonyCallSession_Event::has_ims_connection_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TelephonyCallSession_Event::set_has_ims_connection_state() {
  _has_bits_[0] |= 0x00000010u;
}
void TelephonyCallSession_Event::clear_has_ims_connection_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void TelephonyCallSession_Event::clear_ims_connection_state() {
  if (ims_connection_state_ != NULL) ims_connection_state_->::clearcut::connectivity::ImsConnectionState::Clear();
  clear_has_ims_connection_state();
}
const ::clearcut::connectivity::ImsConnectionState& TelephonyCallSession_Event::ims_connection_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.ims_connection_state)
  return ims_connection_state_ != NULL ? *ims_connection_state_ : *default_instance_->ims_connection_state_;
}
::clearcut::connectivity::ImsConnectionState* TelephonyCallSession_Event::mutable_ims_connection_state() {
  set_has_ims_connection_state();
  if (ims_connection_state_ == NULL) {
    ims_connection_state_ = new ::clearcut::connectivity::ImsConnectionState;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.Event.ims_connection_state)
  return ims_connection_state_;
}
::clearcut::connectivity::ImsConnectionState* TelephonyCallSession_Event::release_ims_connection_state() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyCallSession.Event.ims_connection_state)
  clear_has_ims_connection_state();
  ::clearcut::connectivity::ImsConnectionState* temp = ims_connection_state_;
  ims_connection_state_ = NULL;
  return temp;
}
void TelephonyCallSession_Event::set_allocated_ims_connection_state(::clearcut::connectivity::ImsConnectionState* ims_connection_state) {
  delete ims_connection_state_;
  ims_connection_state_ = ims_connection_state;
  if (ims_connection_state) {
    set_has_ims_connection_state();
  } else {
    clear_has_ims_connection_state();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyCallSession.Event.ims_connection_state)
}

// optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
bool TelephonyCallSession_Event::has_ims_capabilities() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TelephonyCallSession_Event::set_has_ims_capabilities() {
  _has_bits_[0] |= 0x00000020u;
}
void TelephonyCallSession_Event::clear_has_ims_capabilities() {
  _has_bits_[0] &= ~0x00000020u;
}
void TelephonyCallSession_Event::clear_ims_capabilities() {
  if (ims_capabilities_ != NULL) ims_capabilities_->::clearcut::connectivity::ImsCapabilities::Clear();
  clear_has_ims_capabilities();
}
const ::clearcut::connectivity::ImsCapabilities& TelephonyCallSession_Event::ims_capabilities() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.ims_capabilities)
  return ims_capabilities_ != NULL ? *ims_capabilities_ : *default_instance_->ims_capabilities_;
}
::clearcut::connectivity::ImsCapabilities* TelephonyCallSession_Event::mutable_ims_capabilities() {
  set_has_ims_capabilities();
  if (ims_capabilities_ == NULL) {
    ims_capabilities_ = new ::clearcut::connectivity::ImsCapabilities;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.Event.ims_capabilities)
  return ims_capabilities_;
}
::clearcut::connectivity::ImsCapabilities* TelephonyCallSession_Event::release_ims_capabilities() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyCallSession.Event.ims_capabilities)
  clear_has_ims_capabilities();
  ::clearcut::connectivity::ImsCapabilities* temp = ims_capabilities_;
  ims_capabilities_ = NULL;
  return temp;
}
void TelephonyCallSession_Event::set_allocated_ims_capabilities(::clearcut::connectivity::ImsCapabilities* ims_capabilities) {
  delete ims_capabilities_;
  ims_capabilities_ = ims_capabilities;
  if (ims_capabilities) {
    set_has_ims_capabilities();
  } else {
    clear_has_ims_capabilities();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyCallSession.Event.ims_capabilities)
}

// repeated .clearcut.connectivity.RilDataCall data_calls = 7;
int TelephonyCallSession_Event::data_calls_size() const {
  return data_calls_.size();
}
void TelephonyCallSession_Event::clear_data_calls() {
  data_calls_.Clear();
}
const ::clearcut::connectivity::RilDataCall& TelephonyCallSession_Event::data_calls(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.data_calls)
  return data_calls_.Get(index);
}
::clearcut::connectivity::RilDataCall* TelephonyCallSession_Event::mutable_data_calls(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.Event.data_calls)
  return data_calls_.Mutable(index);
}
::clearcut::connectivity::RilDataCall* TelephonyCallSession_Event::add_data_calls() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyCallSession.Event.data_calls)
  return data_calls_.Add();
}
::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >*
TelephonyCallSession_Event::mutable_data_calls() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyCallSession.Event.data_calls)
  return &data_calls_;
}
const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >&
TelephonyCallSession_Event::data_calls() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyCallSession.Event.data_calls)
  return data_calls_;
}

// optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;
bool TelephonyCallSession_Event::has_phone_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TelephonyCallSession_Event::set_has_phone_state() {
  _has_bits_[0] |= 0x00000080u;
}
void TelephonyCallSession_Event::clear_has_phone_state() {
  _has_bits_[0] &= ~0x00000080u;
}
void TelephonyCallSession_Event::clear_phone_state() {
  phone_state_ = 0;
  clear_has_phone_state();
}
 ::clearcut::connectivity::TelephonyCallSession_Event_PhoneState TelephonyCallSession_Event::phone_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.phone_state)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_PhoneState >(phone_state_);
}
 void TelephonyCallSession_Event::set_phone_state(::clearcut::connectivity::TelephonyCallSession_Event_PhoneState value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_PhoneState_IsValid(value));
  set_has_phone_state();
  phone_state_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.phone_state)
}

// optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;
bool TelephonyCallSession_Event::has_call_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TelephonyCallSession_Event::set_has_call_state() {
  _has_bits_[0] |= 0x00000100u;
}
void TelephonyCallSession_Event::clear_has_call_state() {
  _has_bits_[0] &= ~0x00000100u;
}
void TelephonyCallSession_Event::clear_call_state() {
  call_state_ = 0;
  clear_has_call_state();
}
 ::clearcut::connectivity::TelephonyCallSession_Event_CallState TelephonyCallSession_Event::call_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.call_state)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_CallState >(call_state_);
}
 void TelephonyCallSession_Event::set_call_state(::clearcut::connectivity::TelephonyCallSession_Event_CallState value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_CallState_IsValid(value));
  set_has_call_state();
  call_state_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.call_state)
}

// optional int32 call_index = 10;
bool TelephonyCallSession_Event::has_call_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TelephonyCallSession_Event::set_has_call_index() {
  _has_bits_[0] |= 0x00000200u;
}
void TelephonyCallSession_Event::clear_has_call_index() {
  _has_bits_[0] &= ~0x00000200u;
}
void TelephonyCallSession_Event::clear_call_index() {
  call_index_ = 0;
  clear_has_call_index();
}
 ::google::protobuf::int32 TelephonyCallSession_Event::call_index() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.call_index)
  return call_index_;
}
 void TelephonyCallSession_Event::set_call_index(::google::protobuf::int32 value) {
  set_has_call_index();
  call_index_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.call_index)
}

// optional int32 merged_call_index = 11;
bool TelephonyCallSession_Event::has_merged_call_index() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TelephonyCallSession_Event::set_has_merged_call_index() {
  _has_bits_[0] |= 0x00000400u;
}
void TelephonyCallSession_Event::clear_has_merged_call_index() {
  _has_bits_[0] &= ~0x00000400u;
}
void TelephonyCallSession_Event::clear_merged_call_index() {
  merged_call_index_ = 0;
  clear_has_merged_call_index();
}
 ::google::protobuf::int32 TelephonyCallSession_Event::merged_call_index() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.merged_call_index)
  return merged_call_index_;
}
 void TelephonyCallSession_Event::set_merged_call_index(::google::protobuf::int32 value) {
  set_has_merged_call_index();
  merged_call_index_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.merged_call_index)
}

// repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;
int TelephonyCallSession_Event::calls_size() const {
  return calls_.size();
}
void TelephonyCallSession_Event::clear_calls() {
  calls_.Clear();
}
const ::clearcut::connectivity::TelephonyCallSession_Event_RilCall& TelephonyCallSession_Event::calls(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.calls)
  return calls_.Get(index);
}
::clearcut::connectivity::TelephonyCallSession_Event_RilCall* TelephonyCallSession_Event::mutable_calls(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.Event.calls)
  return calls_.Mutable(index);
}
::clearcut::connectivity::TelephonyCallSession_Event_RilCall* TelephonyCallSession_Event::add_calls() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyCallSession.Event.calls)
  return calls_.Add();
}
::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession_Event_RilCall >*
TelephonyCallSession_Event::mutable_calls() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyCallSession.Event.calls)
  return &calls_;
}
const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession_Event_RilCall >&
TelephonyCallSession_Event::calls() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyCallSession.Event.calls)
  return calls_;
}

// optional .clearcut.connectivity.RilErrno error = 13;
bool TelephonyCallSession_Event::has_error() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TelephonyCallSession_Event::set_has_error() {
  _has_bits_[0] |= 0x00001000u;
}
void TelephonyCallSession_Event::clear_has_error() {
  _has_bits_[0] &= ~0x00001000u;
}
void TelephonyCallSession_Event::clear_error() {
  error_ = 0;
  clear_has_error();
}
 ::clearcut::connectivity::RilErrno TelephonyCallSession_Event::error() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.error)
  return static_cast< ::clearcut::connectivity::RilErrno >(error_);
}
 void TelephonyCallSession_Event::set_error(::clearcut::connectivity::RilErrno value) {
  assert(::clearcut::connectivity::RilErrno_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.error)
}

// optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;
bool TelephonyCallSession_Event::has_ril_request() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TelephonyCallSession_Event::set_has_ril_request() {
  _has_bits_[0] |= 0x00002000u;
}
void TelephonyCallSession_Event::clear_has_ril_request() {
  _has_bits_[0] &= ~0x00002000u;
}
void TelephonyCallSession_Event::clear_ril_request() {
  ril_request_ = 0;
  clear_has_ril_request();
}
 ::clearcut::connectivity::TelephonyCallSession_Event_RilRequest TelephonyCallSession_Event::ril_request() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.ril_request)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_RilRequest >(ril_request_);
}
 void TelephonyCallSession_Event::set_ril_request(::clearcut::connectivity::TelephonyCallSession_Event_RilRequest value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_RilRequest_IsValid(value));
  set_has_ril_request();
  ril_request_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.ril_request)
}

// optional int32 ril_request_id = 15;
bool TelephonyCallSession_Event::has_ril_request_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TelephonyCallSession_Event::set_has_ril_request_id() {
  _has_bits_[0] |= 0x00004000u;
}
void TelephonyCallSession_Event::clear_has_ril_request_id() {
  _has_bits_[0] &= ~0x00004000u;
}
void TelephonyCallSession_Event::clear_ril_request_id() {
  ril_request_id_ = 0;
  clear_has_ril_request_id();
}
 ::google::protobuf::int32 TelephonyCallSession_Event::ril_request_id() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.ril_request_id)
  return ril_request_id_;
}
 void TelephonyCallSession_Event::set_ril_request_id(::google::protobuf::int32 value) {
  set_has_ril_request_id();
  ril_request_id_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.ril_request_id)
}

// optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;
bool TelephonyCallSession_Event::has_srvcc_state() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void TelephonyCallSession_Event::set_has_srvcc_state() {
  _has_bits_[0] |= 0x00008000u;
}
void TelephonyCallSession_Event::clear_has_srvcc_state() {
  _has_bits_[0] &= ~0x00008000u;
}
void TelephonyCallSession_Event::clear_srvcc_state() {
  srvcc_state_ = 0;
  clear_has_srvcc_state();
}
 ::clearcut::connectivity::TelephonyCallSession_Event_RilSrvccState TelephonyCallSession_Event::srvcc_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.srvcc_state)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_RilSrvccState >(srvcc_state_);
}
 void TelephonyCallSession_Event::set_srvcc_state(::clearcut::connectivity::TelephonyCallSession_Event_RilSrvccState value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_RilSrvccState_IsValid(value));
  set_has_srvcc_state();
  srvcc_state_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.srvcc_state)
}

// optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;
bool TelephonyCallSession_Event::has_ims_command() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void TelephonyCallSession_Event::set_has_ims_command() {
  _has_bits_[0] |= 0x00010000u;
}
void TelephonyCallSession_Event::clear_has_ims_command() {
  _has_bits_[0] &= ~0x00010000u;
}
void TelephonyCallSession_Event::clear_ims_command() {
  ims_command_ = 0;
  clear_has_ims_command();
}
 ::clearcut::connectivity::TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::ims_command() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.ims_command)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_ImsCommand >(ims_command_);
}
 void TelephonyCallSession_Event::set_ims_command(::clearcut::connectivity::TelephonyCallSession_Event_ImsCommand value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_ImsCommand_IsValid(value));
  set_has_ims_command();
  ims_command_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.ims_command)
}

// optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;
bool TelephonyCallSession_Event::has_reason_info() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void TelephonyCallSession_Event::set_has_reason_info() {
  _has_bits_[0] |= 0x00020000u;
}
void TelephonyCallSession_Event::clear_has_reason_info() {
  _has_bits_[0] &= ~0x00020000u;
}
void TelephonyCallSession_Event::clear_reason_info() {
  if (reason_info_ != NULL) reason_info_->::clearcut::connectivity::ImsReasonInfo::Clear();
  clear_has_reason_info();
}
const ::clearcut::connectivity::ImsReasonInfo& TelephonyCallSession_Event::reason_info() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.reason_info)
  return reason_info_ != NULL ? *reason_info_ : *default_instance_->reason_info_;
}
::clearcut::connectivity::ImsReasonInfo* TelephonyCallSession_Event::mutable_reason_info() {
  set_has_reason_info();
  if (reason_info_ == NULL) {
    reason_info_ = new ::clearcut::connectivity::ImsReasonInfo;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.Event.reason_info)
  return reason_info_;
}
::clearcut::connectivity::ImsReasonInfo* TelephonyCallSession_Event::release_reason_info() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyCallSession.Event.reason_info)
  clear_has_reason_info();
  ::clearcut::connectivity::ImsReasonInfo* temp = reason_info_;
  reason_info_ = NULL;
  return temp;
}
void TelephonyCallSession_Event::set_allocated_reason_info(::clearcut::connectivity::ImsReasonInfo* reason_info) {
  delete reason_info_;
  reason_info_ = reason_info;
  if (reason_info) {
    set_has_reason_info();
  } else {
    clear_has_reason_info();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyCallSession.Event.reason_info)
}

// optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];
bool TelephonyCallSession_Event::has_src_access_tech() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void TelephonyCallSession_Event::set_has_src_access_tech() {
  _has_bits_[0] |= 0x00040000u;
}
void TelephonyCallSession_Event::clear_has_src_access_tech() {
  _has_bits_[0] &= ~0x00040000u;
}
void TelephonyCallSession_Event::clear_src_access_tech() {
  src_access_tech_ = -1;
  clear_has_src_access_tech();
}
 ::clearcut::connectivity::RadioAccessTechnology TelephonyCallSession_Event::src_access_tech() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.src_access_tech)
  return static_cast< ::clearcut::connectivity::RadioAccessTechnology >(src_access_tech_);
}
 void TelephonyCallSession_Event::set_src_access_tech(::clearcut::connectivity::RadioAccessTechnology value) {
  assert(::clearcut::connectivity::RadioAccessTechnology_IsValid(value));
  set_has_src_access_tech();
  src_access_tech_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.src_access_tech)
}

// optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];
bool TelephonyCallSession_Event::has_target_access_tech() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void TelephonyCallSession_Event::set_has_target_access_tech() {
  _has_bits_[0] |= 0x00080000u;
}
void TelephonyCallSession_Event::clear_has_target_access_tech() {
  _has_bits_[0] &= ~0x00080000u;
}
void TelephonyCallSession_Event::clear_target_access_tech() {
  target_access_tech_ = -1;
  clear_has_target_access_tech();
}
 ::clearcut::connectivity::RadioAccessTechnology TelephonyCallSession_Event::target_access_tech() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.target_access_tech)
  return static_cast< ::clearcut::connectivity::RadioAccessTechnology >(target_access_tech_);
}
 void TelephonyCallSession_Event::set_target_access_tech(::clearcut::connectivity::RadioAccessTechnology value) {
  assert(::clearcut::connectivity::RadioAccessTechnology_IsValid(value));
  set_has_target_access_tech();
  target_access_tech_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.target_access_tech)
}

// optional int64 nitz_timestamp_millis = 21;
bool TelephonyCallSession_Event::has_nitz_timestamp_millis() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void TelephonyCallSession_Event::set_has_nitz_timestamp_millis() {
  _has_bits_[0] |= 0x00100000u;
}
void TelephonyCallSession_Event::clear_has_nitz_timestamp_millis() {
  _has_bits_[0] &= ~0x00100000u;
}
void TelephonyCallSession_Event::clear_nitz_timestamp_millis() {
  nitz_timestamp_millis_ = GOOGLE_LONGLONG(0);
  clear_has_nitz_timestamp_millis();
}
 ::google::protobuf::int64 TelephonyCallSession_Event::nitz_timestamp_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.nitz_timestamp_millis)
  return nitz_timestamp_millis_;
}
 void TelephonyCallSession_Event::set_nitz_timestamp_millis(::google::protobuf::int64 value) {
  set_has_nitz_timestamp_millis();
  nitz_timestamp_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.nitz_timestamp_millis)
}

// -------------------------------------------------------------------

// TelephonyCallSession

// optional int32 start_time_minutes = 1;
bool TelephonyCallSession::has_start_time_minutes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TelephonyCallSession::set_has_start_time_minutes() {
  _has_bits_[0] |= 0x00000001u;
}
void TelephonyCallSession::clear_has_start_time_minutes() {
  _has_bits_[0] &= ~0x00000001u;
}
void TelephonyCallSession::clear_start_time_minutes() {
  start_time_minutes_ = 0;
  clear_has_start_time_minutes();
}
 ::google::protobuf::int32 TelephonyCallSession::start_time_minutes() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.start_time_minutes)
  return start_time_minutes_;
}
 void TelephonyCallSession::set_start_time_minutes(::google::protobuf::int32 value) {
  set_has_start_time_minutes();
  start_time_minutes_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.start_time_minutes)
}

// optional int32 phone_id = 2;
bool TelephonyCallSession::has_phone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TelephonyCallSession::set_has_phone_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TelephonyCallSession::clear_has_phone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TelephonyCallSession::clear_phone_id() {
  phone_id_ = 0;
  clear_has_phone_id();
}
 ::google::protobuf::int32 TelephonyCallSession::phone_id() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.phone_id)
  return phone_id_;
}
 void TelephonyCallSession::set_phone_id(::google::protobuf::int32 value) {
  set_has_phone_id();
  phone_id_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.phone_id)
}

// repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;
int TelephonyCallSession::events_size() const {
  return events_.size();
}
void TelephonyCallSession::clear_events() {
  events_.Clear();
}
const ::clearcut::connectivity::TelephonyCallSession_Event& TelephonyCallSession::events(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.events)
  return events_.Get(index);
}
::clearcut::connectivity::TelephonyCallSession_Event* TelephonyCallSession::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.events)
  return events_.Mutable(index);
}
::clearcut::connectivity::TelephonyCallSession_Event* TelephonyCallSession::add_events() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyCallSession.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession_Event >*
TelephonyCallSession::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyCallSession.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession_Event >&
TelephonyCallSession::events() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyCallSession.events)
  return events_;
}

// optional bool events_dropped = 4;
bool TelephonyCallSession::has_events_dropped() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TelephonyCallSession::set_has_events_dropped() {
  _has_bits_[0] |= 0x00000008u;
}
void TelephonyCallSession::clear_has_events_dropped() {
  _has_bits_[0] &= ~0x00000008u;
}
void TelephonyCallSession::clear_events_dropped() {
  events_dropped_ = false;
  clear_has_events_dropped();
}
 bool TelephonyCallSession::events_dropped() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.events_dropped)
  return events_dropped_;
}
 void TelephonyCallSession::set_events_dropped(bool value) {
  set_has_events_dropped();
  events_dropped_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.events_dropped)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SmsSession_Event_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmsSession_Event_Type_descriptor_;
}
bool SmsSession_Event_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SmsSession_Event_Type SmsSession_Event::EVENT_UNKNOWN;
const SmsSession_Event_Type SmsSession_Event::SETTINGS_CHANGED;
const SmsSession_Event_Type SmsSession_Event::RIL_SERVICE_STATE_CHANGED;
const SmsSession_Event_Type SmsSession_Event::IMS_CONNECTION_STATE_CHANGED;
const SmsSession_Event_Type SmsSession_Event::IMS_CAPABILITIES_CHANGED;
const SmsSession_Event_Type SmsSession_Event::DATA_CALL_LIST_CHANGED;
const SmsSession_Event_Type SmsSession_Event::SMS_SEND;
const SmsSession_Event_Type SmsSession_Event::SMS_SEND_RESULT;
const SmsSession_Event_Type SmsSession_Event::SMS_RECEIVED;
const SmsSession_Event_Type SmsSession_Event::Type_MIN;
const SmsSession_Event_Type SmsSession_Event::Type_MAX;
const int SmsSession_Event::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SmsSession_Event_Format_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmsSession_Event_Format_descriptor_;
}
bool SmsSession_Event_Format_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SmsSession_Event_Format SmsSession_Event::SMS_FORMAT_UNKNOWN;
const SmsSession_Event_Format SmsSession_Event::SMS_FORMAT_3GPP;
const SmsSession_Event_Format SmsSession_Event::SMS_FORMAT_3GPP2;
const SmsSession_Event_Format SmsSession_Event::Format_MIN;
const SmsSession_Event_Format SmsSession_Event::Format_MAX;
const int SmsSession_Event::Format_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SmsSession_Event_Tech_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmsSession_Event_Tech_descriptor_;
}
bool SmsSession_Event_Tech_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SmsSession_Event_Tech SmsSession_Event::SMS_UNKNOWN;
const SmsSession_Event_Tech SmsSession_Event::SMS_GSM;
const SmsSession_Event_Tech SmsSession_Event::SMS_CDMA;
const SmsSession_Event_Tech SmsSession_Event::SMS_IMS;
const SmsSession_Event_Tech SmsSession_Event::Tech_MIN;
const SmsSession_Event_Tech SmsSession_Event::Tech_MAX;
const int SmsSession_Event::Tech_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SmsSession_Event::kTypeFieldNumber;
const int SmsSession_Event::kDelayFieldNumber;
const int SmsSession_Event::kSettingsFieldNumber;
const int SmsSession_Event::kServiceStateFieldNumber;
const int SmsSession_Event::kImsConnectionStateFieldNumber;
const int SmsSession_Event::kImsCapabilitiesFieldNumber;
const int SmsSession_Event::kDataCallsFieldNumber;
const int SmsSession_Event::kFormatFieldNumber;
const int SmsSession_Event::kTechFieldNumber;
const int SmsSession_Event::kErrorCodeFieldNumber;
const int SmsSession_Event::kErrorFieldNumber;
const int SmsSession_Event::kRilRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmsSession_Event::SmsSession_Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.SmsSession.Event)
}

void SmsSession_Event::InitAsDefaultInstance() {
  settings_ = const_cast< ::clearcut::connectivity::TelephonySettings*>(&::clearcut::connectivity::TelephonySettings::default_instance());
  service_state_ = const_cast< ::clearcut::connectivity::TelephonyServiceState*>(&::clearcut::connectivity::TelephonyServiceState::default_instance());
  ims_connection_state_ = const_cast< ::clearcut::connectivity::ImsConnectionState*>(&::clearcut::connectivity::ImsConnectionState::default_instance());
  ims_capabilities_ = const_cast< ::clearcut::connectivity::ImsCapabilities*>(&::clearcut::connectivity::ImsCapabilities::default_instance());
}

SmsSession_Event::SmsSession_Event(const SmsSession_Event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.SmsSession.Event)
}

void SmsSession_Event::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  delay_ = 0;
  settings_ = NULL;
  service_state_ = NULL;
  ims_connection_state_ = NULL;
  ims_capabilities_ = NULL;
  format_ = 0;
  tech_ = 0;
  error_code_ = 0;
  error_ = 0;
  ril_request_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmsSession_Event::~SmsSession_Event() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.SmsSession.Event)
  SharedDtor();
}

void SmsSession_Event::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
    delete service_state_;
    delete ims_connection_state_;
    delete ims_capabilities_;
  }
}

void SmsSession_Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmsSession_Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmsSession_Event_descriptor_;
}

const SmsSession_Event& SmsSession_Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

SmsSession_Event* SmsSession_Event::default_instance_ = NULL;

SmsSession_Event* SmsSession_Event::New(::google::protobuf::Arena* arena) const {
  SmsSession_Event* n = new SmsSession_Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SmsSession_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.SmsSession.Event)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SmsSession_Event, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SmsSession_Event*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 191u) {
    ZR_(type_, delay_);
    if (has_settings()) {
      if (settings_ != NULL) settings_->::clearcut::connectivity::TelephonySettings::Clear();
    }
    if (has_service_state()) {
      if (service_state_ != NULL) service_state_->::clearcut::connectivity::TelephonyServiceState::Clear();
    }
    if (has_ims_connection_state()) {
      if (ims_connection_state_ != NULL) ims_connection_state_->::clearcut::connectivity::ImsConnectionState::Clear();
    }
    if (has_ims_capabilities()) {
      if (ims_capabilities_ != NULL) ims_capabilities_->::clearcut::connectivity::ImsCapabilities::Clear();
    }
    format_ = 0;
  }
  ZR_(tech_, ril_request_id_);

#undef ZR_HELPER_
#undef ZR_

  data_calls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SmsSession_Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.SmsSession.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .clearcut.connectivity.SmsSession.Event.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::SmsSession_Event_Type_IsValid(value)) {
            set_type(static_cast< ::clearcut::connectivity::SmsSession_Event_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_delay;
        break;
      }

      // optional .clearcut.connectivity.TimeInterval delay = 2;
      case 2: {
        if (tag == 16) {
         parse_delay:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::TimeInterval_IsValid(value)) {
            set_delay(static_cast< ::clearcut::connectivity::TimeInterval >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_settings;
        break;
      }

      // optional .clearcut.connectivity.TelephonySettings settings = 3;
      case 3: {
        if (tag == 26) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_service_state;
        break;
      }

      // optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
      case 4: {
        if (tag == 34) {
         parse_service_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ims_connection_state;
        break;
      }

      // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
      case 5: {
        if (tag == 42) {
         parse_ims_connection_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ims_connection_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ims_capabilities;
        break;
      }

      // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
      case 6: {
        if (tag == 50) {
         parse_ims_capabilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ims_capabilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data_calls;
        break;
      }

      // repeated .clearcut.connectivity.RilDataCall data_calls = 7;
      case 7: {
        if (tag == 58) {
         parse_data_calls:
          DO_(input->IncrementRecursionDepth());
         parse_loop_data_calls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data_calls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_data_calls;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(64)) goto parse_format;
        break;
      }

      // optional .clearcut.connectivity.SmsSession.Event.Format format = 8;
      case 8: {
        if (tag == 64) {
         parse_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::SmsSession_Event_Format_IsValid(value)) {
            set_format(static_cast< ::clearcut::connectivity::SmsSession_Event_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_tech;
        break;
      }

      // optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;
      case 9: {
        if (tag == 72) {
         parse_tech:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::SmsSession_Event_Tech_IsValid(value)) {
            set_tech(static_cast< ::clearcut::connectivity::SmsSession_Event_Tech >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 10;
      case 10: {
        if (tag == 80) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_error;
        break;
      }

      // optional .clearcut.connectivity.RilErrno error = 11;
      case 11: {
        if (tag == 88) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::RilErrno_IsValid(value)) {
            set_error(static_cast< ::clearcut::connectivity::RilErrno >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ril_request_id;
        break;
      }

      // optional int32 ril_request_id = 12;
      case 12: {
        if (tag == 96) {
         parse_ril_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ril_request_id_)));
          set_has_ril_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.SmsSession.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.SmsSession.Event)
  return false;
#undef DO_
}

void SmsSession_Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.SmsSession.Event)
  // optional .clearcut.connectivity.SmsSession.Event.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .clearcut.connectivity.TimeInterval delay = 2;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->delay(), output);
  }

  // optional .clearcut.connectivity.TelephonySettings settings = 3;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->settings_, output);
  }

  // optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
  if (has_service_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->service_state_, output);
  }

  // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
  if (has_ims_connection_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ims_connection_state_, output);
  }

  // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
  if (has_ims_capabilities()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ims_capabilities_, output);
  }

  // repeated .clearcut.connectivity.RilDataCall data_calls = 7;
  for (unsigned int i = 0, n = this->data_calls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data_calls(i), output);
  }

  // optional .clearcut.connectivity.SmsSession.Event.Format format = 8;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->format(), output);
  }

  // optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;
  if (has_tech()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->tech(), output);
  }

  // optional int32 error_code = 10;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->error_code(), output);
  }

  // optional .clearcut.connectivity.RilErrno error = 11;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->error(), output);
  }

  // optional int32 ril_request_id = 12;
  if (has_ril_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ril_request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.SmsSession.Event)
}

::google::protobuf::uint8* SmsSession_Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.SmsSession.Event)
  // optional .clearcut.connectivity.SmsSession.Event.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .clearcut.connectivity.TimeInterval delay = 2;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->delay(), target);
  }

  // optional .clearcut.connectivity.TelephonySettings settings = 3;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->settings_, false, target);
  }

  // optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
  if (has_service_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->service_state_, false, target);
  }

  // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
  if (has_ims_connection_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ims_connection_state_, false, target);
  }

  // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
  if (has_ims_capabilities()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ims_capabilities_, false, target);
  }

  // repeated .clearcut.connectivity.RilDataCall data_calls = 7;
  for (unsigned int i = 0, n = this->data_calls_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->data_calls(i), false, target);
  }

  // optional .clearcut.connectivity.SmsSession.Event.Format format = 8;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->format(), target);
  }

  // optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;
  if (has_tech()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->tech(), target);
  }

  // optional int32 error_code = 10;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->error_code(), target);
  }

  // optional .clearcut.connectivity.RilErrno error = 11;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->error(), target);
  }

  // optional int32 ril_request_id = 12;
  if (has_ril_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ril_request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.SmsSession.Event)
  return target;
}

int SmsSession_Event::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.SmsSession.Event)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 191u) {
    // optional .clearcut.connectivity.SmsSession.Event.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .clearcut.connectivity.TimeInterval delay = 2;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->delay());
    }

    // optional .clearcut.connectivity.TelephonySettings settings = 3;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->settings_);
    }

    // optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
    if (has_service_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->service_state_);
    }

    // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
    if (has_ims_connection_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ims_connection_state_);
    }

    // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
    if (has_ims_capabilities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ims_capabilities_);
    }

    // optional .clearcut.connectivity.SmsSession.Event.Format format = 8;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;
    if (has_tech()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tech());
    }

    // optional int32 error_code = 10;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional .clearcut.connectivity.RilErrno error = 11;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional int32 ril_request_id = 12;
    if (has_ril_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ril_request_id());
    }

  }
  // repeated .clearcut.connectivity.RilDataCall data_calls = 7;
  total_size += 1 * this->data_calls_size();
  for (int i = 0; i < this->data_calls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_calls(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmsSession_Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.SmsSession.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SmsSession_Event* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SmsSession_Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.SmsSession.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.SmsSession.Event)
    MergeFrom(*source);
  }
}

void SmsSession_Event::MergeFrom(const SmsSession_Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.SmsSession.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_calls_.MergeFrom(from.data_calls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_settings()) {
      mutable_settings()->::clearcut::connectivity::TelephonySettings::MergeFrom(from.settings());
    }
    if (from.has_service_state()) {
      mutable_service_state()->::clearcut::connectivity::TelephonyServiceState::MergeFrom(from.service_state());
    }
    if (from.has_ims_connection_state()) {
      mutable_ims_connection_state()->::clearcut::connectivity::ImsConnectionState::MergeFrom(from.ims_connection_state());
    }
    if (from.has_ims_capabilities()) {
      mutable_ims_capabilities()->::clearcut::connectivity::ImsCapabilities::MergeFrom(from.ims_capabilities());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tech()) {
      set_tech(from.tech());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_ril_request_id()) {
      set_ril_request_id(from.ril_request_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SmsSession_Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.SmsSession.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmsSession_Event::CopyFrom(const SmsSession_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.SmsSession.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmsSession_Event::IsInitialized() const {

  return true;
}

void SmsSession_Event::Swap(SmsSession_Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmsSession_Event::InternalSwap(SmsSession_Event* other) {
  std::swap(type_, other->type_);
  std::swap(delay_, other->delay_);
  std::swap(settings_, other->settings_);
  std::swap(service_state_, other->service_state_);
  std::swap(ims_connection_state_, other->ims_connection_state_);
  std::swap(ims_capabilities_, other->ims_capabilities_);
  data_calls_.UnsafeArenaSwap(&other->data_calls_);
  std::swap(format_, other->format_);
  std::swap(tech_, other->tech_);
  std::swap(error_code_, other->error_code_);
  std::swap(error_, other->error_);
  std::swap(ril_request_id_, other->ril_request_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SmsSession_Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmsSession_Event_descriptor_;
  metadata.reflection = SmsSession_Event_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SmsSession::kStartTimeMinutesFieldNumber;
const int SmsSession::kPhoneIdFieldNumber;
const int SmsSession::kEventsFieldNumber;
const int SmsSession::kEventsDroppedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmsSession::SmsSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.SmsSession)
}

void SmsSession::InitAsDefaultInstance() {
}

SmsSession::SmsSession(const SmsSession& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.SmsSession)
}

void SmsSession::SharedCtor() {
  _cached_size_ = 0;
  start_time_minutes_ = 0;
  phone_id_ = 0;
  events_dropped_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmsSession::~SmsSession() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.SmsSession)
  SharedDtor();
}

void SmsSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmsSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmsSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmsSession_descriptor_;
}

const SmsSession& SmsSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  return *default_instance_;
}

SmsSession* SmsSession::default_instance_ = NULL;

SmsSession* SmsSession::New(::google::protobuf::Arena* arena) const {
  SmsSession* n = new SmsSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SmsSession::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.SmsSession)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SmsSession, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SmsSession*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 11u) {
    ZR_(start_time_minutes_, phone_id_);
    events_dropped_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SmsSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.SmsSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 start_time_minutes = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_minutes_)));
          set_has_start_time_minutes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_phone_id;
        break;
      }

      // optional int32 phone_id = 2;
      case 2: {
        if (tag == 16) {
         parse_phone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phone_id_)));
          set_has_phone_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_events;
        break;
      }

      // repeated .clearcut.connectivity.SmsSession.Event events = 3;
      case 3: {
        if (tag == 26) {
         parse_events:
          DO_(input->IncrementRecursionDepth());
         parse_loop_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_events;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_events_dropped;
        break;
      }

      // optional bool events_dropped = 4;
      case 4: {
        if (tag == 32) {
         parse_events_dropped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &events_dropped_)));
          set_has_events_dropped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.SmsSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.SmsSession)
  return false;
#undef DO_
}

void SmsSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.SmsSession)
  // optional int32 start_time_minutes = 1;
  if (has_start_time_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start_time_minutes(), output);
  }

  // optional int32 phone_id = 2;
  if (has_phone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->phone_id(), output);
  }

  // repeated .clearcut.connectivity.SmsSession.Event events = 3;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->events(i), output);
  }

  // optional bool events_dropped = 4;
  if (has_events_dropped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->events_dropped(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.SmsSession)
}

::google::protobuf::uint8* SmsSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:clearcut.connectivity.SmsSession)
  // optional int32 start_time_minutes = 1;
  if (has_start_time_minutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start_time_minutes(), target);
  }

  // optional int32 phone_id = 2;
  if (has_phone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->phone_id(), target);
  }

  // repeated .clearcut.connectivity.SmsSession.Event events = 3;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->events(i), false, target);
  }

  // optional bool events_dropped = 4;
  if (has_events_dropped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->events_dropped(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearcut.connectivity.SmsSession)
  return target;
}

int SmsSession::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.SmsSession)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 11u) {
    // optional int32 start_time_minutes = 1;
    if (has_start_time_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time_minutes());
    }

    // optional int32 phone_id = 2;
    if (has_phone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phone_id());
    }

    // optional bool events_dropped = 4;
    if (has_events_dropped()) {
      total_size += 1 + 1;
    }

  }
  // repeated .clearcut.connectivity.SmsSession.Event events = 3;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmsSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearcut.connectivity.SmsSession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SmsSession* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SmsSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearcut.connectivity.SmsSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearcut.connectivity.SmsSession)
    MergeFrom(*source);
  }
}

void SmsSession::MergeFrom(const SmsSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.SmsSession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time_minutes()) {
      set_start_time_minutes(from.start_time_minutes());
    }
    if (from.has_phone_id()) {
      set_phone_id(from.phone_id());
    }
    if (from.has_events_dropped()) {
      set_events_dropped(from.events_dropped());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SmsSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearcut.connectivity.SmsSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmsSession::CopyFrom(const SmsSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.SmsSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmsSession::IsInitialized() const {

  return true;
}

void SmsSession::Swap(SmsSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmsSession::InternalSwap(SmsSession* other) {
  std::swap(start_time_minutes_, other->start_time_minutes_);
  std::swap(phone_id_, other->phone_id_);
  events_.UnsafeArenaSwap(&other->events_);
  std::swap(events_dropped_, other->events_dropped_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SmsSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmsSession_descriptor_;
  metadata.reflection = SmsSession_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SmsSession_Event

// optional .clearcut.connectivity.SmsSession.Event.Type type = 1;
bool SmsSession_Event::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SmsSession_Event::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void SmsSession_Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void SmsSession_Event::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::clearcut::connectivity::SmsSession_Event_Type SmsSession_Event::type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.type)
  return static_cast< ::clearcut::connectivity::SmsSession_Event_Type >(type_);
}
 void SmsSession_Event::set_type(::clearcut::connectivity::SmsSession_Event_Type value) {
  assert(::clearcut::connectivity::SmsSession_Event_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.Event.type)
}

// optional .clearcut.connectivity.TimeInterval delay = 2;
bool SmsSession_Event::has_delay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SmsSession_Event::set_has_delay() {
  _has_bits_[0] |= 0x00000002u;
}
void SmsSession_Event::clear_has_delay() {
  _has_bits_[0] &= ~0x00000002u;
}
void SmsSession_Event::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
 ::clearcut::connectivity::TimeInterval SmsSession_Event::delay() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.delay)
  return static_cast< ::clearcut::connectivity::TimeInterval >(delay_);
}
 void SmsSession_Event::set_delay(::clearcut::connectivity::TimeInterval value) {
  assert(::clearcut::connectivity::TimeInterval_IsValid(value));
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.Event.delay)
}

// optional .clearcut.connectivity.TelephonySettings settings = 3;
bool SmsSession_Event::has_settings() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SmsSession_Event::set_has_settings() {
  _has_bits_[0] |= 0x00000004u;
}
void SmsSession_Event::clear_has_settings() {
  _has_bits_[0] &= ~0x00000004u;
}
void SmsSession_Event::clear_settings() {
  if (settings_ != NULL) settings_->::clearcut::connectivity::TelephonySettings::Clear();
  clear_has_settings();
}
const ::clearcut::connectivity::TelephonySettings& SmsSession_Event::settings() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
::clearcut::connectivity::TelephonySettings* SmsSession_Event::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) {
    settings_ = new ::clearcut::connectivity::TelephonySettings;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.SmsSession.Event.settings)
  return settings_;
}
::clearcut::connectivity::TelephonySettings* SmsSession_Event::release_settings() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.SmsSession.Event.settings)
  clear_has_settings();
  ::clearcut::connectivity::TelephonySettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
void SmsSession_Event::set_allocated_settings(::clearcut::connectivity::TelephonySettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.SmsSession.Event.settings)
}

// optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
bool SmsSession_Event::has_service_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SmsSession_Event::set_has_service_state() {
  _has_bits_[0] |= 0x00000008u;
}
void SmsSession_Event::clear_has_service_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void SmsSession_Event::clear_service_state() {
  if (service_state_ != NULL) service_state_->::clearcut::connectivity::TelephonyServiceState::Clear();
  clear_has_service_state();
}
const ::clearcut::connectivity::TelephonyServiceState& SmsSession_Event::service_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.service_state)
  return service_state_ != NULL ? *service_state_ : *default_instance_->service_state_;
}
::clearcut::connectivity::TelephonyServiceState* SmsSession_Event::mutable_service_state() {
  set_has_service_state();
  if (service_state_ == NULL) {
    service_state_ = new ::clearcut::connectivity::TelephonyServiceState;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.SmsSession.Event.service_state)
  return service_state_;
}
::clearcut::connectivity::TelephonyServiceState* SmsSession_Event::release_service_state() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.SmsSession.Event.service_state)
  clear_has_service_state();
  ::clearcut::connectivity::TelephonyServiceState* temp = service_state_;
  service_state_ = NULL;
  return temp;
}
void SmsSession_Event::set_allocated_service_state(::clearcut::connectivity::TelephonyServiceState* service_state) {
  delete service_state_;
  service_state_ = service_state;
  if (service_state) {
    set_has_service_state();
  } else {
    clear_has_service_state();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.SmsSession.Event.service_state)
}

// optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
bool SmsSession_Event::has_ims_connection_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SmsSession_Event::set_has_ims_connection_state() {
  _has_bits_[0] |= 0x00000010u;
}
void SmsSession_Event::clear_has_ims_connection_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void SmsSession_Event::clear_ims_connection_state() {
  if (ims_connection_state_ != NULL) ims_connection_state_->::clearcut::connectivity::ImsConnectionState::Clear();
  clear_has_ims_connection_state();
}
const ::clearcut::connectivity::ImsConnectionState& SmsSession_Event::ims_connection_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.ims_connection_state)
  return ims_connection_state_ != NULL ? *ims_connection_state_ : *default_instance_->ims_connection_state_;
}
::clearcut::connectivity::ImsConnectionState* SmsSession_Event::mutable_ims_connection_state() {
  set_has_ims_connection_state();
  if (ims_connection_state_ == NULL) {
    ims_connection_state_ = new ::clearcut::connectivity::ImsConnectionState;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.SmsSession.Event.ims_connection_state)
  return ims_connection_state_;
}
::clearcut::connectivity::ImsConnectionState* SmsSession_Event::release_ims_connection_state() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.SmsSession.Event.ims_connection_state)
  clear_has_ims_connection_state();
  ::clearcut::connectivity::ImsConnectionState* temp = ims_connection_state_;
  ims_connection_state_ = NULL;
  return temp;
}
void SmsSession_Event::set_allocated_ims_connection_state(::clearcut::connectivity::ImsConnectionState* ims_connection_state) {
  delete ims_connection_state_;
  ims_connection_state_ = ims_connection_state;
  if (ims_connection_state) {
    set_has_ims_connection_state();
  } else {
    clear_has_ims_connection_state();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.SmsSession.Event.ims_connection_state)
}

// optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
bool SmsSession_Event::has_ims_capabilities() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SmsSession_Event::set_has_ims_capabilities() {
  _has_bits_[0] |= 0x00000020u;
}
void SmsSession_Event::clear_has_ims_capabilities() {
  _has_bits_[0] &= ~0x00000020u;
}
void SmsSession_Event::clear_ims_capabilities() {
  if (ims_capabilities_ != NULL) ims_capabilities_->::clearcut::connectivity::ImsCapabilities::Clear();
  clear_has_ims_capabilities();
}
const ::clearcut::connectivity::ImsCapabilities& SmsSession_Event::ims_capabilities() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.ims_capabilities)
  return ims_capabilities_ != NULL ? *ims_capabilities_ : *default_instance_->ims_capabilities_;
}
::clearcut::connectivity::ImsCapabilities* SmsSession_Event::mutable_ims_capabilities() {
  set_has_ims_capabilities();
  if (ims_capabilities_ == NULL) {
    ims_capabilities_ = new ::clearcut::connectivity::ImsCapabilities;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.SmsSession.Event.ims_capabilities)
  return ims_capabilities_;
}
::clearcut::connectivity::ImsCapabilities* SmsSession_Event::release_ims_capabilities() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.SmsSession.Event.ims_capabilities)
  clear_has_ims_capabilities();
  ::clearcut::connectivity::ImsCapabilities* temp = ims_capabilities_;
  ims_capabilities_ = NULL;
  return temp;
}
void SmsSession_Event::set_allocated_ims_capabilities(::clearcut::connectivity::ImsCapabilities* ims_capabilities) {
  delete ims_capabilities_;
  ims_capabilities_ = ims_capabilities;
  if (ims_capabilities) {
    set_has_ims_capabilities();
  } else {
    clear_has_ims_capabilities();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.SmsSession.Event.ims_capabilities)
}

// repeated .clearcut.connectivity.RilDataCall data_calls = 7;
int SmsSession_Event::data_calls_size() const {
  return data_calls_.size();
}
void SmsSession_Event::clear_data_calls() {
  data_calls_.Clear();
}
const ::clearcut::connectivity::RilDataCall& SmsSession_Event::data_calls(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.data_calls)
  return data_calls_.Get(index);
}
::clearcut::connectivity::RilDataCall* SmsSession_Event::mutable_data_calls(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.SmsSession.Event.data_calls)
  return data_calls_.Mutable(index);
}
::clearcut::connectivity::RilDataCall* SmsSession_Event::add_data_calls() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.SmsSession.Event.data_calls)
  return data_calls_.Add();
}
::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >*
SmsSession_Event::mutable_data_calls() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.SmsSession.Event.data_calls)
  return &data_calls_;
}
const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >&
SmsSession_Event::data_calls() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.SmsSession.Event.data_calls)
  return data_calls_;
}

// optional .clearcut.connectivity.SmsSession.Event.Format format = 8;
bool SmsSession_Event::has_format() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SmsSession_Event::set_has_format() {
  _has_bits_[0] |= 0x00000080u;
}
void SmsSession_Event::clear_has_format() {
  _has_bits_[0] &= ~0x00000080u;
}
void SmsSession_Event::clear_format() {
  format_ = 0;
  clear_has_format();
}
 ::clearcut::connectivity::SmsSession_Event_Format SmsSession_Event::format() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.format)
  return static_cast< ::clearcut::connectivity::SmsSession_Event_Format >(format_);
}
 void SmsSession_Event::set_format(::clearcut::connectivity::SmsSession_Event_Format value) {
  assert(::clearcut::connectivity::SmsSession_Event_Format_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.Event.format)
}

// optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;
bool SmsSession_Event::has_tech() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SmsSession_Event::set_has_tech() {
  _has_bits_[0] |= 0x00000100u;
}
void SmsSession_Event::clear_has_tech() {
  _has_bits_[0] &= ~0x00000100u;
}
void SmsSession_Event::clear_tech() {
  tech_ = 0;
  clear_has_tech();
}
 ::clearcut::connectivity::SmsSession_Event_Tech SmsSession_Event::tech() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.tech)
  return static_cast< ::clearcut::connectivity::SmsSession_Event_Tech >(tech_);
}
 void SmsSession_Event::set_tech(::clearcut::connectivity::SmsSession_Event_Tech value) {
  assert(::clearcut::connectivity::SmsSession_Event_Tech_IsValid(value));
  set_has_tech();
  tech_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.Event.tech)
}

// optional int32 error_code = 10;
bool SmsSession_Event::has_error_code() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SmsSession_Event::set_has_error_code() {
  _has_bits_[0] |= 0x00000200u;
}
void SmsSession_Event::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000200u;
}
void SmsSession_Event::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::google::protobuf::int32 SmsSession_Event::error_code() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.error_code)
  return error_code_;
}
 void SmsSession_Event::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.Event.error_code)
}

// optional .clearcut.connectivity.RilErrno error = 11;
bool SmsSession_Event::has_error() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SmsSession_Event::set_has_error() {
  _has_bits_[0] |= 0x00000400u;
}
void SmsSession_Event::clear_has_error() {
  _has_bits_[0] &= ~0x00000400u;
}
void SmsSession_Event::clear_error() {
  error_ = 0;
  clear_has_error();
}
 ::clearcut::connectivity::RilErrno SmsSession_Event::error() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.error)
  return static_cast< ::clearcut::connectivity::RilErrno >(error_);
}
 void SmsSession_Event::set_error(::clearcut::connectivity::RilErrno value) {
  assert(::clearcut::connectivity::RilErrno_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.Event.error)
}

// optional int32 ril_request_id = 12;
bool SmsSession_Event::has_ril_request_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SmsSession_Event::set_has_ril_request_id() {
  _has_bits_[0] |= 0x00000800u;
}
void SmsSession_Event::clear_has_ril_request_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void SmsSession_Event::clear_ril_request_id() {
  ril_request_id_ = 0;
  clear_has_ril_request_id();
}
 ::google::protobuf::int32 SmsSession_Event::ril_request_id() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.ril_request_id)
  return ril_request_id_;
}
 void SmsSession_Event::set_ril_request_id(::google::protobuf::int32 value) {
  set_has_ril_request_id();
  ril_request_id_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.Event.ril_request_id)
}

// -------------------------------------------------------------------

// SmsSession

// optional int32 start_time_minutes = 1;
bool SmsSession::has_start_time_minutes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SmsSession::set_has_start_time_minutes() {
  _has_bits_[0] |= 0x00000001u;
}
void SmsSession::clear_has_start_time_minutes() {
  _has_bits_[0] &= ~0x00000001u;
}
void SmsSession::clear_start_time_minutes() {
  start_time_minutes_ = 0;
  clear_has_start_time_minutes();
}
 ::google::protobuf::int32 SmsSession::start_time_minutes() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.start_time_minutes)
  return start_time_minutes_;
}
 void SmsSession::set_start_time_minutes(::google::protobuf::int32 value) {
  set_has_start_time_minutes();
  start_time_minutes_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.start_time_minutes)
}

// optional int32 phone_id = 2;
bool SmsSession::has_phone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SmsSession::set_has_phone_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SmsSession::clear_has_phone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SmsSession::clear_phone_id() {
  phone_id_ = 0;
  clear_has_phone_id();
}
 ::google::protobuf::int32 SmsSession::phone_id() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.phone_id)
  return phone_id_;
}
 void SmsSession::set_phone_id(::google::protobuf::int32 value) {
  set_has_phone_id();
  phone_id_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.phone_id)
}

// repeated .clearcut.connectivity.SmsSession.Event events = 3;
int SmsSession::events_size() const {
  return events_.size();
}
void SmsSession::clear_events() {
  events_.Clear();
}
const ::clearcut::connectivity::SmsSession_Event& SmsSession::events(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.events)
  return events_.Get(index);
}
::clearcut::connectivity::SmsSession_Event* SmsSession::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.SmsSession.events)
  return events_.Mutable(index);
}
::clearcut::connectivity::SmsSession_Event* SmsSession::add_events() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.SmsSession.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::SmsSession_Event >*
SmsSession::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.SmsSession.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::SmsSession_Event >&
SmsSession::events() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.SmsSession.events)
  return events_;
}

// optional bool events_dropped = 4;
bool SmsSession::has_events_dropped() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SmsSession::set_has_events_dropped() {
  _has_bits_[0] |= 0x00000008u;
}
void SmsSession::clear_has_events_dropped() {
  _has_bits_[0] &= ~0x00000008u;
}
void SmsSession::clear_events_dropped() {
  events_dropped_ = false;
  clear_has_events_dropped();
}
 bool SmsSession::events_dropped() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.events_dropped)
  return events_dropped_;
}
 void SmsSession::set_events_dropped(bool value) {
  set_has_events_dropped();
  events_dropped_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.events_dropped)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace connectivity
}  // namespace clearcut

// @@protoc_insertion_point(global_scope)
