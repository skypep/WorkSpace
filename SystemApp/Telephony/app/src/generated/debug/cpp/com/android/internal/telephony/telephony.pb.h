// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/android/internal/telephony/telephony.proto

#ifndef PROTOBUF_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto__INCLUDED
#define PROTOBUF_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace clearcut {
namespace connectivity {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

class ImsCapabilities;
class ImsConnectionState;
class ImsReasonInfo;
class RilDataCall;
class SmsSession;
class SmsSession_Event;
class TelephonyCallSession;
class TelephonyCallSession_Event;
class TelephonyCallSession_Event_RilCall;
class TelephonyEvent;
class TelephonyEvent_ModemRestart;
class TelephonyEvent_RilDeactivateDataCall;
class TelephonyEvent_RilSetupDataCall;
class TelephonyEvent_RilSetupDataCallResponse;
class TelephonyHistogram;
class TelephonyLog;
class TelephonyServiceState;
class TelephonyServiceState_TelephonyOperator;
class TelephonySettings;
class Time;

enum TelephonySettings_RilNetworkMode {
  TelephonySettings_RilNetworkMode_NETWORK_MODE_UNKNOWN = 0,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_WCDMA_PREF = 1,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_GSM_ONLY = 2,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_WCDMA_ONLY = 3,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_GSM_UMTS = 4,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_CDMA = 5,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_CDMA_NO_EVDO = 6,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_EVDO_NO_CDMA = 7,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_GLOBAL = 8,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_CDMA_EVDO = 9,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_GSM_WCDMA = 10,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA = 11,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_ONLY = 12,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_WCDMA = 13,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_TDSCDMA_ONLY = 14,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_TDSCDMA_WCDMA = 15,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_TDSCDMA = 16,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_TDSCDMA_GSM = 17,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_TDSCDMA_GSM = 18,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_TDSCDMA_GSM_WCDMA = 19,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_TDSCDMA_WCDMA = 20,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA = 21,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA = 22,
  TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA = 23
};
bool TelephonySettings_RilNetworkMode_IsValid(int value);
const TelephonySettings_RilNetworkMode TelephonySettings_RilNetworkMode_RilNetworkMode_MIN = TelephonySettings_RilNetworkMode_NETWORK_MODE_UNKNOWN;
const TelephonySettings_RilNetworkMode TelephonySettings_RilNetworkMode_RilNetworkMode_MAX = TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA;
const int TelephonySettings_RilNetworkMode_RilNetworkMode_ARRAYSIZE = TelephonySettings_RilNetworkMode_RilNetworkMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* TelephonySettings_RilNetworkMode_descriptor();
inline const ::std::string& TelephonySettings_RilNetworkMode_Name(TelephonySettings_RilNetworkMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    TelephonySettings_RilNetworkMode_descriptor(), value);
}
inline bool TelephonySettings_RilNetworkMode_Parse(
    const ::std::string& name, TelephonySettings_RilNetworkMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelephonySettings_RilNetworkMode>(
    TelephonySettings_RilNetworkMode_descriptor(), name, value);
}
enum TelephonySettings_WiFiCallingMode {
  TelephonySettings_WiFiCallingMode_WFC_MODE_UNKNOWN = 0,
  TelephonySettings_WiFiCallingMode_WFC_MODE_WIFI_ONLY = 1,
  TelephonySettings_WiFiCallingMode_WFC_MODE_CELLULAR_PREFERRED = 2,
  TelephonySettings_WiFiCallingMode_WFC_MODE_WIFI_PREFERRED = 3
};
bool TelephonySettings_WiFiCallingMode_IsValid(int value);
const TelephonySettings_WiFiCallingMode TelephonySettings_WiFiCallingMode_WiFiCallingMode_MIN = TelephonySettings_WiFiCallingMode_WFC_MODE_UNKNOWN;
const TelephonySettings_WiFiCallingMode TelephonySettings_WiFiCallingMode_WiFiCallingMode_MAX = TelephonySettings_WiFiCallingMode_WFC_MODE_WIFI_PREFERRED;
const int TelephonySettings_WiFiCallingMode_WiFiCallingMode_ARRAYSIZE = TelephonySettings_WiFiCallingMode_WiFiCallingMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* TelephonySettings_WiFiCallingMode_descriptor();
inline const ::std::string& TelephonySettings_WiFiCallingMode_Name(TelephonySettings_WiFiCallingMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    TelephonySettings_WiFiCallingMode_descriptor(), value);
}
inline bool TelephonySettings_WiFiCallingMode_Parse(
    const ::std::string& name, TelephonySettings_WiFiCallingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelephonySettings_WiFiCallingMode>(
    TelephonySettings_WiFiCallingMode_descriptor(), name, value);
}
enum TelephonyServiceState_RoamingType {
  TelephonyServiceState_RoamingType_UNKNOWN = -1,
  TelephonyServiceState_RoamingType_ROAMING_TYPE_NOT_ROAMING = 0,
  TelephonyServiceState_RoamingType_ROAMING_TYPE_DOMESTIC = 2,
  TelephonyServiceState_RoamingType_ROAMING_TYPE_INTERNATIONAL = 3
};
bool TelephonyServiceState_RoamingType_IsValid(int value);
const TelephonyServiceState_RoamingType TelephonyServiceState_RoamingType_RoamingType_MIN = TelephonyServiceState_RoamingType_UNKNOWN;
const TelephonyServiceState_RoamingType TelephonyServiceState_RoamingType_RoamingType_MAX = TelephonyServiceState_RoamingType_ROAMING_TYPE_INTERNATIONAL;
const int TelephonyServiceState_RoamingType_RoamingType_ARRAYSIZE = TelephonyServiceState_RoamingType_RoamingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TelephonyServiceState_RoamingType_descriptor();
inline const ::std::string& TelephonyServiceState_RoamingType_Name(TelephonyServiceState_RoamingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TelephonyServiceState_RoamingType_descriptor(), value);
}
inline bool TelephonyServiceState_RoamingType_Parse(
    const ::std::string& name, TelephonyServiceState_RoamingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelephonyServiceState_RoamingType>(
    TelephonyServiceState_RoamingType_descriptor(), name, value);
}
enum ImsConnectionState_State {
  ImsConnectionState_State_STATE_UNKNOWN = 0,
  ImsConnectionState_State_CONNECTED = 1,
  ImsConnectionState_State_PROGRESSING = 2,
  ImsConnectionState_State_DISCONNECTED = 3,
  ImsConnectionState_State_RESUMED = 4,
  ImsConnectionState_State_SUSPENDED = 5
};
bool ImsConnectionState_State_IsValid(int value);
const ImsConnectionState_State ImsConnectionState_State_State_MIN = ImsConnectionState_State_STATE_UNKNOWN;
const ImsConnectionState_State ImsConnectionState_State_State_MAX = ImsConnectionState_State_SUSPENDED;
const int ImsConnectionState_State_State_ARRAYSIZE = ImsConnectionState_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImsConnectionState_State_descriptor();
inline const ::std::string& ImsConnectionState_State_Name(ImsConnectionState_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImsConnectionState_State_descriptor(), value);
}
inline bool ImsConnectionState_State_Parse(
    const ::std::string& name, ImsConnectionState_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImsConnectionState_State>(
    ImsConnectionState_State_descriptor(), name, value);
}
enum TelephonyEvent_RilSetupDataCall_RilDataProfile {
  TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_UNKNOWN = 0,
  TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_PROFILE_DEFAULT = 1,
  TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_PROFILE_TETHERED = 2,
  TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_PROFILE_IMS = 3,
  TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_PROFILE_FOTA = 4,
  TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_PROFILE_CBS = 5,
  TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_PROFILE_OEM_BASE = 6,
  TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_PROFILE_INVALID = 7
};
bool TelephonyEvent_RilSetupDataCall_RilDataProfile_IsValid(int value);
const TelephonyEvent_RilSetupDataCall_RilDataProfile TelephonyEvent_RilSetupDataCall_RilDataProfile_RilDataProfile_MIN = TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_UNKNOWN;
const TelephonyEvent_RilSetupDataCall_RilDataProfile TelephonyEvent_RilSetupDataCall_RilDataProfile_RilDataProfile_MAX = TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_PROFILE_INVALID;
const int TelephonyEvent_RilSetupDataCall_RilDataProfile_RilDataProfile_ARRAYSIZE = TelephonyEvent_RilSetupDataCall_RilDataProfile_RilDataProfile_MAX + 1;

const ::google::protobuf::EnumDescriptor* TelephonyEvent_RilSetupDataCall_RilDataProfile_descriptor();
inline const ::std::string& TelephonyEvent_RilSetupDataCall_RilDataProfile_Name(TelephonyEvent_RilSetupDataCall_RilDataProfile value) {
  return ::google::protobuf::internal::NameOfEnum(
    TelephonyEvent_RilSetupDataCall_RilDataProfile_descriptor(), value);
}
inline bool TelephonyEvent_RilSetupDataCall_RilDataProfile_Parse(
    const ::std::string& name, TelephonyEvent_RilSetupDataCall_RilDataProfile* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelephonyEvent_RilSetupDataCall_RilDataProfile>(
    TelephonyEvent_RilSetupDataCall_RilDataProfile_descriptor(), name, value);
}
enum TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause {
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_UNKNOWN = 0,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_NONE = 1,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_OPERATOR_BARRED = 8,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_NAS_SIGNALLING = 14,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_LLC_SNDCP = 25,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_INSUFFICIENT_RESOURCES = 26,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_MISSING_UKNOWN_APN = 27,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_UNKNOWN_PDP_ADDRESS_TYPE = 28,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_USER_AUTHENTICATION = 29,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_ACTIVATION_REJECT_GGSN = 30,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_ACTIVATION_REJECT_UNSPECIFIED = 31,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_SERVICE_OPTION_NOT_SUPPORTED = 32,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED = 33,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_SERVICE_OPTION_OUT_OF_ORDER = 34,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_NSAPI_IN_USE = 35,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_REGULAR_DEACTIVATION = 36,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_QOS_NOT_ACCEPTED = 37,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_NETWORK_FAILURE = 38,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_UMTS_REACTIVATION_REQ = 39,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_FEATURE_NOT_SUPP = 40,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_TFT_SEMANTIC_ERROR = 41,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_TFT_SYTAX_ERROR = 42,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_UNKNOWN_PDP_CONTEXT = 43,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_FILTER_SEMANTIC_ERROR = 44,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_FILTER_SYTAX_ERROR = 45,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_PDP_WITHOUT_ACTIVE_TFT = 46,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_ONLY_IPV4_ALLOWED = 50,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_ONLY_IPV6_ALLOWED = 51,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED = 52,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_ESM_INFO_NOT_RECEIVED = 53,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_PDN_CONN_DOES_NOT_EXIST = 54,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED = 55,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED = 65,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN = 66,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_INVALID_TRANSACTION_ID = 81,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_MESSAGE_INCORRECT_SEMANTIC = 95,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_INVALID_MANDATORY_INFO = 96,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_MESSAGE_TYPE_UNSUPPORTED = 97,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE = 98,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_UNKNOWN_INFO_ELEMENT = 99,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_CONDITIONAL_IE_ERROR = 100,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE = 101,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_PROTOCOL_ERRORS = 111,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_APN_TYPE_CONFLICT = 112,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_INVALID_PCSCF_ADDR = 113,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN = 114,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_EMM_ACCESS_BARRED = 115,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_EMERGENCY_IFACE_ONLY = 116,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_IFACE_MISMATCH = 117,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_COMPANION_IFACE_IN_USE = 118,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_IP_ADDRESS_MISMATCH = 119,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_IFACE_AND_POL_FAMILY_MISMATCH = 120,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY = 121,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL = 122,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_VOICE_REGISTRATION_FAIL = -1,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_DATA_REGISTRATION_FAIL = -2,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_SIGNAL_LOST = -3,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_PREF_RADIO_TECH_CHANGED = -4,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_RADIO_POWER_OFF = -5,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_TETHERED_CALL_ACTIVE = -6,
  TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_ERROR_UNSPECIFIED = 65535
};
bool TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_IsValid(int value);
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_RilDataCallFailCause_MIN = TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_TETHERED_CALL_ACTIVE;
const TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_RilDataCallFailCause_MAX = TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_ERROR_UNSPECIFIED;
const int TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_RilDataCallFailCause_ARRAYSIZE = TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_RilDataCallFailCause_MAX + 1;

const ::google::protobuf::EnumDescriptor* TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_descriptor();
inline const ::std::string& TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_Name(TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause value) {
  return ::google::protobuf::internal::NameOfEnum(
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_descriptor(), value);
}
inline bool TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_Parse(
    const ::std::string& name, TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause>(
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_descriptor(), name, value);
}
enum TelephonyEvent_RilDeactivateDataCall_DeactivateReason {
  TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DEACTIVATE_REASON_UNKNOWN = 0,
  TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DEACTIVATE_REASON_NONE = 1,
  TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DEACTIVATE_REASON_RADIO_OFF = 2,
  TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DEACTIVATE_REASON_PDP_RESET = 3
};
bool TelephonyEvent_RilDeactivateDataCall_DeactivateReason_IsValid(int value);
const TelephonyEvent_RilDeactivateDataCall_DeactivateReason TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DeactivateReason_MIN = TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DEACTIVATE_REASON_UNKNOWN;
const TelephonyEvent_RilDeactivateDataCall_DeactivateReason TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DeactivateReason_MAX = TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DEACTIVATE_REASON_PDP_RESET;
const int TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DeactivateReason_ARRAYSIZE = TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DeactivateReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* TelephonyEvent_RilDeactivateDataCall_DeactivateReason_descriptor();
inline const ::std::string& TelephonyEvent_RilDeactivateDataCall_DeactivateReason_Name(TelephonyEvent_RilDeactivateDataCall_DeactivateReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    TelephonyEvent_RilDeactivateDataCall_DeactivateReason_descriptor(), value);
}
inline bool TelephonyEvent_RilDeactivateDataCall_DeactivateReason_Parse(
    const ::std::string& name, TelephonyEvent_RilDeactivateDataCall_DeactivateReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelephonyEvent_RilDeactivateDataCall_DeactivateReason>(
    TelephonyEvent_RilDeactivateDataCall_DeactivateReason_descriptor(), name, value);
}
enum TelephonyEvent_Type {
  TelephonyEvent_Type_UNKNOWN = 0,
  TelephonyEvent_Type_SETTINGS_CHANGED = 1,
  TelephonyEvent_Type_RIL_SERVICE_STATE_CHANGED = 2,
  TelephonyEvent_Type_IMS_CONNECTION_STATE_CHANGED = 3,
  TelephonyEvent_Type_IMS_CAPABILITIES_CHANGED = 4,
  TelephonyEvent_Type_DATA_CALL_SETUP = 5,
  TelephonyEvent_Type_DATA_CALL_SETUP_RESPONSE = 6,
  TelephonyEvent_Type_DATA_CALL_LIST_CHANGED = 7,
  TelephonyEvent_Type_DATA_CALL_DEACTIVATE = 8,
  TelephonyEvent_Type_DATA_CALL_DEACTIVATE_RESPONSE = 9,
  TelephonyEvent_Type_DATA_STALL_ACTION = 10,
  TelephonyEvent_Type_MODEM_RESTART = 11,
  TelephonyEvent_Type_NITZ_TIME = 12
};
bool TelephonyEvent_Type_IsValid(int value);
const TelephonyEvent_Type TelephonyEvent_Type_Type_MIN = TelephonyEvent_Type_UNKNOWN;
const TelephonyEvent_Type TelephonyEvent_Type_Type_MAX = TelephonyEvent_Type_NITZ_TIME;
const int TelephonyEvent_Type_Type_ARRAYSIZE = TelephonyEvent_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* TelephonyEvent_Type_descriptor();
inline const ::std::string& TelephonyEvent_Type_Name(TelephonyEvent_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    TelephonyEvent_Type_descriptor(), value);
}
inline bool TelephonyEvent_Type_Parse(
    const ::std::string& name, TelephonyEvent_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelephonyEvent_Type>(
    TelephonyEvent_Type_descriptor(), name, value);
}
enum TelephonyCallSession_Event_RilCall_Type {
  TelephonyCallSession_Event_RilCall_Type_UNKNOWN = 0,
  TelephonyCallSession_Event_RilCall_Type_MO = 1,
  TelephonyCallSession_Event_RilCall_Type_MT = 2
};
bool TelephonyCallSession_Event_RilCall_Type_IsValid(int value);
const TelephonyCallSession_Event_RilCall_Type TelephonyCallSession_Event_RilCall_Type_Type_MIN = TelephonyCallSession_Event_RilCall_Type_UNKNOWN;
const TelephonyCallSession_Event_RilCall_Type TelephonyCallSession_Event_RilCall_Type_Type_MAX = TelephonyCallSession_Event_RilCall_Type_MT;
const int TelephonyCallSession_Event_RilCall_Type_Type_ARRAYSIZE = TelephonyCallSession_Event_RilCall_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_RilCall_Type_descriptor();
inline const ::std::string& TelephonyCallSession_Event_RilCall_Type_Name(TelephonyCallSession_Event_RilCall_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    TelephonyCallSession_Event_RilCall_Type_descriptor(), value);
}
inline bool TelephonyCallSession_Event_RilCall_Type_Parse(
    const ::std::string& name, TelephonyCallSession_Event_RilCall_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelephonyCallSession_Event_RilCall_Type>(
    TelephonyCallSession_Event_RilCall_Type_descriptor(), name, value);
}
enum TelephonyCallSession_Event_Type {
  TelephonyCallSession_Event_Type_EVENT_UNKNOWN = 0,
  TelephonyCallSession_Event_Type_SETTINGS_CHANGED = 1,
  TelephonyCallSession_Event_Type_RIL_SERVICE_STATE_CHANGED = 2,
  TelephonyCallSession_Event_Type_IMS_CONNECTION_STATE_CHANGED = 3,
  TelephonyCallSession_Event_Type_IMS_CAPABILITIES_CHANGED = 4,
  TelephonyCallSession_Event_Type_DATA_CALL_LIST_CHANGED = 5,
  TelephonyCallSession_Event_Type_RIL_REQUEST = 6,
  TelephonyCallSession_Event_Type_RIL_RESPONSE = 7,
  TelephonyCallSession_Event_Type_RIL_CALL_RING = 8,
  TelephonyCallSession_Event_Type_RIL_CALL_SRVCC = 9,
  TelephonyCallSession_Event_Type_RIL_CALL_LIST_CHANGED = 10,
  TelephonyCallSession_Event_Type_IMS_COMMAND = 11,
  TelephonyCallSession_Event_Type_IMS_COMMAND_RECEIVED = 12,
  TelephonyCallSession_Event_Type_IMS_COMMAND_FAILED = 13,
  TelephonyCallSession_Event_Type_IMS_COMMAND_COMPLETE = 14,
  TelephonyCallSession_Event_Type_IMS_CALL_RECEIVE = 15,
  TelephonyCallSession_Event_Type_IMS_CALL_STATE_CHANGED = 16,
  TelephonyCallSession_Event_Type_IMS_CALL_TERMINATED = 17,
  TelephonyCallSession_Event_Type_IMS_CALL_HANDOVER = 18,
  TelephonyCallSession_Event_Type_IMS_CALL_HANDOVER_FAILED = 19,
  TelephonyCallSession_Event_Type_PHONE_STATE_CHANGED = 20,
  TelephonyCallSession_Event_Type_NITZ_TIME = 21
};
bool TelephonyCallSession_Event_Type_IsValid(int value);
const TelephonyCallSession_Event_Type TelephonyCallSession_Event_Type_Type_MIN = TelephonyCallSession_Event_Type_EVENT_UNKNOWN;
const TelephonyCallSession_Event_Type TelephonyCallSession_Event_Type_Type_MAX = TelephonyCallSession_Event_Type_NITZ_TIME;
const int TelephonyCallSession_Event_Type_Type_ARRAYSIZE = TelephonyCallSession_Event_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_Type_descriptor();
inline const ::std::string& TelephonyCallSession_Event_Type_Name(TelephonyCallSession_Event_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    TelephonyCallSession_Event_Type_descriptor(), value);
}
inline bool TelephonyCallSession_Event_Type_Parse(
    const ::std::string& name, TelephonyCallSession_Event_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelephonyCallSession_Event_Type>(
    TelephonyCallSession_Event_Type_descriptor(), name, value);
}
enum TelephonyCallSession_Event_RilRequest {
  TelephonyCallSession_Event_RilRequest_RIL_REQUEST_UNKNOWN = 0,
  TelephonyCallSession_Event_RilRequest_RIL_REQUEST_DIAL = 1,
  TelephonyCallSession_Event_RilRequest_RIL_REQUEST_ANSWER = 2,
  TelephonyCallSession_Event_RilRequest_RIL_REQUEST_HANGUP = 3,
  TelephonyCallSession_Event_RilRequest_RIL_REQUEST_SET_CALL_WAITING = 4,
  TelephonyCallSession_Event_RilRequest_RIL_REQUEST_SWITCH_HOLDING_AND_ACTIVE = 5,
  TelephonyCallSession_Event_RilRequest_RIL_REQUEST_CDMA_FLASH = 6,
  TelephonyCallSession_Event_RilRequest_RIL_REQUEST_CONFERENCE = 7
};
bool TelephonyCallSession_Event_RilRequest_IsValid(int value);
const TelephonyCallSession_Event_RilRequest TelephonyCallSession_Event_RilRequest_RilRequest_MIN = TelephonyCallSession_Event_RilRequest_RIL_REQUEST_UNKNOWN;
const TelephonyCallSession_Event_RilRequest TelephonyCallSession_Event_RilRequest_RilRequest_MAX = TelephonyCallSession_Event_RilRequest_RIL_REQUEST_CONFERENCE;
const int TelephonyCallSession_Event_RilRequest_RilRequest_ARRAYSIZE = TelephonyCallSession_Event_RilRequest_RilRequest_MAX + 1;

const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_RilRequest_descriptor();
inline const ::std::string& TelephonyCallSession_Event_RilRequest_Name(TelephonyCallSession_Event_RilRequest value) {
  return ::google::protobuf::internal::NameOfEnum(
    TelephonyCallSession_Event_RilRequest_descriptor(), value);
}
inline bool TelephonyCallSession_Event_RilRequest_Parse(
    const ::std::string& name, TelephonyCallSession_Event_RilRequest* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelephonyCallSession_Event_RilRequest>(
    TelephonyCallSession_Event_RilRequest_descriptor(), name, value);
}
enum TelephonyCallSession_Event_ImsCommand {
  TelephonyCallSession_Event_ImsCommand_IMS_CMD_UNKNOWN = 0,
  TelephonyCallSession_Event_ImsCommand_IMS_CMD_START = 1,
  TelephonyCallSession_Event_ImsCommand_IMS_CMD_ACCEPT = 2,
  TelephonyCallSession_Event_ImsCommand_IMS_CMD_REJECT = 3,
  TelephonyCallSession_Event_ImsCommand_IMS_CMD_TERMINATE = 4,
  TelephonyCallSession_Event_ImsCommand_IMS_CMD_HOLD = 5,
  TelephonyCallSession_Event_ImsCommand_IMS_CMD_RESUME = 6,
  TelephonyCallSession_Event_ImsCommand_IMS_CMD_MERGE = 7,
  TelephonyCallSession_Event_ImsCommand_IMS_CMD_UPDATE = 8,
  TelephonyCallSession_Event_ImsCommand_IMS_CMD_CONFERENCE_EXTEND = 9,
  TelephonyCallSession_Event_ImsCommand_IMS_CMD_INVITE_PARTICIPANT = 10,
  TelephonyCallSession_Event_ImsCommand_IMS_CMD_REMOVE_PARTICIPANT = 11
};
bool TelephonyCallSession_Event_ImsCommand_IsValid(int value);
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event_ImsCommand_ImsCommand_MIN = TelephonyCallSession_Event_ImsCommand_IMS_CMD_UNKNOWN;
const TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event_ImsCommand_ImsCommand_MAX = TelephonyCallSession_Event_ImsCommand_IMS_CMD_REMOVE_PARTICIPANT;
const int TelephonyCallSession_Event_ImsCommand_ImsCommand_ARRAYSIZE = TelephonyCallSession_Event_ImsCommand_ImsCommand_MAX + 1;

const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_ImsCommand_descriptor();
inline const ::std::string& TelephonyCallSession_Event_ImsCommand_Name(TelephonyCallSession_Event_ImsCommand value) {
  return ::google::protobuf::internal::NameOfEnum(
    TelephonyCallSession_Event_ImsCommand_descriptor(), value);
}
inline bool TelephonyCallSession_Event_ImsCommand_Parse(
    const ::std::string& name, TelephonyCallSession_Event_ImsCommand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelephonyCallSession_Event_ImsCommand>(
    TelephonyCallSession_Event_ImsCommand_descriptor(), name, value);
}
enum TelephonyCallSession_Event_PhoneState {
  TelephonyCallSession_Event_PhoneState_STATE_UNKNOWN = 0,
  TelephonyCallSession_Event_PhoneState_STATE_IDLE = 1,
  TelephonyCallSession_Event_PhoneState_STATE_RINGING = 2,
  TelephonyCallSession_Event_PhoneState_STATE_OFFHOOK = 3
};
bool TelephonyCallSession_Event_PhoneState_IsValid(int value);
const TelephonyCallSession_Event_PhoneState TelephonyCallSession_Event_PhoneState_PhoneState_MIN = TelephonyCallSession_Event_PhoneState_STATE_UNKNOWN;
const TelephonyCallSession_Event_PhoneState TelephonyCallSession_Event_PhoneState_PhoneState_MAX = TelephonyCallSession_Event_PhoneState_STATE_OFFHOOK;
const int TelephonyCallSession_Event_PhoneState_PhoneState_ARRAYSIZE = TelephonyCallSession_Event_PhoneState_PhoneState_MAX + 1;

const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_PhoneState_descriptor();
inline const ::std::string& TelephonyCallSession_Event_PhoneState_Name(TelephonyCallSession_Event_PhoneState value) {
  return ::google::protobuf::internal::NameOfEnum(
    TelephonyCallSession_Event_PhoneState_descriptor(), value);
}
inline bool TelephonyCallSession_Event_PhoneState_Parse(
    const ::std::string& name, TelephonyCallSession_Event_PhoneState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelephonyCallSession_Event_PhoneState>(
    TelephonyCallSession_Event_PhoneState_descriptor(), name, value);
}
enum TelephonyCallSession_Event_CallState {
  TelephonyCallSession_Event_CallState_CALL_UNKNOWN = 0,
  TelephonyCallSession_Event_CallState_CALL_IDLE = 1,
  TelephonyCallSession_Event_CallState_CALL_ACTIVE = 2,
  TelephonyCallSession_Event_CallState_CALL_HOLDING = 3,
  TelephonyCallSession_Event_CallState_CALL_DIALING = 4,
  TelephonyCallSession_Event_CallState_CALL_ALERTING = 5,
  TelephonyCallSession_Event_CallState_CALL_INCOMING = 6,
  TelephonyCallSession_Event_CallState_CALL_WAITING = 7,
  TelephonyCallSession_Event_CallState_CALL_DISCONNECTED = 8,
  TelephonyCallSession_Event_CallState_CALL_DISCONNECTING = 9
};
bool TelephonyCallSession_Event_CallState_IsValid(int value);
const TelephonyCallSession_Event_CallState TelephonyCallSession_Event_CallState_CallState_MIN = TelephonyCallSession_Event_CallState_CALL_UNKNOWN;
const TelephonyCallSession_Event_CallState TelephonyCallSession_Event_CallState_CallState_MAX = TelephonyCallSession_Event_CallState_CALL_DISCONNECTING;
const int TelephonyCallSession_Event_CallState_CallState_ARRAYSIZE = TelephonyCallSession_Event_CallState_CallState_MAX + 1;

const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_CallState_descriptor();
inline const ::std::string& TelephonyCallSession_Event_CallState_Name(TelephonyCallSession_Event_CallState value) {
  return ::google::protobuf::internal::NameOfEnum(
    TelephonyCallSession_Event_CallState_descriptor(), value);
}
inline bool TelephonyCallSession_Event_CallState_Parse(
    const ::std::string& name, TelephonyCallSession_Event_CallState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelephonyCallSession_Event_CallState>(
    TelephonyCallSession_Event_CallState_descriptor(), name, value);
}
enum TelephonyCallSession_Event_RilSrvccState {
  TelephonyCallSession_Event_RilSrvccState_HANDOVER_UNKNOWN = 0,
  TelephonyCallSession_Event_RilSrvccState_HANDOVER_STARTED = 1,
  TelephonyCallSession_Event_RilSrvccState_HANDOVER_COMPLETED = 2,
  TelephonyCallSession_Event_RilSrvccState_HANDOVER_FAILED = 3,
  TelephonyCallSession_Event_RilSrvccState_HANDOVER_CANCELED = 4
};
bool TelephonyCallSession_Event_RilSrvccState_IsValid(int value);
const TelephonyCallSession_Event_RilSrvccState TelephonyCallSession_Event_RilSrvccState_RilSrvccState_MIN = TelephonyCallSession_Event_RilSrvccState_HANDOVER_UNKNOWN;
const TelephonyCallSession_Event_RilSrvccState TelephonyCallSession_Event_RilSrvccState_RilSrvccState_MAX = TelephonyCallSession_Event_RilSrvccState_HANDOVER_CANCELED;
const int TelephonyCallSession_Event_RilSrvccState_RilSrvccState_ARRAYSIZE = TelephonyCallSession_Event_RilSrvccState_RilSrvccState_MAX + 1;

const ::google::protobuf::EnumDescriptor* TelephonyCallSession_Event_RilSrvccState_descriptor();
inline const ::std::string& TelephonyCallSession_Event_RilSrvccState_Name(TelephonyCallSession_Event_RilSrvccState value) {
  return ::google::protobuf::internal::NameOfEnum(
    TelephonyCallSession_Event_RilSrvccState_descriptor(), value);
}
inline bool TelephonyCallSession_Event_RilSrvccState_Parse(
    const ::std::string& name, TelephonyCallSession_Event_RilSrvccState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelephonyCallSession_Event_RilSrvccState>(
    TelephonyCallSession_Event_RilSrvccState_descriptor(), name, value);
}
enum SmsSession_Event_Type {
  SmsSession_Event_Type_EVENT_UNKNOWN = 0,
  SmsSession_Event_Type_SETTINGS_CHANGED = 1,
  SmsSession_Event_Type_RIL_SERVICE_STATE_CHANGED = 2,
  SmsSession_Event_Type_IMS_CONNECTION_STATE_CHANGED = 3,
  SmsSession_Event_Type_IMS_CAPABILITIES_CHANGED = 4,
  SmsSession_Event_Type_DATA_CALL_LIST_CHANGED = 5,
  SmsSession_Event_Type_SMS_SEND = 6,
  SmsSession_Event_Type_SMS_SEND_RESULT = 7,
  SmsSession_Event_Type_SMS_RECEIVED = 8
};
bool SmsSession_Event_Type_IsValid(int value);
const SmsSession_Event_Type SmsSession_Event_Type_Type_MIN = SmsSession_Event_Type_EVENT_UNKNOWN;
const SmsSession_Event_Type SmsSession_Event_Type_Type_MAX = SmsSession_Event_Type_SMS_RECEIVED;
const int SmsSession_Event_Type_Type_ARRAYSIZE = SmsSession_Event_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SmsSession_Event_Type_descriptor();
inline const ::std::string& SmsSession_Event_Type_Name(SmsSession_Event_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SmsSession_Event_Type_descriptor(), value);
}
inline bool SmsSession_Event_Type_Parse(
    const ::std::string& name, SmsSession_Event_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SmsSession_Event_Type>(
    SmsSession_Event_Type_descriptor(), name, value);
}
enum SmsSession_Event_Format {
  SmsSession_Event_Format_SMS_FORMAT_UNKNOWN = 0,
  SmsSession_Event_Format_SMS_FORMAT_3GPP = 1,
  SmsSession_Event_Format_SMS_FORMAT_3GPP2 = 2
};
bool SmsSession_Event_Format_IsValid(int value);
const SmsSession_Event_Format SmsSession_Event_Format_Format_MIN = SmsSession_Event_Format_SMS_FORMAT_UNKNOWN;
const SmsSession_Event_Format SmsSession_Event_Format_Format_MAX = SmsSession_Event_Format_SMS_FORMAT_3GPP2;
const int SmsSession_Event_Format_Format_ARRAYSIZE = SmsSession_Event_Format_Format_MAX + 1;

const ::google::protobuf::EnumDescriptor* SmsSession_Event_Format_descriptor();
inline const ::std::string& SmsSession_Event_Format_Name(SmsSession_Event_Format value) {
  return ::google::protobuf::internal::NameOfEnum(
    SmsSession_Event_Format_descriptor(), value);
}
inline bool SmsSession_Event_Format_Parse(
    const ::std::string& name, SmsSession_Event_Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SmsSession_Event_Format>(
    SmsSession_Event_Format_descriptor(), name, value);
}
enum SmsSession_Event_Tech {
  SmsSession_Event_Tech_SMS_UNKNOWN = 0,
  SmsSession_Event_Tech_SMS_GSM = 1,
  SmsSession_Event_Tech_SMS_CDMA = 2,
  SmsSession_Event_Tech_SMS_IMS = 3
};
bool SmsSession_Event_Tech_IsValid(int value);
const SmsSession_Event_Tech SmsSession_Event_Tech_Tech_MIN = SmsSession_Event_Tech_SMS_UNKNOWN;
const SmsSession_Event_Tech SmsSession_Event_Tech_Tech_MAX = SmsSession_Event_Tech_SMS_IMS;
const int SmsSession_Event_Tech_Tech_ARRAYSIZE = SmsSession_Event_Tech_Tech_MAX + 1;

const ::google::protobuf::EnumDescriptor* SmsSession_Event_Tech_descriptor();
inline const ::std::string& SmsSession_Event_Tech_Name(SmsSession_Event_Tech value) {
  return ::google::protobuf::internal::NameOfEnum(
    SmsSession_Event_Tech_descriptor(), value);
}
inline bool SmsSession_Event_Tech_Parse(
    const ::std::string& name, SmsSession_Event_Tech* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SmsSession_Event_Tech>(
    SmsSession_Event_Tech_descriptor(), name, value);
}
enum RadioAccessTechnology {
  UNKNOWN = -1,
  RAT_UNKNOWN = 0,
  RAT_GPRS = 1,
  RAT_EDGE = 2,
  RAT_UMTS = 3,
  RAT_IS95A = 4,
  RAT_IS95B = 5,
  RAT_1XRTT = 6,
  RAT_EVDO_0 = 7,
  RAT_EVDO_A = 8,
  RAT_HSDPA = 9,
  RAT_HSUPA = 10,
  RAT_HSPA = 11,
  RAT_EVDO_B = 12,
  RAT_EHRPD = 13,
  RAT_LTE = 14,
  RAT_HSPAP = 15,
  RAT_GSM = 16,
  RAT_TD_SCDMA = 17,
  RAT_IWLAN = 18,
  RAT_LTE_CA = 19
};
bool RadioAccessTechnology_IsValid(int value);
const RadioAccessTechnology RadioAccessTechnology_MIN = UNKNOWN;
const RadioAccessTechnology RadioAccessTechnology_MAX = RAT_LTE_CA;
const int RadioAccessTechnology_ARRAYSIZE = RadioAccessTechnology_MAX + 1;

const ::google::protobuf::EnumDescriptor* RadioAccessTechnology_descriptor();
inline const ::std::string& RadioAccessTechnology_Name(RadioAccessTechnology value) {
  return ::google::protobuf::internal::NameOfEnum(
    RadioAccessTechnology_descriptor(), value);
}
inline bool RadioAccessTechnology_Parse(
    const ::std::string& name, RadioAccessTechnology* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RadioAccessTechnology>(
    RadioAccessTechnology_descriptor(), name, value);
}
enum RilErrno {
  RIL_E_UNKNOWN = 0,
  RIL_E_SUCCESS = 1,
  RIL_E_RADIO_NOT_AVAILABLE = 2,
  RIL_E_GENERIC_FAILURE = 3,
  RIL_E_PASSWORD_INCORRECT = 4,
  RIL_E_SIM_PIN2 = 5,
  RIL_E_SIM_PUK2 = 6,
  RIL_E_REQUEST_NOT_SUPPORTED = 7,
  RIL_E_CANCELLED = 8,
  RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL = 9,
  RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW = 10,
  RIL_E_SMS_SEND_FAIL_RETRY = 11,
  RIL_E_SIM_ABSENT = 12,
  RIL_E_SUBSCRIPTION_NOT_AVAILABLE = 13,
  RIL_E_MODE_NOT_SUPPORTED = 14,
  RIL_E_FDN_CHECK_FAILURE = 15,
  RIL_E_ILLEGAL_SIM_OR_ME = 16,
  RIL_E_MISSING_RESOURCE = 17,
  RIL_E_NO_SUCH_ELEMENT = 18,
  RIL_E_DIAL_MODIFIED_TO_USSD = 19,
  RIL_E_DIAL_MODIFIED_TO_SS = 20,
  RIL_E_DIAL_MODIFIED_TO_DIAL = 21,
  RIL_E_USSD_MODIFIED_TO_DIAL = 22,
  RIL_E_USSD_MODIFIED_TO_SS = 23,
  RIL_E_USSD_MODIFIED_TO_USSD = 24,
  RIL_E_SS_MODIFIED_TO_DIAL = 25,
  RIL_E_SS_MODIFIED_TO_USSD = 26,
  RIL_E_SUBSCRIPTION_NOT_SUPPORTED = 27,
  RIL_E_SS_MODIFIED_TO_SS = 28,
  RIL_E_LCE_NOT_SUPPORTED PROTOBUF_DEPRECATED = 36,
  RIL_E_LCE_NOT_SUPPORTED_NEW = 37
};
bool RilErrno_IsValid(int value);
const RilErrno RilErrno_MIN = RIL_E_UNKNOWN;
const RilErrno RilErrno_MAX = RIL_E_LCE_NOT_SUPPORTED_NEW;
const int RilErrno_ARRAYSIZE = RilErrno_MAX + 1;

const ::google::protobuf::EnumDescriptor* RilErrno_descriptor();
inline const ::std::string& RilErrno_Name(RilErrno value) {
  return ::google::protobuf::internal::NameOfEnum(
    RilErrno_descriptor(), value);
}
inline bool RilErrno_Parse(
    const ::std::string& name, RilErrno* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RilErrno>(
    RilErrno_descriptor(), name, value);
}
enum PdpType {
  PDP_UNKNOWN = 0,
  PDP_TYPE_IP = 1,
  PDP_TYPE_IPV6 = 2,
  PDP_TYPE_IPV4V6 = 3,
  PDP_TYPE_PPP = 4
};
bool PdpType_IsValid(int value);
const PdpType PdpType_MIN = PDP_UNKNOWN;
const PdpType PdpType_MAX = PDP_TYPE_PPP;
const int PdpType_ARRAYSIZE = PdpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PdpType_descriptor();
inline const ::std::string& PdpType_Name(PdpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PdpType_descriptor(), value);
}
inline bool PdpType_Parse(
    const ::std::string& name, PdpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PdpType>(
    PdpType_descriptor(), name, value);
}
enum TimeInterval {
  TI_UNKNOWN = 0,
  TI_10_MILLIS = 1,
  TI_20_MILLIS = 2,
  TI_50_MILLIS = 3,
  TI_100_MILLIS = 4,
  TI_200_MILLIS = 5,
  TI_500_MILLIS = 6,
  TI_1_SEC = 7,
  TI_2_SEC = 8,
  TI_5_SEC = 9,
  TI_10_SEC = 10,
  TI_30_SEC = 11,
  TI_1_MINUTE = 12,
  TI_3_MINUTES = 13,
  TI_10_MINUTES = 14,
  TI_30_MINUTES = 15,
  TI_1_HOUR = 16,
  TI_2_HOURS = 17,
  TI_4_HOURS = 18,
  TI_MANY_HOURS = 19
};
bool TimeInterval_IsValid(int value);
const TimeInterval TimeInterval_MIN = TI_UNKNOWN;
const TimeInterval TimeInterval_MAX = TI_MANY_HOURS;
const int TimeInterval_ARRAYSIZE = TimeInterval_MAX + 1;

const ::google::protobuf::EnumDescriptor* TimeInterval_descriptor();
inline const ::std::string& TimeInterval_Name(TimeInterval value) {
  return ::google::protobuf::internal::NameOfEnum(
    TimeInterval_descriptor(), value);
}
inline bool TimeInterval_Parse(
    const ::std::string& name, TimeInterval* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TimeInterval>(
    TimeInterval_descriptor(), name, value);
}
// ===================================================================

class TelephonyLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.TelephonyLog) */ {
 public:
  TelephonyLog();
  virtual ~TelephonyLog();

  TelephonyLog(const TelephonyLog& from);

  inline TelephonyLog& operator=(const TelephonyLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelephonyLog& default_instance();

  void Swap(TelephonyLog* other);

  // implements Message ----------------------------------------------

  inline TelephonyLog* New() const { return New(NULL); }

  TelephonyLog* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelephonyLog& from);
  void MergeFrom(const TelephonyLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelephonyLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .clearcut.connectivity.TelephonyEvent events = 1;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 1;
  const ::clearcut::connectivity::TelephonyEvent& events(int index) const;
  ::clearcut::connectivity::TelephonyEvent* mutable_events(int index);
  ::clearcut::connectivity::TelephonyEvent* add_events();
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyEvent >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyEvent >&
      events() const;

  // repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;
  int call_sessions_size() const;
  void clear_call_sessions();
  static const int kCallSessionsFieldNumber = 2;
  const ::clearcut::connectivity::TelephonyCallSession& call_sessions(int index) const;
  ::clearcut::connectivity::TelephonyCallSession* mutable_call_sessions(int index);
  ::clearcut::connectivity::TelephonyCallSession* add_call_sessions();
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession >*
      mutable_call_sessions();
  const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession >&
      call_sessions() const;

  // repeated .clearcut.connectivity.SmsSession sms_sessions = 3;
  int sms_sessions_size() const;
  void clear_sms_sessions();
  static const int kSmsSessionsFieldNumber = 3;
  const ::clearcut::connectivity::SmsSession& sms_sessions(int index) const;
  ::clearcut::connectivity::SmsSession* mutable_sms_sessions(int index);
  ::clearcut::connectivity::SmsSession* add_sms_sessions();
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::SmsSession >*
      mutable_sms_sessions();
  const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::SmsSession >&
      sms_sessions() const;

  // repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;
  int histograms_size() const;
  void clear_histograms();
  static const int kHistogramsFieldNumber = 4;
  const ::clearcut::connectivity::TelephonyHistogram& histograms(int index) const;
  ::clearcut::connectivity::TelephonyHistogram* mutable_histograms(int index);
  ::clearcut::connectivity::TelephonyHistogram* add_histograms();
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyHistogram >*
      mutable_histograms();
  const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyHistogram >&
      histograms() const;

  // optional bool events_dropped = 5;
  bool has_events_dropped() const;
  void clear_events_dropped();
  static const int kEventsDroppedFieldNumber = 5;
  bool events_dropped() const;
  void set_events_dropped(bool value);

  // optional .clearcut.connectivity.Time start_time = 6;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 6;
  const ::clearcut::connectivity::Time& start_time() const;
  ::clearcut::connectivity::Time* mutable_start_time();
  ::clearcut::connectivity::Time* release_start_time();
  void set_allocated_start_time(::clearcut::connectivity::Time* start_time);

  // optional .clearcut.connectivity.Time end_time = 7;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 7;
  const ::clearcut::connectivity::Time& end_time() const;
  ::clearcut::connectivity::Time* mutable_end_time();
  ::clearcut::connectivity::Time* release_end_time();
  void set_allocated_end_time(::clearcut::connectivity::Time* end_time);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyLog)
 private:
  inline void set_has_events_dropped();
  inline void clear_has_events_dropped();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyEvent > events_;
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession > call_sessions_;
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::SmsSession > sms_sessions_;
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyHistogram > histograms_;
  ::clearcut::connectivity::Time* start_time_;
  ::clearcut::connectivity::Time* end_time_;
  bool events_dropped_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static TelephonyLog* default_instance_;
};
// -------------------------------------------------------------------

class Time : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.Time) */ {
 public:
  Time();
  virtual ~Time();

  Time(const Time& from);

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Time& default_instance();

  void Swap(Time* other);

  // implements Message ----------------------------------------------

  inline Time* New() const { return New(NULL); }

  Time* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Time* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 system_timestamp_millis = 1;
  bool has_system_timestamp_millis() const;
  void clear_system_timestamp_millis();
  static const int kSystemTimestampMillisFieldNumber = 1;
  ::google::protobuf::int64 system_timestamp_millis() const;
  void set_system_timestamp_millis(::google::protobuf::int64 value);

  // optional int64 elapsed_timestamp_millis = 2;
  bool has_elapsed_timestamp_millis() const;
  void clear_elapsed_timestamp_millis();
  static const int kElapsedTimestampMillisFieldNumber = 2;
  ::google::protobuf::int64 elapsed_timestamp_millis() const;
  void set_elapsed_timestamp_millis(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.Time)
 private:
  inline void set_has_system_timestamp_millis();
  inline void clear_has_system_timestamp_millis();
  inline void set_has_elapsed_timestamp_millis();
  inline void clear_has_elapsed_timestamp_millis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 system_timestamp_millis_;
  ::google::protobuf::int64 elapsed_timestamp_millis_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static Time* default_instance_;
};
// -------------------------------------------------------------------

class TelephonyHistogram : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.TelephonyHistogram) */ {
 public:
  TelephonyHistogram();
  virtual ~TelephonyHistogram();

  TelephonyHistogram(const TelephonyHistogram& from);

  inline TelephonyHistogram& operator=(const TelephonyHistogram& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelephonyHistogram& default_instance();

  void Swap(TelephonyHistogram* other);

  // implements Message ----------------------------------------------

  inline TelephonyHistogram* New() const { return New(NULL); }

  TelephonyHistogram* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelephonyHistogram& from);
  void MergeFrom(const TelephonyHistogram& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelephonyHistogram* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 category = 1;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 1;
  ::google::protobuf::int32 category() const;
  void set_category(::google::protobuf::int32 value);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 min_time_millis = 3;
  bool has_min_time_millis() const;
  void clear_min_time_millis();
  static const int kMinTimeMillisFieldNumber = 3;
  ::google::protobuf::int32 min_time_millis() const;
  void set_min_time_millis(::google::protobuf::int32 value);

  // optional int32 max_time_millis = 4;
  bool has_max_time_millis() const;
  void clear_max_time_millis();
  static const int kMaxTimeMillisFieldNumber = 4;
  ::google::protobuf::int32 max_time_millis() const;
  void set_max_time_millis(::google::protobuf::int32 value);

  // optional int32 avg_time_millis = 5;
  bool has_avg_time_millis() const;
  void clear_avg_time_millis();
  static const int kAvgTimeMillisFieldNumber = 5;
  ::google::protobuf::int32 avg_time_millis() const;
  void set_avg_time_millis(::google::protobuf::int32 value);

  // optional int32 count = 6;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 6;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // optional int32 bucket_count = 7;
  bool has_bucket_count() const;
  void clear_bucket_count();
  static const int kBucketCountFieldNumber = 7;
  ::google::protobuf::int32 bucket_count() const;
  void set_bucket_count(::google::protobuf::int32 value);

  // repeated int32 bucket_end_points = 8;
  int bucket_end_points_size() const;
  void clear_bucket_end_points();
  static const int kBucketEndPointsFieldNumber = 8;
  ::google::protobuf::int32 bucket_end_points(int index) const;
  void set_bucket_end_points(int index, ::google::protobuf::int32 value);
  void add_bucket_end_points(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bucket_end_points() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bucket_end_points();

  // repeated int32 bucket_counters = 9;
  int bucket_counters_size() const;
  void clear_bucket_counters();
  static const int kBucketCountersFieldNumber = 9;
  ::google::protobuf::int32 bucket_counters(int index) const;
  void set_bucket_counters(int index, ::google::protobuf::int32 value);
  void add_bucket_counters(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bucket_counters() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bucket_counters();

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyHistogram)
 private:
  inline void set_has_category();
  inline void clear_has_category();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_min_time_millis();
  inline void clear_has_min_time_millis();
  inline void set_has_max_time_millis();
  inline void clear_has_max_time_millis();
  inline void set_has_avg_time_millis();
  inline void clear_has_avg_time_millis();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_bucket_count();
  inline void clear_has_bucket_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 category_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 min_time_millis_;
  ::google::protobuf::int32 max_time_millis_;
  ::google::protobuf::int32 avg_time_millis_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bucket_end_points_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bucket_counters_;
  ::google::protobuf::int32 bucket_count_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static TelephonyHistogram* default_instance_;
};
// -------------------------------------------------------------------

class TelephonySettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.TelephonySettings) */ {
 public:
  TelephonySettings();
  virtual ~TelephonySettings();

  TelephonySettings(const TelephonySettings& from);

  inline TelephonySettings& operator=(const TelephonySettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelephonySettings& default_instance();

  void Swap(TelephonySettings* other);

  // implements Message ----------------------------------------------

  inline TelephonySettings* New() const { return New(NULL); }

  TelephonySettings* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelephonySettings& from);
  void MergeFrom(const TelephonySettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelephonySettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TelephonySettings_RilNetworkMode RilNetworkMode;
  static const RilNetworkMode NETWORK_MODE_UNKNOWN =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_UNKNOWN;
  static const RilNetworkMode NETWORK_MODE_WCDMA_PREF =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_WCDMA_PREF;
  static const RilNetworkMode NETWORK_MODE_GSM_ONLY =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_GSM_ONLY;
  static const RilNetworkMode NETWORK_MODE_WCDMA_ONLY =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_WCDMA_ONLY;
  static const RilNetworkMode NETWORK_MODE_GSM_UMTS =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_GSM_UMTS;
  static const RilNetworkMode NETWORK_MODE_CDMA =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_CDMA;
  static const RilNetworkMode NETWORK_MODE_CDMA_NO_EVDO =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_CDMA_NO_EVDO;
  static const RilNetworkMode NETWORK_MODE_EVDO_NO_CDMA =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_EVDO_NO_CDMA;
  static const RilNetworkMode NETWORK_MODE_GLOBAL =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_GLOBAL;
  static const RilNetworkMode NETWORK_MODE_LTE_CDMA_EVDO =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_CDMA_EVDO;
  static const RilNetworkMode NETWORK_MODE_LTE_GSM_WCDMA =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_GSM_WCDMA;
  static const RilNetworkMode NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA;
  static const RilNetworkMode NETWORK_MODE_LTE_ONLY =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_ONLY;
  static const RilNetworkMode NETWORK_MODE_LTE_WCDMA =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_WCDMA;
  static const RilNetworkMode NETWORK_MODE_TDSCDMA_ONLY =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_TDSCDMA_ONLY;
  static const RilNetworkMode NETWORK_MODE_TDSCDMA_WCDMA =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_TDSCDMA_WCDMA;
  static const RilNetworkMode NETWORK_MODE_LTE_TDSCDMA =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_TDSCDMA;
  static const RilNetworkMode NETWORK_MODE_TDSCDMA_GSM =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_TDSCDMA_GSM;
  static const RilNetworkMode NETWORK_MODE_LTE_TDSCDMA_GSM =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_TDSCDMA_GSM;
  static const RilNetworkMode NETWORK_MODE_TDSCDMA_GSM_WCDMA =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_TDSCDMA_GSM_WCDMA;
  static const RilNetworkMode NETWORK_MODE_LTE_TDSCDMA_WCDMA =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_TDSCDMA_WCDMA;
  static const RilNetworkMode NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA;
  static const RilNetworkMode NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA;
  static const RilNetworkMode NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA =
    TelephonySettings_RilNetworkMode_NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA;
  static inline bool RilNetworkMode_IsValid(int value) {
    return TelephonySettings_RilNetworkMode_IsValid(value);
  }
  static const RilNetworkMode RilNetworkMode_MIN =
    TelephonySettings_RilNetworkMode_RilNetworkMode_MIN;
  static const RilNetworkMode RilNetworkMode_MAX =
    TelephonySettings_RilNetworkMode_RilNetworkMode_MAX;
  static const int RilNetworkMode_ARRAYSIZE =
    TelephonySettings_RilNetworkMode_RilNetworkMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RilNetworkMode_descriptor() {
    return TelephonySettings_RilNetworkMode_descriptor();
  }
  static inline const ::std::string& RilNetworkMode_Name(RilNetworkMode value) {
    return TelephonySettings_RilNetworkMode_Name(value);
  }
  static inline bool RilNetworkMode_Parse(const ::std::string& name,
      RilNetworkMode* value) {
    return TelephonySettings_RilNetworkMode_Parse(name, value);
  }

  typedef TelephonySettings_WiFiCallingMode WiFiCallingMode;
  static const WiFiCallingMode WFC_MODE_UNKNOWN =
    TelephonySettings_WiFiCallingMode_WFC_MODE_UNKNOWN;
  static const WiFiCallingMode WFC_MODE_WIFI_ONLY =
    TelephonySettings_WiFiCallingMode_WFC_MODE_WIFI_ONLY;
  static const WiFiCallingMode WFC_MODE_CELLULAR_PREFERRED =
    TelephonySettings_WiFiCallingMode_WFC_MODE_CELLULAR_PREFERRED;
  static const WiFiCallingMode WFC_MODE_WIFI_PREFERRED =
    TelephonySettings_WiFiCallingMode_WFC_MODE_WIFI_PREFERRED;
  static inline bool WiFiCallingMode_IsValid(int value) {
    return TelephonySettings_WiFiCallingMode_IsValid(value);
  }
  static const WiFiCallingMode WiFiCallingMode_MIN =
    TelephonySettings_WiFiCallingMode_WiFiCallingMode_MIN;
  static const WiFiCallingMode WiFiCallingMode_MAX =
    TelephonySettings_WiFiCallingMode_WiFiCallingMode_MAX;
  static const int WiFiCallingMode_ARRAYSIZE =
    TelephonySettings_WiFiCallingMode_WiFiCallingMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WiFiCallingMode_descriptor() {
    return TelephonySettings_WiFiCallingMode_descriptor();
  }
  static inline const ::std::string& WiFiCallingMode_Name(WiFiCallingMode value) {
    return TelephonySettings_WiFiCallingMode_Name(value);
  }
  static inline bool WiFiCallingMode_Parse(const ::std::string& name,
      WiFiCallingMode* value) {
    return TelephonySettings_WiFiCallingMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool is_airplane_mode = 1;
  bool has_is_airplane_mode() const;
  void clear_is_airplane_mode();
  static const int kIsAirplaneModeFieldNumber = 1;
  bool is_airplane_mode() const;
  void set_is_airplane_mode(bool value);

  // optional bool is_cellular_data_enabled = 2;
  bool has_is_cellular_data_enabled() const;
  void clear_is_cellular_data_enabled();
  static const int kIsCellularDataEnabledFieldNumber = 2;
  bool is_cellular_data_enabled() const;
  void set_is_cellular_data_enabled(bool value);

  // optional bool is_data_roaming_enabled = 3;
  bool has_is_data_roaming_enabled() const;
  void clear_is_data_roaming_enabled();
  static const int kIsDataRoamingEnabledFieldNumber = 3;
  bool is_data_roaming_enabled() const;
  void set_is_data_roaming_enabled(bool value);

  // optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;
  bool has_preferred_network_mode() const;
  void clear_preferred_network_mode();
  static const int kPreferredNetworkModeFieldNumber = 4;
  ::clearcut::connectivity::TelephonySettings_RilNetworkMode preferred_network_mode() const;
  void set_preferred_network_mode(::clearcut::connectivity::TelephonySettings_RilNetworkMode value);

  // optional bool is_enhanced_4g_lte_mode_enabled = 5;
  bool has_is_enhanced_4g_lte_mode_enabled() const;
  void clear_is_enhanced_4g_lte_mode_enabled();
  static const int kIsEnhanced4GLteModeEnabledFieldNumber = 5;
  bool is_enhanced_4g_lte_mode_enabled() const;
  void set_is_enhanced_4g_lte_mode_enabled(bool value);

  // optional bool is_wifi_enabled = 6;
  bool has_is_wifi_enabled() const;
  void clear_is_wifi_enabled();
  static const int kIsWifiEnabledFieldNumber = 6;
  bool is_wifi_enabled() const;
  void set_is_wifi_enabled(bool value);

  // optional bool is_wifi_calling_enabled = 7;
  bool has_is_wifi_calling_enabled() const;
  void clear_is_wifi_calling_enabled();
  static const int kIsWifiCallingEnabledFieldNumber = 7;
  bool is_wifi_calling_enabled() const;
  void set_is_wifi_calling_enabled(bool value);

  // optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;
  bool has_wifi_calling_mode() const;
  void clear_wifi_calling_mode();
  static const int kWifiCallingModeFieldNumber = 8;
  ::clearcut::connectivity::TelephonySettings_WiFiCallingMode wifi_calling_mode() const;
  void set_wifi_calling_mode(::clearcut::connectivity::TelephonySettings_WiFiCallingMode value);

  // optional bool is_vt_over_lte_enabled = 9;
  bool has_is_vt_over_lte_enabled() const;
  void clear_is_vt_over_lte_enabled();
  static const int kIsVtOverLteEnabledFieldNumber = 9;
  bool is_vt_over_lte_enabled() const;
  void set_is_vt_over_lte_enabled(bool value);

  // optional bool is_vt_over_wifi_enabled = 10;
  bool has_is_vt_over_wifi_enabled() const;
  void clear_is_vt_over_wifi_enabled();
  static const int kIsVtOverWifiEnabledFieldNumber = 10;
  bool is_vt_over_wifi_enabled() const;
  void set_is_vt_over_wifi_enabled(bool value);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonySettings)
 private:
  inline void set_has_is_airplane_mode();
  inline void clear_has_is_airplane_mode();
  inline void set_has_is_cellular_data_enabled();
  inline void clear_has_is_cellular_data_enabled();
  inline void set_has_is_data_roaming_enabled();
  inline void clear_has_is_data_roaming_enabled();
  inline void set_has_preferred_network_mode();
  inline void clear_has_preferred_network_mode();
  inline void set_has_is_enhanced_4g_lte_mode_enabled();
  inline void clear_has_is_enhanced_4g_lte_mode_enabled();
  inline void set_has_is_wifi_enabled();
  inline void clear_has_is_wifi_enabled();
  inline void set_has_is_wifi_calling_enabled();
  inline void clear_has_is_wifi_calling_enabled();
  inline void set_has_wifi_calling_mode();
  inline void clear_has_wifi_calling_mode();
  inline void set_has_is_vt_over_lte_enabled();
  inline void clear_has_is_vt_over_lte_enabled();
  inline void set_has_is_vt_over_wifi_enabled();
  inline void clear_has_is_vt_over_wifi_enabled();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool is_airplane_mode_;
  bool is_cellular_data_enabled_;
  bool is_data_roaming_enabled_;
  bool is_enhanced_4g_lte_mode_enabled_;
  int preferred_network_mode_;
  int wifi_calling_mode_;
  bool is_wifi_enabled_;
  bool is_wifi_calling_enabled_;
  bool is_vt_over_lte_enabled_;
  bool is_vt_over_wifi_enabled_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static TelephonySettings* default_instance_;
};
// -------------------------------------------------------------------

class TelephonyServiceState_TelephonyOperator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.TelephonyServiceState.TelephonyOperator) */ {
 public:
  TelephonyServiceState_TelephonyOperator();
  virtual ~TelephonyServiceState_TelephonyOperator();

  TelephonyServiceState_TelephonyOperator(const TelephonyServiceState_TelephonyOperator& from);

  inline TelephonyServiceState_TelephonyOperator& operator=(const TelephonyServiceState_TelephonyOperator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelephonyServiceState_TelephonyOperator& default_instance();

  void Swap(TelephonyServiceState_TelephonyOperator* other);

  // implements Message ----------------------------------------------

  inline TelephonyServiceState_TelephonyOperator* New() const { return New(NULL); }

  TelephonyServiceState_TelephonyOperator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelephonyServiceState_TelephonyOperator& from);
  void MergeFrom(const TelephonyServiceState_TelephonyOperator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelephonyServiceState_TelephonyOperator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string alpha_long = 1;
  bool has_alpha_long() const;
  void clear_alpha_long();
  static const int kAlphaLongFieldNumber = 1;
  const ::std::string& alpha_long() const;
  void set_alpha_long(const ::std::string& value);
  void set_alpha_long(const char* value);
  void set_alpha_long(const char* value, size_t size);
  ::std::string* mutable_alpha_long();
  ::std::string* release_alpha_long();
  void set_allocated_alpha_long(::std::string* alpha_long);

  // optional string alpha_short = 2;
  bool has_alpha_short() const;
  void clear_alpha_short();
  static const int kAlphaShortFieldNumber = 2;
  const ::std::string& alpha_short() const;
  void set_alpha_short(const ::std::string& value);
  void set_alpha_short(const char* value);
  void set_alpha_short(const char* value, size_t size);
  ::std::string* mutable_alpha_short();
  ::std::string* release_alpha_short();
  void set_allocated_alpha_short(::std::string* alpha_short);

  // optional string numeric = 3;
  bool has_numeric() const;
  void clear_numeric();
  static const int kNumericFieldNumber = 3;
  const ::std::string& numeric() const;
  void set_numeric(const ::std::string& value);
  void set_numeric(const char* value);
  void set_numeric(const char* value, size_t size);
  ::std::string* mutable_numeric();
  ::std::string* release_numeric();
  void set_allocated_numeric(::std::string* numeric);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
 private:
  inline void set_has_alpha_long();
  inline void clear_has_alpha_long();
  inline void set_has_alpha_short();
  inline void clear_has_alpha_short();
  inline void set_has_numeric();
  inline void clear_has_numeric();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr alpha_long_;
  ::google::protobuf::internal::ArenaStringPtr alpha_short_;
  ::google::protobuf::internal::ArenaStringPtr numeric_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static TelephonyServiceState_TelephonyOperator* default_instance_;
};
// -------------------------------------------------------------------

class TelephonyServiceState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.TelephonyServiceState) */ {
 public:
  TelephonyServiceState();
  virtual ~TelephonyServiceState();

  TelephonyServiceState(const TelephonyServiceState& from);

  inline TelephonyServiceState& operator=(const TelephonyServiceState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelephonyServiceState& default_instance();

  void Swap(TelephonyServiceState* other);

  // implements Message ----------------------------------------------

  inline TelephonyServiceState* New() const { return New(NULL); }

  TelephonyServiceState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelephonyServiceState& from);
  void MergeFrom(const TelephonyServiceState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelephonyServiceState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TelephonyServiceState_TelephonyOperator TelephonyOperator;

  typedef TelephonyServiceState_RoamingType RoamingType;
  static const RoamingType UNKNOWN =
    TelephonyServiceState_RoamingType_UNKNOWN;
  static const RoamingType ROAMING_TYPE_NOT_ROAMING =
    TelephonyServiceState_RoamingType_ROAMING_TYPE_NOT_ROAMING;
  static const RoamingType ROAMING_TYPE_DOMESTIC =
    TelephonyServiceState_RoamingType_ROAMING_TYPE_DOMESTIC;
  static const RoamingType ROAMING_TYPE_INTERNATIONAL =
    TelephonyServiceState_RoamingType_ROAMING_TYPE_INTERNATIONAL;
  static inline bool RoamingType_IsValid(int value) {
    return TelephonyServiceState_RoamingType_IsValid(value);
  }
  static const RoamingType RoamingType_MIN =
    TelephonyServiceState_RoamingType_RoamingType_MIN;
  static const RoamingType RoamingType_MAX =
    TelephonyServiceState_RoamingType_RoamingType_MAX;
  static const int RoamingType_ARRAYSIZE =
    TelephonyServiceState_RoamingType_RoamingType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RoamingType_descriptor() {
    return TelephonyServiceState_RoamingType_descriptor();
  }
  static inline const ::std::string& RoamingType_Name(RoamingType value) {
    return TelephonyServiceState_RoamingType_Name(value);
  }
  static inline bool RoamingType_Parse(const ::std::string& name,
      RoamingType* value) {
    return TelephonyServiceState_RoamingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;
  bool has_voice_operator() const;
  void clear_voice_operator();
  static const int kVoiceOperatorFieldNumber = 1;
  const ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator& voice_operator() const;
  ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* mutable_voice_operator();
  ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* release_voice_operator();
  void set_allocated_voice_operator(::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* voice_operator);

  // optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;
  bool has_data_operator() const;
  void clear_data_operator();
  static const int kDataOperatorFieldNumber = 2;
  const ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator& data_operator() const;
  ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* mutable_data_operator();
  ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* release_data_operator();
  void set_allocated_data_operator(::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* data_operator);

  // optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];
  bool has_voice_roaming_type() const;
  void clear_voice_roaming_type();
  static const int kVoiceRoamingTypeFieldNumber = 3;
  ::clearcut::connectivity::TelephonyServiceState_RoamingType voice_roaming_type() const;
  void set_voice_roaming_type(::clearcut::connectivity::TelephonyServiceState_RoamingType value);

  // optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];
  bool has_data_roaming_type() const;
  void clear_data_roaming_type();
  static const int kDataRoamingTypeFieldNumber = 4;
  ::clearcut::connectivity::TelephonyServiceState_RoamingType data_roaming_type() const;
  void set_data_roaming_type(::clearcut::connectivity::TelephonyServiceState_RoamingType value);

  // optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];
  bool has_voice_rat() const;
  void clear_voice_rat();
  static const int kVoiceRatFieldNumber = 5;
  ::clearcut::connectivity::RadioAccessTechnology voice_rat() const;
  void set_voice_rat(::clearcut::connectivity::RadioAccessTechnology value);

  // optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];
  bool has_data_rat() const;
  void clear_data_rat();
  static const int kDataRatFieldNumber = 6;
  ::clearcut::connectivity::RadioAccessTechnology data_rat() const;
  void set_data_rat(::clearcut::connectivity::RadioAccessTechnology value);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyServiceState)
 private:
  inline void set_has_voice_operator();
  inline void clear_has_voice_operator();
  inline void set_has_data_operator();
  inline void clear_has_data_operator();
  inline void set_has_voice_roaming_type();
  inline void clear_has_voice_roaming_type();
  inline void set_has_data_roaming_type();
  inline void clear_has_data_roaming_type();
  inline void set_has_voice_rat();
  inline void clear_has_voice_rat();
  inline void set_has_data_rat();
  inline void clear_has_data_rat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* voice_operator_;
  ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* data_operator_;
  int voice_roaming_type_;
  int data_roaming_type_;
  int voice_rat_;
  int data_rat_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static TelephonyServiceState* default_instance_;
};
// -------------------------------------------------------------------

class ImsReasonInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.ImsReasonInfo) */ {
 public:
  ImsReasonInfo();
  virtual ~ImsReasonInfo();

  ImsReasonInfo(const ImsReasonInfo& from);

  inline ImsReasonInfo& operator=(const ImsReasonInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImsReasonInfo& default_instance();

  void Swap(ImsReasonInfo* other);

  // implements Message ----------------------------------------------

  inline ImsReasonInfo* New() const { return New(NULL); }

  ImsReasonInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImsReasonInfo& from);
  void MergeFrom(const ImsReasonInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImsReasonInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reason_code = 1;
  bool has_reason_code() const;
  void clear_reason_code();
  static const int kReasonCodeFieldNumber = 1;
  ::google::protobuf::int32 reason_code() const;
  void set_reason_code(::google::protobuf::int32 value);

  // optional int32 extra_code = 2;
  bool has_extra_code() const;
  void clear_extra_code();
  static const int kExtraCodeFieldNumber = 2;
  ::google::protobuf::int32 extra_code() const;
  void set_extra_code(::google::protobuf::int32 value);

  // optional string extra_message = 3;
  bool has_extra_message() const;
  void clear_extra_message();
  static const int kExtraMessageFieldNumber = 3;
  const ::std::string& extra_message() const;
  void set_extra_message(const ::std::string& value);
  void set_extra_message(const char* value);
  void set_extra_message(const char* value, size_t size);
  ::std::string* mutable_extra_message();
  ::std::string* release_extra_message();
  void set_allocated_extra_message(::std::string* extra_message);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.ImsReasonInfo)
 private:
  inline void set_has_reason_code();
  inline void clear_has_reason_code();
  inline void set_has_extra_code();
  inline void clear_has_extra_code();
  inline void set_has_extra_message();
  inline void clear_has_extra_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 reason_code_;
  ::google::protobuf::int32 extra_code_;
  ::google::protobuf::internal::ArenaStringPtr extra_message_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static ImsReasonInfo* default_instance_;
};
// -------------------------------------------------------------------

class ImsConnectionState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.ImsConnectionState) */ {
 public:
  ImsConnectionState();
  virtual ~ImsConnectionState();

  ImsConnectionState(const ImsConnectionState& from);

  inline ImsConnectionState& operator=(const ImsConnectionState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImsConnectionState& default_instance();

  void Swap(ImsConnectionState* other);

  // implements Message ----------------------------------------------

  inline ImsConnectionState* New() const { return New(NULL); }

  ImsConnectionState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImsConnectionState& from);
  void MergeFrom(const ImsConnectionState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImsConnectionState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ImsConnectionState_State State;
  static const State STATE_UNKNOWN =
    ImsConnectionState_State_STATE_UNKNOWN;
  static const State CONNECTED =
    ImsConnectionState_State_CONNECTED;
  static const State PROGRESSING =
    ImsConnectionState_State_PROGRESSING;
  static const State DISCONNECTED =
    ImsConnectionState_State_DISCONNECTED;
  static const State RESUMED =
    ImsConnectionState_State_RESUMED;
  static const State SUSPENDED =
    ImsConnectionState_State_SUSPENDED;
  static inline bool State_IsValid(int value) {
    return ImsConnectionState_State_IsValid(value);
  }
  static const State State_MIN =
    ImsConnectionState_State_State_MIN;
  static const State State_MAX =
    ImsConnectionState_State_State_MAX;
  static const int State_ARRAYSIZE =
    ImsConnectionState_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return ImsConnectionState_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return ImsConnectionState_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return ImsConnectionState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .clearcut.connectivity.ImsConnectionState.State state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::clearcut::connectivity::ImsConnectionState_State state() const;
  void set_state(::clearcut::connectivity::ImsConnectionState_State value);

  // optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;
  bool has_reason_info() const;
  void clear_reason_info();
  static const int kReasonInfoFieldNumber = 2;
  const ::clearcut::connectivity::ImsReasonInfo& reason_info() const;
  ::clearcut::connectivity::ImsReasonInfo* mutable_reason_info();
  ::clearcut::connectivity::ImsReasonInfo* release_reason_info();
  void set_allocated_reason_info(::clearcut::connectivity::ImsReasonInfo* reason_info);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.ImsConnectionState)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_reason_info();
  inline void clear_has_reason_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::clearcut::connectivity::ImsReasonInfo* reason_info_;
  int state_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static ImsConnectionState* default_instance_;
};
// -------------------------------------------------------------------

class ImsCapabilities : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.ImsCapabilities) */ {
 public:
  ImsCapabilities();
  virtual ~ImsCapabilities();

  ImsCapabilities(const ImsCapabilities& from);

  inline ImsCapabilities& operator=(const ImsCapabilities& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImsCapabilities& default_instance();

  void Swap(ImsCapabilities* other);

  // implements Message ----------------------------------------------

  inline ImsCapabilities* New() const { return New(NULL); }

  ImsCapabilities* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImsCapabilities& from);
  void MergeFrom(const ImsCapabilities& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImsCapabilities* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool voice_over_lte = 1;
  bool has_voice_over_lte() const;
  void clear_voice_over_lte();
  static const int kVoiceOverLteFieldNumber = 1;
  bool voice_over_lte() const;
  void set_voice_over_lte(bool value);

  // optional bool voice_over_wifi = 2;
  bool has_voice_over_wifi() const;
  void clear_voice_over_wifi();
  static const int kVoiceOverWifiFieldNumber = 2;
  bool voice_over_wifi() const;
  void set_voice_over_wifi(bool value);

  // optional bool video_over_lte = 3;
  bool has_video_over_lte() const;
  void clear_video_over_lte();
  static const int kVideoOverLteFieldNumber = 3;
  bool video_over_lte() const;
  void set_video_over_lte(bool value);

  // optional bool video_over_wifi = 4;
  bool has_video_over_wifi() const;
  void clear_video_over_wifi();
  static const int kVideoOverWifiFieldNumber = 4;
  bool video_over_wifi() const;
  void set_video_over_wifi(bool value);

  // optional bool ut_over_lte = 5;
  bool has_ut_over_lte() const;
  void clear_ut_over_lte();
  static const int kUtOverLteFieldNumber = 5;
  bool ut_over_lte() const;
  void set_ut_over_lte(bool value);

  // optional bool ut_over_wifi = 6;
  bool has_ut_over_wifi() const;
  void clear_ut_over_wifi();
  static const int kUtOverWifiFieldNumber = 6;
  bool ut_over_wifi() const;
  void set_ut_over_wifi(bool value);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.ImsCapabilities)
 private:
  inline void set_has_voice_over_lte();
  inline void clear_has_voice_over_lte();
  inline void set_has_voice_over_wifi();
  inline void clear_has_voice_over_wifi();
  inline void set_has_video_over_lte();
  inline void clear_has_video_over_lte();
  inline void set_has_video_over_wifi();
  inline void clear_has_video_over_wifi();
  inline void set_has_ut_over_lte();
  inline void clear_has_ut_over_lte();
  inline void set_has_ut_over_wifi();
  inline void clear_has_ut_over_wifi();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool voice_over_lte_;
  bool voice_over_wifi_;
  bool video_over_lte_;
  bool video_over_wifi_;
  bool ut_over_lte_;
  bool ut_over_wifi_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static ImsCapabilities* default_instance_;
};
// -------------------------------------------------------------------

class RilDataCall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.RilDataCall) */ {
 public:
  RilDataCall();
  virtual ~RilDataCall();

  RilDataCall(const RilDataCall& from);

  inline RilDataCall& operator=(const RilDataCall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RilDataCall& default_instance();

  void Swap(RilDataCall* other);

  // implements Message ----------------------------------------------

  inline RilDataCall* New() const { return New(NULL); }

  RilDataCall* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RilDataCall& from);
  void MergeFrom(const RilDataCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RilDataCall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cid = 1;
  bool has_cid() const;
  void clear_cid();
  static const int kCidFieldNumber = 1;
  ::google::protobuf::int32 cid() const;
  void set_cid(::google::protobuf::int32 value);

  // optional .clearcut.connectivity.PdpType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::clearcut::connectivity::PdpType type() const;
  void set_type(::clearcut::connectivity::PdpType value);

  // optional string iframe = 3;
  bool has_iframe() const;
  void clear_iframe();
  static const int kIframeFieldNumber = 3;
  const ::std::string& iframe() const;
  void set_iframe(const ::std::string& value);
  void set_iframe(const char* value);
  void set_iframe(const char* value, size_t size);
  ::std::string* mutable_iframe();
  ::std::string* release_iframe();
  void set_allocated_iframe(::std::string* iframe);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.RilDataCall)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_iframe();
  inline void clear_has_iframe();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cid_;
  int type_;
  ::google::protobuf::internal::ArenaStringPtr iframe_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static RilDataCall* default_instance_;
};
// -------------------------------------------------------------------

class TelephonyEvent_RilSetupDataCall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.TelephonyEvent.RilSetupDataCall) */ {
 public:
  TelephonyEvent_RilSetupDataCall();
  virtual ~TelephonyEvent_RilSetupDataCall();

  TelephonyEvent_RilSetupDataCall(const TelephonyEvent_RilSetupDataCall& from);

  inline TelephonyEvent_RilSetupDataCall& operator=(const TelephonyEvent_RilSetupDataCall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelephonyEvent_RilSetupDataCall& default_instance();

  void Swap(TelephonyEvent_RilSetupDataCall* other);

  // implements Message ----------------------------------------------

  inline TelephonyEvent_RilSetupDataCall* New() const { return New(NULL); }

  TelephonyEvent_RilSetupDataCall* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelephonyEvent_RilSetupDataCall& from);
  void MergeFrom(const TelephonyEvent_RilSetupDataCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelephonyEvent_RilSetupDataCall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TelephonyEvent_RilSetupDataCall_RilDataProfile RilDataProfile;
  static const RilDataProfile RIL_DATA_UNKNOWN =
    TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_UNKNOWN;
  static const RilDataProfile RIL_DATA_PROFILE_DEFAULT =
    TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_PROFILE_DEFAULT;
  static const RilDataProfile RIL_DATA_PROFILE_TETHERED =
    TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_PROFILE_TETHERED;
  static const RilDataProfile RIL_DATA_PROFILE_IMS =
    TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_PROFILE_IMS;
  static const RilDataProfile RIL_DATA_PROFILE_FOTA =
    TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_PROFILE_FOTA;
  static const RilDataProfile RIL_DATA_PROFILE_CBS =
    TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_PROFILE_CBS;
  static const RilDataProfile RIL_DATA_PROFILE_OEM_BASE =
    TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_PROFILE_OEM_BASE;
  static const RilDataProfile RIL_DATA_PROFILE_INVALID =
    TelephonyEvent_RilSetupDataCall_RilDataProfile_RIL_DATA_PROFILE_INVALID;
  static inline bool RilDataProfile_IsValid(int value) {
    return TelephonyEvent_RilSetupDataCall_RilDataProfile_IsValid(value);
  }
  static const RilDataProfile RilDataProfile_MIN =
    TelephonyEvent_RilSetupDataCall_RilDataProfile_RilDataProfile_MIN;
  static const RilDataProfile RilDataProfile_MAX =
    TelephonyEvent_RilSetupDataCall_RilDataProfile_RilDataProfile_MAX;
  static const int RilDataProfile_ARRAYSIZE =
    TelephonyEvent_RilSetupDataCall_RilDataProfile_RilDataProfile_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RilDataProfile_descriptor() {
    return TelephonyEvent_RilSetupDataCall_RilDataProfile_descriptor();
  }
  static inline const ::std::string& RilDataProfile_Name(RilDataProfile value) {
    return TelephonyEvent_RilSetupDataCall_RilDataProfile_Name(value);
  }
  static inline bool RilDataProfile_Parse(const ::std::string& name,
      RilDataProfile* value) {
    return TelephonyEvent_RilSetupDataCall_RilDataProfile_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];
  bool has_rat() const;
  void clear_rat();
  static const int kRatFieldNumber = 1;
  ::clearcut::connectivity::RadioAccessTechnology rat() const;
  void set_rat(::clearcut::connectivity::RadioAccessTechnology value);

  // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;
  bool has_data_profile() const;
  void clear_data_profile();
  static const int kDataProfileFieldNumber = 2;
  ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall_RilDataProfile data_profile() const;
  void set_data_profile(::clearcut::connectivity::TelephonyEvent_RilSetupDataCall_RilDataProfile value);

  // optional string apn = 3;
  bool has_apn() const;
  void clear_apn();
  static const int kApnFieldNumber = 3;
  const ::std::string& apn() const;
  void set_apn(const ::std::string& value);
  void set_apn(const char* value);
  void set_apn(const char* value, size_t size);
  ::std::string* mutable_apn();
  ::std::string* release_apn();
  void set_allocated_apn(::std::string* apn);

  // optional .clearcut.connectivity.PdpType type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::clearcut::connectivity::PdpType type() const;
  void set_type(::clearcut::connectivity::PdpType value);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
 private:
  inline void set_has_rat();
  inline void clear_has_rat();
  inline void set_has_data_profile();
  inline void clear_has_data_profile();
  inline void set_has_apn();
  inline void clear_has_apn();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int rat_;
  int data_profile_;
  ::google::protobuf::internal::ArenaStringPtr apn_;
  int type_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static TelephonyEvent_RilSetupDataCall* default_instance_;
};
// -------------------------------------------------------------------

class TelephonyEvent_RilSetupDataCallResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse) */ {
 public:
  TelephonyEvent_RilSetupDataCallResponse();
  virtual ~TelephonyEvent_RilSetupDataCallResponse();

  TelephonyEvent_RilSetupDataCallResponse(const TelephonyEvent_RilSetupDataCallResponse& from);

  inline TelephonyEvent_RilSetupDataCallResponse& operator=(const TelephonyEvent_RilSetupDataCallResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelephonyEvent_RilSetupDataCallResponse& default_instance();

  void Swap(TelephonyEvent_RilSetupDataCallResponse* other);

  // implements Message ----------------------------------------------

  inline TelephonyEvent_RilSetupDataCallResponse* New() const { return New(NULL); }

  TelephonyEvent_RilSetupDataCallResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelephonyEvent_RilSetupDataCallResponse& from);
  void MergeFrom(const TelephonyEvent_RilSetupDataCallResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelephonyEvent_RilSetupDataCallResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause RilDataCallFailCause;
  static const RilDataCallFailCause PDP_FAIL_UNKNOWN =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_UNKNOWN;
  static const RilDataCallFailCause PDP_FAIL_NONE =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_NONE;
  static const RilDataCallFailCause PDP_FAIL_OPERATOR_BARRED =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_OPERATOR_BARRED;
  static const RilDataCallFailCause PDP_FAIL_NAS_SIGNALLING =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_NAS_SIGNALLING;
  static const RilDataCallFailCause PDP_FAIL_LLC_SNDCP =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_LLC_SNDCP;
  static const RilDataCallFailCause PDP_FAIL_INSUFFICIENT_RESOURCES =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_INSUFFICIENT_RESOURCES;
  static const RilDataCallFailCause PDP_FAIL_MISSING_UKNOWN_APN =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_MISSING_UKNOWN_APN;
  static const RilDataCallFailCause PDP_FAIL_UNKNOWN_PDP_ADDRESS_TYPE =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_UNKNOWN_PDP_ADDRESS_TYPE;
  static const RilDataCallFailCause PDP_FAIL_USER_AUTHENTICATION =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_USER_AUTHENTICATION;
  static const RilDataCallFailCause PDP_FAIL_ACTIVATION_REJECT_GGSN =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_ACTIVATION_REJECT_GGSN;
  static const RilDataCallFailCause PDP_FAIL_ACTIVATION_REJECT_UNSPECIFIED =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_ACTIVATION_REJECT_UNSPECIFIED;
  static const RilDataCallFailCause PDP_FAIL_SERVICE_OPTION_NOT_SUPPORTED =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_SERVICE_OPTION_NOT_SUPPORTED;
  static const RilDataCallFailCause PDP_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED;
  static const RilDataCallFailCause PDP_FAIL_SERVICE_OPTION_OUT_OF_ORDER =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_SERVICE_OPTION_OUT_OF_ORDER;
  static const RilDataCallFailCause PDP_FAIL_NSAPI_IN_USE =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_NSAPI_IN_USE;
  static const RilDataCallFailCause PDP_FAIL_REGULAR_DEACTIVATION =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_REGULAR_DEACTIVATION;
  static const RilDataCallFailCause PDP_FAIL_QOS_NOT_ACCEPTED =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_QOS_NOT_ACCEPTED;
  static const RilDataCallFailCause PDP_FAIL_NETWORK_FAILURE =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_NETWORK_FAILURE;
  static const RilDataCallFailCause PDP_FAIL_UMTS_REACTIVATION_REQ =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_UMTS_REACTIVATION_REQ;
  static const RilDataCallFailCause PDP_FAIL_FEATURE_NOT_SUPP =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_FEATURE_NOT_SUPP;
  static const RilDataCallFailCause PDP_FAIL_TFT_SEMANTIC_ERROR =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_TFT_SEMANTIC_ERROR;
  static const RilDataCallFailCause PDP_FAIL_TFT_SYTAX_ERROR =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_TFT_SYTAX_ERROR;
  static const RilDataCallFailCause PDP_FAIL_UNKNOWN_PDP_CONTEXT =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_UNKNOWN_PDP_CONTEXT;
  static const RilDataCallFailCause PDP_FAIL_FILTER_SEMANTIC_ERROR =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_FILTER_SEMANTIC_ERROR;
  static const RilDataCallFailCause PDP_FAIL_FILTER_SYTAX_ERROR =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_FILTER_SYTAX_ERROR;
  static const RilDataCallFailCause PDP_FAIL_PDP_WITHOUT_ACTIVE_TFT =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_PDP_WITHOUT_ACTIVE_TFT;
  static const RilDataCallFailCause PDP_FAIL_ONLY_IPV4_ALLOWED =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_ONLY_IPV4_ALLOWED;
  static const RilDataCallFailCause PDP_FAIL_ONLY_IPV6_ALLOWED =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_ONLY_IPV6_ALLOWED;
  static const RilDataCallFailCause PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED;
  static const RilDataCallFailCause PDP_FAIL_ESM_INFO_NOT_RECEIVED =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_ESM_INFO_NOT_RECEIVED;
  static const RilDataCallFailCause PDP_FAIL_PDN_CONN_DOES_NOT_EXIST =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_PDN_CONN_DOES_NOT_EXIST;
  static const RilDataCallFailCause PDP_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED;
  static const RilDataCallFailCause PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED;
  static const RilDataCallFailCause PDP_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN;
  static const RilDataCallFailCause PDP_FAIL_INVALID_TRANSACTION_ID =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_INVALID_TRANSACTION_ID;
  static const RilDataCallFailCause PDP_FAIL_MESSAGE_INCORRECT_SEMANTIC =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_MESSAGE_INCORRECT_SEMANTIC;
  static const RilDataCallFailCause PDP_FAIL_INVALID_MANDATORY_INFO =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_INVALID_MANDATORY_INFO;
  static const RilDataCallFailCause PDP_FAIL_MESSAGE_TYPE_UNSUPPORTED =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_MESSAGE_TYPE_UNSUPPORTED;
  static const RilDataCallFailCause PDP_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE;
  static const RilDataCallFailCause PDP_FAIL_UNKNOWN_INFO_ELEMENT =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_UNKNOWN_INFO_ELEMENT;
  static const RilDataCallFailCause PDP_FAIL_CONDITIONAL_IE_ERROR =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_CONDITIONAL_IE_ERROR;
  static const RilDataCallFailCause PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE;
  static const RilDataCallFailCause PDP_FAIL_PROTOCOL_ERRORS =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_PROTOCOL_ERRORS;
  static const RilDataCallFailCause PDP_FAIL_APN_TYPE_CONFLICT =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_APN_TYPE_CONFLICT;
  static const RilDataCallFailCause PDP_FAIL_INVALID_PCSCF_ADDR =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_INVALID_PCSCF_ADDR;
  static const RilDataCallFailCause PDP_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN;
  static const RilDataCallFailCause PDP_FAIL_EMM_ACCESS_BARRED =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_EMM_ACCESS_BARRED;
  static const RilDataCallFailCause PDP_FAIL_EMERGENCY_IFACE_ONLY =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_EMERGENCY_IFACE_ONLY;
  static const RilDataCallFailCause PDP_FAIL_IFACE_MISMATCH =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_IFACE_MISMATCH;
  static const RilDataCallFailCause PDP_FAIL_COMPANION_IFACE_IN_USE =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_COMPANION_IFACE_IN_USE;
  static const RilDataCallFailCause PDP_FAIL_IP_ADDRESS_MISMATCH =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_IP_ADDRESS_MISMATCH;
  static const RilDataCallFailCause PDP_FAIL_IFACE_AND_POL_FAMILY_MISMATCH =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_IFACE_AND_POL_FAMILY_MISMATCH;
  static const RilDataCallFailCause PDP_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY;
  static const RilDataCallFailCause PDP_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL;
  static const RilDataCallFailCause PDP_FAIL_VOICE_REGISTRATION_FAIL =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_VOICE_REGISTRATION_FAIL;
  static const RilDataCallFailCause PDP_FAIL_DATA_REGISTRATION_FAIL =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_DATA_REGISTRATION_FAIL;
  static const RilDataCallFailCause PDP_FAIL_SIGNAL_LOST =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_SIGNAL_LOST;
  static const RilDataCallFailCause PDP_FAIL_PREF_RADIO_TECH_CHANGED =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_PREF_RADIO_TECH_CHANGED;
  static const RilDataCallFailCause PDP_FAIL_RADIO_POWER_OFF =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_RADIO_POWER_OFF;
  static const RilDataCallFailCause PDP_FAIL_TETHERED_CALL_ACTIVE =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_TETHERED_CALL_ACTIVE;
  static const RilDataCallFailCause PDP_FAIL_ERROR_UNSPECIFIED =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_PDP_FAIL_ERROR_UNSPECIFIED;
  static inline bool RilDataCallFailCause_IsValid(int value) {
    return TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_IsValid(value);
  }
  static const RilDataCallFailCause RilDataCallFailCause_MIN =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_RilDataCallFailCause_MIN;
  static const RilDataCallFailCause RilDataCallFailCause_MAX =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_RilDataCallFailCause_MAX;
  static const int RilDataCallFailCause_ARRAYSIZE =
    TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_RilDataCallFailCause_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RilDataCallFailCause_descriptor() {
    return TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_descriptor();
  }
  static inline const ::std::string& RilDataCallFailCause_Name(RilDataCallFailCause value) {
    return TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_Name(value);
  }
  static inline bool RilDataCallFailCause_Parse(const ::std::string& name,
      RilDataCallFailCause* value) {
    return TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause status() const;
  void set_status(::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause value);

  // optional int32 suggested_retry_time_millis = 2;
  bool has_suggested_retry_time_millis() const;
  void clear_suggested_retry_time_millis();
  static const int kSuggestedRetryTimeMillisFieldNumber = 2;
  ::google::protobuf::int32 suggested_retry_time_millis() const;
  void set_suggested_retry_time_millis(::google::protobuf::int32 value);

  // optional .clearcut.connectivity.RilDataCall call = 3;
  bool has_call() const;
  void clear_call();
  static const int kCallFieldNumber = 3;
  const ::clearcut::connectivity::RilDataCall& call() const;
  ::clearcut::connectivity::RilDataCall* mutable_call();
  ::clearcut::connectivity::RilDataCall* release_call();
  void set_allocated_call(::clearcut::connectivity::RilDataCall* call);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_suggested_retry_time_millis();
  inline void clear_has_suggested_retry_time_millis();
  inline void set_has_call();
  inline void clear_has_call();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int status_;
  ::google::protobuf::int32 suggested_retry_time_millis_;
  ::clearcut::connectivity::RilDataCall* call_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static TelephonyEvent_RilSetupDataCallResponse* default_instance_;
};
// -------------------------------------------------------------------

class TelephonyEvent_RilDeactivateDataCall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall) */ {
 public:
  TelephonyEvent_RilDeactivateDataCall();
  virtual ~TelephonyEvent_RilDeactivateDataCall();

  TelephonyEvent_RilDeactivateDataCall(const TelephonyEvent_RilDeactivateDataCall& from);

  inline TelephonyEvent_RilDeactivateDataCall& operator=(const TelephonyEvent_RilDeactivateDataCall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelephonyEvent_RilDeactivateDataCall& default_instance();

  void Swap(TelephonyEvent_RilDeactivateDataCall* other);

  // implements Message ----------------------------------------------

  inline TelephonyEvent_RilDeactivateDataCall* New() const { return New(NULL); }

  TelephonyEvent_RilDeactivateDataCall* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelephonyEvent_RilDeactivateDataCall& from);
  void MergeFrom(const TelephonyEvent_RilDeactivateDataCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelephonyEvent_RilDeactivateDataCall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TelephonyEvent_RilDeactivateDataCall_DeactivateReason DeactivateReason;
  static const DeactivateReason DEACTIVATE_REASON_UNKNOWN =
    TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DEACTIVATE_REASON_UNKNOWN;
  static const DeactivateReason DEACTIVATE_REASON_NONE =
    TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DEACTIVATE_REASON_NONE;
  static const DeactivateReason DEACTIVATE_REASON_RADIO_OFF =
    TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DEACTIVATE_REASON_RADIO_OFF;
  static const DeactivateReason DEACTIVATE_REASON_PDP_RESET =
    TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DEACTIVATE_REASON_PDP_RESET;
  static inline bool DeactivateReason_IsValid(int value) {
    return TelephonyEvent_RilDeactivateDataCall_DeactivateReason_IsValid(value);
  }
  static const DeactivateReason DeactivateReason_MIN =
    TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DeactivateReason_MIN;
  static const DeactivateReason DeactivateReason_MAX =
    TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DeactivateReason_MAX;
  static const int DeactivateReason_ARRAYSIZE =
    TelephonyEvent_RilDeactivateDataCall_DeactivateReason_DeactivateReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DeactivateReason_descriptor() {
    return TelephonyEvent_RilDeactivateDataCall_DeactivateReason_descriptor();
  }
  static inline const ::std::string& DeactivateReason_Name(DeactivateReason value) {
    return TelephonyEvent_RilDeactivateDataCall_DeactivateReason_Name(value);
  }
  static inline bool DeactivateReason_Parse(const ::std::string& name,
      DeactivateReason* value) {
    return TelephonyEvent_RilDeactivateDataCall_DeactivateReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 cid = 1;
  bool has_cid() const;
  void clear_cid();
  static const int kCidFieldNumber = 1;
  ::google::protobuf::int32 cid() const;
  void set_cid(::google::protobuf::int32 value);

  // optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall_DeactivateReason reason() const;
  void set_reason(::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall_DeactivateReason value);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cid_;
  int reason_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static TelephonyEvent_RilDeactivateDataCall* default_instance_;
};
// -------------------------------------------------------------------

class TelephonyEvent_ModemRestart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.TelephonyEvent.ModemRestart) */ {
 public:
  TelephonyEvent_ModemRestart();
  virtual ~TelephonyEvent_ModemRestart();

  TelephonyEvent_ModemRestart(const TelephonyEvent_ModemRestart& from);

  inline TelephonyEvent_ModemRestart& operator=(const TelephonyEvent_ModemRestart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelephonyEvent_ModemRestart& default_instance();

  void Swap(TelephonyEvent_ModemRestart* other);

  // implements Message ----------------------------------------------

  inline TelephonyEvent_ModemRestart* New() const { return New(NULL); }

  TelephonyEvent_ModemRestart* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelephonyEvent_ModemRestart& from);
  void MergeFrom(const TelephonyEvent_ModemRestart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelephonyEvent_ModemRestart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string baseband_version = 1;
  bool has_baseband_version() const;
  void clear_baseband_version();
  static const int kBasebandVersionFieldNumber = 1;
  const ::std::string& baseband_version() const;
  void set_baseband_version(const ::std::string& value);
  void set_baseband_version(const char* value);
  void set_baseband_version(const char* value, size_t size);
  ::std::string* mutable_baseband_version();
  ::std::string* release_baseband_version();
  void set_allocated_baseband_version(::std::string* baseband_version);

  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyEvent.ModemRestart)
 private:
  inline void set_has_baseband_version();
  inline void clear_has_baseband_version();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr baseband_version_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static TelephonyEvent_ModemRestart* default_instance_;
};
// -------------------------------------------------------------------

class TelephonyEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.TelephonyEvent) */ {
 public:
  TelephonyEvent();
  virtual ~TelephonyEvent();

  TelephonyEvent(const TelephonyEvent& from);

  inline TelephonyEvent& operator=(const TelephonyEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelephonyEvent& default_instance();

  void Swap(TelephonyEvent* other);

  // implements Message ----------------------------------------------

  inline TelephonyEvent* New() const { return New(NULL); }

  TelephonyEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelephonyEvent& from);
  void MergeFrom(const TelephonyEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelephonyEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TelephonyEvent_RilSetupDataCall RilSetupDataCall;
  typedef TelephonyEvent_RilSetupDataCallResponse RilSetupDataCallResponse;
  typedef TelephonyEvent_RilDeactivateDataCall RilDeactivateDataCall;
  typedef TelephonyEvent_ModemRestart ModemRestart;

  typedef TelephonyEvent_Type Type;
  static const Type UNKNOWN =
    TelephonyEvent_Type_UNKNOWN;
  static const Type SETTINGS_CHANGED =
    TelephonyEvent_Type_SETTINGS_CHANGED;
  static const Type RIL_SERVICE_STATE_CHANGED =
    TelephonyEvent_Type_RIL_SERVICE_STATE_CHANGED;
  static const Type IMS_CONNECTION_STATE_CHANGED =
    TelephonyEvent_Type_IMS_CONNECTION_STATE_CHANGED;
  static const Type IMS_CAPABILITIES_CHANGED =
    TelephonyEvent_Type_IMS_CAPABILITIES_CHANGED;
  static const Type DATA_CALL_SETUP =
    TelephonyEvent_Type_DATA_CALL_SETUP;
  static const Type DATA_CALL_SETUP_RESPONSE =
    TelephonyEvent_Type_DATA_CALL_SETUP_RESPONSE;
  static const Type DATA_CALL_LIST_CHANGED =
    TelephonyEvent_Type_DATA_CALL_LIST_CHANGED;
  static const Type DATA_CALL_DEACTIVATE =
    TelephonyEvent_Type_DATA_CALL_DEACTIVATE;
  static const Type DATA_CALL_DEACTIVATE_RESPONSE =
    TelephonyEvent_Type_DATA_CALL_DEACTIVATE_RESPONSE;
  static const Type DATA_STALL_ACTION =
    TelephonyEvent_Type_DATA_STALL_ACTION;
  static const Type MODEM_RESTART =
    TelephonyEvent_Type_MODEM_RESTART;
  static const Type NITZ_TIME =
    TelephonyEvent_Type_NITZ_TIME;
  static inline bool Type_IsValid(int value) {
    return TelephonyEvent_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TelephonyEvent_Type_Type_MIN;
  static const Type Type_MAX =
    TelephonyEvent_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TelephonyEvent_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return TelephonyEvent_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return TelephonyEvent_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return TelephonyEvent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int64 timestamp_millis = 1;
  bool has_timestamp_millis() const;
  void clear_timestamp_millis();
  static const int kTimestampMillisFieldNumber = 1;
  ::google::protobuf::int64 timestamp_millis() const;
  void set_timestamp_millis(::google::protobuf::int64 value);

  // optional int32 phone_id = 2;
  bool has_phone_id() const;
  void clear_phone_id();
  static const int kPhoneIdFieldNumber = 2;
  ::google::protobuf::int32 phone_id() const;
  void set_phone_id(::google::protobuf::int32 value);

  // optional .clearcut.connectivity.TelephonyEvent.Type type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::clearcut::connectivity::TelephonyEvent_Type type() const;
  void set_type(::clearcut::connectivity::TelephonyEvent_Type value);

  // optional .clearcut.connectivity.TelephonySettings settings = 4;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 4;
  const ::clearcut::connectivity::TelephonySettings& settings() const;
  ::clearcut::connectivity::TelephonySettings* mutable_settings();
  ::clearcut::connectivity::TelephonySettings* release_settings();
  void set_allocated_settings(::clearcut::connectivity::TelephonySettings* settings);

  // optional .clearcut.connectivity.TelephonyServiceState service_state = 5;
  bool has_service_state() const;
  void clear_service_state();
  static const int kServiceStateFieldNumber = 5;
  const ::clearcut::connectivity::TelephonyServiceState& service_state() const;
  ::clearcut::connectivity::TelephonyServiceState* mutable_service_state();
  ::clearcut::connectivity::TelephonyServiceState* release_service_state();
  void set_allocated_service_state(::clearcut::connectivity::TelephonyServiceState* service_state);

  // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;
  bool has_ims_connection_state() const;
  void clear_ims_connection_state();
  static const int kImsConnectionStateFieldNumber = 6;
  const ::clearcut::connectivity::ImsConnectionState& ims_connection_state() const;
  ::clearcut::connectivity::ImsConnectionState* mutable_ims_connection_state();
  ::clearcut::connectivity::ImsConnectionState* release_ims_connection_state();
  void set_allocated_ims_connection_state(::clearcut::connectivity::ImsConnectionState* ims_connection_state);

  // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;
  bool has_ims_capabilities() const;
  void clear_ims_capabilities();
  static const int kImsCapabilitiesFieldNumber = 7;
  const ::clearcut::connectivity::ImsCapabilities& ims_capabilities() const;
  ::clearcut::connectivity::ImsCapabilities* mutable_ims_capabilities();
  ::clearcut::connectivity::ImsCapabilities* release_ims_capabilities();
  void set_allocated_ims_capabilities(::clearcut::connectivity::ImsCapabilities* ims_capabilities);

  // repeated .clearcut.connectivity.RilDataCall data_calls = 8;
  int data_calls_size() const;
  void clear_data_calls();
  static const int kDataCallsFieldNumber = 8;
  const ::clearcut::connectivity::RilDataCall& data_calls(int index) const;
  ::clearcut::connectivity::RilDataCall* mutable_data_calls(int index);
  ::clearcut::connectivity::RilDataCall* add_data_calls();
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >*
      mutable_data_calls();
  const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >&
      data_calls() const;

  // optional .clearcut.connectivity.RilErrno error = 9;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 9;
  ::clearcut::connectivity::RilErrno error() const;
  void set_error(::clearcut::connectivity::RilErrno value);

  // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;
  bool has_setup_data_call() const;
  void clear_setup_data_call();
  static const int kSetupDataCallFieldNumber = 10;
  const ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall& setup_data_call() const;
  ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall* mutable_setup_data_call();
  ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall* release_setup_data_call();
  void set_allocated_setup_data_call(::clearcut::connectivity::TelephonyEvent_RilSetupDataCall* setup_data_call);

  // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;
  bool has_setup_data_call_response() const;
  void clear_setup_data_call_response();
  static const int kSetupDataCallResponseFieldNumber = 11;
  const ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse& setup_data_call_response() const;
  ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse* mutable_setup_data_call_response();
  ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse* release_setup_data_call_response();
  void set_allocated_setup_data_call_response(::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse* setup_data_call_response);

  // optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;
  bool has_deactivate_data_call() const;
  void clear_deactivate_data_call();
  static const int kDeactivateDataCallFieldNumber = 12;
  const ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall& deactivate_data_call() const;
  ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall* mutable_deactivate_data_call();
  ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall* release_deactivate_data_call();
  void set_allocated_deactivate_data_call(::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall* deactivate_data_call);

  // optional int32 data_stall_action = 13;
  bool has_data_stall_action() const;
  void clear_data_stall_action();
  static const int kDataStallActionFieldNumber = 13;
  ::google::protobuf::int32 data_stall_action() const;
  void set_data_stall_action(::google::protobuf::int32 value);

  // optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;
  bool has_modem_restart() const;
  void clear_modem_restart();
  static const int kModemRestartFieldNumber = 14;
  const ::clearcut::connectivity::TelephonyEvent_ModemRestart& modem_restart() const;
  ::clearcut::connectivity::TelephonyEvent_ModemRestart* mutable_modem_restart();
  ::clearcut::connectivity::TelephonyEvent_ModemRestart* release_modem_restart();
  void set_allocated_modem_restart(::clearcut::connectivity::TelephonyEvent_ModemRestart* modem_restart);

  // optional int64 nitz_timestamp_millis = 15;
  bool has_nitz_timestamp_millis() const;
  void clear_nitz_timestamp_millis();
  static const int kNitzTimestampMillisFieldNumber = 15;
  ::google::protobuf::int64 nitz_timestamp_millis() const;
  void set_nitz_timestamp_millis(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyEvent)
 private:
  inline void set_has_timestamp_millis();
  inline void clear_has_timestamp_millis();
  inline void set_has_phone_id();
  inline void clear_has_phone_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_settings();
  inline void clear_has_settings();
  inline void set_has_service_state();
  inline void clear_has_service_state();
  inline void set_has_ims_connection_state();
  inline void clear_has_ims_connection_state();
  inline void set_has_ims_capabilities();
  inline void clear_has_ims_capabilities();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_setup_data_call();
  inline void clear_has_setup_data_call();
  inline void set_has_setup_data_call_response();
  inline void clear_has_setup_data_call_response();
  inline void set_has_deactivate_data_call();
  inline void clear_has_deactivate_data_call();
  inline void set_has_data_stall_action();
  inline void clear_has_data_stall_action();
  inline void set_has_modem_restart();
  inline void clear_has_modem_restart();
  inline void set_has_nitz_timestamp_millis();
  inline void clear_has_nitz_timestamp_millis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_millis_;
  ::google::protobuf::int32 phone_id_;
  int type_;
  ::clearcut::connectivity::TelephonySettings* settings_;
  ::clearcut::connectivity::TelephonyServiceState* service_state_;
  ::clearcut::connectivity::ImsConnectionState* ims_connection_state_;
  ::clearcut::connectivity::ImsCapabilities* ims_capabilities_;
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall > data_calls_;
  ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall* setup_data_call_;
  ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse* setup_data_call_response_;
  int error_;
  ::google::protobuf::int32 data_stall_action_;
  ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall* deactivate_data_call_;
  ::clearcut::connectivity::TelephonyEvent_ModemRestart* modem_restart_;
  ::google::protobuf::int64 nitz_timestamp_millis_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static TelephonyEvent* default_instance_;
};
// -------------------------------------------------------------------

class TelephonyCallSession_Event_RilCall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.TelephonyCallSession.Event.RilCall) */ {
 public:
  TelephonyCallSession_Event_RilCall();
  virtual ~TelephonyCallSession_Event_RilCall();

  TelephonyCallSession_Event_RilCall(const TelephonyCallSession_Event_RilCall& from);

  inline TelephonyCallSession_Event_RilCall& operator=(const TelephonyCallSession_Event_RilCall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelephonyCallSession_Event_RilCall& default_instance();

  void Swap(TelephonyCallSession_Event_RilCall* other);

  // implements Message ----------------------------------------------

  inline TelephonyCallSession_Event_RilCall* New() const { return New(NULL); }

  TelephonyCallSession_Event_RilCall* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelephonyCallSession_Event_RilCall& from);
  void MergeFrom(const TelephonyCallSession_Event_RilCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelephonyCallSession_Event_RilCall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TelephonyCallSession_Event_RilCall_Type Type;
  static const Type UNKNOWN =
    TelephonyCallSession_Event_RilCall_Type_UNKNOWN;
  static const Type MO =
    TelephonyCallSession_Event_RilCall_Type_MO;
  static const Type MT =
    TelephonyCallSession_Event_RilCall_Type_MT;
  static inline bool Type_IsValid(int value) {
    return TelephonyCallSession_Event_RilCall_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TelephonyCallSession_Event_RilCall_Type_Type_MIN;
  static const Type Type_MAX =
    TelephonyCallSession_Event_RilCall_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TelephonyCallSession_Event_RilCall_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return TelephonyCallSession_Event_RilCall_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return TelephonyCallSession_Event_RilCall_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return TelephonyCallSession_Event_RilCall_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::clearcut::connectivity::TelephonyCallSession_Event_CallState state() const;
  void set_state(::clearcut::connectivity::TelephonyCallSession_Event_CallState value);

  // optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::clearcut::connectivity::TelephonyCallSession_Event_RilCall_Type type() const;
  void set_type(::clearcut::connectivity::TelephonyCallSession_Event_RilCall_Type value);

  // optional int32 call_end_reason = 4;
  bool has_call_end_reason() const;
  void clear_call_end_reason();
  static const int kCallEndReasonFieldNumber = 4;
  ::google::protobuf::int32 call_end_reason() const;
  void set_call_end_reason(::google::protobuf::int32 value);

  // optional bool is_multiparty = 5;
  bool has_is_multiparty() const;
  void clear_is_multiparty();
  static const int kIsMultipartyFieldNumber = 5;
  bool is_multiparty() const;
  void set_is_multiparty(bool value);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_call_end_reason();
  inline void clear_has_call_end_reason();
  inline void set_has_is_multiparty();
  inline void clear_has_is_multiparty();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 index_;
  int state_;
  int type_;
  ::google::protobuf::int32 call_end_reason_;
  bool is_multiparty_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static TelephonyCallSession_Event_RilCall* default_instance_;
};
// -------------------------------------------------------------------

class TelephonyCallSession_Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.TelephonyCallSession.Event) */ {
 public:
  TelephonyCallSession_Event();
  virtual ~TelephonyCallSession_Event();

  TelephonyCallSession_Event(const TelephonyCallSession_Event& from);

  inline TelephonyCallSession_Event& operator=(const TelephonyCallSession_Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelephonyCallSession_Event& default_instance();

  void Swap(TelephonyCallSession_Event* other);

  // implements Message ----------------------------------------------

  inline TelephonyCallSession_Event* New() const { return New(NULL); }

  TelephonyCallSession_Event* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelephonyCallSession_Event& from);
  void MergeFrom(const TelephonyCallSession_Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelephonyCallSession_Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TelephonyCallSession_Event_RilCall RilCall;

  typedef TelephonyCallSession_Event_Type Type;
  static const Type EVENT_UNKNOWN =
    TelephonyCallSession_Event_Type_EVENT_UNKNOWN;
  static const Type SETTINGS_CHANGED =
    TelephonyCallSession_Event_Type_SETTINGS_CHANGED;
  static const Type RIL_SERVICE_STATE_CHANGED =
    TelephonyCallSession_Event_Type_RIL_SERVICE_STATE_CHANGED;
  static const Type IMS_CONNECTION_STATE_CHANGED =
    TelephonyCallSession_Event_Type_IMS_CONNECTION_STATE_CHANGED;
  static const Type IMS_CAPABILITIES_CHANGED =
    TelephonyCallSession_Event_Type_IMS_CAPABILITIES_CHANGED;
  static const Type DATA_CALL_LIST_CHANGED =
    TelephonyCallSession_Event_Type_DATA_CALL_LIST_CHANGED;
  static const Type RIL_REQUEST =
    TelephonyCallSession_Event_Type_RIL_REQUEST;
  static const Type RIL_RESPONSE =
    TelephonyCallSession_Event_Type_RIL_RESPONSE;
  static const Type RIL_CALL_RING =
    TelephonyCallSession_Event_Type_RIL_CALL_RING;
  static const Type RIL_CALL_SRVCC =
    TelephonyCallSession_Event_Type_RIL_CALL_SRVCC;
  static const Type RIL_CALL_LIST_CHANGED =
    TelephonyCallSession_Event_Type_RIL_CALL_LIST_CHANGED;
  static const Type IMS_COMMAND =
    TelephonyCallSession_Event_Type_IMS_COMMAND;
  static const Type IMS_COMMAND_RECEIVED =
    TelephonyCallSession_Event_Type_IMS_COMMAND_RECEIVED;
  static const Type IMS_COMMAND_FAILED =
    TelephonyCallSession_Event_Type_IMS_COMMAND_FAILED;
  static const Type IMS_COMMAND_COMPLETE =
    TelephonyCallSession_Event_Type_IMS_COMMAND_COMPLETE;
  static const Type IMS_CALL_RECEIVE =
    TelephonyCallSession_Event_Type_IMS_CALL_RECEIVE;
  static const Type IMS_CALL_STATE_CHANGED =
    TelephonyCallSession_Event_Type_IMS_CALL_STATE_CHANGED;
  static const Type IMS_CALL_TERMINATED =
    TelephonyCallSession_Event_Type_IMS_CALL_TERMINATED;
  static const Type IMS_CALL_HANDOVER =
    TelephonyCallSession_Event_Type_IMS_CALL_HANDOVER;
  static const Type IMS_CALL_HANDOVER_FAILED =
    TelephonyCallSession_Event_Type_IMS_CALL_HANDOVER_FAILED;
  static const Type PHONE_STATE_CHANGED =
    TelephonyCallSession_Event_Type_PHONE_STATE_CHANGED;
  static const Type NITZ_TIME =
    TelephonyCallSession_Event_Type_NITZ_TIME;
  static inline bool Type_IsValid(int value) {
    return TelephonyCallSession_Event_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TelephonyCallSession_Event_Type_Type_MIN;
  static const Type Type_MAX =
    TelephonyCallSession_Event_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TelephonyCallSession_Event_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return TelephonyCallSession_Event_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return TelephonyCallSession_Event_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return TelephonyCallSession_Event_Type_Parse(name, value);
  }

  typedef TelephonyCallSession_Event_RilRequest RilRequest;
  static const RilRequest RIL_REQUEST_UNKNOWN =
    TelephonyCallSession_Event_RilRequest_RIL_REQUEST_UNKNOWN;
  static const RilRequest RIL_REQUEST_DIAL =
    TelephonyCallSession_Event_RilRequest_RIL_REQUEST_DIAL;
  static const RilRequest RIL_REQUEST_ANSWER =
    TelephonyCallSession_Event_RilRequest_RIL_REQUEST_ANSWER;
  static const RilRequest RIL_REQUEST_HANGUP =
    TelephonyCallSession_Event_RilRequest_RIL_REQUEST_HANGUP;
  static const RilRequest RIL_REQUEST_SET_CALL_WAITING =
    TelephonyCallSession_Event_RilRequest_RIL_REQUEST_SET_CALL_WAITING;
  static const RilRequest RIL_REQUEST_SWITCH_HOLDING_AND_ACTIVE =
    TelephonyCallSession_Event_RilRequest_RIL_REQUEST_SWITCH_HOLDING_AND_ACTIVE;
  static const RilRequest RIL_REQUEST_CDMA_FLASH =
    TelephonyCallSession_Event_RilRequest_RIL_REQUEST_CDMA_FLASH;
  static const RilRequest RIL_REQUEST_CONFERENCE =
    TelephonyCallSession_Event_RilRequest_RIL_REQUEST_CONFERENCE;
  static inline bool RilRequest_IsValid(int value) {
    return TelephonyCallSession_Event_RilRequest_IsValid(value);
  }
  static const RilRequest RilRequest_MIN =
    TelephonyCallSession_Event_RilRequest_RilRequest_MIN;
  static const RilRequest RilRequest_MAX =
    TelephonyCallSession_Event_RilRequest_RilRequest_MAX;
  static const int RilRequest_ARRAYSIZE =
    TelephonyCallSession_Event_RilRequest_RilRequest_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RilRequest_descriptor() {
    return TelephonyCallSession_Event_RilRequest_descriptor();
  }
  static inline const ::std::string& RilRequest_Name(RilRequest value) {
    return TelephonyCallSession_Event_RilRequest_Name(value);
  }
  static inline bool RilRequest_Parse(const ::std::string& name,
      RilRequest* value) {
    return TelephonyCallSession_Event_RilRequest_Parse(name, value);
  }

  typedef TelephonyCallSession_Event_ImsCommand ImsCommand;
  static const ImsCommand IMS_CMD_UNKNOWN =
    TelephonyCallSession_Event_ImsCommand_IMS_CMD_UNKNOWN;
  static const ImsCommand IMS_CMD_START =
    TelephonyCallSession_Event_ImsCommand_IMS_CMD_START;
  static const ImsCommand IMS_CMD_ACCEPT =
    TelephonyCallSession_Event_ImsCommand_IMS_CMD_ACCEPT;
  static const ImsCommand IMS_CMD_REJECT =
    TelephonyCallSession_Event_ImsCommand_IMS_CMD_REJECT;
  static const ImsCommand IMS_CMD_TERMINATE =
    TelephonyCallSession_Event_ImsCommand_IMS_CMD_TERMINATE;
  static const ImsCommand IMS_CMD_HOLD =
    TelephonyCallSession_Event_ImsCommand_IMS_CMD_HOLD;
  static const ImsCommand IMS_CMD_RESUME =
    TelephonyCallSession_Event_ImsCommand_IMS_CMD_RESUME;
  static const ImsCommand IMS_CMD_MERGE =
    TelephonyCallSession_Event_ImsCommand_IMS_CMD_MERGE;
  static const ImsCommand IMS_CMD_UPDATE =
    TelephonyCallSession_Event_ImsCommand_IMS_CMD_UPDATE;
  static const ImsCommand IMS_CMD_CONFERENCE_EXTEND =
    TelephonyCallSession_Event_ImsCommand_IMS_CMD_CONFERENCE_EXTEND;
  static const ImsCommand IMS_CMD_INVITE_PARTICIPANT =
    TelephonyCallSession_Event_ImsCommand_IMS_CMD_INVITE_PARTICIPANT;
  static const ImsCommand IMS_CMD_REMOVE_PARTICIPANT =
    TelephonyCallSession_Event_ImsCommand_IMS_CMD_REMOVE_PARTICIPANT;
  static inline bool ImsCommand_IsValid(int value) {
    return TelephonyCallSession_Event_ImsCommand_IsValid(value);
  }
  static const ImsCommand ImsCommand_MIN =
    TelephonyCallSession_Event_ImsCommand_ImsCommand_MIN;
  static const ImsCommand ImsCommand_MAX =
    TelephonyCallSession_Event_ImsCommand_ImsCommand_MAX;
  static const int ImsCommand_ARRAYSIZE =
    TelephonyCallSession_Event_ImsCommand_ImsCommand_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ImsCommand_descriptor() {
    return TelephonyCallSession_Event_ImsCommand_descriptor();
  }
  static inline const ::std::string& ImsCommand_Name(ImsCommand value) {
    return TelephonyCallSession_Event_ImsCommand_Name(value);
  }
  static inline bool ImsCommand_Parse(const ::std::string& name,
      ImsCommand* value) {
    return TelephonyCallSession_Event_ImsCommand_Parse(name, value);
  }

  typedef TelephonyCallSession_Event_PhoneState PhoneState;
  static const PhoneState STATE_UNKNOWN =
    TelephonyCallSession_Event_PhoneState_STATE_UNKNOWN;
  static const PhoneState STATE_IDLE =
    TelephonyCallSession_Event_PhoneState_STATE_IDLE;
  static const PhoneState STATE_RINGING =
    TelephonyCallSession_Event_PhoneState_STATE_RINGING;
  static const PhoneState STATE_OFFHOOK =
    TelephonyCallSession_Event_PhoneState_STATE_OFFHOOK;
  static inline bool PhoneState_IsValid(int value) {
    return TelephonyCallSession_Event_PhoneState_IsValid(value);
  }
  static const PhoneState PhoneState_MIN =
    TelephonyCallSession_Event_PhoneState_PhoneState_MIN;
  static const PhoneState PhoneState_MAX =
    TelephonyCallSession_Event_PhoneState_PhoneState_MAX;
  static const int PhoneState_ARRAYSIZE =
    TelephonyCallSession_Event_PhoneState_PhoneState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PhoneState_descriptor() {
    return TelephonyCallSession_Event_PhoneState_descriptor();
  }
  static inline const ::std::string& PhoneState_Name(PhoneState value) {
    return TelephonyCallSession_Event_PhoneState_Name(value);
  }
  static inline bool PhoneState_Parse(const ::std::string& name,
      PhoneState* value) {
    return TelephonyCallSession_Event_PhoneState_Parse(name, value);
  }

  typedef TelephonyCallSession_Event_CallState CallState;
  static const CallState CALL_UNKNOWN =
    TelephonyCallSession_Event_CallState_CALL_UNKNOWN;
  static const CallState CALL_IDLE =
    TelephonyCallSession_Event_CallState_CALL_IDLE;
  static const CallState CALL_ACTIVE =
    TelephonyCallSession_Event_CallState_CALL_ACTIVE;
  static const CallState CALL_HOLDING =
    TelephonyCallSession_Event_CallState_CALL_HOLDING;
  static const CallState CALL_DIALING =
    TelephonyCallSession_Event_CallState_CALL_DIALING;
  static const CallState CALL_ALERTING =
    TelephonyCallSession_Event_CallState_CALL_ALERTING;
  static const CallState CALL_INCOMING =
    TelephonyCallSession_Event_CallState_CALL_INCOMING;
  static const CallState CALL_WAITING =
    TelephonyCallSession_Event_CallState_CALL_WAITING;
  static const CallState CALL_DISCONNECTED =
    TelephonyCallSession_Event_CallState_CALL_DISCONNECTED;
  static const CallState CALL_DISCONNECTING =
    TelephonyCallSession_Event_CallState_CALL_DISCONNECTING;
  static inline bool CallState_IsValid(int value) {
    return TelephonyCallSession_Event_CallState_IsValid(value);
  }
  static const CallState CallState_MIN =
    TelephonyCallSession_Event_CallState_CallState_MIN;
  static const CallState CallState_MAX =
    TelephonyCallSession_Event_CallState_CallState_MAX;
  static const int CallState_ARRAYSIZE =
    TelephonyCallSession_Event_CallState_CallState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CallState_descriptor() {
    return TelephonyCallSession_Event_CallState_descriptor();
  }
  static inline const ::std::string& CallState_Name(CallState value) {
    return TelephonyCallSession_Event_CallState_Name(value);
  }
  static inline bool CallState_Parse(const ::std::string& name,
      CallState* value) {
    return TelephonyCallSession_Event_CallState_Parse(name, value);
  }

  typedef TelephonyCallSession_Event_RilSrvccState RilSrvccState;
  static const RilSrvccState HANDOVER_UNKNOWN =
    TelephonyCallSession_Event_RilSrvccState_HANDOVER_UNKNOWN;
  static const RilSrvccState HANDOVER_STARTED =
    TelephonyCallSession_Event_RilSrvccState_HANDOVER_STARTED;
  static const RilSrvccState HANDOVER_COMPLETED =
    TelephonyCallSession_Event_RilSrvccState_HANDOVER_COMPLETED;
  static const RilSrvccState HANDOVER_FAILED =
    TelephonyCallSession_Event_RilSrvccState_HANDOVER_FAILED;
  static const RilSrvccState HANDOVER_CANCELED =
    TelephonyCallSession_Event_RilSrvccState_HANDOVER_CANCELED;
  static inline bool RilSrvccState_IsValid(int value) {
    return TelephonyCallSession_Event_RilSrvccState_IsValid(value);
  }
  static const RilSrvccState RilSrvccState_MIN =
    TelephonyCallSession_Event_RilSrvccState_RilSrvccState_MIN;
  static const RilSrvccState RilSrvccState_MAX =
    TelephonyCallSession_Event_RilSrvccState_RilSrvccState_MAX;
  static const int RilSrvccState_ARRAYSIZE =
    TelephonyCallSession_Event_RilSrvccState_RilSrvccState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RilSrvccState_descriptor() {
    return TelephonyCallSession_Event_RilSrvccState_descriptor();
  }
  static inline const ::std::string& RilSrvccState_Name(RilSrvccState value) {
    return TelephonyCallSession_Event_RilSrvccState_Name(value);
  }
  static inline bool RilSrvccState_Parse(const ::std::string& name,
      RilSrvccState* value) {
    return TelephonyCallSession_Event_RilSrvccState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::clearcut::connectivity::TelephonyCallSession_Event_Type type() const;
  void set_type(::clearcut::connectivity::TelephonyCallSession_Event_Type value);

  // optional .clearcut.connectivity.TimeInterval delay = 2;
  bool has_delay() const;
  void clear_delay();
  static const int kDelayFieldNumber = 2;
  ::clearcut::connectivity::TimeInterval delay() const;
  void set_delay(::clearcut::connectivity::TimeInterval value);

  // optional .clearcut.connectivity.TelephonySettings settings = 3;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 3;
  const ::clearcut::connectivity::TelephonySettings& settings() const;
  ::clearcut::connectivity::TelephonySettings* mutable_settings();
  ::clearcut::connectivity::TelephonySettings* release_settings();
  void set_allocated_settings(::clearcut::connectivity::TelephonySettings* settings);

  // optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
  bool has_service_state() const;
  void clear_service_state();
  static const int kServiceStateFieldNumber = 4;
  const ::clearcut::connectivity::TelephonyServiceState& service_state() const;
  ::clearcut::connectivity::TelephonyServiceState* mutable_service_state();
  ::clearcut::connectivity::TelephonyServiceState* release_service_state();
  void set_allocated_service_state(::clearcut::connectivity::TelephonyServiceState* service_state);

  // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
  bool has_ims_connection_state() const;
  void clear_ims_connection_state();
  static const int kImsConnectionStateFieldNumber = 5;
  const ::clearcut::connectivity::ImsConnectionState& ims_connection_state() const;
  ::clearcut::connectivity::ImsConnectionState* mutable_ims_connection_state();
  ::clearcut::connectivity::ImsConnectionState* release_ims_connection_state();
  void set_allocated_ims_connection_state(::clearcut::connectivity::ImsConnectionState* ims_connection_state);

  // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
  bool has_ims_capabilities() const;
  void clear_ims_capabilities();
  static const int kImsCapabilitiesFieldNumber = 6;
  const ::clearcut::connectivity::ImsCapabilities& ims_capabilities() const;
  ::clearcut::connectivity::ImsCapabilities* mutable_ims_capabilities();
  ::clearcut::connectivity::ImsCapabilities* release_ims_capabilities();
  void set_allocated_ims_capabilities(::clearcut::connectivity::ImsCapabilities* ims_capabilities);

  // repeated .clearcut.connectivity.RilDataCall data_calls = 7;
  int data_calls_size() const;
  void clear_data_calls();
  static const int kDataCallsFieldNumber = 7;
  const ::clearcut::connectivity::RilDataCall& data_calls(int index) const;
  ::clearcut::connectivity::RilDataCall* mutable_data_calls(int index);
  ::clearcut::connectivity::RilDataCall* add_data_calls();
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >*
      mutable_data_calls();
  const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >&
      data_calls() const;

  // optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;
  bool has_phone_state() const;
  void clear_phone_state();
  static const int kPhoneStateFieldNumber = 8;
  ::clearcut::connectivity::TelephonyCallSession_Event_PhoneState phone_state() const;
  void set_phone_state(::clearcut::connectivity::TelephonyCallSession_Event_PhoneState value);

  // optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;
  bool has_call_state() const;
  void clear_call_state();
  static const int kCallStateFieldNumber = 9;
  ::clearcut::connectivity::TelephonyCallSession_Event_CallState call_state() const;
  void set_call_state(::clearcut::connectivity::TelephonyCallSession_Event_CallState value);

  // optional int32 call_index = 10;
  bool has_call_index() const;
  void clear_call_index();
  static const int kCallIndexFieldNumber = 10;
  ::google::protobuf::int32 call_index() const;
  void set_call_index(::google::protobuf::int32 value);

  // optional int32 merged_call_index = 11;
  bool has_merged_call_index() const;
  void clear_merged_call_index();
  static const int kMergedCallIndexFieldNumber = 11;
  ::google::protobuf::int32 merged_call_index() const;
  void set_merged_call_index(::google::protobuf::int32 value);

  // repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;
  int calls_size() const;
  void clear_calls();
  static const int kCallsFieldNumber = 12;
  const ::clearcut::connectivity::TelephonyCallSession_Event_RilCall& calls(int index) const;
  ::clearcut::connectivity::TelephonyCallSession_Event_RilCall* mutable_calls(int index);
  ::clearcut::connectivity::TelephonyCallSession_Event_RilCall* add_calls();
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession_Event_RilCall >*
      mutable_calls();
  const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession_Event_RilCall >&
      calls() const;

  // optional .clearcut.connectivity.RilErrno error = 13;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 13;
  ::clearcut::connectivity::RilErrno error() const;
  void set_error(::clearcut::connectivity::RilErrno value);

  // optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;
  bool has_ril_request() const;
  void clear_ril_request();
  static const int kRilRequestFieldNumber = 14;
  ::clearcut::connectivity::TelephonyCallSession_Event_RilRequest ril_request() const;
  void set_ril_request(::clearcut::connectivity::TelephonyCallSession_Event_RilRequest value);

  // optional int32 ril_request_id = 15;
  bool has_ril_request_id() const;
  void clear_ril_request_id();
  static const int kRilRequestIdFieldNumber = 15;
  ::google::protobuf::int32 ril_request_id() const;
  void set_ril_request_id(::google::protobuf::int32 value);

  // optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;
  bool has_srvcc_state() const;
  void clear_srvcc_state();
  static const int kSrvccStateFieldNumber = 16;
  ::clearcut::connectivity::TelephonyCallSession_Event_RilSrvccState srvcc_state() const;
  void set_srvcc_state(::clearcut::connectivity::TelephonyCallSession_Event_RilSrvccState value);

  // optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;
  bool has_ims_command() const;
  void clear_ims_command();
  static const int kImsCommandFieldNumber = 17;
  ::clearcut::connectivity::TelephonyCallSession_Event_ImsCommand ims_command() const;
  void set_ims_command(::clearcut::connectivity::TelephonyCallSession_Event_ImsCommand value);

  // optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;
  bool has_reason_info() const;
  void clear_reason_info();
  static const int kReasonInfoFieldNumber = 18;
  const ::clearcut::connectivity::ImsReasonInfo& reason_info() const;
  ::clearcut::connectivity::ImsReasonInfo* mutable_reason_info();
  ::clearcut::connectivity::ImsReasonInfo* release_reason_info();
  void set_allocated_reason_info(::clearcut::connectivity::ImsReasonInfo* reason_info);

  // optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];
  bool has_src_access_tech() const;
  void clear_src_access_tech();
  static const int kSrcAccessTechFieldNumber = 19;
  ::clearcut::connectivity::RadioAccessTechnology src_access_tech() const;
  void set_src_access_tech(::clearcut::connectivity::RadioAccessTechnology value);

  // optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];
  bool has_target_access_tech() const;
  void clear_target_access_tech();
  static const int kTargetAccessTechFieldNumber = 20;
  ::clearcut::connectivity::RadioAccessTechnology target_access_tech() const;
  void set_target_access_tech(::clearcut::connectivity::RadioAccessTechnology value);

  // optional int64 nitz_timestamp_millis = 21;
  bool has_nitz_timestamp_millis() const;
  void clear_nitz_timestamp_millis();
  static const int kNitzTimestampMillisFieldNumber = 21;
  ::google::protobuf::int64 nitz_timestamp_millis() const;
  void set_nitz_timestamp_millis(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyCallSession.Event)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_settings();
  inline void clear_has_settings();
  inline void set_has_service_state();
  inline void clear_has_service_state();
  inline void set_has_ims_connection_state();
  inline void clear_has_ims_connection_state();
  inline void set_has_ims_capabilities();
  inline void clear_has_ims_capabilities();
  inline void set_has_phone_state();
  inline void clear_has_phone_state();
  inline void set_has_call_state();
  inline void clear_has_call_state();
  inline void set_has_call_index();
  inline void clear_has_call_index();
  inline void set_has_merged_call_index();
  inline void clear_has_merged_call_index();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_ril_request();
  inline void clear_has_ril_request();
  inline void set_has_ril_request_id();
  inline void clear_has_ril_request_id();
  inline void set_has_srvcc_state();
  inline void clear_has_srvcc_state();
  inline void set_has_ims_command();
  inline void clear_has_ims_command();
  inline void set_has_reason_info();
  inline void clear_has_reason_info();
  inline void set_has_src_access_tech();
  inline void clear_has_src_access_tech();
  inline void set_has_target_access_tech();
  inline void clear_has_target_access_tech();
  inline void set_has_nitz_timestamp_millis();
  inline void clear_has_nitz_timestamp_millis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  int delay_;
  ::clearcut::connectivity::TelephonySettings* settings_;
  ::clearcut::connectivity::TelephonyServiceState* service_state_;
  ::clearcut::connectivity::ImsConnectionState* ims_connection_state_;
  ::clearcut::connectivity::ImsCapabilities* ims_capabilities_;
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall > data_calls_;
  int phone_state_;
  int call_state_;
  ::google::protobuf::int32 call_index_;
  ::google::protobuf::int32 merged_call_index_;
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession_Event_RilCall > calls_;
  int error_;
  int ril_request_;
  ::google::protobuf::int32 ril_request_id_;
  int srvcc_state_;
  ::clearcut::connectivity::ImsReasonInfo* reason_info_;
  int ims_command_;
  int src_access_tech_;
  ::google::protobuf::int64 nitz_timestamp_millis_;
  int target_access_tech_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static TelephonyCallSession_Event* default_instance_;
};
// -------------------------------------------------------------------

class TelephonyCallSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.TelephonyCallSession) */ {
 public:
  TelephonyCallSession();
  virtual ~TelephonyCallSession();

  TelephonyCallSession(const TelephonyCallSession& from);

  inline TelephonyCallSession& operator=(const TelephonyCallSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelephonyCallSession& default_instance();

  void Swap(TelephonyCallSession* other);

  // implements Message ----------------------------------------------

  inline TelephonyCallSession* New() const { return New(NULL); }

  TelephonyCallSession* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelephonyCallSession& from);
  void MergeFrom(const TelephonyCallSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelephonyCallSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TelephonyCallSession_Event Event;

  // accessors -------------------------------------------------------

  // optional int32 start_time_minutes = 1;
  bool has_start_time_minutes() const;
  void clear_start_time_minutes();
  static const int kStartTimeMinutesFieldNumber = 1;
  ::google::protobuf::int32 start_time_minutes() const;
  void set_start_time_minutes(::google::protobuf::int32 value);

  // optional int32 phone_id = 2;
  bool has_phone_id() const;
  void clear_phone_id();
  static const int kPhoneIdFieldNumber = 2;
  ::google::protobuf::int32 phone_id() const;
  void set_phone_id(::google::protobuf::int32 value);

  // repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 3;
  const ::clearcut::connectivity::TelephonyCallSession_Event& events(int index) const;
  ::clearcut::connectivity::TelephonyCallSession_Event* mutable_events(int index);
  ::clearcut::connectivity::TelephonyCallSession_Event* add_events();
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession_Event >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession_Event >&
      events() const;

  // optional bool events_dropped = 4;
  bool has_events_dropped() const;
  void clear_events_dropped();
  static const int kEventsDroppedFieldNumber = 4;
  bool events_dropped() const;
  void set_events_dropped(bool value);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyCallSession)
 private:
  inline void set_has_start_time_minutes();
  inline void clear_has_start_time_minutes();
  inline void set_has_phone_id();
  inline void clear_has_phone_id();
  inline void set_has_events_dropped();
  inline void clear_has_events_dropped();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 start_time_minutes_;
  ::google::protobuf::int32 phone_id_;
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession_Event > events_;
  bool events_dropped_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static TelephonyCallSession* default_instance_;
};
// -------------------------------------------------------------------

class SmsSession_Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.SmsSession.Event) */ {
 public:
  SmsSession_Event();
  virtual ~SmsSession_Event();

  SmsSession_Event(const SmsSession_Event& from);

  inline SmsSession_Event& operator=(const SmsSession_Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmsSession_Event& default_instance();

  void Swap(SmsSession_Event* other);

  // implements Message ----------------------------------------------

  inline SmsSession_Event* New() const { return New(NULL); }

  SmsSession_Event* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmsSession_Event& from);
  void MergeFrom(const SmsSession_Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmsSession_Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SmsSession_Event_Type Type;
  static const Type EVENT_UNKNOWN =
    SmsSession_Event_Type_EVENT_UNKNOWN;
  static const Type SETTINGS_CHANGED =
    SmsSession_Event_Type_SETTINGS_CHANGED;
  static const Type RIL_SERVICE_STATE_CHANGED =
    SmsSession_Event_Type_RIL_SERVICE_STATE_CHANGED;
  static const Type IMS_CONNECTION_STATE_CHANGED =
    SmsSession_Event_Type_IMS_CONNECTION_STATE_CHANGED;
  static const Type IMS_CAPABILITIES_CHANGED =
    SmsSession_Event_Type_IMS_CAPABILITIES_CHANGED;
  static const Type DATA_CALL_LIST_CHANGED =
    SmsSession_Event_Type_DATA_CALL_LIST_CHANGED;
  static const Type SMS_SEND =
    SmsSession_Event_Type_SMS_SEND;
  static const Type SMS_SEND_RESULT =
    SmsSession_Event_Type_SMS_SEND_RESULT;
  static const Type SMS_RECEIVED =
    SmsSession_Event_Type_SMS_RECEIVED;
  static inline bool Type_IsValid(int value) {
    return SmsSession_Event_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SmsSession_Event_Type_Type_MIN;
  static const Type Type_MAX =
    SmsSession_Event_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SmsSession_Event_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SmsSession_Event_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SmsSession_Event_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SmsSession_Event_Type_Parse(name, value);
  }

  typedef SmsSession_Event_Format Format;
  static const Format SMS_FORMAT_UNKNOWN =
    SmsSession_Event_Format_SMS_FORMAT_UNKNOWN;
  static const Format SMS_FORMAT_3GPP =
    SmsSession_Event_Format_SMS_FORMAT_3GPP;
  static const Format SMS_FORMAT_3GPP2 =
    SmsSession_Event_Format_SMS_FORMAT_3GPP2;
  static inline bool Format_IsValid(int value) {
    return SmsSession_Event_Format_IsValid(value);
  }
  static const Format Format_MIN =
    SmsSession_Event_Format_Format_MIN;
  static const Format Format_MAX =
    SmsSession_Event_Format_Format_MAX;
  static const int Format_ARRAYSIZE =
    SmsSession_Event_Format_Format_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Format_descriptor() {
    return SmsSession_Event_Format_descriptor();
  }
  static inline const ::std::string& Format_Name(Format value) {
    return SmsSession_Event_Format_Name(value);
  }
  static inline bool Format_Parse(const ::std::string& name,
      Format* value) {
    return SmsSession_Event_Format_Parse(name, value);
  }

  typedef SmsSession_Event_Tech Tech;
  static const Tech SMS_UNKNOWN =
    SmsSession_Event_Tech_SMS_UNKNOWN;
  static const Tech SMS_GSM =
    SmsSession_Event_Tech_SMS_GSM;
  static const Tech SMS_CDMA =
    SmsSession_Event_Tech_SMS_CDMA;
  static const Tech SMS_IMS =
    SmsSession_Event_Tech_SMS_IMS;
  static inline bool Tech_IsValid(int value) {
    return SmsSession_Event_Tech_IsValid(value);
  }
  static const Tech Tech_MIN =
    SmsSession_Event_Tech_Tech_MIN;
  static const Tech Tech_MAX =
    SmsSession_Event_Tech_Tech_MAX;
  static const int Tech_ARRAYSIZE =
    SmsSession_Event_Tech_Tech_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tech_descriptor() {
    return SmsSession_Event_Tech_descriptor();
  }
  static inline const ::std::string& Tech_Name(Tech value) {
    return SmsSession_Event_Tech_Name(value);
  }
  static inline bool Tech_Parse(const ::std::string& name,
      Tech* value) {
    return SmsSession_Event_Tech_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .clearcut.connectivity.SmsSession.Event.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::clearcut::connectivity::SmsSession_Event_Type type() const;
  void set_type(::clearcut::connectivity::SmsSession_Event_Type value);

  // optional .clearcut.connectivity.TimeInterval delay = 2;
  bool has_delay() const;
  void clear_delay();
  static const int kDelayFieldNumber = 2;
  ::clearcut::connectivity::TimeInterval delay() const;
  void set_delay(::clearcut::connectivity::TimeInterval value);

  // optional .clearcut.connectivity.TelephonySettings settings = 3;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 3;
  const ::clearcut::connectivity::TelephonySettings& settings() const;
  ::clearcut::connectivity::TelephonySettings* mutable_settings();
  ::clearcut::connectivity::TelephonySettings* release_settings();
  void set_allocated_settings(::clearcut::connectivity::TelephonySettings* settings);

  // optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
  bool has_service_state() const;
  void clear_service_state();
  static const int kServiceStateFieldNumber = 4;
  const ::clearcut::connectivity::TelephonyServiceState& service_state() const;
  ::clearcut::connectivity::TelephonyServiceState* mutable_service_state();
  ::clearcut::connectivity::TelephonyServiceState* release_service_state();
  void set_allocated_service_state(::clearcut::connectivity::TelephonyServiceState* service_state);

  // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
  bool has_ims_connection_state() const;
  void clear_ims_connection_state();
  static const int kImsConnectionStateFieldNumber = 5;
  const ::clearcut::connectivity::ImsConnectionState& ims_connection_state() const;
  ::clearcut::connectivity::ImsConnectionState* mutable_ims_connection_state();
  ::clearcut::connectivity::ImsConnectionState* release_ims_connection_state();
  void set_allocated_ims_connection_state(::clearcut::connectivity::ImsConnectionState* ims_connection_state);

  // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
  bool has_ims_capabilities() const;
  void clear_ims_capabilities();
  static const int kImsCapabilitiesFieldNumber = 6;
  const ::clearcut::connectivity::ImsCapabilities& ims_capabilities() const;
  ::clearcut::connectivity::ImsCapabilities* mutable_ims_capabilities();
  ::clearcut::connectivity::ImsCapabilities* release_ims_capabilities();
  void set_allocated_ims_capabilities(::clearcut::connectivity::ImsCapabilities* ims_capabilities);

  // repeated .clearcut.connectivity.RilDataCall data_calls = 7;
  int data_calls_size() const;
  void clear_data_calls();
  static const int kDataCallsFieldNumber = 7;
  const ::clearcut::connectivity::RilDataCall& data_calls(int index) const;
  ::clearcut::connectivity::RilDataCall* mutable_data_calls(int index);
  ::clearcut::connectivity::RilDataCall* add_data_calls();
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >*
      mutable_data_calls();
  const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >&
      data_calls() const;

  // optional .clearcut.connectivity.SmsSession.Event.Format format = 8;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 8;
  ::clearcut::connectivity::SmsSession_Event_Format format() const;
  void set_format(::clearcut::connectivity::SmsSession_Event_Format value);

  // optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;
  bool has_tech() const;
  void clear_tech();
  static const int kTechFieldNumber = 9;
  ::clearcut::connectivity::SmsSession_Event_Tech tech() const;
  void set_tech(::clearcut::connectivity::SmsSession_Event_Tech value);

  // optional int32 error_code = 10;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 10;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // optional .clearcut.connectivity.RilErrno error = 11;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 11;
  ::clearcut::connectivity::RilErrno error() const;
  void set_error(::clearcut::connectivity::RilErrno value);

  // optional int32 ril_request_id = 12;
  bool has_ril_request_id() const;
  void clear_ril_request_id();
  static const int kRilRequestIdFieldNumber = 12;
  ::google::protobuf::int32 ril_request_id() const;
  void set_ril_request_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.SmsSession.Event)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_settings();
  inline void clear_has_settings();
  inline void set_has_service_state();
  inline void clear_has_service_state();
  inline void set_has_ims_connection_state();
  inline void clear_has_ims_connection_state();
  inline void set_has_ims_capabilities();
  inline void clear_has_ims_capabilities();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_tech();
  inline void clear_has_tech();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_ril_request_id();
  inline void clear_has_ril_request_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  int delay_;
  ::clearcut::connectivity::TelephonySettings* settings_;
  ::clearcut::connectivity::TelephonyServiceState* service_state_;
  ::clearcut::connectivity::ImsConnectionState* ims_connection_state_;
  ::clearcut::connectivity::ImsCapabilities* ims_capabilities_;
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall > data_calls_;
  int format_;
  int tech_;
  ::google::protobuf::int32 error_code_;
  int error_;
  ::google::protobuf::int32 ril_request_id_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static SmsSession_Event* default_instance_;
};
// -------------------------------------------------------------------

class SmsSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearcut.connectivity.SmsSession) */ {
 public:
  SmsSession();
  virtual ~SmsSession();

  SmsSession(const SmsSession& from);

  inline SmsSession& operator=(const SmsSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmsSession& default_instance();

  void Swap(SmsSession* other);

  // implements Message ----------------------------------------------

  inline SmsSession* New() const { return New(NULL); }

  SmsSession* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmsSession& from);
  void MergeFrom(const SmsSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmsSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SmsSession_Event Event;

  // accessors -------------------------------------------------------

  // optional int32 start_time_minutes = 1;
  bool has_start_time_minutes() const;
  void clear_start_time_minutes();
  static const int kStartTimeMinutesFieldNumber = 1;
  ::google::protobuf::int32 start_time_minutes() const;
  void set_start_time_minutes(::google::protobuf::int32 value);

  // optional int32 phone_id = 2;
  bool has_phone_id() const;
  void clear_phone_id();
  static const int kPhoneIdFieldNumber = 2;
  ::google::protobuf::int32 phone_id() const;
  void set_phone_id(::google::protobuf::int32 value);

  // repeated .clearcut.connectivity.SmsSession.Event events = 3;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 3;
  const ::clearcut::connectivity::SmsSession_Event& events(int index) const;
  ::clearcut::connectivity::SmsSession_Event* mutable_events(int index);
  ::clearcut::connectivity::SmsSession_Event* add_events();
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::SmsSession_Event >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::SmsSession_Event >&
      events() const;

  // optional bool events_dropped = 4;
  bool has_events_dropped() const;
  void clear_events_dropped();
  static const int kEventsDroppedFieldNumber = 4;
  bool events_dropped() const;
  void set_events_dropped(bool value);

  // @@protoc_insertion_point(class_scope:clearcut.connectivity.SmsSession)
 private:
  inline void set_has_start_time_minutes();
  inline void clear_has_start_time_minutes();
  inline void set_has_phone_id();
  inline void clear_has_phone_id();
  inline void set_has_events_dropped();
  inline void clear_has_events_dropped();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 start_time_minutes_;
  ::google::protobuf::int32 phone_id_;
  ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::SmsSession_Event > events_;
  bool events_dropped_;
  friend void  protobuf_AddDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_AssignDesc_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();
  friend void protobuf_ShutdownFile_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto();

  void InitAsDefaultInstance();
  static SmsSession* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TelephonyLog

// repeated .clearcut.connectivity.TelephonyEvent events = 1;
inline int TelephonyLog::events_size() const {
  return events_.size();
}
inline void TelephonyLog::clear_events() {
  events_.Clear();
}
inline const ::clearcut::connectivity::TelephonyEvent& TelephonyLog::events(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyLog.events)
  return events_.Get(index);
}
inline ::clearcut::connectivity::TelephonyEvent* TelephonyLog::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyLog.events)
  return events_.Mutable(index);
}
inline ::clearcut::connectivity::TelephonyEvent* TelephonyLog::add_events() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyLog.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyEvent >*
TelephonyLog::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyLog.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyEvent >&
TelephonyLog::events() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyLog.events)
  return events_;
}

// repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;
inline int TelephonyLog::call_sessions_size() const {
  return call_sessions_.size();
}
inline void TelephonyLog::clear_call_sessions() {
  call_sessions_.Clear();
}
inline const ::clearcut::connectivity::TelephonyCallSession& TelephonyLog::call_sessions(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyLog.call_sessions)
  return call_sessions_.Get(index);
}
inline ::clearcut::connectivity::TelephonyCallSession* TelephonyLog::mutable_call_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyLog.call_sessions)
  return call_sessions_.Mutable(index);
}
inline ::clearcut::connectivity::TelephonyCallSession* TelephonyLog::add_call_sessions() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyLog.call_sessions)
  return call_sessions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession >*
TelephonyLog::mutable_call_sessions() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyLog.call_sessions)
  return &call_sessions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession >&
TelephonyLog::call_sessions() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyLog.call_sessions)
  return call_sessions_;
}

// repeated .clearcut.connectivity.SmsSession sms_sessions = 3;
inline int TelephonyLog::sms_sessions_size() const {
  return sms_sessions_.size();
}
inline void TelephonyLog::clear_sms_sessions() {
  sms_sessions_.Clear();
}
inline const ::clearcut::connectivity::SmsSession& TelephonyLog::sms_sessions(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyLog.sms_sessions)
  return sms_sessions_.Get(index);
}
inline ::clearcut::connectivity::SmsSession* TelephonyLog::mutable_sms_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyLog.sms_sessions)
  return sms_sessions_.Mutable(index);
}
inline ::clearcut::connectivity::SmsSession* TelephonyLog::add_sms_sessions() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyLog.sms_sessions)
  return sms_sessions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::SmsSession >*
TelephonyLog::mutable_sms_sessions() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyLog.sms_sessions)
  return &sms_sessions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::SmsSession >&
TelephonyLog::sms_sessions() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyLog.sms_sessions)
  return sms_sessions_;
}

// repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;
inline int TelephonyLog::histograms_size() const {
  return histograms_.size();
}
inline void TelephonyLog::clear_histograms() {
  histograms_.Clear();
}
inline const ::clearcut::connectivity::TelephonyHistogram& TelephonyLog::histograms(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyLog.histograms)
  return histograms_.Get(index);
}
inline ::clearcut::connectivity::TelephonyHistogram* TelephonyLog::mutable_histograms(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyLog.histograms)
  return histograms_.Mutable(index);
}
inline ::clearcut::connectivity::TelephonyHistogram* TelephonyLog::add_histograms() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyLog.histograms)
  return histograms_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyHistogram >*
TelephonyLog::mutable_histograms() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyLog.histograms)
  return &histograms_;
}
inline const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyHistogram >&
TelephonyLog::histograms() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyLog.histograms)
  return histograms_;
}

// optional bool events_dropped = 5;
inline bool TelephonyLog::has_events_dropped() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TelephonyLog::set_has_events_dropped() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TelephonyLog::clear_has_events_dropped() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TelephonyLog::clear_events_dropped() {
  events_dropped_ = false;
  clear_has_events_dropped();
}
inline bool TelephonyLog::events_dropped() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyLog.events_dropped)
  return events_dropped_;
}
inline void TelephonyLog::set_events_dropped(bool value) {
  set_has_events_dropped();
  events_dropped_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyLog.events_dropped)
}

// optional .clearcut.connectivity.Time start_time = 6;
inline bool TelephonyLog::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TelephonyLog::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TelephonyLog::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TelephonyLog::clear_start_time() {
  if (start_time_ != NULL) start_time_->::clearcut::connectivity::Time::Clear();
  clear_has_start_time();
}
inline const ::clearcut::connectivity::Time& TelephonyLog::start_time() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyLog.start_time)
  return start_time_ != NULL ? *start_time_ : *default_instance_->start_time_;
}
inline ::clearcut::connectivity::Time* TelephonyLog::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == NULL) {
    start_time_ = new ::clearcut::connectivity::Time;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyLog.start_time)
  return start_time_;
}
inline ::clearcut::connectivity::Time* TelephonyLog::release_start_time() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyLog.start_time)
  clear_has_start_time();
  ::clearcut::connectivity::Time* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
inline void TelephonyLog::set_allocated_start_time(::clearcut::connectivity::Time* start_time) {
  delete start_time_;
  start_time_ = start_time;
  if (start_time) {
    set_has_start_time();
  } else {
    clear_has_start_time();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyLog.start_time)
}

// optional .clearcut.connectivity.Time end_time = 7;
inline bool TelephonyLog::has_end_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TelephonyLog::set_has_end_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TelephonyLog::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TelephonyLog::clear_end_time() {
  if (end_time_ != NULL) end_time_->::clearcut::connectivity::Time::Clear();
  clear_has_end_time();
}
inline const ::clearcut::connectivity::Time& TelephonyLog::end_time() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyLog.end_time)
  return end_time_ != NULL ? *end_time_ : *default_instance_->end_time_;
}
inline ::clearcut::connectivity::Time* TelephonyLog::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == NULL) {
    end_time_ = new ::clearcut::connectivity::Time;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyLog.end_time)
  return end_time_;
}
inline ::clearcut::connectivity::Time* TelephonyLog::release_end_time() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyLog.end_time)
  clear_has_end_time();
  ::clearcut::connectivity::Time* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
inline void TelephonyLog::set_allocated_end_time(::clearcut::connectivity::Time* end_time) {
  delete end_time_;
  end_time_ = end_time;
  if (end_time) {
    set_has_end_time();
  } else {
    clear_has_end_time();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyLog.end_time)
}

// -------------------------------------------------------------------

// Time

// optional int64 system_timestamp_millis = 1;
inline bool Time::has_system_timestamp_millis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Time::set_has_system_timestamp_millis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Time::clear_has_system_timestamp_millis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Time::clear_system_timestamp_millis() {
  system_timestamp_millis_ = GOOGLE_LONGLONG(0);
  clear_has_system_timestamp_millis();
}
inline ::google::protobuf::int64 Time::system_timestamp_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.Time.system_timestamp_millis)
  return system_timestamp_millis_;
}
inline void Time::set_system_timestamp_millis(::google::protobuf::int64 value) {
  set_has_system_timestamp_millis();
  system_timestamp_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.Time.system_timestamp_millis)
}

// optional int64 elapsed_timestamp_millis = 2;
inline bool Time::has_elapsed_timestamp_millis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Time::set_has_elapsed_timestamp_millis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Time::clear_has_elapsed_timestamp_millis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Time::clear_elapsed_timestamp_millis() {
  elapsed_timestamp_millis_ = GOOGLE_LONGLONG(0);
  clear_has_elapsed_timestamp_millis();
}
inline ::google::protobuf::int64 Time::elapsed_timestamp_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.Time.elapsed_timestamp_millis)
  return elapsed_timestamp_millis_;
}
inline void Time::set_elapsed_timestamp_millis(::google::protobuf::int64 value) {
  set_has_elapsed_timestamp_millis();
  elapsed_timestamp_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.Time.elapsed_timestamp_millis)
}

// -------------------------------------------------------------------

// TelephonyHistogram

// optional int32 category = 1;
inline bool TelephonyHistogram::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelephonyHistogram::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelephonyHistogram::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelephonyHistogram::clear_category() {
  category_ = 0;
  clear_has_category();
}
inline ::google::protobuf::int32 TelephonyHistogram::category() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.category)
  return category_;
}
inline void TelephonyHistogram::set_category(::google::protobuf::int32 value) {
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.category)
}

// optional int32 id = 2;
inline bool TelephonyHistogram::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelephonyHistogram::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelephonyHistogram::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelephonyHistogram::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TelephonyHistogram::id() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.id)
  return id_;
}
inline void TelephonyHistogram::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.id)
}

// optional int32 min_time_millis = 3;
inline bool TelephonyHistogram::has_min_time_millis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TelephonyHistogram::set_has_min_time_millis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TelephonyHistogram::clear_has_min_time_millis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TelephonyHistogram::clear_min_time_millis() {
  min_time_millis_ = 0;
  clear_has_min_time_millis();
}
inline ::google::protobuf::int32 TelephonyHistogram::min_time_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.min_time_millis)
  return min_time_millis_;
}
inline void TelephonyHistogram::set_min_time_millis(::google::protobuf::int32 value) {
  set_has_min_time_millis();
  min_time_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.min_time_millis)
}

// optional int32 max_time_millis = 4;
inline bool TelephonyHistogram::has_max_time_millis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TelephonyHistogram::set_has_max_time_millis() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TelephonyHistogram::clear_has_max_time_millis() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TelephonyHistogram::clear_max_time_millis() {
  max_time_millis_ = 0;
  clear_has_max_time_millis();
}
inline ::google::protobuf::int32 TelephonyHistogram::max_time_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.max_time_millis)
  return max_time_millis_;
}
inline void TelephonyHistogram::set_max_time_millis(::google::protobuf::int32 value) {
  set_has_max_time_millis();
  max_time_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.max_time_millis)
}

// optional int32 avg_time_millis = 5;
inline bool TelephonyHistogram::has_avg_time_millis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TelephonyHistogram::set_has_avg_time_millis() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TelephonyHistogram::clear_has_avg_time_millis() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TelephonyHistogram::clear_avg_time_millis() {
  avg_time_millis_ = 0;
  clear_has_avg_time_millis();
}
inline ::google::protobuf::int32 TelephonyHistogram::avg_time_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.avg_time_millis)
  return avg_time_millis_;
}
inline void TelephonyHistogram::set_avg_time_millis(::google::protobuf::int32 value) {
  set_has_avg_time_millis();
  avg_time_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.avg_time_millis)
}

// optional int32 count = 6;
inline bool TelephonyHistogram::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TelephonyHistogram::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TelephonyHistogram::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TelephonyHistogram::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 TelephonyHistogram::count() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.count)
  return count_;
}
inline void TelephonyHistogram::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.count)
}

// optional int32 bucket_count = 7;
inline bool TelephonyHistogram::has_bucket_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TelephonyHistogram::set_has_bucket_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TelephonyHistogram::clear_has_bucket_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TelephonyHistogram::clear_bucket_count() {
  bucket_count_ = 0;
  clear_has_bucket_count();
}
inline ::google::protobuf::int32 TelephonyHistogram::bucket_count() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.bucket_count)
  return bucket_count_;
}
inline void TelephonyHistogram::set_bucket_count(::google::protobuf::int32 value) {
  set_has_bucket_count();
  bucket_count_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.bucket_count)
}

// repeated int32 bucket_end_points = 8;
inline int TelephonyHistogram::bucket_end_points_size() const {
  return bucket_end_points_.size();
}
inline void TelephonyHistogram::clear_bucket_end_points() {
  bucket_end_points_.Clear();
}
inline ::google::protobuf::int32 TelephonyHistogram::bucket_end_points(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.bucket_end_points)
  return bucket_end_points_.Get(index);
}
inline void TelephonyHistogram::set_bucket_end_points(int index, ::google::protobuf::int32 value) {
  bucket_end_points_.Set(index, value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.bucket_end_points)
}
inline void TelephonyHistogram::add_bucket_end_points(::google::protobuf::int32 value) {
  bucket_end_points_.Add(value);
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyHistogram.bucket_end_points)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TelephonyHistogram::bucket_end_points() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyHistogram.bucket_end_points)
  return bucket_end_points_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TelephonyHistogram::mutable_bucket_end_points() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyHistogram.bucket_end_points)
  return &bucket_end_points_;
}

// repeated int32 bucket_counters = 9;
inline int TelephonyHistogram::bucket_counters_size() const {
  return bucket_counters_.size();
}
inline void TelephonyHistogram::clear_bucket_counters() {
  bucket_counters_.Clear();
}
inline ::google::protobuf::int32 TelephonyHistogram::bucket_counters(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyHistogram.bucket_counters)
  return bucket_counters_.Get(index);
}
inline void TelephonyHistogram::set_bucket_counters(int index, ::google::protobuf::int32 value) {
  bucket_counters_.Set(index, value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyHistogram.bucket_counters)
}
inline void TelephonyHistogram::add_bucket_counters(::google::protobuf::int32 value) {
  bucket_counters_.Add(value);
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyHistogram.bucket_counters)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TelephonyHistogram::bucket_counters() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyHistogram.bucket_counters)
  return bucket_counters_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TelephonyHistogram::mutable_bucket_counters() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyHistogram.bucket_counters)
  return &bucket_counters_;
}

// -------------------------------------------------------------------

// TelephonySettings

// optional bool is_airplane_mode = 1;
inline bool TelephonySettings::has_is_airplane_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelephonySettings::set_has_is_airplane_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelephonySettings::clear_has_is_airplane_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelephonySettings::clear_is_airplane_mode() {
  is_airplane_mode_ = false;
  clear_has_is_airplane_mode();
}
inline bool TelephonySettings::is_airplane_mode() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_airplane_mode)
  return is_airplane_mode_;
}
inline void TelephonySettings::set_is_airplane_mode(bool value) {
  set_has_is_airplane_mode();
  is_airplane_mode_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_airplane_mode)
}

// optional bool is_cellular_data_enabled = 2;
inline bool TelephonySettings::has_is_cellular_data_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelephonySettings::set_has_is_cellular_data_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelephonySettings::clear_has_is_cellular_data_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelephonySettings::clear_is_cellular_data_enabled() {
  is_cellular_data_enabled_ = false;
  clear_has_is_cellular_data_enabled();
}
inline bool TelephonySettings::is_cellular_data_enabled() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_cellular_data_enabled)
  return is_cellular_data_enabled_;
}
inline void TelephonySettings::set_is_cellular_data_enabled(bool value) {
  set_has_is_cellular_data_enabled();
  is_cellular_data_enabled_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_cellular_data_enabled)
}

// optional bool is_data_roaming_enabled = 3;
inline bool TelephonySettings::has_is_data_roaming_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TelephonySettings::set_has_is_data_roaming_enabled() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TelephonySettings::clear_has_is_data_roaming_enabled() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TelephonySettings::clear_is_data_roaming_enabled() {
  is_data_roaming_enabled_ = false;
  clear_has_is_data_roaming_enabled();
}
inline bool TelephonySettings::is_data_roaming_enabled() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_data_roaming_enabled)
  return is_data_roaming_enabled_;
}
inline void TelephonySettings::set_is_data_roaming_enabled(bool value) {
  set_has_is_data_roaming_enabled();
  is_data_roaming_enabled_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_data_roaming_enabled)
}

// optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;
inline bool TelephonySettings::has_preferred_network_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TelephonySettings::set_has_preferred_network_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TelephonySettings::clear_has_preferred_network_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TelephonySettings::clear_preferred_network_mode() {
  preferred_network_mode_ = 0;
  clear_has_preferred_network_mode();
}
inline ::clearcut::connectivity::TelephonySettings_RilNetworkMode TelephonySettings::preferred_network_mode() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.preferred_network_mode)
  return static_cast< ::clearcut::connectivity::TelephonySettings_RilNetworkMode >(preferred_network_mode_);
}
inline void TelephonySettings::set_preferred_network_mode(::clearcut::connectivity::TelephonySettings_RilNetworkMode value) {
  assert(::clearcut::connectivity::TelephonySettings_RilNetworkMode_IsValid(value));
  set_has_preferred_network_mode();
  preferred_network_mode_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.preferred_network_mode)
}

// optional bool is_enhanced_4g_lte_mode_enabled = 5;
inline bool TelephonySettings::has_is_enhanced_4g_lte_mode_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TelephonySettings::set_has_is_enhanced_4g_lte_mode_enabled() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TelephonySettings::clear_has_is_enhanced_4g_lte_mode_enabled() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TelephonySettings::clear_is_enhanced_4g_lte_mode_enabled() {
  is_enhanced_4g_lte_mode_enabled_ = false;
  clear_has_is_enhanced_4g_lte_mode_enabled();
}
inline bool TelephonySettings::is_enhanced_4g_lte_mode_enabled() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_enhanced_4g_lte_mode_enabled)
  return is_enhanced_4g_lte_mode_enabled_;
}
inline void TelephonySettings::set_is_enhanced_4g_lte_mode_enabled(bool value) {
  set_has_is_enhanced_4g_lte_mode_enabled();
  is_enhanced_4g_lte_mode_enabled_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_enhanced_4g_lte_mode_enabled)
}

// optional bool is_wifi_enabled = 6;
inline bool TelephonySettings::has_is_wifi_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TelephonySettings::set_has_is_wifi_enabled() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TelephonySettings::clear_has_is_wifi_enabled() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TelephonySettings::clear_is_wifi_enabled() {
  is_wifi_enabled_ = false;
  clear_has_is_wifi_enabled();
}
inline bool TelephonySettings::is_wifi_enabled() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_wifi_enabled)
  return is_wifi_enabled_;
}
inline void TelephonySettings::set_is_wifi_enabled(bool value) {
  set_has_is_wifi_enabled();
  is_wifi_enabled_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_wifi_enabled)
}

// optional bool is_wifi_calling_enabled = 7;
inline bool TelephonySettings::has_is_wifi_calling_enabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TelephonySettings::set_has_is_wifi_calling_enabled() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TelephonySettings::clear_has_is_wifi_calling_enabled() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TelephonySettings::clear_is_wifi_calling_enabled() {
  is_wifi_calling_enabled_ = false;
  clear_has_is_wifi_calling_enabled();
}
inline bool TelephonySettings::is_wifi_calling_enabled() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_wifi_calling_enabled)
  return is_wifi_calling_enabled_;
}
inline void TelephonySettings::set_is_wifi_calling_enabled(bool value) {
  set_has_is_wifi_calling_enabled();
  is_wifi_calling_enabled_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_wifi_calling_enabled)
}

// optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;
inline bool TelephonySettings::has_wifi_calling_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TelephonySettings::set_has_wifi_calling_mode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TelephonySettings::clear_has_wifi_calling_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TelephonySettings::clear_wifi_calling_mode() {
  wifi_calling_mode_ = 0;
  clear_has_wifi_calling_mode();
}
inline ::clearcut::connectivity::TelephonySettings_WiFiCallingMode TelephonySettings::wifi_calling_mode() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.wifi_calling_mode)
  return static_cast< ::clearcut::connectivity::TelephonySettings_WiFiCallingMode >(wifi_calling_mode_);
}
inline void TelephonySettings::set_wifi_calling_mode(::clearcut::connectivity::TelephonySettings_WiFiCallingMode value) {
  assert(::clearcut::connectivity::TelephonySettings_WiFiCallingMode_IsValid(value));
  set_has_wifi_calling_mode();
  wifi_calling_mode_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.wifi_calling_mode)
}

// optional bool is_vt_over_lte_enabled = 9;
inline bool TelephonySettings::has_is_vt_over_lte_enabled() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TelephonySettings::set_has_is_vt_over_lte_enabled() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TelephonySettings::clear_has_is_vt_over_lte_enabled() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TelephonySettings::clear_is_vt_over_lte_enabled() {
  is_vt_over_lte_enabled_ = false;
  clear_has_is_vt_over_lte_enabled();
}
inline bool TelephonySettings::is_vt_over_lte_enabled() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_vt_over_lte_enabled)
  return is_vt_over_lte_enabled_;
}
inline void TelephonySettings::set_is_vt_over_lte_enabled(bool value) {
  set_has_is_vt_over_lte_enabled();
  is_vt_over_lte_enabled_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_vt_over_lte_enabled)
}

// optional bool is_vt_over_wifi_enabled = 10;
inline bool TelephonySettings::has_is_vt_over_wifi_enabled() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TelephonySettings::set_has_is_vt_over_wifi_enabled() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TelephonySettings::clear_has_is_vt_over_wifi_enabled() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TelephonySettings::clear_is_vt_over_wifi_enabled() {
  is_vt_over_wifi_enabled_ = false;
  clear_has_is_vt_over_wifi_enabled();
}
inline bool TelephonySettings::is_vt_over_wifi_enabled() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonySettings.is_vt_over_wifi_enabled)
  return is_vt_over_wifi_enabled_;
}
inline void TelephonySettings::set_is_vt_over_wifi_enabled(bool value) {
  set_has_is_vt_over_wifi_enabled();
  is_vt_over_wifi_enabled_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonySettings.is_vt_over_wifi_enabled)
}

// -------------------------------------------------------------------

// TelephonyServiceState_TelephonyOperator

// optional string alpha_long = 1;
inline bool TelephonyServiceState_TelephonyOperator::has_alpha_long() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelephonyServiceState_TelephonyOperator::set_has_alpha_long() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelephonyServiceState_TelephonyOperator::clear_has_alpha_long() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelephonyServiceState_TelephonyOperator::clear_alpha_long() {
  alpha_long_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alpha_long();
}
inline const ::std::string& TelephonyServiceState_TelephonyOperator::alpha_long() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long)
  return alpha_long_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelephonyServiceState_TelephonyOperator::set_alpha_long(const ::std::string& value) {
  set_has_alpha_long();
  alpha_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long)
}
inline void TelephonyServiceState_TelephonyOperator::set_alpha_long(const char* value) {
  set_has_alpha_long();
  alpha_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long)
}
inline void TelephonyServiceState_TelephonyOperator::set_alpha_long(const char* value, size_t size) {
  set_has_alpha_long();
  alpha_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long)
}
inline ::std::string* TelephonyServiceState_TelephonyOperator::mutable_alpha_long() {
  set_has_alpha_long();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long)
  return alpha_long_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelephonyServiceState_TelephonyOperator::release_alpha_long() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long)
  clear_has_alpha_long();
  return alpha_long_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelephonyServiceState_TelephonyOperator::set_allocated_alpha_long(::std::string* alpha_long) {
  if (alpha_long != NULL) {
    set_has_alpha_long();
  } else {
    clear_has_alpha_long();
  }
  alpha_long_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alpha_long);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_long)
}

// optional string alpha_short = 2;
inline bool TelephonyServiceState_TelephonyOperator::has_alpha_short() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelephonyServiceState_TelephonyOperator::set_has_alpha_short() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelephonyServiceState_TelephonyOperator::clear_has_alpha_short() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelephonyServiceState_TelephonyOperator::clear_alpha_short() {
  alpha_short_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alpha_short();
}
inline const ::std::string& TelephonyServiceState_TelephonyOperator::alpha_short() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short)
  return alpha_short_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelephonyServiceState_TelephonyOperator::set_alpha_short(const ::std::string& value) {
  set_has_alpha_short();
  alpha_short_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short)
}
inline void TelephonyServiceState_TelephonyOperator::set_alpha_short(const char* value) {
  set_has_alpha_short();
  alpha_short_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short)
}
inline void TelephonyServiceState_TelephonyOperator::set_alpha_short(const char* value, size_t size) {
  set_has_alpha_short();
  alpha_short_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short)
}
inline ::std::string* TelephonyServiceState_TelephonyOperator::mutable_alpha_short() {
  set_has_alpha_short();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short)
  return alpha_short_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelephonyServiceState_TelephonyOperator::release_alpha_short() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short)
  clear_has_alpha_short();
  return alpha_short_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelephonyServiceState_TelephonyOperator::set_allocated_alpha_short(::std::string* alpha_short) {
  if (alpha_short != NULL) {
    set_has_alpha_short();
  } else {
    clear_has_alpha_short();
  }
  alpha_short_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alpha_short);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.alpha_short)
}

// optional string numeric = 3;
inline bool TelephonyServiceState_TelephonyOperator::has_numeric() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TelephonyServiceState_TelephonyOperator::set_has_numeric() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TelephonyServiceState_TelephonyOperator::clear_has_numeric() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TelephonyServiceState_TelephonyOperator::clear_numeric() {
  numeric_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_numeric();
}
inline const ::std::string& TelephonyServiceState_TelephonyOperator::numeric() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric)
  return numeric_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelephonyServiceState_TelephonyOperator::set_numeric(const ::std::string& value) {
  set_has_numeric();
  numeric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric)
}
inline void TelephonyServiceState_TelephonyOperator::set_numeric(const char* value) {
  set_has_numeric();
  numeric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric)
}
inline void TelephonyServiceState_TelephonyOperator::set_numeric(const char* value, size_t size) {
  set_has_numeric();
  numeric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric)
}
inline ::std::string* TelephonyServiceState_TelephonyOperator::mutable_numeric() {
  set_has_numeric();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric)
  return numeric_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelephonyServiceState_TelephonyOperator::release_numeric() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric)
  clear_has_numeric();
  return numeric_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelephonyServiceState_TelephonyOperator::set_allocated_numeric(::std::string* numeric) {
  if (numeric != NULL) {
    set_has_numeric();
  } else {
    clear_has_numeric();
  }
  numeric_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), numeric);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyServiceState.TelephonyOperator.numeric)
}

// -------------------------------------------------------------------

// TelephonyServiceState

// optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;
inline bool TelephonyServiceState::has_voice_operator() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelephonyServiceState::set_has_voice_operator() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelephonyServiceState::clear_has_voice_operator() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelephonyServiceState::clear_voice_operator() {
  if (voice_operator_ != NULL) voice_operator_->::clearcut::connectivity::TelephonyServiceState_TelephonyOperator::Clear();
  clear_has_voice_operator();
}
inline const ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator& TelephonyServiceState::voice_operator() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.voice_operator)
  return voice_operator_ != NULL ? *voice_operator_ : *default_instance_->voice_operator_;
}
inline ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* TelephonyServiceState::mutable_voice_operator() {
  set_has_voice_operator();
  if (voice_operator_ == NULL) {
    voice_operator_ = new ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyServiceState.voice_operator)
  return voice_operator_;
}
inline ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* TelephonyServiceState::release_voice_operator() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyServiceState.voice_operator)
  clear_has_voice_operator();
  ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* temp = voice_operator_;
  voice_operator_ = NULL;
  return temp;
}
inline void TelephonyServiceState::set_allocated_voice_operator(::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* voice_operator) {
  delete voice_operator_;
  voice_operator_ = voice_operator;
  if (voice_operator) {
    set_has_voice_operator();
  } else {
    clear_has_voice_operator();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyServiceState.voice_operator)
}

// optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;
inline bool TelephonyServiceState::has_data_operator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelephonyServiceState::set_has_data_operator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelephonyServiceState::clear_has_data_operator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelephonyServiceState::clear_data_operator() {
  if (data_operator_ != NULL) data_operator_->::clearcut::connectivity::TelephonyServiceState_TelephonyOperator::Clear();
  clear_has_data_operator();
}
inline const ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator& TelephonyServiceState::data_operator() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.data_operator)
  return data_operator_ != NULL ? *data_operator_ : *default_instance_->data_operator_;
}
inline ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* TelephonyServiceState::mutable_data_operator() {
  set_has_data_operator();
  if (data_operator_ == NULL) {
    data_operator_ = new ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyServiceState.data_operator)
  return data_operator_;
}
inline ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* TelephonyServiceState::release_data_operator() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyServiceState.data_operator)
  clear_has_data_operator();
  ::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* temp = data_operator_;
  data_operator_ = NULL;
  return temp;
}
inline void TelephonyServiceState::set_allocated_data_operator(::clearcut::connectivity::TelephonyServiceState_TelephonyOperator* data_operator) {
  delete data_operator_;
  data_operator_ = data_operator;
  if (data_operator) {
    set_has_data_operator();
  } else {
    clear_has_data_operator();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyServiceState.data_operator)
}

// optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];
inline bool TelephonyServiceState::has_voice_roaming_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TelephonyServiceState::set_has_voice_roaming_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TelephonyServiceState::clear_has_voice_roaming_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TelephonyServiceState::clear_voice_roaming_type() {
  voice_roaming_type_ = -1;
  clear_has_voice_roaming_type();
}
inline ::clearcut::connectivity::TelephonyServiceState_RoamingType TelephonyServiceState::voice_roaming_type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.voice_roaming_type)
  return static_cast< ::clearcut::connectivity::TelephonyServiceState_RoamingType >(voice_roaming_type_);
}
inline void TelephonyServiceState::set_voice_roaming_type(::clearcut::connectivity::TelephonyServiceState_RoamingType value) {
  assert(::clearcut::connectivity::TelephonyServiceState_RoamingType_IsValid(value));
  set_has_voice_roaming_type();
  voice_roaming_type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyServiceState.voice_roaming_type)
}

// optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];
inline bool TelephonyServiceState::has_data_roaming_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TelephonyServiceState::set_has_data_roaming_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TelephonyServiceState::clear_has_data_roaming_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TelephonyServiceState::clear_data_roaming_type() {
  data_roaming_type_ = -1;
  clear_has_data_roaming_type();
}
inline ::clearcut::connectivity::TelephonyServiceState_RoamingType TelephonyServiceState::data_roaming_type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.data_roaming_type)
  return static_cast< ::clearcut::connectivity::TelephonyServiceState_RoamingType >(data_roaming_type_);
}
inline void TelephonyServiceState::set_data_roaming_type(::clearcut::connectivity::TelephonyServiceState_RoamingType value) {
  assert(::clearcut::connectivity::TelephonyServiceState_RoamingType_IsValid(value));
  set_has_data_roaming_type();
  data_roaming_type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyServiceState.data_roaming_type)
}

// optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];
inline bool TelephonyServiceState::has_voice_rat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TelephonyServiceState::set_has_voice_rat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TelephonyServiceState::clear_has_voice_rat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TelephonyServiceState::clear_voice_rat() {
  voice_rat_ = -1;
  clear_has_voice_rat();
}
inline ::clearcut::connectivity::RadioAccessTechnology TelephonyServiceState::voice_rat() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.voice_rat)
  return static_cast< ::clearcut::connectivity::RadioAccessTechnology >(voice_rat_);
}
inline void TelephonyServiceState::set_voice_rat(::clearcut::connectivity::RadioAccessTechnology value) {
  assert(::clearcut::connectivity::RadioAccessTechnology_IsValid(value));
  set_has_voice_rat();
  voice_rat_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyServiceState.voice_rat)
}

// optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];
inline bool TelephonyServiceState::has_data_rat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TelephonyServiceState::set_has_data_rat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TelephonyServiceState::clear_has_data_rat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TelephonyServiceState::clear_data_rat() {
  data_rat_ = -1;
  clear_has_data_rat();
}
inline ::clearcut::connectivity::RadioAccessTechnology TelephonyServiceState::data_rat() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyServiceState.data_rat)
  return static_cast< ::clearcut::connectivity::RadioAccessTechnology >(data_rat_);
}
inline void TelephonyServiceState::set_data_rat(::clearcut::connectivity::RadioAccessTechnology value) {
  assert(::clearcut::connectivity::RadioAccessTechnology_IsValid(value));
  set_has_data_rat();
  data_rat_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyServiceState.data_rat)
}

// -------------------------------------------------------------------

// ImsReasonInfo

// optional int32 reason_code = 1;
inline bool ImsReasonInfo::has_reason_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImsReasonInfo::set_has_reason_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImsReasonInfo::clear_has_reason_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImsReasonInfo::clear_reason_code() {
  reason_code_ = 0;
  clear_has_reason_code();
}
inline ::google::protobuf::int32 ImsReasonInfo::reason_code() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsReasonInfo.reason_code)
  return reason_code_;
}
inline void ImsReasonInfo::set_reason_code(::google::protobuf::int32 value) {
  set_has_reason_code();
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsReasonInfo.reason_code)
}

// optional int32 extra_code = 2;
inline bool ImsReasonInfo::has_extra_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImsReasonInfo::set_has_extra_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImsReasonInfo::clear_has_extra_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImsReasonInfo::clear_extra_code() {
  extra_code_ = 0;
  clear_has_extra_code();
}
inline ::google::protobuf::int32 ImsReasonInfo::extra_code() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsReasonInfo.extra_code)
  return extra_code_;
}
inline void ImsReasonInfo::set_extra_code(::google::protobuf::int32 value) {
  set_has_extra_code();
  extra_code_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsReasonInfo.extra_code)
}

// optional string extra_message = 3;
inline bool ImsReasonInfo::has_extra_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImsReasonInfo::set_has_extra_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImsReasonInfo::clear_has_extra_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImsReasonInfo::clear_extra_message() {
  extra_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra_message();
}
inline const ::std::string& ImsReasonInfo::extra_message() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsReasonInfo.extra_message)
  return extra_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImsReasonInfo::set_extra_message(const ::std::string& value) {
  set_has_extra_message();
  extra_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsReasonInfo.extra_message)
}
inline void ImsReasonInfo::set_extra_message(const char* value) {
  set_has_extra_message();
  extra_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.ImsReasonInfo.extra_message)
}
inline void ImsReasonInfo::set_extra_message(const char* value, size_t size) {
  set_has_extra_message();
  extra_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.ImsReasonInfo.extra_message)
}
inline ::std::string* ImsReasonInfo::mutable_extra_message() {
  set_has_extra_message();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.ImsReasonInfo.extra_message)
  return extra_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImsReasonInfo::release_extra_message() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.ImsReasonInfo.extra_message)
  clear_has_extra_message();
  return extra_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImsReasonInfo::set_allocated_extra_message(::std::string* extra_message) {
  if (extra_message != NULL) {
    set_has_extra_message();
  } else {
    clear_has_extra_message();
  }
  extra_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra_message);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.ImsReasonInfo.extra_message)
}

// -------------------------------------------------------------------

// ImsConnectionState

// optional .clearcut.connectivity.ImsConnectionState.State state = 1;
inline bool ImsConnectionState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImsConnectionState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImsConnectionState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImsConnectionState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::clearcut::connectivity::ImsConnectionState_State ImsConnectionState::state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsConnectionState.state)
  return static_cast< ::clearcut::connectivity::ImsConnectionState_State >(state_);
}
inline void ImsConnectionState::set_state(::clearcut::connectivity::ImsConnectionState_State value) {
  assert(::clearcut::connectivity::ImsConnectionState_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsConnectionState.state)
}

// optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;
inline bool ImsConnectionState::has_reason_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImsConnectionState::set_has_reason_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImsConnectionState::clear_has_reason_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImsConnectionState::clear_reason_info() {
  if (reason_info_ != NULL) reason_info_->::clearcut::connectivity::ImsReasonInfo::Clear();
  clear_has_reason_info();
}
inline const ::clearcut::connectivity::ImsReasonInfo& ImsConnectionState::reason_info() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsConnectionState.reason_info)
  return reason_info_ != NULL ? *reason_info_ : *default_instance_->reason_info_;
}
inline ::clearcut::connectivity::ImsReasonInfo* ImsConnectionState::mutable_reason_info() {
  set_has_reason_info();
  if (reason_info_ == NULL) {
    reason_info_ = new ::clearcut::connectivity::ImsReasonInfo;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.ImsConnectionState.reason_info)
  return reason_info_;
}
inline ::clearcut::connectivity::ImsReasonInfo* ImsConnectionState::release_reason_info() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.ImsConnectionState.reason_info)
  clear_has_reason_info();
  ::clearcut::connectivity::ImsReasonInfo* temp = reason_info_;
  reason_info_ = NULL;
  return temp;
}
inline void ImsConnectionState::set_allocated_reason_info(::clearcut::connectivity::ImsReasonInfo* reason_info) {
  delete reason_info_;
  reason_info_ = reason_info;
  if (reason_info) {
    set_has_reason_info();
  } else {
    clear_has_reason_info();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.ImsConnectionState.reason_info)
}

// -------------------------------------------------------------------

// ImsCapabilities

// optional bool voice_over_lte = 1;
inline bool ImsCapabilities::has_voice_over_lte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImsCapabilities::set_has_voice_over_lte() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImsCapabilities::clear_has_voice_over_lte() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImsCapabilities::clear_voice_over_lte() {
  voice_over_lte_ = false;
  clear_has_voice_over_lte();
}
inline bool ImsCapabilities::voice_over_lte() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsCapabilities.voice_over_lte)
  return voice_over_lte_;
}
inline void ImsCapabilities::set_voice_over_lte(bool value) {
  set_has_voice_over_lte();
  voice_over_lte_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsCapabilities.voice_over_lte)
}

// optional bool voice_over_wifi = 2;
inline bool ImsCapabilities::has_voice_over_wifi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImsCapabilities::set_has_voice_over_wifi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImsCapabilities::clear_has_voice_over_wifi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImsCapabilities::clear_voice_over_wifi() {
  voice_over_wifi_ = false;
  clear_has_voice_over_wifi();
}
inline bool ImsCapabilities::voice_over_wifi() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsCapabilities.voice_over_wifi)
  return voice_over_wifi_;
}
inline void ImsCapabilities::set_voice_over_wifi(bool value) {
  set_has_voice_over_wifi();
  voice_over_wifi_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsCapabilities.voice_over_wifi)
}

// optional bool video_over_lte = 3;
inline bool ImsCapabilities::has_video_over_lte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImsCapabilities::set_has_video_over_lte() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImsCapabilities::clear_has_video_over_lte() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImsCapabilities::clear_video_over_lte() {
  video_over_lte_ = false;
  clear_has_video_over_lte();
}
inline bool ImsCapabilities::video_over_lte() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsCapabilities.video_over_lte)
  return video_over_lte_;
}
inline void ImsCapabilities::set_video_over_lte(bool value) {
  set_has_video_over_lte();
  video_over_lte_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsCapabilities.video_over_lte)
}

// optional bool video_over_wifi = 4;
inline bool ImsCapabilities::has_video_over_wifi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImsCapabilities::set_has_video_over_wifi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImsCapabilities::clear_has_video_over_wifi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImsCapabilities::clear_video_over_wifi() {
  video_over_wifi_ = false;
  clear_has_video_over_wifi();
}
inline bool ImsCapabilities::video_over_wifi() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsCapabilities.video_over_wifi)
  return video_over_wifi_;
}
inline void ImsCapabilities::set_video_over_wifi(bool value) {
  set_has_video_over_wifi();
  video_over_wifi_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsCapabilities.video_over_wifi)
}

// optional bool ut_over_lte = 5;
inline bool ImsCapabilities::has_ut_over_lte() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImsCapabilities::set_has_ut_over_lte() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImsCapabilities::clear_has_ut_over_lte() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImsCapabilities::clear_ut_over_lte() {
  ut_over_lte_ = false;
  clear_has_ut_over_lte();
}
inline bool ImsCapabilities::ut_over_lte() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsCapabilities.ut_over_lte)
  return ut_over_lte_;
}
inline void ImsCapabilities::set_ut_over_lte(bool value) {
  set_has_ut_over_lte();
  ut_over_lte_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsCapabilities.ut_over_lte)
}

// optional bool ut_over_wifi = 6;
inline bool ImsCapabilities::has_ut_over_wifi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImsCapabilities::set_has_ut_over_wifi() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImsCapabilities::clear_has_ut_over_wifi() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImsCapabilities::clear_ut_over_wifi() {
  ut_over_wifi_ = false;
  clear_has_ut_over_wifi();
}
inline bool ImsCapabilities::ut_over_wifi() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.ImsCapabilities.ut_over_wifi)
  return ut_over_wifi_;
}
inline void ImsCapabilities::set_ut_over_wifi(bool value) {
  set_has_ut_over_wifi();
  ut_over_wifi_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.ImsCapabilities.ut_over_wifi)
}

// -------------------------------------------------------------------

// RilDataCall

// optional int32 cid = 1;
inline bool RilDataCall::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RilDataCall::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RilDataCall::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RilDataCall::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
inline ::google::protobuf::int32 RilDataCall::cid() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.RilDataCall.cid)
  return cid_;
}
inline void RilDataCall::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.RilDataCall.cid)
}

// optional .clearcut.connectivity.PdpType type = 2;
inline bool RilDataCall::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RilDataCall::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RilDataCall::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RilDataCall::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::clearcut::connectivity::PdpType RilDataCall::type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.RilDataCall.type)
  return static_cast< ::clearcut::connectivity::PdpType >(type_);
}
inline void RilDataCall::set_type(::clearcut::connectivity::PdpType value) {
  assert(::clearcut::connectivity::PdpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.RilDataCall.type)
}

// optional string iframe = 3;
inline bool RilDataCall::has_iframe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RilDataCall::set_has_iframe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RilDataCall::clear_has_iframe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RilDataCall::clear_iframe() {
  iframe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iframe();
}
inline const ::std::string& RilDataCall::iframe() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.RilDataCall.iframe)
  return iframe_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RilDataCall::set_iframe(const ::std::string& value) {
  set_has_iframe();
  iframe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.RilDataCall.iframe)
}
inline void RilDataCall::set_iframe(const char* value) {
  set_has_iframe();
  iframe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.RilDataCall.iframe)
}
inline void RilDataCall::set_iframe(const char* value, size_t size) {
  set_has_iframe();
  iframe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.RilDataCall.iframe)
}
inline ::std::string* RilDataCall::mutable_iframe() {
  set_has_iframe();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.RilDataCall.iframe)
  return iframe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RilDataCall::release_iframe() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.RilDataCall.iframe)
  clear_has_iframe();
  return iframe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RilDataCall::set_allocated_iframe(::std::string* iframe) {
  if (iframe != NULL) {
    set_has_iframe();
  } else {
    clear_has_iframe();
  }
  iframe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iframe);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.RilDataCall.iframe)
}

// -------------------------------------------------------------------

// TelephonyEvent_RilSetupDataCall

// optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];
inline bool TelephonyEvent_RilSetupDataCall::has_rat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelephonyEvent_RilSetupDataCall::set_has_rat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelephonyEvent_RilSetupDataCall::clear_has_rat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelephonyEvent_RilSetupDataCall::clear_rat() {
  rat_ = -1;
  clear_has_rat();
}
inline ::clearcut::connectivity::RadioAccessTechnology TelephonyEvent_RilSetupDataCall::rat() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.rat)
  return static_cast< ::clearcut::connectivity::RadioAccessTechnology >(rat_);
}
inline void TelephonyEvent_RilSetupDataCall::set_rat(::clearcut::connectivity::RadioAccessTechnology value) {
  assert(::clearcut::connectivity::RadioAccessTechnology_IsValid(value));
  set_has_rat();
  rat_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.rat)
}

// optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;
inline bool TelephonyEvent_RilSetupDataCall::has_data_profile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelephonyEvent_RilSetupDataCall::set_has_data_profile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelephonyEvent_RilSetupDataCall::clear_has_data_profile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelephonyEvent_RilSetupDataCall::clear_data_profile() {
  data_profile_ = 0;
  clear_has_data_profile();
}
inline ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall_RilDataProfile TelephonyEvent_RilSetupDataCall::data_profile() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.data_profile)
  return static_cast< ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall_RilDataProfile >(data_profile_);
}
inline void TelephonyEvent_RilSetupDataCall::set_data_profile(::clearcut::connectivity::TelephonyEvent_RilSetupDataCall_RilDataProfile value) {
  assert(::clearcut::connectivity::TelephonyEvent_RilSetupDataCall_RilDataProfile_IsValid(value));
  set_has_data_profile();
  data_profile_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.data_profile)
}

// optional string apn = 3;
inline bool TelephonyEvent_RilSetupDataCall::has_apn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TelephonyEvent_RilSetupDataCall::set_has_apn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TelephonyEvent_RilSetupDataCall::clear_has_apn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TelephonyEvent_RilSetupDataCall::clear_apn() {
  apn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_apn();
}
inline const ::std::string& TelephonyEvent_RilSetupDataCall::apn() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn)
  return apn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelephonyEvent_RilSetupDataCall::set_apn(const ::std::string& value) {
  set_has_apn();
  apn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn)
}
inline void TelephonyEvent_RilSetupDataCall::set_apn(const char* value) {
  set_has_apn();
  apn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn)
}
inline void TelephonyEvent_RilSetupDataCall::set_apn(const char* value, size_t size) {
  set_has_apn();
  apn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn)
}
inline ::std::string* TelephonyEvent_RilSetupDataCall::mutable_apn() {
  set_has_apn();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn)
  return apn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelephonyEvent_RilSetupDataCall::release_apn() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn)
  clear_has_apn();
  return apn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelephonyEvent_RilSetupDataCall::set_allocated_apn(::std::string* apn) {
  if (apn != NULL) {
    set_has_apn();
  } else {
    clear_has_apn();
  }
  apn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apn);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.apn)
}

// optional .clearcut.connectivity.PdpType type = 4;
inline bool TelephonyEvent_RilSetupDataCall::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TelephonyEvent_RilSetupDataCall::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TelephonyEvent_RilSetupDataCall::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TelephonyEvent_RilSetupDataCall::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::clearcut::connectivity::PdpType TelephonyEvent_RilSetupDataCall::type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.type)
  return static_cast< ::clearcut::connectivity::PdpType >(type_);
}
inline void TelephonyEvent_RilSetupDataCall::set_type(::clearcut::connectivity::PdpType value) {
  assert(::clearcut::connectivity::PdpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.type)
}

// -------------------------------------------------------------------

// TelephonyEvent_RilSetupDataCallResponse

// optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;
inline bool TelephonyEvent_RilSetupDataCallResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelephonyEvent_RilSetupDataCallResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelephonyEvent_RilSetupDataCallResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelephonyEvent_RilSetupDataCallResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause TelephonyEvent_RilSetupDataCallResponse::status() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.status)
  return static_cast< ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause >(status_);
}
inline void TelephonyEvent_RilSetupDataCallResponse::set_status(::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause value) {
  assert(::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.status)
}

// optional int32 suggested_retry_time_millis = 2;
inline bool TelephonyEvent_RilSetupDataCallResponse::has_suggested_retry_time_millis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelephonyEvent_RilSetupDataCallResponse::set_has_suggested_retry_time_millis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelephonyEvent_RilSetupDataCallResponse::clear_has_suggested_retry_time_millis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelephonyEvent_RilSetupDataCallResponse::clear_suggested_retry_time_millis() {
  suggested_retry_time_millis_ = 0;
  clear_has_suggested_retry_time_millis();
}
inline ::google::protobuf::int32 TelephonyEvent_RilSetupDataCallResponse::suggested_retry_time_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.suggested_retry_time_millis)
  return suggested_retry_time_millis_;
}
inline void TelephonyEvent_RilSetupDataCallResponse::set_suggested_retry_time_millis(::google::protobuf::int32 value) {
  set_has_suggested_retry_time_millis();
  suggested_retry_time_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.suggested_retry_time_millis)
}

// optional .clearcut.connectivity.RilDataCall call = 3;
inline bool TelephonyEvent_RilSetupDataCallResponse::has_call() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TelephonyEvent_RilSetupDataCallResponse::set_has_call() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TelephonyEvent_RilSetupDataCallResponse::clear_has_call() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TelephonyEvent_RilSetupDataCallResponse::clear_call() {
  if (call_ != NULL) call_->::clearcut::connectivity::RilDataCall::Clear();
  clear_has_call();
}
inline const ::clearcut::connectivity::RilDataCall& TelephonyEvent_RilSetupDataCallResponse::call() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.call)
  return call_ != NULL ? *call_ : *default_instance_->call_;
}
inline ::clearcut::connectivity::RilDataCall* TelephonyEvent_RilSetupDataCallResponse::mutable_call() {
  set_has_call();
  if (call_ == NULL) {
    call_ = new ::clearcut::connectivity::RilDataCall;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.call)
  return call_;
}
inline ::clearcut::connectivity::RilDataCall* TelephonyEvent_RilSetupDataCallResponse::release_call() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.call)
  clear_has_call();
  ::clearcut::connectivity::RilDataCall* temp = call_;
  call_ = NULL;
  return temp;
}
inline void TelephonyEvent_RilSetupDataCallResponse::set_allocated_call(::clearcut::connectivity::RilDataCall* call) {
  delete call_;
  call_ = call;
  if (call) {
    set_has_call();
  } else {
    clear_has_call();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.call)
}

// -------------------------------------------------------------------

// TelephonyEvent_RilDeactivateDataCall

// optional int32 cid = 1;
inline bool TelephonyEvent_RilDeactivateDataCall::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelephonyEvent_RilDeactivateDataCall::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelephonyEvent_RilDeactivateDataCall::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelephonyEvent_RilDeactivateDataCall::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
inline ::google::protobuf::int32 TelephonyEvent_RilDeactivateDataCall::cid() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.cid)
  return cid_;
}
inline void TelephonyEvent_RilDeactivateDataCall::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.cid)
}

// optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;
inline bool TelephonyEvent_RilDeactivateDataCall::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelephonyEvent_RilDeactivateDataCall::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelephonyEvent_RilDeactivateDataCall::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelephonyEvent_RilDeactivateDataCall::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall_DeactivateReason TelephonyEvent_RilDeactivateDataCall::reason() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.reason)
  return static_cast< ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall_DeactivateReason >(reason_);
}
inline void TelephonyEvent_RilDeactivateDataCall::set_reason(::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall_DeactivateReason value) {
  assert(::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall_DeactivateReason_IsValid(value));
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.reason)
}

// -------------------------------------------------------------------

// TelephonyEvent_ModemRestart

// optional string baseband_version = 1;
inline bool TelephonyEvent_ModemRestart::has_baseband_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelephonyEvent_ModemRestart::set_has_baseband_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelephonyEvent_ModemRestart::clear_has_baseband_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelephonyEvent_ModemRestart::clear_baseband_version() {
  baseband_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_baseband_version();
}
inline const ::std::string& TelephonyEvent_ModemRestart::baseband_version() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version)
  return baseband_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelephonyEvent_ModemRestart::set_baseband_version(const ::std::string& value) {
  set_has_baseband_version();
  baseband_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version)
}
inline void TelephonyEvent_ModemRestart::set_baseband_version(const char* value) {
  set_has_baseband_version();
  baseband_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version)
}
inline void TelephonyEvent_ModemRestart::set_baseband_version(const char* value, size_t size) {
  set_has_baseband_version();
  baseband_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version)
}
inline ::std::string* TelephonyEvent_ModemRestart::mutable_baseband_version() {
  set_has_baseband_version();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version)
  return baseband_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelephonyEvent_ModemRestart::release_baseband_version() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version)
  clear_has_baseband_version();
  return baseband_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelephonyEvent_ModemRestart::set_allocated_baseband_version(::std::string* baseband_version) {
  if (baseband_version != NULL) {
    set_has_baseband_version();
  } else {
    clear_has_baseband_version();
  }
  baseband_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), baseband_version);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.ModemRestart.baseband_version)
}

// optional string reason = 2;
inline bool TelephonyEvent_ModemRestart::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelephonyEvent_ModemRestart::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelephonyEvent_ModemRestart::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelephonyEvent_ModemRestart::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& TelephonyEvent_ModemRestart::reason() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.ModemRestart.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelephonyEvent_ModemRestart::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.ModemRestart.reason)
}
inline void TelephonyEvent_ModemRestart::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearcut.connectivity.TelephonyEvent.ModemRestart.reason)
}
inline void TelephonyEvent_ModemRestart::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearcut.connectivity.TelephonyEvent.ModemRestart.reason)
}
inline ::std::string* TelephonyEvent_ModemRestart::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.ModemRestart.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelephonyEvent_ModemRestart::release_reason() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.ModemRestart.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelephonyEvent_ModemRestart::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.ModemRestart.reason)
}

// -------------------------------------------------------------------

// TelephonyEvent

// optional int64 timestamp_millis = 1;
inline bool TelephonyEvent::has_timestamp_millis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelephonyEvent::set_has_timestamp_millis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelephonyEvent::clear_has_timestamp_millis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelephonyEvent::clear_timestamp_millis() {
  timestamp_millis_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_millis();
}
inline ::google::protobuf::int64 TelephonyEvent::timestamp_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.timestamp_millis)
  return timestamp_millis_;
}
inline void TelephonyEvent::set_timestamp_millis(::google::protobuf::int64 value) {
  set_has_timestamp_millis();
  timestamp_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.timestamp_millis)
}

// optional int32 phone_id = 2;
inline bool TelephonyEvent::has_phone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelephonyEvent::set_has_phone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelephonyEvent::clear_has_phone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelephonyEvent::clear_phone_id() {
  phone_id_ = 0;
  clear_has_phone_id();
}
inline ::google::protobuf::int32 TelephonyEvent::phone_id() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.phone_id)
  return phone_id_;
}
inline void TelephonyEvent::set_phone_id(::google::protobuf::int32 value) {
  set_has_phone_id();
  phone_id_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.phone_id)
}

// optional .clearcut.connectivity.TelephonyEvent.Type type = 3;
inline bool TelephonyEvent::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TelephonyEvent::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TelephonyEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TelephonyEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::clearcut::connectivity::TelephonyEvent_Type TelephonyEvent::type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.type)
  return static_cast< ::clearcut::connectivity::TelephonyEvent_Type >(type_);
}
inline void TelephonyEvent::set_type(::clearcut::connectivity::TelephonyEvent_Type value) {
  assert(::clearcut::connectivity::TelephonyEvent_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.type)
}

// optional .clearcut.connectivity.TelephonySettings settings = 4;
inline bool TelephonyEvent::has_settings() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TelephonyEvent::set_has_settings() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TelephonyEvent::clear_has_settings() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TelephonyEvent::clear_settings() {
  if (settings_ != NULL) settings_->::clearcut::connectivity::TelephonySettings::Clear();
  clear_has_settings();
}
inline const ::clearcut::connectivity::TelephonySettings& TelephonyEvent::settings() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
inline ::clearcut::connectivity::TelephonySettings* TelephonyEvent::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) {
    settings_ = new ::clearcut::connectivity::TelephonySettings;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.settings)
  return settings_;
}
inline ::clearcut::connectivity::TelephonySettings* TelephonyEvent::release_settings() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.settings)
  clear_has_settings();
  ::clearcut::connectivity::TelephonySettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline void TelephonyEvent::set_allocated_settings(::clearcut::connectivity::TelephonySettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.settings)
}

// optional .clearcut.connectivity.TelephonyServiceState service_state = 5;
inline bool TelephonyEvent::has_service_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TelephonyEvent::set_has_service_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TelephonyEvent::clear_has_service_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TelephonyEvent::clear_service_state() {
  if (service_state_ != NULL) service_state_->::clearcut::connectivity::TelephonyServiceState::Clear();
  clear_has_service_state();
}
inline const ::clearcut::connectivity::TelephonyServiceState& TelephonyEvent::service_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.service_state)
  return service_state_ != NULL ? *service_state_ : *default_instance_->service_state_;
}
inline ::clearcut::connectivity::TelephonyServiceState* TelephonyEvent::mutable_service_state() {
  set_has_service_state();
  if (service_state_ == NULL) {
    service_state_ = new ::clearcut::connectivity::TelephonyServiceState;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.service_state)
  return service_state_;
}
inline ::clearcut::connectivity::TelephonyServiceState* TelephonyEvent::release_service_state() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.service_state)
  clear_has_service_state();
  ::clearcut::connectivity::TelephonyServiceState* temp = service_state_;
  service_state_ = NULL;
  return temp;
}
inline void TelephonyEvent::set_allocated_service_state(::clearcut::connectivity::TelephonyServiceState* service_state) {
  delete service_state_;
  service_state_ = service_state;
  if (service_state) {
    set_has_service_state();
  } else {
    clear_has_service_state();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.service_state)
}

// optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;
inline bool TelephonyEvent::has_ims_connection_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TelephonyEvent::set_has_ims_connection_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TelephonyEvent::clear_has_ims_connection_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TelephonyEvent::clear_ims_connection_state() {
  if (ims_connection_state_ != NULL) ims_connection_state_->::clearcut::connectivity::ImsConnectionState::Clear();
  clear_has_ims_connection_state();
}
inline const ::clearcut::connectivity::ImsConnectionState& TelephonyEvent::ims_connection_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.ims_connection_state)
  return ims_connection_state_ != NULL ? *ims_connection_state_ : *default_instance_->ims_connection_state_;
}
inline ::clearcut::connectivity::ImsConnectionState* TelephonyEvent::mutable_ims_connection_state() {
  set_has_ims_connection_state();
  if (ims_connection_state_ == NULL) {
    ims_connection_state_ = new ::clearcut::connectivity::ImsConnectionState;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.ims_connection_state)
  return ims_connection_state_;
}
inline ::clearcut::connectivity::ImsConnectionState* TelephonyEvent::release_ims_connection_state() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.ims_connection_state)
  clear_has_ims_connection_state();
  ::clearcut::connectivity::ImsConnectionState* temp = ims_connection_state_;
  ims_connection_state_ = NULL;
  return temp;
}
inline void TelephonyEvent::set_allocated_ims_connection_state(::clearcut::connectivity::ImsConnectionState* ims_connection_state) {
  delete ims_connection_state_;
  ims_connection_state_ = ims_connection_state;
  if (ims_connection_state) {
    set_has_ims_connection_state();
  } else {
    clear_has_ims_connection_state();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.ims_connection_state)
}

// optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;
inline bool TelephonyEvent::has_ims_capabilities() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TelephonyEvent::set_has_ims_capabilities() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TelephonyEvent::clear_has_ims_capabilities() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TelephonyEvent::clear_ims_capabilities() {
  if (ims_capabilities_ != NULL) ims_capabilities_->::clearcut::connectivity::ImsCapabilities::Clear();
  clear_has_ims_capabilities();
}
inline const ::clearcut::connectivity::ImsCapabilities& TelephonyEvent::ims_capabilities() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.ims_capabilities)
  return ims_capabilities_ != NULL ? *ims_capabilities_ : *default_instance_->ims_capabilities_;
}
inline ::clearcut::connectivity::ImsCapabilities* TelephonyEvent::mutable_ims_capabilities() {
  set_has_ims_capabilities();
  if (ims_capabilities_ == NULL) {
    ims_capabilities_ = new ::clearcut::connectivity::ImsCapabilities;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.ims_capabilities)
  return ims_capabilities_;
}
inline ::clearcut::connectivity::ImsCapabilities* TelephonyEvent::release_ims_capabilities() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.ims_capabilities)
  clear_has_ims_capabilities();
  ::clearcut::connectivity::ImsCapabilities* temp = ims_capabilities_;
  ims_capabilities_ = NULL;
  return temp;
}
inline void TelephonyEvent::set_allocated_ims_capabilities(::clearcut::connectivity::ImsCapabilities* ims_capabilities) {
  delete ims_capabilities_;
  ims_capabilities_ = ims_capabilities;
  if (ims_capabilities) {
    set_has_ims_capabilities();
  } else {
    clear_has_ims_capabilities();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.ims_capabilities)
}

// repeated .clearcut.connectivity.RilDataCall data_calls = 8;
inline int TelephonyEvent::data_calls_size() const {
  return data_calls_.size();
}
inline void TelephonyEvent::clear_data_calls() {
  data_calls_.Clear();
}
inline const ::clearcut::connectivity::RilDataCall& TelephonyEvent::data_calls(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.data_calls)
  return data_calls_.Get(index);
}
inline ::clearcut::connectivity::RilDataCall* TelephonyEvent::mutable_data_calls(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.data_calls)
  return data_calls_.Mutable(index);
}
inline ::clearcut::connectivity::RilDataCall* TelephonyEvent::add_data_calls() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyEvent.data_calls)
  return data_calls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >*
TelephonyEvent::mutable_data_calls() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyEvent.data_calls)
  return &data_calls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >&
TelephonyEvent::data_calls() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyEvent.data_calls)
  return data_calls_;
}

// optional .clearcut.connectivity.RilErrno error = 9;
inline bool TelephonyEvent::has_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TelephonyEvent::set_has_error() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TelephonyEvent::clear_has_error() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TelephonyEvent::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::clearcut::connectivity::RilErrno TelephonyEvent::error() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.error)
  return static_cast< ::clearcut::connectivity::RilErrno >(error_);
}
inline void TelephonyEvent::set_error(::clearcut::connectivity::RilErrno value) {
  assert(::clearcut::connectivity::RilErrno_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.error)
}

// optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;
inline bool TelephonyEvent::has_setup_data_call() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TelephonyEvent::set_has_setup_data_call() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TelephonyEvent::clear_has_setup_data_call() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TelephonyEvent::clear_setup_data_call() {
  if (setup_data_call_ != NULL) setup_data_call_->::clearcut::connectivity::TelephonyEvent_RilSetupDataCall::Clear();
  clear_has_setup_data_call();
}
inline const ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall& TelephonyEvent::setup_data_call() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.setup_data_call)
  return setup_data_call_ != NULL ? *setup_data_call_ : *default_instance_->setup_data_call_;
}
inline ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall* TelephonyEvent::mutable_setup_data_call() {
  set_has_setup_data_call();
  if (setup_data_call_ == NULL) {
    setup_data_call_ = new ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.setup_data_call)
  return setup_data_call_;
}
inline ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall* TelephonyEvent::release_setup_data_call() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.setup_data_call)
  clear_has_setup_data_call();
  ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall* temp = setup_data_call_;
  setup_data_call_ = NULL;
  return temp;
}
inline void TelephonyEvent::set_allocated_setup_data_call(::clearcut::connectivity::TelephonyEvent_RilSetupDataCall* setup_data_call) {
  delete setup_data_call_;
  setup_data_call_ = setup_data_call;
  if (setup_data_call) {
    set_has_setup_data_call();
  } else {
    clear_has_setup_data_call();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.setup_data_call)
}

// optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;
inline bool TelephonyEvent::has_setup_data_call_response() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TelephonyEvent::set_has_setup_data_call_response() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TelephonyEvent::clear_has_setup_data_call_response() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TelephonyEvent::clear_setup_data_call_response() {
  if (setup_data_call_response_ != NULL) setup_data_call_response_->::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse::Clear();
  clear_has_setup_data_call_response();
}
inline const ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse& TelephonyEvent::setup_data_call_response() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.setup_data_call_response)
  return setup_data_call_response_ != NULL ? *setup_data_call_response_ : *default_instance_->setup_data_call_response_;
}
inline ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse* TelephonyEvent::mutable_setup_data_call_response() {
  set_has_setup_data_call_response();
  if (setup_data_call_response_ == NULL) {
    setup_data_call_response_ = new ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.setup_data_call_response)
  return setup_data_call_response_;
}
inline ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse* TelephonyEvent::release_setup_data_call_response() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.setup_data_call_response)
  clear_has_setup_data_call_response();
  ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse* temp = setup_data_call_response_;
  setup_data_call_response_ = NULL;
  return temp;
}
inline void TelephonyEvent::set_allocated_setup_data_call_response(::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse* setup_data_call_response) {
  delete setup_data_call_response_;
  setup_data_call_response_ = setup_data_call_response;
  if (setup_data_call_response) {
    set_has_setup_data_call_response();
  } else {
    clear_has_setup_data_call_response();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.setup_data_call_response)
}

// optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;
inline bool TelephonyEvent::has_deactivate_data_call() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TelephonyEvent::set_has_deactivate_data_call() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TelephonyEvent::clear_has_deactivate_data_call() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TelephonyEvent::clear_deactivate_data_call() {
  if (deactivate_data_call_ != NULL) deactivate_data_call_->::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall::Clear();
  clear_has_deactivate_data_call();
}
inline const ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall& TelephonyEvent::deactivate_data_call() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.deactivate_data_call)
  return deactivate_data_call_ != NULL ? *deactivate_data_call_ : *default_instance_->deactivate_data_call_;
}
inline ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall* TelephonyEvent::mutable_deactivate_data_call() {
  set_has_deactivate_data_call();
  if (deactivate_data_call_ == NULL) {
    deactivate_data_call_ = new ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.deactivate_data_call)
  return deactivate_data_call_;
}
inline ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall* TelephonyEvent::release_deactivate_data_call() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.deactivate_data_call)
  clear_has_deactivate_data_call();
  ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall* temp = deactivate_data_call_;
  deactivate_data_call_ = NULL;
  return temp;
}
inline void TelephonyEvent::set_allocated_deactivate_data_call(::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall* deactivate_data_call) {
  delete deactivate_data_call_;
  deactivate_data_call_ = deactivate_data_call;
  if (deactivate_data_call) {
    set_has_deactivate_data_call();
  } else {
    clear_has_deactivate_data_call();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.deactivate_data_call)
}

// optional int32 data_stall_action = 13;
inline bool TelephonyEvent::has_data_stall_action() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TelephonyEvent::set_has_data_stall_action() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TelephonyEvent::clear_has_data_stall_action() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TelephonyEvent::clear_data_stall_action() {
  data_stall_action_ = 0;
  clear_has_data_stall_action();
}
inline ::google::protobuf::int32 TelephonyEvent::data_stall_action() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.data_stall_action)
  return data_stall_action_;
}
inline void TelephonyEvent::set_data_stall_action(::google::protobuf::int32 value) {
  set_has_data_stall_action();
  data_stall_action_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.data_stall_action)
}

// optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;
inline bool TelephonyEvent::has_modem_restart() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TelephonyEvent::set_has_modem_restart() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TelephonyEvent::clear_has_modem_restart() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TelephonyEvent::clear_modem_restart() {
  if (modem_restart_ != NULL) modem_restart_->::clearcut::connectivity::TelephonyEvent_ModemRestart::Clear();
  clear_has_modem_restart();
}
inline const ::clearcut::connectivity::TelephonyEvent_ModemRestart& TelephonyEvent::modem_restart() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.modem_restart)
  return modem_restart_ != NULL ? *modem_restart_ : *default_instance_->modem_restart_;
}
inline ::clearcut::connectivity::TelephonyEvent_ModemRestart* TelephonyEvent::mutable_modem_restart() {
  set_has_modem_restart();
  if (modem_restart_ == NULL) {
    modem_restart_ = new ::clearcut::connectivity::TelephonyEvent_ModemRestart;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyEvent.modem_restart)
  return modem_restart_;
}
inline ::clearcut::connectivity::TelephonyEvent_ModemRestart* TelephonyEvent::release_modem_restart() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyEvent.modem_restart)
  clear_has_modem_restart();
  ::clearcut::connectivity::TelephonyEvent_ModemRestart* temp = modem_restart_;
  modem_restart_ = NULL;
  return temp;
}
inline void TelephonyEvent::set_allocated_modem_restart(::clearcut::connectivity::TelephonyEvent_ModemRestart* modem_restart) {
  delete modem_restart_;
  modem_restart_ = modem_restart;
  if (modem_restart) {
    set_has_modem_restart();
  } else {
    clear_has_modem_restart();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyEvent.modem_restart)
}

// optional int64 nitz_timestamp_millis = 15;
inline bool TelephonyEvent::has_nitz_timestamp_millis() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TelephonyEvent::set_has_nitz_timestamp_millis() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TelephonyEvent::clear_has_nitz_timestamp_millis() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TelephonyEvent::clear_nitz_timestamp_millis() {
  nitz_timestamp_millis_ = GOOGLE_LONGLONG(0);
  clear_has_nitz_timestamp_millis();
}
inline ::google::protobuf::int64 TelephonyEvent::nitz_timestamp_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyEvent.nitz_timestamp_millis)
  return nitz_timestamp_millis_;
}
inline void TelephonyEvent::set_nitz_timestamp_millis(::google::protobuf::int64 value) {
  set_has_nitz_timestamp_millis();
  nitz_timestamp_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyEvent.nitz_timestamp_millis)
}

// -------------------------------------------------------------------

// TelephonyCallSession_Event_RilCall

// optional int32 index = 1;
inline bool TelephonyCallSession_Event_RilCall::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelephonyCallSession_Event_RilCall::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelephonyCallSession_Event_RilCall::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelephonyCallSession_Event_RilCall::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 TelephonyCallSession_Event_RilCall::index() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.RilCall.index)
  return index_;
}
inline void TelephonyCallSession_Event_RilCall::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.RilCall.index)
}

// optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;
inline bool TelephonyCallSession_Event_RilCall::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelephonyCallSession_Event_RilCall::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelephonyCallSession_Event_RilCall::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelephonyCallSession_Event_RilCall::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::clearcut::connectivity::TelephonyCallSession_Event_CallState TelephonyCallSession_Event_RilCall::state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.RilCall.state)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_CallState >(state_);
}
inline void TelephonyCallSession_Event_RilCall::set_state(::clearcut::connectivity::TelephonyCallSession_Event_CallState value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_CallState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.RilCall.state)
}

// optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;
inline bool TelephonyCallSession_Event_RilCall::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TelephonyCallSession_Event_RilCall::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TelephonyCallSession_Event_RilCall::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TelephonyCallSession_Event_RilCall::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::clearcut::connectivity::TelephonyCallSession_Event_RilCall_Type TelephonyCallSession_Event_RilCall::type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.RilCall.type)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_RilCall_Type >(type_);
}
inline void TelephonyCallSession_Event_RilCall::set_type(::clearcut::connectivity::TelephonyCallSession_Event_RilCall_Type value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_RilCall_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.RilCall.type)
}

// optional int32 call_end_reason = 4;
inline bool TelephonyCallSession_Event_RilCall::has_call_end_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TelephonyCallSession_Event_RilCall::set_has_call_end_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TelephonyCallSession_Event_RilCall::clear_has_call_end_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TelephonyCallSession_Event_RilCall::clear_call_end_reason() {
  call_end_reason_ = 0;
  clear_has_call_end_reason();
}
inline ::google::protobuf::int32 TelephonyCallSession_Event_RilCall::call_end_reason() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.RilCall.call_end_reason)
  return call_end_reason_;
}
inline void TelephonyCallSession_Event_RilCall::set_call_end_reason(::google::protobuf::int32 value) {
  set_has_call_end_reason();
  call_end_reason_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.RilCall.call_end_reason)
}

// optional bool is_multiparty = 5;
inline bool TelephonyCallSession_Event_RilCall::has_is_multiparty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TelephonyCallSession_Event_RilCall::set_has_is_multiparty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TelephonyCallSession_Event_RilCall::clear_has_is_multiparty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TelephonyCallSession_Event_RilCall::clear_is_multiparty() {
  is_multiparty_ = false;
  clear_has_is_multiparty();
}
inline bool TelephonyCallSession_Event_RilCall::is_multiparty() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.RilCall.is_multiparty)
  return is_multiparty_;
}
inline void TelephonyCallSession_Event_RilCall::set_is_multiparty(bool value) {
  set_has_is_multiparty();
  is_multiparty_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.RilCall.is_multiparty)
}

// -------------------------------------------------------------------

// TelephonyCallSession_Event

// optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;
inline bool TelephonyCallSession_Event::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelephonyCallSession_Event::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelephonyCallSession_Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelephonyCallSession_Event::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::clearcut::connectivity::TelephonyCallSession_Event_Type TelephonyCallSession_Event::type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.type)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_Type >(type_);
}
inline void TelephonyCallSession_Event::set_type(::clearcut::connectivity::TelephonyCallSession_Event_Type value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.type)
}

// optional .clearcut.connectivity.TimeInterval delay = 2;
inline bool TelephonyCallSession_Event::has_delay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelephonyCallSession_Event::set_has_delay() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelephonyCallSession_Event::clear_has_delay() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelephonyCallSession_Event::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline ::clearcut::connectivity::TimeInterval TelephonyCallSession_Event::delay() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.delay)
  return static_cast< ::clearcut::connectivity::TimeInterval >(delay_);
}
inline void TelephonyCallSession_Event::set_delay(::clearcut::connectivity::TimeInterval value) {
  assert(::clearcut::connectivity::TimeInterval_IsValid(value));
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.delay)
}

// optional .clearcut.connectivity.TelephonySettings settings = 3;
inline bool TelephonyCallSession_Event::has_settings() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TelephonyCallSession_Event::set_has_settings() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TelephonyCallSession_Event::clear_has_settings() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TelephonyCallSession_Event::clear_settings() {
  if (settings_ != NULL) settings_->::clearcut::connectivity::TelephonySettings::Clear();
  clear_has_settings();
}
inline const ::clearcut::connectivity::TelephonySettings& TelephonyCallSession_Event::settings() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
inline ::clearcut::connectivity::TelephonySettings* TelephonyCallSession_Event::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) {
    settings_ = new ::clearcut::connectivity::TelephonySettings;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.Event.settings)
  return settings_;
}
inline ::clearcut::connectivity::TelephonySettings* TelephonyCallSession_Event::release_settings() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyCallSession.Event.settings)
  clear_has_settings();
  ::clearcut::connectivity::TelephonySettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline void TelephonyCallSession_Event::set_allocated_settings(::clearcut::connectivity::TelephonySettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyCallSession.Event.settings)
}

// optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
inline bool TelephonyCallSession_Event::has_service_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TelephonyCallSession_Event::set_has_service_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TelephonyCallSession_Event::clear_has_service_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TelephonyCallSession_Event::clear_service_state() {
  if (service_state_ != NULL) service_state_->::clearcut::connectivity::TelephonyServiceState::Clear();
  clear_has_service_state();
}
inline const ::clearcut::connectivity::TelephonyServiceState& TelephonyCallSession_Event::service_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.service_state)
  return service_state_ != NULL ? *service_state_ : *default_instance_->service_state_;
}
inline ::clearcut::connectivity::TelephonyServiceState* TelephonyCallSession_Event::mutable_service_state() {
  set_has_service_state();
  if (service_state_ == NULL) {
    service_state_ = new ::clearcut::connectivity::TelephonyServiceState;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.Event.service_state)
  return service_state_;
}
inline ::clearcut::connectivity::TelephonyServiceState* TelephonyCallSession_Event::release_service_state() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyCallSession.Event.service_state)
  clear_has_service_state();
  ::clearcut::connectivity::TelephonyServiceState* temp = service_state_;
  service_state_ = NULL;
  return temp;
}
inline void TelephonyCallSession_Event::set_allocated_service_state(::clearcut::connectivity::TelephonyServiceState* service_state) {
  delete service_state_;
  service_state_ = service_state;
  if (service_state) {
    set_has_service_state();
  } else {
    clear_has_service_state();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyCallSession.Event.service_state)
}

// optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
inline bool TelephonyCallSession_Event::has_ims_connection_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TelephonyCallSession_Event::set_has_ims_connection_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TelephonyCallSession_Event::clear_has_ims_connection_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TelephonyCallSession_Event::clear_ims_connection_state() {
  if (ims_connection_state_ != NULL) ims_connection_state_->::clearcut::connectivity::ImsConnectionState::Clear();
  clear_has_ims_connection_state();
}
inline const ::clearcut::connectivity::ImsConnectionState& TelephonyCallSession_Event::ims_connection_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.ims_connection_state)
  return ims_connection_state_ != NULL ? *ims_connection_state_ : *default_instance_->ims_connection_state_;
}
inline ::clearcut::connectivity::ImsConnectionState* TelephonyCallSession_Event::mutable_ims_connection_state() {
  set_has_ims_connection_state();
  if (ims_connection_state_ == NULL) {
    ims_connection_state_ = new ::clearcut::connectivity::ImsConnectionState;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.Event.ims_connection_state)
  return ims_connection_state_;
}
inline ::clearcut::connectivity::ImsConnectionState* TelephonyCallSession_Event::release_ims_connection_state() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyCallSession.Event.ims_connection_state)
  clear_has_ims_connection_state();
  ::clearcut::connectivity::ImsConnectionState* temp = ims_connection_state_;
  ims_connection_state_ = NULL;
  return temp;
}
inline void TelephonyCallSession_Event::set_allocated_ims_connection_state(::clearcut::connectivity::ImsConnectionState* ims_connection_state) {
  delete ims_connection_state_;
  ims_connection_state_ = ims_connection_state;
  if (ims_connection_state) {
    set_has_ims_connection_state();
  } else {
    clear_has_ims_connection_state();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyCallSession.Event.ims_connection_state)
}

// optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
inline bool TelephonyCallSession_Event::has_ims_capabilities() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TelephonyCallSession_Event::set_has_ims_capabilities() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TelephonyCallSession_Event::clear_has_ims_capabilities() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TelephonyCallSession_Event::clear_ims_capabilities() {
  if (ims_capabilities_ != NULL) ims_capabilities_->::clearcut::connectivity::ImsCapabilities::Clear();
  clear_has_ims_capabilities();
}
inline const ::clearcut::connectivity::ImsCapabilities& TelephonyCallSession_Event::ims_capabilities() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.ims_capabilities)
  return ims_capabilities_ != NULL ? *ims_capabilities_ : *default_instance_->ims_capabilities_;
}
inline ::clearcut::connectivity::ImsCapabilities* TelephonyCallSession_Event::mutable_ims_capabilities() {
  set_has_ims_capabilities();
  if (ims_capabilities_ == NULL) {
    ims_capabilities_ = new ::clearcut::connectivity::ImsCapabilities;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.Event.ims_capabilities)
  return ims_capabilities_;
}
inline ::clearcut::connectivity::ImsCapabilities* TelephonyCallSession_Event::release_ims_capabilities() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyCallSession.Event.ims_capabilities)
  clear_has_ims_capabilities();
  ::clearcut::connectivity::ImsCapabilities* temp = ims_capabilities_;
  ims_capabilities_ = NULL;
  return temp;
}
inline void TelephonyCallSession_Event::set_allocated_ims_capabilities(::clearcut::connectivity::ImsCapabilities* ims_capabilities) {
  delete ims_capabilities_;
  ims_capabilities_ = ims_capabilities;
  if (ims_capabilities) {
    set_has_ims_capabilities();
  } else {
    clear_has_ims_capabilities();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyCallSession.Event.ims_capabilities)
}

// repeated .clearcut.connectivity.RilDataCall data_calls = 7;
inline int TelephonyCallSession_Event::data_calls_size() const {
  return data_calls_.size();
}
inline void TelephonyCallSession_Event::clear_data_calls() {
  data_calls_.Clear();
}
inline const ::clearcut::connectivity::RilDataCall& TelephonyCallSession_Event::data_calls(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.data_calls)
  return data_calls_.Get(index);
}
inline ::clearcut::connectivity::RilDataCall* TelephonyCallSession_Event::mutable_data_calls(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.Event.data_calls)
  return data_calls_.Mutable(index);
}
inline ::clearcut::connectivity::RilDataCall* TelephonyCallSession_Event::add_data_calls() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyCallSession.Event.data_calls)
  return data_calls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >*
TelephonyCallSession_Event::mutable_data_calls() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyCallSession.Event.data_calls)
  return &data_calls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >&
TelephonyCallSession_Event::data_calls() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyCallSession.Event.data_calls)
  return data_calls_;
}

// optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;
inline bool TelephonyCallSession_Event::has_phone_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TelephonyCallSession_Event::set_has_phone_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TelephonyCallSession_Event::clear_has_phone_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TelephonyCallSession_Event::clear_phone_state() {
  phone_state_ = 0;
  clear_has_phone_state();
}
inline ::clearcut::connectivity::TelephonyCallSession_Event_PhoneState TelephonyCallSession_Event::phone_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.phone_state)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_PhoneState >(phone_state_);
}
inline void TelephonyCallSession_Event::set_phone_state(::clearcut::connectivity::TelephonyCallSession_Event_PhoneState value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_PhoneState_IsValid(value));
  set_has_phone_state();
  phone_state_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.phone_state)
}

// optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;
inline bool TelephonyCallSession_Event::has_call_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TelephonyCallSession_Event::set_has_call_state() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TelephonyCallSession_Event::clear_has_call_state() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TelephonyCallSession_Event::clear_call_state() {
  call_state_ = 0;
  clear_has_call_state();
}
inline ::clearcut::connectivity::TelephonyCallSession_Event_CallState TelephonyCallSession_Event::call_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.call_state)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_CallState >(call_state_);
}
inline void TelephonyCallSession_Event::set_call_state(::clearcut::connectivity::TelephonyCallSession_Event_CallState value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_CallState_IsValid(value));
  set_has_call_state();
  call_state_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.call_state)
}

// optional int32 call_index = 10;
inline bool TelephonyCallSession_Event::has_call_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TelephonyCallSession_Event::set_has_call_index() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TelephonyCallSession_Event::clear_has_call_index() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TelephonyCallSession_Event::clear_call_index() {
  call_index_ = 0;
  clear_has_call_index();
}
inline ::google::protobuf::int32 TelephonyCallSession_Event::call_index() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.call_index)
  return call_index_;
}
inline void TelephonyCallSession_Event::set_call_index(::google::protobuf::int32 value) {
  set_has_call_index();
  call_index_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.call_index)
}

// optional int32 merged_call_index = 11;
inline bool TelephonyCallSession_Event::has_merged_call_index() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TelephonyCallSession_Event::set_has_merged_call_index() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TelephonyCallSession_Event::clear_has_merged_call_index() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TelephonyCallSession_Event::clear_merged_call_index() {
  merged_call_index_ = 0;
  clear_has_merged_call_index();
}
inline ::google::protobuf::int32 TelephonyCallSession_Event::merged_call_index() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.merged_call_index)
  return merged_call_index_;
}
inline void TelephonyCallSession_Event::set_merged_call_index(::google::protobuf::int32 value) {
  set_has_merged_call_index();
  merged_call_index_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.merged_call_index)
}

// repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;
inline int TelephonyCallSession_Event::calls_size() const {
  return calls_.size();
}
inline void TelephonyCallSession_Event::clear_calls() {
  calls_.Clear();
}
inline const ::clearcut::connectivity::TelephonyCallSession_Event_RilCall& TelephonyCallSession_Event::calls(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.calls)
  return calls_.Get(index);
}
inline ::clearcut::connectivity::TelephonyCallSession_Event_RilCall* TelephonyCallSession_Event::mutable_calls(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.Event.calls)
  return calls_.Mutable(index);
}
inline ::clearcut::connectivity::TelephonyCallSession_Event_RilCall* TelephonyCallSession_Event::add_calls() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyCallSession.Event.calls)
  return calls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession_Event_RilCall >*
TelephonyCallSession_Event::mutable_calls() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyCallSession.Event.calls)
  return &calls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession_Event_RilCall >&
TelephonyCallSession_Event::calls() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyCallSession.Event.calls)
  return calls_;
}

// optional .clearcut.connectivity.RilErrno error = 13;
inline bool TelephonyCallSession_Event::has_error() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TelephonyCallSession_Event::set_has_error() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TelephonyCallSession_Event::clear_has_error() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TelephonyCallSession_Event::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::clearcut::connectivity::RilErrno TelephonyCallSession_Event::error() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.error)
  return static_cast< ::clearcut::connectivity::RilErrno >(error_);
}
inline void TelephonyCallSession_Event::set_error(::clearcut::connectivity::RilErrno value) {
  assert(::clearcut::connectivity::RilErrno_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.error)
}

// optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;
inline bool TelephonyCallSession_Event::has_ril_request() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TelephonyCallSession_Event::set_has_ril_request() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TelephonyCallSession_Event::clear_has_ril_request() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TelephonyCallSession_Event::clear_ril_request() {
  ril_request_ = 0;
  clear_has_ril_request();
}
inline ::clearcut::connectivity::TelephonyCallSession_Event_RilRequest TelephonyCallSession_Event::ril_request() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.ril_request)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_RilRequest >(ril_request_);
}
inline void TelephonyCallSession_Event::set_ril_request(::clearcut::connectivity::TelephonyCallSession_Event_RilRequest value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_RilRequest_IsValid(value));
  set_has_ril_request();
  ril_request_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.ril_request)
}

// optional int32 ril_request_id = 15;
inline bool TelephonyCallSession_Event::has_ril_request_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TelephonyCallSession_Event::set_has_ril_request_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TelephonyCallSession_Event::clear_has_ril_request_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TelephonyCallSession_Event::clear_ril_request_id() {
  ril_request_id_ = 0;
  clear_has_ril_request_id();
}
inline ::google::protobuf::int32 TelephonyCallSession_Event::ril_request_id() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.ril_request_id)
  return ril_request_id_;
}
inline void TelephonyCallSession_Event::set_ril_request_id(::google::protobuf::int32 value) {
  set_has_ril_request_id();
  ril_request_id_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.ril_request_id)
}

// optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;
inline bool TelephonyCallSession_Event::has_srvcc_state() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TelephonyCallSession_Event::set_has_srvcc_state() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TelephonyCallSession_Event::clear_has_srvcc_state() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TelephonyCallSession_Event::clear_srvcc_state() {
  srvcc_state_ = 0;
  clear_has_srvcc_state();
}
inline ::clearcut::connectivity::TelephonyCallSession_Event_RilSrvccState TelephonyCallSession_Event::srvcc_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.srvcc_state)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_RilSrvccState >(srvcc_state_);
}
inline void TelephonyCallSession_Event::set_srvcc_state(::clearcut::connectivity::TelephonyCallSession_Event_RilSrvccState value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_RilSrvccState_IsValid(value));
  set_has_srvcc_state();
  srvcc_state_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.srvcc_state)
}

// optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;
inline bool TelephonyCallSession_Event::has_ims_command() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TelephonyCallSession_Event::set_has_ims_command() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TelephonyCallSession_Event::clear_has_ims_command() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TelephonyCallSession_Event::clear_ims_command() {
  ims_command_ = 0;
  clear_has_ims_command();
}
inline ::clearcut::connectivity::TelephonyCallSession_Event_ImsCommand TelephonyCallSession_Event::ims_command() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.ims_command)
  return static_cast< ::clearcut::connectivity::TelephonyCallSession_Event_ImsCommand >(ims_command_);
}
inline void TelephonyCallSession_Event::set_ims_command(::clearcut::connectivity::TelephonyCallSession_Event_ImsCommand value) {
  assert(::clearcut::connectivity::TelephonyCallSession_Event_ImsCommand_IsValid(value));
  set_has_ims_command();
  ims_command_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.ims_command)
}

// optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;
inline bool TelephonyCallSession_Event::has_reason_info() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TelephonyCallSession_Event::set_has_reason_info() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TelephonyCallSession_Event::clear_has_reason_info() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TelephonyCallSession_Event::clear_reason_info() {
  if (reason_info_ != NULL) reason_info_->::clearcut::connectivity::ImsReasonInfo::Clear();
  clear_has_reason_info();
}
inline const ::clearcut::connectivity::ImsReasonInfo& TelephonyCallSession_Event::reason_info() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.reason_info)
  return reason_info_ != NULL ? *reason_info_ : *default_instance_->reason_info_;
}
inline ::clearcut::connectivity::ImsReasonInfo* TelephonyCallSession_Event::mutable_reason_info() {
  set_has_reason_info();
  if (reason_info_ == NULL) {
    reason_info_ = new ::clearcut::connectivity::ImsReasonInfo;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.Event.reason_info)
  return reason_info_;
}
inline ::clearcut::connectivity::ImsReasonInfo* TelephonyCallSession_Event::release_reason_info() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.TelephonyCallSession.Event.reason_info)
  clear_has_reason_info();
  ::clearcut::connectivity::ImsReasonInfo* temp = reason_info_;
  reason_info_ = NULL;
  return temp;
}
inline void TelephonyCallSession_Event::set_allocated_reason_info(::clearcut::connectivity::ImsReasonInfo* reason_info) {
  delete reason_info_;
  reason_info_ = reason_info;
  if (reason_info) {
    set_has_reason_info();
  } else {
    clear_has_reason_info();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.TelephonyCallSession.Event.reason_info)
}

// optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];
inline bool TelephonyCallSession_Event::has_src_access_tech() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TelephonyCallSession_Event::set_has_src_access_tech() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TelephonyCallSession_Event::clear_has_src_access_tech() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TelephonyCallSession_Event::clear_src_access_tech() {
  src_access_tech_ = -1;
  clear_has_src_access_tech();
}
inline ::clearcut::connectivity::RadioAccessTechnology TelephonyCallSession_Event::src_access_tech() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.src_access_tech)
  return static_cast< ::clearcut::connectivity::RadioAccessTechnology >(src_access_tech_);
}
inline void TelephonyCallSession_Event::set_src_access_tech(::clearcut::connectivity::RadioAccessTechnology value) {
  assert(::clearcut::connectivity::RadioAccessTechnology_IsValid(value));
  set_has_src_access_tech();
  src_access_tech_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.src_access_tech)
}

// optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];
inline bool TelephonyCallSession_Event::has_target_access_tech() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TelephonyCallSession_Event::set_has_target_access_tech() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TelephonyCallSession_Event::clear_has_target_access_tech() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TelephonyCallSession_Event::clear_target_access_tech() {
  target_access_tech_ = -1;
  clear_has_target_access_tech();
}
inline ::clearcut::connectivity::RadioAccessTechnology TelephonyCallSession_Event::target_access_tech() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.target_access_tech)
  return static_cast< ::clearcut::connectivity::RadioAccessTechnology >(target_access_tech_);
}
inline void TelephonyCallSession_Event::set_target_access_tech(::clearcut::connectivity::RadioAccessTechnology value) {
  assert(::clearcut::connectivity::RadioAccessTechnology_IsValid(value));
  set_has_target_access_tech();
  target_access_tech_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.target_access_tech)
}

// optional int64 nitz_timestamp_millis = 21;
inline bool TelephonyCallSession_Event::has_nitz_timestamp_millis() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TelephonyCallSession_Event::set_has_nitz_timestamp_millis() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TelephonyCallSession_Event::clear_has_nitz_timestamp_millis() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TelephonyCallSession_Event::clear_nitz_timestamp_millis() {
  nitz_timestamp_millis_ = GOOGLE_LONGLONG(0);
  clear_has_nitz_timestamp_millis();
}
inline ::google::protobuf::int64 TelephonyCallSession_Event::nitz_timestamp_millis() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.Event.nitz_timestamp_millis)
  return nitz_timestamp_millis_;
}
inline void TelephonyCallSession_Event::set_nitz_timestamp_millis(::google::protobuf::int64 value) {
  set_has_nitz_timestamp_millis();
  nitz_timestamp_millis_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.Event.nitz_timestamp_millis)
}

// -------------------------------------------------------------------

// TelephonyCallSession

// optional int32 start_time_minutes = 1;
inline bool TelephonyCallSession::has_start_time_minutes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelephonyCallSession::set_has_start_time_minutes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelephonyCallSession::clear_has_start_time_minutes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelephonyCallSession::clear_start_time_minutes() {
  start_time_minutes_ = 0;
  clear_has_start_time_minutes();
}
inline ::google::protobuf::int32 TelephonyCallSession::start_time_minutes() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.start_time_minutes)
  return start_time_minutes_;
}
inline void TelephonyCallSession::set_start_time_minutes(::google::protobuf::int32 value) {
  set_has_start_time_minutes();
  start_time_minutes_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.start_time_minutes)
}

// optional int32 phone_id = 2;
inline bool TelephonyCallSession::has_phone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelephonyCallSession::set_has_phone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelephonyCallSession::clear_has_phone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelephonyCallSession::clear_phone_id() {
  phone_id_ = 0;
  clear_has_phone_id();
}
inline ::google::protobuf::int32 TelephonyCallSession::phone_id() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.phone_id)
  return phone_id_;
}
inline void TelephonyCallSession::set_phone_id(::google::protobuf::int32 value) {
  set_has_phone_id();
  phone_id_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.phone_id)
}

// repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;
inline int TelephonyCallSession::events_size() const {
  return events_.size();
}
inline void TelephonyCallSession::clear_events() {
  events_.Clear();
}
inline const ::clearcut::connectivity::TelephonyCallSession_Event& TelephonyCallSession::events(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.events)
  return events_.Get(index);
}
inline ::clearcut::connectivity::TelephonyCallSession_Event* TelephonyCallSession::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.TelephonyCallSession.events)
  return events_.Mutable(index);
}
inline ::clearcut::connectivity::TelephonyCallSession_Event* TelephonyCallSession::add_events() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.TelephonyCallSession.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession_Event >*
TelephonyCallSession::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.TelephonyCallSession.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::TelephonyCallSession_Event >&
TelephonyCallSession::events() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.TelephonyCallSession.events)
  return events_;
}

// optional bool events_dropped = 4;
inline bool TelephonyCallSession::has_events_dropped() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TelephonyCallSession::set_has_events_dropped() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TelephonyCallSession::clear_has_events_dropped() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TelephonyCallSession::clear_events_dropped() {
  events_dropped_ = false;
  clear_has_events_dropped();
}
inline bool TelephonyCallSession::events_dropped() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.TelephonyCallSession.events_dropped)
  return events_dropped_;
}
inline void TelephonyCallSession::set_events_dropped(bool value) {
  set_has_events_dropped();
  events_dropped_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.TelephonyCallSession.events_dropped)
}

// -------------------------------------------------------------------

// SmsSession_Event

// optional .clearcut.connectivity.SmsSession.Event.Type type = 1;
inline bool SmsSession_Event::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmsSession_Event::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmsSession_Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmsSession_Event::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::clearcut::connectivity::SmsSession_Event_Type SmsSession_Event::type() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.type)
  return static_cast< ::clearcut::connectivity::SmsSession_Event_Type >(type_);
}
inline void SmsSession_Event::set_type(::clearcut::connectivity::SmsSession_Event_Type value) {
  assert(::clearcut::connectivity::SmsSession_Event_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.Event.type)
}

// optional .clearcut.connectivity.TimeInterval delay = 2;
inline bool SmsSession_Event::has_delay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmsSession_Event::set_has_delay() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmsSession_Event::clear_has_delay() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmsSession_Event::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline ::clearcut::connectivity::TimeInterval SmsSession_Event::delay() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.delay)
  return static_cast< ::clearcut::connectivity::TimeInterval >(delay_);
}
inline void SmsSession_Event::set_delay(::clearcut::connectivity::TimeInterval value) {
  assert(::clearcut::connectivity::TimeInterval_IsValid(value));
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.Event.delay)
}

// optional .clearcut.connectivity.TelephonySettings settings = 3;
inline bool SmsSession_Event::has_settings() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmsSession_Event::set_has_settings() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmsSession_Event::clear_has_settings() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmsSession_Event::clear_settings() {
  if (settings_ != NULL) settings_->::clearcut::connectivity::TelephonySettings::Clear();
  clear_has_settings();
}
inline const ::clearcut::connectivity::TelephonySettings& SmsSession_Event::settings() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
inline ::clearcut::connectivity::TelephonySettings* SmsSession_Event::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) {
    settings_ = new ::clearcut::connectivity::TelephonySettings;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.SmsSession.Event.settings)
  return settings_;
}
inline ::clearcut::connectivity::TelephonySettings* SmsSession_Event::release_settings() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.SmsSession.Event.settings)
  clear_has_settings();
  ::clearcut::connectivity::TelephonySettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline void SmsSession_Event::set_allocated_settings(::clearcut::connectivity::TelephonySettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.SmsSession.Event.settings)
}

// optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
inline bool SmsSession_Event::has_service_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SmsSession_Event::set_has_service_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SmsSession_Event::clear_has_service_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SmsSession_Event::clear_service_state() {
  if (service_state_ != NULL) service_state_->::clearcut::connectivity::TelephonyServiceState::Clear();
  clear_has_service_state();
}
inline const ::clearcut::connectivity::TelephonyServiceState& SmsSession_Event::service_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.service_state)
  return service_state_ != NULL ? *service_state_ : *default_instance_->service_state_;
}
inline ::clearcut::connectivity::TelephonyServiceState* SmsSession_Event::mutable_service_state() {
  set_has_service_state();
  if (service_state_ == NULL) {
    service_state_ = new ::clearcut::connectivity::TelephonyServiceState;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.SmsSession.Event.service_state)
  return service_state_;
}
inline ::clearcut::connectivity::TelephonyServiceState* SmsSession_Event::release_service_state() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.SmsSession.Event.service_state)
  clear_has_service_state();
  ::clearcut::connectivity::TelephonyServiceState* temp = service_state_;
  service_state_ = NULL;
  return temp;
}
inline void SmsSession_Event::set_allocated_service_state(::clearcut::connectivity::TelephonyServiceState* service_state) {
  delete service_state_;
  service_state_ = service_state;
  if (service_state) {
    set_has_service_state();
  } else {
    clear_has_service_state();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.SmsSession.Event.service_state)
}

// optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
inline bool SmsSession_Event::has_ims_connection_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SmsSession_Event::set_has_ims_connection_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SmsSession_Event::clear_has_ims_connection_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SmsSession_Event::clear_ims_connection_state() {
  if (ims_connection_state_ != NULL) ims_connection_state_->::clearcut::connectivity::ImsConnectionState::Clear();
  clear_has_ims_connection_state();
}
inline const ::clearcut::connectivity::ImsConnectionState& SmsSession_Event::ims_connection_state() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.ims_connection_state)
  return ims_connection_state_ != NULL ? *ims_connection_state_ : *default_instance_->ims_connection_state_;
}
inline ::clearcut::connectivity::ImsConnectionState* SmsSession_Event::mutable_ims_connection_state() {
  set_has_ims_connection_state();
  if (ims_connection_state_ == NULL) {
    ims_connection_state_ = new ::clearcut::connectivity::ImsConnectionState;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.SmsSession.Event.ims_connection_state)
  return ims_connection_state_;
}
inline ::clearcut::connectivity::ImsConnectionState* SmsSession_Event::release_ims_connection_state() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.SmsSession.Event.ims_connection_state)
  clear_has_ims_connection_state();
  ::clearcut::connectivity::ImsConnectionState* temp = ims_connection_state_;
  ims_connection_state_ = NULL;
  return temp;
}
inline void SmsSession_Event::set_allocated_ims_connection_state(::clearcut::connectivity::ImsConnectionState* ims_connection_state) {
  delete ims_connection_state_;
  ims_connection_state_ = ims_connection_state;
  if (ims_connection_state) {
    set_has_ims_connection_state();
  } else {
    clear_has_ims_connection_state();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.SmsSession.Event.ims_connection_state)
}

// optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
inline bool SmsSession_Event::has_ims_capabilities() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SmsSession_Event::set_has_ims_capabilities() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SmsSession_Event::clear_has_ims_capabilities() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SmsSession_Event::clear_ims_capabilities() {
  if (ims_capabilities_ != NULL) ims_capabilities_->::clearcut::connectivity::ImsCapabilities::Clear();
  clear_has_ims_capabilities();
}
inline const ::clearcut::connectivity::ImsCapabilities& SmsSession_Event::ims_capabilities() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.ims_capabilities)
  return ims_capabilities_ != NULL ? *ims_capabilities_ : *default_instance_->ims_capabilities_;
}
inline ::clearcut::connectivity::ImsCapabilities* SmsSession_Event::mutable_ims_capabilities() {
  set_has_ims_capabilities();
  if (ims_capabilities_ == NULL) {
    ims_capabilities_ = new ::clearcut::connectivity::ImsCapabilities;
  }
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.SmsSession.Event.ims_capabilities)
  return ims_capabilities_;
}
inline ::clearcut::connectivity::ImsCapabilities* SmsSession_Event::release_ims_capabilities() {
  // @@protoc_insertion_point(field_release:clearcut.connectivity.SmsSession.Event.ims_capabilities)
  clear_has_ims_capabilities();
  ::clearcut::connectivity::ImsCapabilities* temp = ims_capabilities_;
  ims_capabilities_ = NULL;
  return temp;
}
inline void SmsSession_Event::set_allocated_ims_capabilities(::clearcut::connectivity::ImsCapabilities* ims_capabilities) {
  delete ims_capabilities_;
  ims_capabilities_ = ims_capabilities;
  if (ims_capabilities) {
    set_has_ims_capabilities();
  } else {
    clear_has_ims_capabilities();
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.SmsSession.Event.ims_capabilities)
}

// repeated .clearcut.connectivity.RilDataCall data_calls = 7;
inline int SmsSession_Event::data_calls_size() const {
  return data_calls_.size();
}
inline void SmsSession_Event::clear_data_calls() {
  data_calls_.Clear();
}
inline const ::clearcut::connectivity::RilDataCall& SmsSession_Event::data_calls(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.data_calls)
  return data_calls_.Get(index);
}
inline ::clearcut::connectivity::RilDataCall* SmsSession_Event::mutable_data_calls(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.SmsSession.Event.data_calls)
  return data_calls_.Mutable(index);
}
inline ::clearcut::connectivity::RilDataCall* SmsSession_Event::add_data_calls() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.SmsSession.Event.data_calls)
  return data_calls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >*
SmsSession_Event::mutable_data_calls() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.SmsSession.Event.data_calls)
  return &data_calls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::RilDataCall >&
SmsSession_Event::data_calls() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.SmsSession.Event.data_calls)
  return data_calls_;
}

// optional .clearcut.connectivity.SmsSession.Event.Format format = 8;
inline bool SmsSession_Event::has_format() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SmsSession_Event::set_has_format() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SmsSession_Event::clear_has_format() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SmsSession_Event::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::clearcut::connectivity::SmsSession_Event_Format SmsSession_Event::format() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.format)
  return static_cast< ::clearcut::connectivity::SmsSession_Event_Format >(format_);
}
inline void SmsSession_Event::set_format(::clearcut::connectivity::SmsSession_Event_Format value) {
  assert(::clearcut::connectivity::SmsSession_Event_Format_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.Event.format)
}

// optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;
inline bool SmsSession_Event::has_tech() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SmsSession_Event::set_has_tech() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SmsSession_Event::clear_has_tech() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SmsSession_Event::clear_tech() {
  tech_ = 0;
  clear_has_tech();
}
inline ::clearcut::connectivity::SmsSession_Event_Tech SmsSession_Event::tech() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.tech)
  return static_cast< ::clearcut::connectivity::SmsSession_Event_Tech >(tech_);
}
inline void SmsSession_Event::set_tech(::clearcut::connectivity::SmsSession_Event_Tech value) {
  assert(::clearcut::connectivity::SmsSession_Event_Tech_IsValid(value));
  set_has_tech();
  tech_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.Event.tech)
}

// optional int32 error_code = 10;
inline bool SmsSession_Event::has_error_code() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SmsSession_Event::set_has_error_code() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SmsSession_Event::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SmsSession_Event::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 SmsSession_Event::error_code() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.error_code)
  return error_code_;
}
inline void SmsSession_Event::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.Event.error_code)
}

// optional .clearcut.connectivity.RilErrno error = 11;
inline bool SmsSession_Event::has_error() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SmsSession_Event::set_has_error() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SmsSession_Event::clear_has_error() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SmsSession_Event::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::clearcut::connectivity::RilErrno SmsSession_Event::error() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.error)
  return static_cast< ::clearcut::connectivity::RilErrno >(error_);
}
inline void SmsSession_Event::set_error(::clearcut::connectivity::RilErrno value) {
  assert(::clearcut::connectivity::RilErrno_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.Event.error)
}

// optional int32 ril_request_id = 12;
inline bool SmsSession_Event::has_ril_request_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SmsSession_Event::set_has_ril_request_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SmsSession_Event::clear_has_ril_request_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SmsSession_Event::clear_ril_request_id() {
  ril_request_id_ = 0;
  clear_has_ril_request_id();
}
inline ::google::protobuf::int32 SmsSession_Event::ril_request_id() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.Event.ril_request_id)
  return ril_request_id_;
}
inline void SmsSession_Event::set_ril_request_id(::google::protobuf::int32 value) {
  set_has_ril_request_id();
  ril_request_id_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.Event.ril_request_id)
}

// -------------------------------------------------------------------

// SmsSession

// optional int32 start_time_minutes = 1;
inline bool SmsSession::has_start_time_minutes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmsSession::set_has_start_time_minutes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmsSession::clear_has_start_time_minutes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmsSession::clear_start_time_minutes() {
  start_time_minutes_ = 0;
  clear_has_start_time_minutes();
}
inline ::google::protobuf::int32 SmsSession::start_time_minutes() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.start_time_minutes)
  return start_time_minutes_;
}
inline void SmsSession::set_start_time_minutes(::google::protobuf::int32 value) {
  set_has_start_time_minutes();
  start_time_minutes_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.start_time_minutes)
}

// optional int32 phone_id = 2;
inline bool SmsSession::has_phone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmsSession::set_has_phone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmsSession::clear_has_phone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmsSession::clear_phone_id() {
  phone_id_ = 0;
  clear_has_phone_id();
}
inline ::google::protobuf::int32 SmsSession::phone_id() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.phone_id)
  return phone_id_;
}
inline void SmsSession::set_phone_id(::google::protobuf::int32 value) {
  set_has_phone_id();
  phone_id_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.phone_id)
}

// repeated .clearcut.connectivity.SmsSession.Event events = 3;
inline int SmsSession::events_size() const {
  return events_.size();
}
inline void SmsSession::clear_events() {
  events_.Clear();
}
inline const ::clearcut::connectivity::SmsSession_Event& SmsSession::events(int index) const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.events)
  return events_.Get(index);
}
inline ::clearcut::connectivity::SmsSession_Event* SmsSession::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:clearcut.connectivity.SmsSession.events)
  return events_.Mutable(index);
}
inline ::clearcut::connectivity::SmsSession_Event* SmsSession::add_events() {
  // @@protoc_insertion_point(field_add:clearcut.connectivity.SmsSession.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::SmsSession_Event >*
SmsSession::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:clearcut.connectivity.SmsSession.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::clearcut::connectivity::SmsSession_Event >&
SmsSession::events() const {
  // @@protoc_insertion_point(field_list:clearcut.connectivity.SmsSession.events)
  return events_;
}

// optional bool events_dropped = 4;
inline bool SmsSession::has_events_dropped() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SmsSession::set_has_events_dropped() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SmsSession::clear_has_events_dropped() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SmsSession::clear_events_dropped() {
  events_dropped_ = false;
  clear_has_events_dropped();
}
inline bool SmsSession::events_dropped() const {
  // @@protoc_insertion_point(field_get:clearcut.connectivity.SmsSession.events_dropped)
  return events_dropped_;
}
inline void SmsSession::set_events_dropped(bool value) {
  set_has_events_dropped();
  events_dropped_ = value;
  // @@protoc_insertion_point(field_set:clearcut.connectivity.SmsSession.events_dropped)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace connectivity
}  // namespace clearcut

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::clearcut::connectivity::TelephonySettings_RilNetworkMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::TelephonySettings_RilNetworkMode>() {
  return ::clearcut::connectivity::TelephonySettings_RilNetworkMode_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::TelephonySettings_WiFiCallingMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::TelephonySettings_WiFiCallingMode>() {
  return ::clearcut::connectivity::TelephonySettings_WiFiCallingMode_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::TelephonyServiceState_RoamingType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::TelephonyServiceState_RoamingType>() {
  return ::clearcut::connectivity::TelephonyServiceState_RoamingType_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::ImsConnectionState_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::ImsConnectionState_State>() {
  return ::clearcut::connectivity::ImsConnectionState_State_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall_RilDataProfile> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall_RilDataProfile>() {
  return ::clearcut::connectivity::TelephonyEvent_RilSetupDataCall_RilDataProfile_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause>() {
  return ::clearcut::connectivity::TelephonyEvent_RilSetupDataCallResponse_RilDataCallFailCause_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall_DeactivateReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall_DeactivateReason>() {
  return ::clearcut::connectivity::TelephonyEvent_RilDeactivateDataCall_DeactivateReason_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::TelephonyEvent_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::TelephonyEvent_Type>() {
  return ::clearcut::connectivity::TelephonyEvent_Type_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::TelephonyCallSession_Event_RilCall_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::TelephonyCallSession_Event_RilCall_Type>() {
  return ::clearcut::connectivity::TelephonyCallSession_Event_RilCall_Type_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::TelephonyCallSession_Event_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::TelephonyCallSession_Event_Type>() {
  return ::clearcut::connectivity::TelephonyCallSession_Event_Type_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::TelephonyCallSession_Event_RilRequest> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::TelephonyCallSession_Event_RilRequest>() {
  return ::clearcut::connectivity::TelephonyCallSession_Event_RilRequest_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::TelephonyCallSession_Event_ImsCommand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::TelephonyCallSession_Event_ImsCommand>() {
  return ::clearcut::connectivity::TelephonyCallSession_Event_ImsCommand_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::TelephonyCallSession_Event_PhoneState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::TelephonyCallSession_Event_PhoneState>() {
  return ::clearcut::connectivity::TelephonyCallSession_Event_PhoneState_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::TelephonyCallSession_Event_CallState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::TelephonyCallSession_Event_CallState>() {
  return ::clearcut::connectivity::TelephonyCallSession_Event_CallState_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::TelephonyCallSession_Event_RilSrvccState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::TelephonyCallSession_Event_RilSrvccState>() {
  return ::clearcut::connectivity::TelephonyCallSession_Event_RilSrvccState_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::SmsSession_Event_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::SmsSession_Event_Type>() {
  return ::clearcut::connectivity::SmsSession_Event_Type_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::SmsSession_Event_Format> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::SmsSession_Event_Format>() {
  return ::clearcut::connectivity::SmsSession_Event_Format_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::SmsSession_Event_Tech> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::SmsSession_Event_Tech>() {
  return ::clearcut::connectivity::SmsSession_Event_Tech_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::RadioAccessTechnology> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::RadioAccessTechnology>() {
  return ::clearcut::connectivity::RadioAccessTechnology_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::RilErrno> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::RilErrno>() {
  return ::clearcut::connectivity::RilErrno_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::PdpType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::PdpType>() {
  return ::clearcut::connectivity::PdpType_descriptor();
}
template <> struct is_proto_enum< ::clearcut::connectivity::TimeInterval> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::clearcut::connectivity::TimeInterval>() {
  return ::clearcut::connectivity::TimeInterval_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_com_2fandroid_2finternal_2ftelephony_2ftelephony_2eproto__INCLUDED
