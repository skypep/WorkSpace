// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/android/internal/telephony/telephony.proto

package com.android.internal.telephony;

public final class TelephonyProto {
  private TelephonyProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Radio access families
   * </pre>
   *
   * Protobuf enum {@code clearcut.connectivity.RadioAccessTechnology}
   */
  public enum RadioAccessTechnology
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * This is the default value. Different from RAT_UNKNOWN.
     * </pre>
     *
     * <code>UNKNOWN = -1;</code>
     */
    UNKNOWN(-1),
    /**
     * <pre>
     * Airplane mode, out of service, or when the modem cannot determine
     * the RAT.
     * </pre>
     *
     * <code>RAT_UNKNOWN = 0;</code>
     */
    RAT_UNKNOWN(0),
    /**
     * <code>RAT_GPRS = 1;</code>
     */
    RAT_GPRS(1),
    /**
     * <code>RAT_EDGE = 2;</code>
     */
    RAT_EDGE(2),
    /**
     * <code>RAT_UMTS = 3;</code>
     */
    RAT_UMTS(3),
    /**
     * <code>RAT_IS95A = 4;</code>
     */
    RAT_IS95A(4),
    /**
     * <code>RAT_IS95B = 5;</code>
     */
    RAT_IS95B(5),
    /**
     * <code>RAT_1XRTT = 6;</code>
     */
    RAT_1XRTT(6),
    /**
     * <code>RAT_EVDO_0 = 7;</code>
     */
    RAT_EVDO_0(7),
    /**
     * <code>RAT_EVDO_A = 8;</code>
     */
    RAT_EVDO_A(8),
    /**
     * <code>RAT_HSDPA = 9;</code>
     */
    RAT_HSDPA(9),
    /**
     * <code>RAT_HSUPA = 10;</code>
     */
    RAT_HSUPA(10),
    /**
     * <code>RAT_HSPA = 11;</code>
     */
    RAT_HSPA(11),
    /**
     * <code>RAT_EVDO_B = 12;</code>
     */
    RAT_EVDO_B(12),
    /**
     * <code>RAT_EHRPD = 13;</code>
     */
    RAT_EHRPD(13),
    /**
     * <code>RAT_LTE = 14;</code>
     */
    RAT_LTE(14),
    /**
     * <code>RAT_HSPAP = 15;</code>
     */
    RAT_HSPAP(15),
    /**
     * <code>RAT_GSM = 16;</code>
     */
    RAT_GSM(16),
    /**
     * <code>RAT_TD_SCDMA = 17;</code>
     */
    RAT_TD_SCDMA(17),
    /**
     * <code>RAT_IWLAN = 18;</code>
     */
    RAT_IWLAN(18),
    /**
     * <code>RAT_LTE_CA = 19;</code>
     */
    RAT_LTE_CA(19),
    ;

    /**
     * <pre>
     * This is the default value. Different from RAT_UNKNOWN.
     * </pre>
     *
     * <code>UNKNOWN = -1;</code>
     */
    public static final int UNKNOWN_VALUE = -1;
    /**
     * <pre>
     * Airplane mode, out of service, or when the modem cannot determine
     * the RAT.
     * </pre>
     *
     * <code>RAT_UNKNOWN = 0;</code>
     */
    public static final int RAT_UNKNOWN_VALUE = 0;
    /**
     * <code>RAT_GPRS = 1;</code>
     */
    public static final int RAT_GPRS_VALUE = 1;
    /**
     * <code>RAT_EDGE = 2;</code>
     */
    public static final int RAT_EDGE_VALUE = 2;
    /**
     * <code>RAT_UMTS = 3;</code>
     */
    public static final int RAT_UMTS_VALUE = 3;
    /**
     * <code>RAT_IS95A = 4;</code>
     */
    public static final int RAT_IS95A_VALUE = 4;
    /**
     * <code>RAT_IS95B = 5;</code>
     */
    public static final int RAT_IS95B_VALUE = 5;
    /**
     * <code>RAT_1XRTT = 6;</code>
     */
    public static final int RAT_1XRTT_VALUE = 6;
    /**
     * <code>RAT_EVDO_0 = 7;</code>
     */
    public static final int RAT_EVDO_0_VALUE = 7;
    /**
     * <code>RAT_EVDO_A = 8;</code>
     */
    public static final int RAT_EVDO_A_VALUE = 8;
    /**
     * <code>RAT_HSDPA = 9;</code>
     */
    public static final int RAT_HSDPA_VALUE = 9;
    /**
     * <code>RAT_HSUPA = 10;</code>
     */
    public static final int RAT_HSUPA_VALUE = 10;
    /**
     * <code>RAT_HSPA = 11;</code>
     */
    public static final int RAT_HSPA_VALUE = 11;
    /**
     * <code>RAT_EVDO_B = 12;</code>
     */
    public static final int RAT_EVDO_B_VALUE = 12;
    /**
     * <code>RAT_EHRPD = 13;</code>
     */
    public static final int RAT_EHRPD_VALUE = 13;
    /**
     * <code>RAT_LTE = 14;</code>
     */
    public static final int RAT_LTE_VALUE = 14;
    /**
     * <code>RAT_HSPAP = 15;</code>
     */
    public static final int RAT_HSPAP_VALUE = 15;
    /**
     * <code>RAT_GSM = 16;</code>
     */
    public static final int RAT_GSM_VALUE = 16;
    /**
     * <code>RAT_TD_SCDMA = 17;</code>
     */
    public static final int RAT_TD_SCDMA_VALUE = 17;
    /**
     * <code>RAT_IWLAN = 18;</code>
     */
    public static final int RAT_IWLAN_VALUE = 18;
    /**
     * <code>RAT_LTE_CA = 19;</code>
     */
    public static final int RAT_LTE_CA_VALUE = 19;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RadioAccessTechnology valueOf(int value) {
      return forNumber(value);
    }

    public static RadioAccessTechnology forNumber(int value) {
      switch (value) {
        case -1: return UNKNOWN;
        case 0: return RAT_UNKNOWN;
        case 1: return RAT_GPRS;
        case 2: return RAT_EDGE;
        case 3: return RAT_UMTS;
        case 4: return RAT_IS95A;
        case 5: return RAT_IS95B;
        case 6: return RAT_1XRTT;
        case 7: return RAT_EVDO_0;
        case 8: return RAT_EVDO_A;
        case 9: return RAT_HSDPA;
        case 10: return RAT_HSUPA;
        case 11: return RAT_HSPA;
        case 12: return RAT_EVDO_B;
        case 13: return RAT_EHRPD;
        case 14: return RAT_LTE;
        case 15: return RAT_HSPAP;
        case 16: return RAT_GSM;
        case 17: return RAT_TD_SCDMA;
        case 18: return RAT_IWLAN;
        case 19: return RAT_LTE_CA;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RadioAccessTechnology>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        RadioAccessTechnology> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RadioAccessTechnology>() {
            public RadioAccessTechnology findValueByNumber(int number) {
              return RadioAccessTechnology.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.getDescriptor().getEnumTypes().get(0);
    }

    private static final RadioAccessTechnology[] VALUES = values();

    public static RadioAccessTechnology valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private RadioAccessTechnology(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:clearcut.connectivity.RadioAccessTechnology)
  }

  /**
   * <pre>
   * Errors returned by RIL
   * </pre>
   *
   * Protobuf enum {@code clearcut.connectivity.RilErrno}
   */
  public enum RilErrno
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * type is unknown.
     * </pre>
     *
     * <code>RIL_E_UNKNOWN = 0;</code>
     */
    RIL_E_UNKNOWN(0),
    /**
     * <pre>
     * Note the following values are all off by 1.
     * </pre>
     *
     * <code>RIL_E_SUCCESS = 1;</code>
     */
    RIL_E_SUCCESS(1),
    /**
     * <pre>
     * If radio did not start or is resetting
     * </pre>
     *
     * <code>RIL_E_RADIO_NOT_AVAILABLE = 2;</code>
     */
    RIL_E_RADIO_NOT_AVAILABLE(2),
    /**
     * <code>RIL_E_GENERIC_FAILURE = 3;</code>
     */
    RIL_E_GENERIC_FAILURE(3),
    /**
     * <pre>
     * for PIN/PIN2 methods only!
     * </pre>
     *
     * <code>RIL_E_PASSWORD_INCORRECT = 4;</code>
     */
    RIL_E_PASSWORD_INCORRECT(4),
    /**
     * <pre>
     * Operation requires SIM PIN2 to be entered
     * </pre>
     *
     * <code>RIL_E_SIM_PIN2 = 5;</code>
     */
    RIL_E_SIM_PIN2(5),
    /**
     * <pre>
     * Operation requires SIM PIN2 to be entered
     * </pre>
     *
     * <code>RIL_E_SIM_PUK2 = 6;</code>
     */
    RIL_E_SIM_PUK2(6),
    /**
     * <code>RIL_E_REQUEST_NOT_SUPPORTED = 7;</code>
     */
    RIL_E_REQUEST_NOT_SUPPORTED(7),
    /**
     * <code>RIL_E_CANCELLED = 8;</code>
     */
    RIL_E_CANCELLED(8),
    /**
     * <pre>
     * data ops are not allowed during voice call on a Class C GPRS device
     * </pre>
     *
     * <code>RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL = 9;</code>
     */
    RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL(9),
    /**
     * <pre>
     * data ops are not allowed before device registers in network
     * </pre>
     *
     * <code>RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW = 10;</code>
     */
    RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW(10),
    /**
     * <pre>
     * fail to send sms and need retry
     * </pre>
     *
     * <code>RIL_E_SMS_SEND_FAIL_RETRY = 11;</code>
     */
    RIL_E_SMS_SEND_FAIL_RETRY(11),
    /**
     * <pre>
     * fail to set the location where CDMA subscription shall be retrieved
     * because of SIM or RUIM card absent
     * </pre>
     *
     * <code>RIL_E_SIM_ABSENT = 12;</code>
     */
    RIL_E_SIM_ABSENT(12),
    /**
     * <pre>
     * fail to find CDMA subscription from specified location
     * </pre>
     *
     * <code>RIL_E_SUBSCRIPTION_NOT_AVAILABLE = 13;</code>
     */
    RIL_E_SUBSCRIPTION_NOT_AVAILABLE(13),
    /**
     * <pre>
     * HW does not support preferred network type
     * </pre>
     *
     * <code>RIL_E_MODE_NOT_SUPPORTED = 14;</code>
     */
    RIL_E_MODE_NOT_SUPPORTED(14),
    /**
     * <pre>
     * command failed because recipient is not on FDN list
     * </pre>
     *
     * <code>RIL_E_FDN_CHECK_FAILURE = 15;</code>
     */
    RIL_E_FDN_CHECK_FAILURE(15),
    /**
     * <pre>
     * network selection failed due to illegal SIM or ME
     * </pre>
     *
     * <code>RIL_E_ILLEGAL_SIM_OR_ME = 16;</code>
     */
    RIL_E_ILLEGAL_SIM_OR_ME(16),
    /**
     * <pre>
     * no logical channel available
     * </pre>
     *
     * <code>RIL_E_MISSING_RESOURCE = 17;</code>
     */
    RIL_E_MISSING_RESOURCE(17),
    /**
     * <pre>
     * application not found on SIM
     * </pre>
     *
     * <code>RIL_E_NO_SUCH_ELEMENT = 18;</code>
     */
    RIL_E_NO_SUCH_ELEMENT(18),
    /**
     * <pre>
     * DIAL request modified to USSD
     * </pre>
     *
     * <code>RIL_E_DIAL_MODIFIED_TO_USSD = 19;</code>
     */
    RIL_E_DIAL_MODIFIED_TO_USSD(19),
    /**
     * <pre>
     * DIAL request modified to SS
     * </pre>
     *
     * <code>RIL_E_DIAL_MODIFIED_TO_SS = 20;</code>
     */
    RIL_E_DIAL_MODIFIED_TO_SS(20),
    /**
     * <pre>
     * DIAL request modified to DIAL with different data
     * </pre>
     *
     * <code>RIL_E_DIAL_MODIFIED_TO_DIAL = 21;</code>
     */
    RIL_E_DIAL_MODIFIED_TO_DIAL(21),
    /**
     * <pre>
     * USSD request modified to DIAL
     * </pre>
     *
     * <code>RIL_E_USSD_MODIFIED_TO_DIAL = 22;</code>
     */
    RIL_E_USSD_MODIFIED_TO_DIAL(22),
    /**
     * <pre>
     * USSD request modified to SS
     * </pre>
     *
     * <code>RIL_E_USSD_MODIFIED_TO_SS = 23;</code>
     */
    RIL_E_USSD_MODIFIED_TO_SS(23),
    /**
     * <pre>
     * USSD request modified to different USSD request
     * </pre>
     *
     * <code>RIL_E_USSD_MODIFIED_TO_USSD = 24;</code>
     */
    RIL_E_USSD_MODIFIED_TO_USSD(24),
    /**
     * <pre>
     * SS request modified to DIAL
     * </pre>
     *
     * <code>RIL_E_SS_MODIFIED_TO_DIAL = 25;</code>
     */
    RIL_E_SS_MODIFIED_TO_DIAL(25),
    /**
     * <pre>
     * SS request modified to USSD
     * </pre>
     *
     * <code>RIL_E_SS_MODIFIED_TO_USSD = 26;</code>
     */
    RIL_E_SS_MODIFIED_TO_USSD(26),
    /**
     * <pre>
     * Subscription not supported by RIL
     * </pre>
     *
     * <code>RIL_E_SUBSCRIPTION_NOT_SUPPORTED = 27;</code>
     */
    RIL_E_SUBSCRIPTION_NOT_SUPPORTED(27),
    /**
     * <pre>
     * SS request modified to different SS request
     * </pre>
     *
     * <code>RIL_E_SS_MODIFIED_TO_SS = 28;</code>
     */
    RIL_E_SS_MODIFIED_TO_SS(28),
    /**
     * <pre>
     * LCE service not supported(36 in RILConstants.java. This is a mistake.
     * The value should be off by 1 ideally.)
     * </pre>
     *
     * <code>RIL_E_LCE_NOT_SUPPORTED = 36 [deprecated = true];</code>
     */
    @java.lang.Deprecated
    RIL_E_LCE_NOT_SUPPORTED(36),
    /**
     * <pre>
     * LCE service not supported
     * </pre>
     *
     * <code>RIL_E_LCE_NOT_SUPPORTED_NEW = 37;</code>
     */
    RIL_E_LCE_NOT_SUPPORTED_NEW(37),
    ;

    /**
     * <pre>
     * type is unknown.
     * </pre>
     *
     * <code>RIL_E_UNKNOWN = 0;</code>
     */
    public static final int RIL_E_UNKNOWN_VALUE = 0;
    /**
     * <pre>
     * Note the following values are all off by 1.
     * </pre>
     *
     * <code>RIL_E_SUCCESS = 1;</code>
     */
    public static final int RIL_E_SUCCESS_VALUE = 1;
    /**
     * <pre>
     * If radio did not start or is resetting
     * </pre>
     *
     * <code>RIL_E_RADIO_NOT_AVAILABLE = 2;</code>
     */
    public static final int RIL_E_RADIO_NOT_AVAILABLE_VALUE = 2;
    /**
     * <code>RIL_E_GENERIC_FAILURE = 3;</code>
     */
    public static final int RIL_E_GENERIC_FAILURE_VALUE = 3;
    /**
     * <pre>
     * for PIN/PIN2 methods only!
     * </pre>
     *
     * <code>RIL_E_PASSWORD_INCORRECT = 4;</code>
     */
    public static final int RIL_E_PASSWORD_INCORRECT_VALUE = 4;
    /**
     * <pre>
     * Operation requires SIM PIN2 to be entered
     * </pre>
     *
     * <code>RIL_E_SIM_PIN2 = 5;</code>
     */
    public static final int RIL_E_SIM_PIN2_VALUE = 5;
    /**
     * <pre>
     * Operation requires SIM PIN2 to be entered
     * </pre>
     *
     * <code>RIL_E_SIM_PUK2 = 6;</code>
     */
    public static final int RIL_E_SIM_PUK2_VALUE = 6;
    /**
     * <code>RIL_E_REQUEST_NOT_SUPPORTED = 7;</code>
     */
    public static final int RIL_E_REQUEST_NOT_SUPPORTED_VALUE = 7;
    /**
     * <code>RIL_E_CANCELLED = 8;</code>
     */
    public static final int RIL_E_CANCELLED_VALUE = 8;
    /**
     * <pre>
     * data ops are not allowed during voice call on a Class C GPRS device
     * </pre>
     *
     * <code>RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL = 9;</code>
     */
    public static final int RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL_VALUE = 9;
    /**
     * <pre>
     * data ops are not allowed before device registers in network
     * </pre>
     *
     * <code>RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW = 10;</code>
     */
    public static final int RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW_VALUE = 10;
    /**
     * <pre>
     * fail to send sms and need retry
     * </pre>
     *
     * <code>RIL_E_SMS_SEND_FAIL_RETRY = 11;</code>
     */
    public static final int RIL_E_SMS_SEND_FAIL_RETRY_VALUE = 11;
    /**
     * <pre>
     * fail to set the location where CDMA subscription shall be retrieved
     * because of SIM or RUIM card absent
     * </pre>
     *
     * <code>RIL_E_SIM_ABSENT = 12;</code>
     */
    public static final int RIL_E_SIM_ABSENT_VALUE = 12;
    /**
     * <pre>
     * fail to find CDMA subscription from specified location
     * </pre>
     *
     * <code>RIL_E_SUBSCRIPTION_NOT_AVAILABLE = 13;</code>
     */
    public static final int RIL_E_SUBSCRIPTION_NOT_AVAILABLE_VALUE = 13;
    /**
     * <pre>
     * HW does not support preferred network type
     * </pre>
     *
     * <code>RIL_E_MODE_NOT_SUPPORTED = 14;</code>
     */
    public static final int RIL_E_MODE_NOT_SUPPORTED_VALUE = 14;
    /**
     * <pre>
     * command failed because recipient is not on FDN list
     * </pre>
     *
     * <code>RIL_E_FDN_CHECK_FAILURE = 15;</code>
     */
    public static final int RIL_E_FDN_CHECK_FAILURE_VALUE = 15;
    /**
     * <pre>
     * network selection failed due to illegal SIM or ME
     * </pre>
     *
     * <code>RIL_E_ILLEGAL_SIM_OR_ME = 16;</code>
     */
    public static final int RIL_E_ILLEGAL_SIM_OR_ME_VALUE = 16;
    /**
     * <pre>
     * no logical channel available
     * </pre>
     *
     * <code>RIL_E_MISSING_RESOURCE = 17;</code>
     */
    public static final int RIL_E_MISSING_RESOURCE_VALUE = 17;
    /**
     * <pre>
     * application not found on SIM
     * </pre>
     *
     * <code>RIL_E_NO_SUCH_ELEMENT = 18;</code>
     */
    public static final int RIL_E_NO_SUCH_ELEMENT_VALUE = 18;
    /**
     * <pre>
     * DIAL request modified to USSD
     * </pre>
     *
     * <code>RIL_E_DIAL_MODIFIED_TO_USSD = 19;</code>
     */
    public static final int RIL_E_DIAL_MODIFIED_TO_USSD_VALUE = 19;
    /**
     * <pre>
     * DIAL request modified to SS
     * </pre>
     *
     * <code>RIL_E_DIAL_MODIFIED_TO_SS = 20;</code>
     */
    public static final int RIL_E_DIAL_MODIFIED_TO_SS_VALUE = 20;
    /**
     * <pre>
     * DIAL request modified to DIAL with different data
     * </pre>
     *
     * <code>RIL_E_DIAL_MODIFIED_TO_DIAL = 21;</code>
     */
    public static final int RIL_E_DIAL_MODIFIED_TO_DIAL_VALUE = 21;
    /**
     * <pre>
     * USSD request modified to DIAL
     * </pre>
     *
     * <code>RIL_E_USSD_MODIFIED_TO_DIAL = 22;</code>
     */
    public static final int RIL_E_USSD_MODIFIED_TO_DIAL_VALUE = 22;
    /**
     * <pre>
     * USSD request modified to SS
     * </pre>
     *
     * <code>RIL_E_USSD_MODIFIED_TO_SS = 23;</code>
     */
    public static final int RIL_E_USSD_MODIFIED_TO_SS_VALUE = 23;
    /**
     * <pre>
     * USSD request modified to different USSD request
     * </pre>
     *
     * <code>RIL_E_USSD_MODIFIED_TO_USSD = 24;</code>
     */
    public static final int RIL_E_USSD_MODIFIED_TO_USSD_VALUE = 24;
    /**
     * <pre>
     * SS request modified to DIAL
     * </pre>
     *
     * <code>RIL_E_SS_MODIFIED_TO_DIAL = 25;</code>
     */
    public static final int RIL_E_SS_MODIFIED_TO_DIAL_VALUE = 25;
    /**
     * <pre>
     * SS request modified to USSD
     * </pre>
     *
     * <code>RIL_E_SS_MODIFIED_TO_USSD = 26;</code>
     */
    public static final int RIL_E_SS_MODIFIED_TO_USSD_VALUE = 26;
    /**
     * <pre>
     * Subscription not supported by RIL
     * </pre>
     *
     * <code>RIL_E_SUBSCRIPTION_NOT_SUPPORTED = 27;</code>
     */
    public static final int RIL_E_SUBSCRIPTION_NOT_SUPPORTED_VALUE = 27;
    /**
     * <pre>
     * SS request modified to different SS request
     * </pre>
     *
     * <code>RIL_E_SS_MODIFIED_TO_SS = 28;</code>
     */
    public static final int RIL_E_SS_MODIFIED_TO_SS_VALUE = 28;
    /**
     * <pre>
     * LCE service not supported(36 in RILConstants.java. This is a mistake.
     * The value should be off by 1 ideally.)
     * </pre>
     *
     * <code>RIL_E_LCE_NOT_SUPPORTED = 36 [deprecated = true];</code>
     */
    public static final int RIL_E_LCE_NOT_SUPPORTED_VALUE = 36;
    /**
     * <pre>
     * LCE service not supported
     * </pre>
     *
     * <code>RIL_E_LCE_NOT_SUPPORTED_NEW = 37;</code>
     */
    public static final int RIL_E_LCE_NOT_SUPPORTED_NEW_VALUE = 37;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RilErrno valueOf(int value) {
      return forNumber(value);
    }

    public static RilErrno forNumber(int value) {
      switch (value) {
        case 0: return RIL_E_UNKNOWN;
        case 1: return RIL_E_SUCCESS;
        case 2: return RIL_E_RADIO_NOT_AVAILABLE;
        case 3: return RIL_E_GENERIC_FAILURE;
        case 4: return RIL_E_PASSWORD_INCORRECT;
        case 5: return RIL_E_SIM_PIN2;
        case 6: return RIL_E_SIM_PUK2;
        case 7: return RIL_E_REQUEST_NOT_SUPPORTED;
        case 8: return RIL_E_CANCELLED;
        case 9: return RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL;
        case 10: return RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW;
        case 11: return RIL_E_SMS_SEND_FAIL_RETRY;
        case 12: return RIL_E_SIM_ABSENT;
        case 13: return RIL_E_SUBSCRIPTION_NOT_AVAILABLE;
        case 14: return RIL_E_MODE_NOT_SUPPORTED;
        case 15: return RIL_E_FDN_CHECK_FAILURE;
        case 16: return RIL_E_ILLEGAL_SIM_OR_ME;
        case 17: return RIL_E_MISSING_RESOURCE;
        case 18: return RIL_E_NO_SUCH_ELEMENT;
        case 19: return RIL_E_DIAL_MODIFIED_TO_USSD;
        case 20: return RIL_E_DIAL_MODIFIED_TO_SS;
        case 21: return RIL_E_DIAL_MODIFIED_TO_DIAL;
        case 22: return RIL_E_USSD_MODIFIED_TO_DIAL;
        case 23: return RIL_E_USSD_MODIFIED_TO_SS;
        case 24: return RIL_E_USSD_MODIFIED_TO_USSD;
        case 25: return RIL_E_SS_MODIFIED_TO_DIAL;
        case 26: return RIL_E_SS_MODIFIED_TO_USSD;
        case 27: return RIL_E_SUBSCRIPTION_NOT_SUPPORTED;
        case 28: return RIL_E_SS_MODIFIED_TO_SS;
        case 36: return RIL_E_LCE_NOT_SUPPORTED;
        case 37: return RIL_E_LCE_NOT_SUPPORTED_NEW;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RilErrno>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        RilErrno> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RilErrno>() {
            public RilErrno findValueByNumber(int number) {
              return RilErrno.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.getDescriptor().getEnumTypes().get(1);
    }

    private static final RilErrno[] VALUES = values();

    public static RilErrno valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private RilErrno(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:clearcut.connectivity.RilErrno)
  }

  /**
   * <pre>
   * PDP_type values in TS 27.007 section 10.1.1.
   * </pre>
   *
   * Protobuf enum {@code clearcut.connectivity.PdpType}
   */
  public enum PdpType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * type is unknown.
     * </pre>
     *
     * <code>PDP_UNKNOWN = 0;</code>
     */
    PDP_UNKNOWN(0),
    /**
     * <code>PDP_TYPE_IP = 1;</code>
     */
    PDP_TYPE_IP(1),
    /**
     * <code>PDP_TYPE_IPV6 = 2;</code>
     */
    PDP_TYPE_IPV6(2),
    /**
     * <code>PDP_TYPE_IPV4V6 = 3;</code>
     */
    PDP_TYPE_IPV4V6(3),
    /**
     * <code>PDP_TYPE_PPP = 4;</code>
     */
    PDP_TYPE_PPP(4),
    ;

    /**
     * <pre>
     * type is unknown.
     * </pre>
     *
     * <code>PDP_UNKNOWN = 0;</code>
     */
    public static final int PDP_UNKNOWN_VALUE = 0;
    /**
     * <code>PDP_TYPE_IP = 1;</code>
     */
    public static final int PDP_TYPE_IP_VALUE = 1;
    /**
     * <code>PDP_TYPE_IPV6 = 2;</code>
     */
    public static final int PDP_TYPE_IPV6_VALUE = 2;
    /**
     * <code>PDP_TYPE_IPV4V6 = 3;</code>
     */
    public static final int PDP_TYPE_IPV4V6_VALUE = 3;
    /**
     * <code>PDP_TYPE_PPP = 4;</code>
     */
    public static final int PDP_TYPE_PPP_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PdpType valueOf(int value) {
      return forNumber(value);
    }

    public static PdpType forNumber(int value) {
      switch (value) {
        case 0: return PDP_UNKNOWN;
        case 1: return PDP_TYPE_IP;
        case 2: return PDP_TYPE_IPV6;
        case 3: return PDP_TYPE_IPV4V6;
        case 4: return PDP_TYPE_PPP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PdpType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PdpType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PdpType>() {
            public PdpType findValueByNumber(int number) {
              return PdpType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.getDescriptor().getEnumTypes().get(2);
    }

    private static final PdpType[] VALUES = values();

    public static PdpType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PdpType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:clearcut.connectivity.PdpType)
  }

  /**
   * Protobuf enum {@code clearcut.connectivity.TimeInterval}
   */
  public enum TimeInterval
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TI_UNKNOWN = 0;</code>
     */
    TI_UNKNOWN(0),
    /**
     * <code>TI_10_MILLIS = 1;</code>
     */
    TI_10_MILLIS(1),
    /**
     * <code>TI_20_MILLIS = 2;</code>
     */
    TI_20_MILLIS(2),
    /**
     * <code>TI_50_MILLIS = 3;</code>
     */
    TI_50_MILLIS(3),
    /**
     * <code>TI_100_MILLIS = 4;</code>
     */
    TI_100_MILLIS(4),
    /**
     * <code>TI_200_MILLIS = 5;</code>
     */
    TI_200_MILLIS(5),
    /**
     * <code>TI_500_MILLIS = 6;</code>
     */
    TI_500_MILLIS(6),
    /**
     * <code>TI_1_SEC = 7;</code>
     */
    TI_1_SEC(7),
    /**
     * <code>TI_2_SEC = 8;</code>
     */
    TI_2_SEC(8),
    /**
     * <code>TI_5_SEC = 9;</code>
     */
    TI_5_SEC(9),
    /**
     * <code>TI_10_SEC = 10;</code>
     */
    TI_10_SEC(10),
    /**
     * <code>TI_30_SEC = 11;</code>
     */
    TI_30_SEC(11),
    /**
     * <code>TI_1_MINUTE = 12;</code>
     */
    TI_1_MINUTE(12),
    /**
     * <code>TI_3_MINUTES = 13;</code>
     */
    TI_3_MINUTES(13),
    /**
     * <code>TI_10_MINUTES = 14;</code>
     */
    TI_10_MINUTES(14),
    /**
     * <code>TI_30_MINUTES = 15;</code>
     */
    TI_30_MINUTES(15),
    /**
     * <code>TI_1_HOUR = 16;</code>
     */
    TI_1_HOUR(16),
    /**
     * <code>TI_2_HOURS = 17;</code>
     */
    TI_2_HOURS(17),
    /**
     * <code>TI_4_HOURS = 18;</code>
     */
    TI_4_HOURS(18),
    /**
     * <code>TI_MANY_HOURS = 19;</code>
     */
    TI_MANY_HOURS(19),
    ;

    /**
     * <code>TI_UNKNOWN = 0;</code>
     */
    public static final int TI_UNKNOWN_VALUE = 0;
    /**
     * <code>TI_10_MILLIS = 1;</code>
     */
    public static final int TI_10_MILLIS_VALUE = 1;
    /**
     * <code>TI_20_MILLIS = 2;</code>
     */
    public static final int TI_20_MILLIS_VALUE = 2;
    /**
     * <code>TI_50_MILLIS = 3;</code>
     */
    public static final int TI_50_MILLIS_VALUE = 3;
    /**
     * <code>TI_100_MILLIS = 4;</code>
     */
    public static final int TI_100_MILLIS_VALUE = 4;
    /**
     * <code>TI_200_MILLIS = 5;</code>
     */
    public static final int TI_200_MILLIS_VALUE = 5;
    /**
     * <code>TI_500_MILLIS = 6;</code>
     */
    public static final int TI_500_MILLIS_VALUE = 6;
    /**
     * <code>TI_1_SEC = 7;</code>
     */
    public static final int TI_1_SEC_VALUE = 7;
    /**
     * <code>TI_2_SEC = 8;</code>
     */
    public static final int TI_2_SEC_VALUE = 8;
    /**
     * <code>TI_5_SEC = 9;</code>
     */
    public static final int TI_5_SEC_VALUE = 9;
    /**
     * <code>TI_10_SEC = 10;</code>
     */
    public static final int TI_10_SEC_VALUE = 10;
    /**
     * <code>TI_30_SEC = 11;</code>
     */
    public static final int TI_30_SEC_VALUE = 11;
    /**
     * <code>TI_1_MINUTE = 12;</code>
     */
    public static final int TI_1_MINUTE_VALUE = 12;
    /**
     * <code>TI_3_MINUTES = 13;</code>
     */
    public static final int TI_3_MINUTES_VALUE = 13;
    /**
     * <code>TI_10_MINUTES = 14;</code>
     */
    public static final int TI_10_MINUTES_VALUE = 14;
    /**
     * <code>TI_30_MINUTES = 15;</code>
     */
    public static final int TI_30_MINUTES_VALUE = 15;
    /**
     * <code>TI_1_HOUR = 16;</code>
     */
    public static final int TI_1_HOUR_VALUE = 16;
    /**
     * <code>TI_2_HOURS = 17;</code>
     */
    public static final int TI_2_HOURS_VALUE = 17;
    /**
     * <code>TI_4_HOURS = 18;</code>
     */
    public static final int TI_4_HOURS_VALUE = 18;
    /**
     * <code>TI_MANY_HOURS = 19;</code>
     */
    public static final int TI_MANY_HOURS_VALUE = 19;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TimeInterval valueOf(int value) {
      return forNumber(value);
    }

    public static TimeInterval forNumber(int value) {
      switch (value) {
        case 0: return TI_UNKNOWN;
        case 1: return TI_10_MILLIS;
        case 2: return TI_20_MILLIS;
        case 3: return TI_50_MILLIS;
        case 4: return TI_100_MILLIS;
        case 5: return TI_200_MILLIS;
        case 6: return TI_500_MILLIS;
        case 7: return TI_1_SEC;
        case 8: return TI_2_SEC;
        case 9: return TI_5_SEC;
        case 10: return TI_10_SEC;
        case 11: return TI_30_SEC;
        case 12: return TI_1_MINUTE;
        case 13: return TI_3_MINUTES;
        case 14: return TI_10_MINUTES;
        case 15: return TI_30_MINUTES;
        case 16: return TI_1_HOUR;
        case 17: return TI_2_HOURS;
        case 18: return TI_4_HOURS;
        case 19: return TI_MANY_HOURS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TimeInterval>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TimeInterval> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TimeInterval>() {
            public TimeInterval findValueByNumber(int number) {
              return TimeInterval.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.getDescriptor().getEnumTypes().get(3);
    }

    private static final TimeInterval[] VALUES = values();

    public static TimeInterval valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TimeInterval(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:clearcut.connectivity.TimeInterval)
  }

  public interface TelephonyLogOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clearcut.connectivity.TelephonyLog)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Events logged by telephony services
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
     */
    java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyEvent> 
        getEventsList();
    /**
     * <pre>
     * Events logged by telephony services
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyEvent getEvents(int index);
    /**
     * <pre>
     * Events logged by telephony services
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
     */
    int getEventsCount();
    /**
     * <pre>
     * Events logged by telephony services
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
     */
    java.util.List<? extends com.android.internal.telephony.TelephonyProto.TelephonyEventOrBuilder> 
        getEventsOrBuilderList();
    /**
     * <pre>
     * Events logged by telephony services
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyEventOrBuilder getEventsOrBuilder(
        int index);

    /**
     * <pre>
     * Voice/Video call sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
     */
    java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession> 
        getCallSessionsList();
    /**
     * <pre>
     * Voice/Video call sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyCallSession getCallSessions(int index);
    /**
     * <pre>
     * Voice/Video call sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
     */
    int getCallSessionsCount();
    /**
     * <pre>
     * Voice/Video call sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
     */
    java.util.List<? extends com.android.internal.telephony.TelephonyProto.TelephonyCallSessionOrBuilder> 
        getCallSessionsOrBuilderList();
    /**
     * <pre>
     * Voice/Video call sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyCallSessionOrBuilder getCallSessionsOrBuilder(
        int index);

    /**
     * <pre>
     * Send/Receive SMS sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
     */
    java.util.List<com.android.internal.telephony.TelephonyProto.SmsSession> 
        getSmsSessionsList();
    /**
     * <pre>
     * Send/Receive SMS sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
     */
    com.android.internal.telephony.TelephonyProto.SmsSession getSmsSessions(int index);
    /**
     * <pre>
     * Send/Receive SMS sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
     */
    int getSmsSessionsCount();
    /**
     * <pre>
     * Send/Receive SMS sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
     */
    java.util.List<? extends com.android.internal.telephony.TelephonyProto.SmsSessionOrBuilder> 
        getSmsSessionsOrBuilderList();
    /**
     * <pre>
     * Send/Receive SMS sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
     */
    com.android.internal.telephony.TelephonyProto.SmsSessionOrBuilder getSmsSessionsOrBuilder(
        int index);

    /**
     * <pre>
     * Telephony Histograms
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
     */
    java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyHistogram> 
        getHistogramsList();
    /**
     * <pre>
     * Telephony Histograms
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyHistogram getHistograms(int index);
    /**
     * <pre>
     * Telephony Histograms
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
     */
    int getHistogramsCount();
    /**
     * <pre>
     * Telephony Histograms
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
     */
    java.util.List<? extends com.android.internal.telephony.TelephonyProto.TelephonyHistogramOrBuilder> 
        getHistogramsOrBuilderList();
    /**
     * <pre>
     * Telephony Histograms
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyHistogramOrBuilder getHistogramsOrBuilder(
        int index);

    /**
     * <pre>
     * Indicating some telephony events are dropped
     * </pre>
     *
     * <code>optional bool events_dropped = 5;</code>
     */
    boolean hasEventsDropped();
    /**
     * <pre>
     * Indicating some telephony events are dropped
     * </pre>
     *
     * <code>optional bool events_dropped = 5;</code>
     */
    boolean getEventsDropped();

    /**
     * <pre>
     * The start time of this log
     * </pre>
     *
     * <code>optional .clearcut.connectivity.Time start_time = 6;</code>
     */
    boolean hasStartTime();
    /**
     * <pre>
     * The start time of this log
     * </pre>
     *
     * <code>optional .clearcut.connectivity.Time start_time = 6;</code>
     */
    com.android.internal.telephony.TelephonyProto.Time getStartTime();
    /**
     * <pre>
     * The start time of this log
     * </pre>
     *
     * <code>optional .clearcut.connectivity.Time start_time = 6;</code>
     */
    com.android.internal.telephony.TelephonyProto.TimeOrBuilder getStartTimeOrBuilder();

    /**
     * <pre>
     * The end time of this log
     * </pre>
     *
     * <code>optional .clearcut.connectivity.Time end_time = 7;</code>
     */
    boolean hasEndTime();
    /**
     * <pre>
     * The end time of this log
     * </pre>
     *
     * <code>optional .clearcut.connectivity.Time end_time = 7;</code>
     */
    com.android.internal.telephony.TelephonyProto.Time getEndTime();
    /**
     * <pre>
     * The end time of this log
     * </pre>
     *
     * <code>optional .clearcut.connectivity.Time end_time = 7;</code>
     */
    com.android.internal.telephony.TelephonyProto.TimeOrBuilder getEndTimeOrBuilder();
  }
  /**
   * <pre>
   * The information about Telephony events.
   * </pre>
   *
   * Protobuf type {@code clearcut.connectivity.TelephonyLog}
   */
  public  static final class TelephonyLog extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clearcut.connectivity.TelephonyLog)
      TelephonyLogOrBuilder {
    // Use TelephonyLog.newBuilder() to construct.
    private TelephonyLog(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TelephonyLog() {
      events_ = java.util.Collections.emptyList();
      callSessions_ = java.util.Collections.emptyList();
      smsSessions_ = java.util.Collections.emptyList();
      histograms_ = java.util.Collections.emptyList();
      eventsDropped_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TelephonyLog(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                events_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.TelephonyEvent>();
                mutable_bitField0_ |= 0x00000001;
              }
              events_.add(
                  input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonyEvent.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                callSessions_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.TelephonyCallSession>();
                mutable_bitField0_ |= 0x00000002;
              }
              callSessions_.add(
                  input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                smsSessions_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.SmsSession>();
                mutable_bitField0_ |= 0x00000004;
              }
              smsSessions_.add(
                  input.readMessage(com.android.internal.telephony.TelephonyProto.SmsSession.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                histograms_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.TelephonyHistogram>();
                mutable_bitField0_ |= 0x00000008;
              }
              histograms_.add(
                  input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonyHistogram.PARSER, extensionRegistry));
              break;
            }
            case 40: {
              bitField0_ |= 0x00000001;
              eventsDropped_ = input.readBool();
              break;
            }
            case 50: {
              com.android.internal.telephony.TelephonyProto.Time.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = startTime_.toBuilder();
              }
              startTime_ = input.readMessage(com.android.internal.telephony.TelephonyProto.Time.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(startTime_);
                startTime_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 58: {
              com.android.internal.telephony.TelephonyProto.Time.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = endTime_.toBuilder();
              }
              endTime_ = input.readMessage(com.android.internal.telephony.TelephonyProto.Time.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(endTime_);
                endTime_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          events_ = java.util.Collections.unmodifiableList(events_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          callSessions_ = java.util.Collections.unmodifiableList(callSessions_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          smsSessions_ = java.util.Collections.unmodifiableList(smsSessions_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          histograms_ = java.util.Collections.unmodifiableList(histograms_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyLog_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyLog_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.internal.telephony.TelephonyProto.TelephonyLog.class, com.android.internal.telephony.TelephonyProto.TelephonyLog.Builder.class);
    }

    private int bitField0_;
    public static final int EVENTS_FIELD_NUMBER = 1;
    private java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyEvent> events_;
    /**
     * <pre>
     * Events logged by telephony services
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
     */
    public java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyEvent> getEventsList() {
      return events_;
    }
    /**
     * <pre>
     * Events logged by telephony services
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
     */
    public java.util.List<? extends com.android.internal.telephony.TelephonyProto.TelephonyEventOrBuilder> 
        getEventsOrBuilderList() {
      return events_;
    }
    /**
     * <pre>
     * Events logged by telephony services
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
     */
    public int getEventsCount() {
      return events_.size();
    }
    /**
     * <pre>
     * Events logged by telephony services
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyEvent getEvents(int index) {
      return events_.get(index);
    }
    /**
     * <pre>
     * Events logged by telephony services
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyEventOrBuilder getEventsOrBuilder(
        int index) {
      return events_.get(index);
    }

    public static final int CALL_SESSIONS_FIELD_NUMBER = 2;
    private java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession> callSessions_;
    /**
     * <pre>
     * Voice/Video call sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
     */
    public java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession> getCallSessionsList() {
      return callSessions_;
    }
    /**
     * <pre>
     * Voice/Video call sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
     */
    public java.util.List<? extends com.android.internal.telephony.TelephonyProto.TelephonyCallSessionOrBuilder> 
        getCallSessionsOrBuilderList() {
      return callSessions_;
    }
    /**
     * <pre>
     * Voice/Video call sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
     */
    public int getCallSessionsCount() {
      return callSessions_.size();
    }
    /**
     * <pre>
     * Voice/Video call sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyCallSession getCallSessions(int index) {
      return callSessions_.get(index);
    }
    /**
     * <pre>
     * Voice/Video call sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyCallSessionOrBuilder getCallSessionsOrBuilder(
        int index) {
      return callSessions_.get(index);
    }

    public static final int SMS_SESSIONS_FIELD_NUMBER = 3;
    private java.util.List<com.android.internal.telephony.TelephonyProto.SmsSession> smsSessions_;
    /**
     * <pre>
     * Send/Receive SMS sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
     */
    public java.util.List<com.android.internal.telephony.TelephonyProto.SmsSession> getSmsSessionsList() {
      return smsSessions_;
    }
    /**
     * <pre>
     * Send/Receive SMS sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
     */
    public java.util.List<? extends com.android.internal.telephony.TelephonyProto.SmsSessionOrBuilder> 
        getSmsSessionsOrBuilderList() {
      return smsSessions_;
    }
    /**
     * <pre>
     * Send/Receive SMS sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
     */
    public int getSmsSessionsCount() {
      return smsSessions_.size();
    }
    /**
     * <pre>
     * Send/Receive SMS sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
     */
    public com.android.internal.telephony.TelephonyProto.SmsSession getSmsSessions(int index) {
      return smsSessions_.get(index);
    }
    /**
     * <pre>
     * Send/Receive SMS sessions
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
     */
    public com.android.internal.telephony.TelephonyProto.SmsSessionOrBuilder getSmsSessionsOrBuilder(
        int index) {
      return smsSessions_.get(index);
    }

    public static final int HISTOGRAMS_FIELD_NUMBER = 4;
    private java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyHistogram> histograms_;
    /**
     * <pre>
     * Telephony Histograms
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
     */
    public java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyHistogram> getHistogramsList() {
      return histograms_;
    }
    /**
     * <pre>
     * Telephony Histograms
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
     */
    public java.util.List<? extends com.android.internal.telephony.TelephonyProto.TelephonyHistogramOrBuilder> 
        getHistogramsOrBuilderList() {
      return histograms_;
    }
    /**
     * <pre>
     * Telephony Histograms
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
     */
    public int getHistogramsCount() {
      return histograms_.size();
    }
    /**
     * <pre>
     * Telephony Histograms
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyHistogram getHistograms(int index) {
      return histograms_.get(index);
    }
    /**
     * <pre>
     * Telephony Histograms
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyHistogramOrBuilder getHistogramsOrBuilder(
        int index) {
      return histograms_.get(index);
    }

    public static final int EVENTS_DROPPED_FIELD_NUMBER = 5;
    private boolean eventsDropped_;
    /**
     * <pre>
     * Indicating some telephony events are dropped
     * </pre>
     *
     * <code>optional bool events_dropped = 5;</code>
     */
    public boolean hasEventsDropped() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Indicating some telephony events are dropped
     * </pre>
     *
     * <code>optional bool events_dropped = 5;</code>
     */
    public boolean getEventsDropped() {
      return eventsDropped_;
    }

    public static final int START_TIME_FIELD_NUMBER = 6;
    private com.android.internal.telephony.TelephonyProto.Time startTime_;
    /**
     * <pre>
     * The start time of this log
     * </pre>
     *
     * <code>optional .clearcut.connectivity.Time start_time = 6;</code>
     */
    public boolean hasStartTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The start time of this log
     * </pre>
     *
     * <code>optional .clearcut.connectivity.Time start_time = 6;</code>
     */
    public com.android.internal.telephony.TelephonyProto.Time getStartTime() {
      return startTime_ == null ? com.android.internal.telephony.TelephonyProto.Time.getDefaultInstance() : startTime_;
    }
    /**
     * <pre>
     * The start time of this log
     * </pre>
     *
     * <code>optional .clearcut.connectivity.Time start_time = 6;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TimeOrBuilder getStartTimeOrBuilder() {
      return startTime_ == null ? com.android.internal.telephony.TelephonyProto.Time.getDefaultInstance() : startTime_;
    }

    public static final int END_TIME_FIELD_NUMBER = 7;
    private com.android.internal.telephony.TelephonyProto.Time endTime_;
    /**
     * <pre>
     * The end time of this log
     * </pre>
     *
     * <code>optional .clearcut.connectivity.Time end_time = 7;</code>
     */
    public boolean hasEndTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * The end time of this log
     * </pre>
     *
     * <code>optional .clearcut.connectivity.Time end_time = 7;</code>
     */
    public com.android.internal.telephony.TelephonyProto.Time getEndTime() {
      return endTime_ == null ? com.android.internal.telephony.TelephonyProto.Time.getDefaultInstance() : endTime_;
    }
    /**
     * <pre>
     * The end time of this log
     * </pre>
     *
     * <code>optional .clearcut.connectivity.Time end_time = 7;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TimeOrBuilder getEndTimeOrBuilder() {
      return endTime_ == null ? com.android.internal.telephony.TelephonyProto.Time.getDefaultInstance() : endTime_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < events_.size(); i++) {
        output.writeMessage(1, events_.get(i));
      }
      for (int i = 0; i < callSessions_.size(); i++) {
        output.writeMessage(2, callSessions_.get(i));
      }
      for (int i = 0; i < smsSessions_.size(); i++) {
        output.writeMessage(3, smsSessions_.get(i));
      }
      for (int i = 0; i < histograms_.size(); i++) {
        output.writeMessage(4, histograms_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(5, eventsDropped_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(6, getStartTime());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(7, getEndTime());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < events_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, events_.get(i));
      }
      for (int i = 0; i < callSessions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, callSessions_.get(i));
      }
      for (int i = 0; i < smsSessions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, smsSessions_.get(i));
      }
      for (int i = 0; i < histograms_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, histograms_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, eventsDropped_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getStartTime());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getEndTime());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.internal.telephony.TelephonyProto.TelephonyLog)) {
        return super.equals(obj);
      }
      com.android.internal.telephony.TelephonyProto.TelephonyLog other = (com.android.internal.telephony.TelephonyProto.TelephonyLog) obj;

      boolean result = true;
      result = result && getEventsList()
          .equals(other.getEventsList());
      result = result && getCallSessionsList()
          .equals(other.getCallSessionsList());
      result = result && getSmsSessionsList()
          .equals(other.getSmsSessionsList());
      result = result && getHistogramsList()
          .equals(other.getHistogramsList());
      result = result && (hasEventsDropped() == other.hasEventsDropped());
      if (hasEventsDropped()) {
        result = result && (getEventsDropped()
            == other.getEventsDropped());
      }
      result = result && (hasStartTime() == other.hasStartTime());
      if (hasStartTime()) {
        result = result && getStartTime()
            .equals(other.getStartTime());
      }
      result = result && (hasEndTime() == other.hasEndTime());
      if (hasEndTime()) {
        result = result && getEndTime()
            .equals(other.getEndTime());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getEventsCount() > 0) {
        hash = (37 * hash) + EVENTS_FIELD_NUMBER;
        hash = (53 * hash) + getEventsList().hashCode();
      }
      if (getCallSessionsCount() > 0) {
        hash = (37 * hash) + CALL_SESSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getCallSessionsList().hashCode();
      }
      if (getSmsSessionsCount() > 0) {
        hash = (37 * hash) + SMS_SESSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getSmsSessionsList().hashCode();
      }
      if (getHistogramsCount() > 0) {
        hash = (37 * hash) + HISTOGRAMS_FIELD_NUMBER;
        hash = (53 * hash) + getHistogramsList().hashCode();
      }
      if (hasEventsDropped()) {
        hash = (37 * hash) + EVENTS_DROPPED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEventsDropped());
      }
      if (hasStartTime()) {
        hash = (37 * hash) + START_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getStartTime().hashCode();
      }
      if (hasEndTime()) {
        hash = (37 * hash) + END_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getEndTime().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.internal.telephony.TelephonyProto.TelephonyLog parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyLog parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyLog parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyLog parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyLog parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyLog parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyLog parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyLog parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyLog parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyLog parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.TelephonyLog prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The information about Telephony events.
     * </pre>
     *
     * Protobuf type {@code clearcut.connectivity.TelephonyLog}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clearcut.connectivity.TelephonyLog)
        com.android.internal.telephony.TelephonyProto.TelephonyLogOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyLog_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyLog_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.TelephonyLog.class, com.android.internal.telephony.TelephonyProto.TelephonyLog.Builder.class);
      }

      // Construct using com.android.internal.telephony.TelephonyProto.TelephonyLog.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getEventsFieldBuilder();
          getCallSessionsFieldBuilder();
          getSmsSessionsFieldBuilder();
          getHistogramsFieldBuilder();
          getStartTimeFieldBuilder();
          getEndTimeFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (eventsBuilder_ == null) {
          events_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          eventsBuilder_.clear();
        }
        if (callSessionsBuilder_ == null) {
          callSessions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          callSessionsBuilder_.clear();
        }
        if (smsSessionsBuilder_ == null) {
          smsSessions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          smsSessionsBuilder_.clear();
        }
        if (histogramsBuilder_ == null) {
          histograms_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          histogramsBuilder_.clear();
        }
        eventsDropped_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (startTimeBuilder_ == null) {
          startTime_ = null;
        } else {
          startTimeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (endTimeBuilder_ == null) {
          endTime_ = null;
        } else {
          endTimeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyLog_descriptor;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyLog getDefaultInstanceForType() {
        return com.android.internal.telephony.TelephonyProto.TelephonyLog.getDefaultInstance();
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyLog build() {
        com.android.internal.telephony.TelephonyProto.TelephonyLog result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyLog buildPartial() {
        com.android.internal.telephony.TelephonyProto.TelephonyLog result = new com.android.internal.telephony.TelephonyProto.TelephonyLog(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (eventsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            events_ = java.util.Collections.unmodifiableList(events_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.events_ = events_;
        } else {
          result.events_ = eventsBuilder_.build();
        }
        if (callSessionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            callSessions_ = java.util.Collections.unmodifiableList(callSessions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.callSessions_ = callSessions_;
        } else {
          result.callSessions_ = callSessionsBuilder_.build();
        }
        if (smsSessionsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            smsSessions_ = java.util.Collections.unmodifiableList(smsSessions_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.smsSessions_ = smsSessions_;
        } else {
          result.smsSessions_ = smsSessionsBuilder_.build();
        }
        if (histogramsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            histograms_ = java.util.Collections.unmodifiableList(histograms_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.histograms_ = histograms_;
        } else {
          result.histograms_ = histogramsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000001;
        }
        result.eventsDropped_ = eventsDropped_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000002;
        }
        if (startTimeBuilder_ == null) {
          result.startTime_ = startTime_;
        } else {
          result.startTime_ = startTimeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000004;
        }
        if (endTimeBuilder_ == null) {
          result.endTime_ = endTime_;
        } else {
          result.endTime_ = endTimeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.internal.telephony.TelephonyProto.TelephonyLog) {
          return mergeFrom((com.android.internal.telephony.TelephonyProto.TelephonyLog)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.TelephonyLog other) {
        if (other == com.android.internal.telephony.TelephonyProto.TelephonyLog.getDefaultInstance()) return this;
        if (eventsBuilder_ == null) {
          if (!other.events_.isEmpty()) {
            if (events_.isEmpty()) {
              events_ = other.events_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureEventsIsMutable();
              events_.addAll(other.events_);
            }
            onChanged();
          }
        } else {
          if (!other.events_.isEmpty()) {
            if (eventsBuilder_.isEmpty()) {
              eventsBuilder_.dispose();
              eventsBuilder_ = null;
              events_ = other.events_;
              bitField0_ = (bitField0_ & ~0x00000001);
              eventsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getEventsFieldBuilder() : null;
            } else {
              eventsBuilder_.addAllMessages(other.events_);
            }
          }
        }
        if (callSessionsBuilder_ == null) {
          if (!other.callSessions_.isEmpty()) {
            if (callSessions_.isEmpty()) {
              callSessions_ = other.callSessions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCallSessionsIsMutable();
              callSessions_.addAll(other.callSessions_);
            }
            onChanged();
          }
        } else {
          if (!other.callSessions_.isEmpty()) {
            if (callSessionsBuilder_.isEmpty()) {
              callSessionsBuilder_.dispose();
              callSessionsBuilder_ = null;
              callSessions_ = other.callSessions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              callSessionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCallSessionsFieldBuilder() : null;
            } else {
              callSessionsBuilder_.addAllMessages(other.callSessions_);
            }
          }
        }
        if (smsSessionsBuilder_ == null) {
          if (!other.smsSessions_.isEmpty()) {
            if (smsSessions_.isEmpty()) {
              smsSessions_ = other.smsSessions_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureSmsSessionsIsMutable();
              smsSessions_.addAll(other.smsSessions_);
            }
            onChanged();
          }
        } else {
          if (!other.smsSessions_.isEmpty()) {
            if (smsSessionsBuilder_.isEmpty()) {
              smsSessionsBuilder_.dispose();
              smsSessionsBuilder_ = null;
              smsSessions_ = other.smsSessions_;
              bitField0_ = (bitField0_ & ~0x00000004);
              smsSessionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSmsSessionsFieldBuilder() : null;
            } else {
              smsSessionsBuilder_.addAllMessages(other.smsSessions_);
            }
          }
        }
        if (histogramsBuilder_ == null) {
          if (!other.histograms_.isEmpty()) {
            if (histograms_.isEmpty()) {
              histograms_ = other.histograms_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureHistogramsIsMutable();
              histograms_.addAll(other.histograms_);
            }
            onChanged();
          }
        } else {
          if (!other.histograms_.isEmpty()) {
            if (histogramsBuilder_.isEmpty()) {
              histogramsBuilder_.dispose();
              histogramsBuilder_ = null;
              histograms_ = other.histograms_;
              bitField0_ = (bitField0_ & ~0x00000008);
              histogramsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getHistogramsFieldBuilder() : null;
            } else {
              histogramsBuilder_.addAllMessages(other.histograms_);
            }
          }
        }
        if (other.hasEventsDropped()) {
          setEventsDropped(other.getEventsDropped());
        }
        if (other.hasStartTime()) {
          mergeStartTime(other.getStartTime());
        }
        if (other.hasEndTime()) {
          mergeEndTime(other.getEndTime());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.android.internal.telephony.TelephonyProto.TelephonyLog parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.android.internal.telephony.TelephonyProto.TelephonyLog) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyEvent> events_ =
        java.util.Collections.emptyList();
      private void ensureEventsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          events_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.TelephonyEvent>(events_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyEvent, com.android.internal.telephony.TelephonyProto.TelephonyEvent.Builder, com.android.internal.telephony.TelephonyProto.TelephonyEventOrBuilder> eventsBuilder_;

      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyEvent> getEventsList() {
        if (eventsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(events_);
        } else {
          return eventsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public int getEventsCount() {
        if (eventsBuilder_ == null) {
          return events_.size();
        } else {
          return eventsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent getEvents(int index) {
        if (eventsBuilder_ == null) {
          return events_.get(index);
        } else {
          return eventsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public Builder setEvents(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyEvent value) {
        if (eventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEventsIsMutable();
          events_.set(index, value);
          onChanged();
        } else {
          eventsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public Builder setEvents(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyEvent.Builder builderForValue) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.set(index, builderForValue.build());
          onChanged();
        } else {
          eventsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public Builder addEvents(com.android.internal.telephony.TelephonyProto.TelephonyEvent value) {
        if (eventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEventsIsMutable();
          events_.add(value);
          onChanged();
        } else {
          eventsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public Builder addEvents(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyEvent value) {
        if (eventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEventsIsMutable();
          events_.add(index, value);
          onChanged();
        } else {
          eventsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public Builder addEvents(
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.Builder builderForValue) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.add(builderForValue.build());
          onChanged();
        } else {
          eventsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public Builder addEvents(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyEvent.Builder builderForValue) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.add(index, builderForValue.build());
          onChanged();
        } else {
          eventsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public Builder addAllEvents(
          java.lang.Iterable<? extends com.android.internal.telephony.TelephonyProto.TelephonyEvent> values) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, events_);
          onChanged();
        } else {
          eventsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public Builder clearEvents() {
        if (eventsBuilder_ == null) {
          events_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          eventsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public Builder removeEvents(int index) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.remove(index);
          onChanged();
        } else {
          eventsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.Builder getEventsBuilder(
          int index) {
        return getEventsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEventOrBuilder getEventsOrBuilder(
          int index) {
        if (eventsBuilder_ == null) {
          return events_.get(index);  } else {
          return eventsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public java.util.List<? extends com.android.internal.telephony.TelephonyProto.TelephonyEventOrBuilder> 
           getEventsOrBuilderList() {
        if (eventsBuilder_ != null) {
          return eventsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(events_);
        }
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.Builder addEventsBuilder() {
        return getEventsFieldBuilder().addBuilder(
            com.android.internal.telephony.TelephonyProto.TelephonyEvent.getDefaultInstance());
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.Builder addEventsBuilder(
          int index) {
        return getEventsFieldBuilder().addBuilder(
            index, com.android.internal.telephony.TelephonyProto.TelephonyEvent.getDefaultInstance());
      }
      /**
       * <pre>
       * Events logged by telephony services
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyEvent events = 1;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyEvent.Builder> 
           getEventsBuilderList() {
        return getEventsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyEvent, com.android.internal.telephony.TelephonyProto.TelephonyEvent.Builder, com.android.internal.telephony.TelephonyProto.TelephonyEventOrBuilder> 
          getEventsFieldBuilder() {
        if (eventsBuilder_ == null) {
          eventsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.TelephonyEvent, com.android.internal.telephony.TelephonyProto.TelephonyEvent.Builder, com.android.internal.telephony.TelephonyProto.TelephonyEventOrBuilder>(
                  events_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          events_ = null;
        }
        return eventsBuilder_;
      }

      private java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession> callSessions_ =
        java.util.Collections.emptyList();
      private void ensureCallSessionsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          callSessions_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.TelephonyCallSession>(callSessions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Builder, com.android.internal.telephony.TelephonyProto.TelephonyCallSessionOrBuilder> callSessionsBuilder_;

      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession> getCallSessionsList() {
        if (callSessionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(callSessions_);
        } else {
          return callSessionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public int getCallSessionsCount() {
        if (callSessionsBuilder_ == null) {
          return callSessions_.size();
        } else {
          return callSessionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession getCallSessions(int index) {
        if (callSessionsBuilder_ == null) {
          return callSessions_.get(index);
        } else {
          return callSessionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public Builder setCallSessions(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyCallSession value) {
        if (callSessionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCallSessionsIsMutable();
          callSessions_.set(index, value);
          onChanged();
        } else {
          callSessionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public Builder setCallSessions(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Builder builderForValue) {
        if (callSessionsBuilder_ == null) {
          ensureCallSessionsIsMutable();
          callSessions_.set(index, builderForValue.build());
          onChanged();
        } else {
          callSessionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public Builder addCallSessions(com.android.internal.telephony.TelephonyProto.TelephonyCallSession value) {
        if (callSessionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCallSessionsIsMutable();
          callSessions_.add(value);
          onChanged();
        } else {
          callSessionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public Builder addCallSessions(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyCallSession value) {
        if (callSessionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCallSessionsIsMutable();
          callSessions_.add(index, value);
          onChanged();
        } else {
          callSessionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public Builder addCallSessions(
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Builder builderForValue) {
        if (callSessionsBuilder_ == null) {
          ensureCallSessionsIsMutable();
          callSessions_.add(builderForValue.build());
          onChanged();
        } else {
          callSessionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public Builder addCallSessions(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Builder builderForValue) {
        if (callSessionsBuilder_ == null) {
          ensureCallSessionsIsMutable();
          callSessions_.add(index, builderForValue.build());
          onChanged();
        } else {
          callSessionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public Builder addAllCallSessions(
          java.lang.Iterable<? extends com.android.internal.telephony.TelephonyProto.TelephonyCallSession> values) {
        if (callSessionsBuilder_ == null) {
          ensureCallSessionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, callSessions_);
          onChanged();
        } else {
          callSessionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public Builder clearCallSessions() {
        if (callSessionsBuilder_ == null) {
          callSessions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          callSessionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public Builder removeCallSessions(int index) {
        if (callSessionsBuilder_ == null) {
          ensureCallSessionsIsMutable();
          callSessions_.remove(index);
          onChanged();
        } else {
          callSessionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Builder getCallSessionsBuilder(
          int index) {
        return getCallSessionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSessionOrBuilder getCallSessionsOrBuilder(
          int index) {
        if (callSessionsBuilder_ == null) {
          return callSessions_.get(index);  } else {
          return callSessionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public java.util.List<? extends com.android.internal.telephony.TelephonyProto.TelephonyCallSessionOrBuilder> 
           getCallSessionsOrBuilderList() {
        if (callSessionsBuilder_ != null) {
          return callSessionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(callSessions_);
        }
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Builder addCallSessionsBuilder() {
        return getCallSessionsFieldBuilder().addBuilder(
            com.android.internal.telephony.TelephonyProto.TelephonyCallSession.getDefaultInstance());
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Builder addCallSessionsBuilder(
          int index) {
        return getCallSessionsFieldBuilder().addBuilder(
            index, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.getDefaultInstance());
      }
      /**
       * <pre>
       * Voice/Video call sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Builder> 
           getCallSessionsBuilderList() {
        return getCallSessionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Builder, com.android.internal.telephony.TelephonyProto.TelephonyCallSessionOrBuilder> 
          getCallSessionsFieldBuilder() {
        if (callSessionsBuilder_ == null) {
          callSessionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.TelephonyCallSession, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Builder, com.android.internal.telephony.TelephonyProto.TelephonyCallSessionOrBuilder>(
                  callSessions_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          callSessions_ = null;
        }
        return callSessionsBuilder_;
      }

      private java.util.List<com.android.internal.telephony.TelephonyProto.SmsSession> smsSessions_ =
        java.util.Collections.emptyList();
      private void ensureSmsSessionsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          smsSessions_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.SmsSession>(smsSessions_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.SmsSession, com.android.internal.telephony.TelephonyProto.SmsSession.Builder, com.android.internal.telephony.TelephonyProto.SmsSessionOrBuilder> smsSessionsBuilder_;

      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.SmsSession> getSmsSessionsList() {
        if (smsSessionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(smsSessions_);
        } else {
          return smsSessionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public int getSmsSessionsCount() {
        if (smsSessionsBuilder_ == null) {
          return smsSessions_.size();
        } else {
          return smsSessionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.SmsSession getSmsSessions(int index) {
        if (smsSessionsBuilder_ == null) {
          return smsSessions_.get(index);
        } else {
          return smsSessionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public Builder setSmsSessions(
          int index, com.android.internal.telephony.TelephonyProto.SmsSession value) {
        if (smsSessionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSmsSessionsIsMutable();
          smsSessions_.set(index, value);
          onChanged();
        } else {
          smsSessionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public Builder setSmsSessions(
          int index, com.android.internal.telephony.TelephonyProto.SmsSession.Builder builderForValue) {
        if (smsSessionsBuilder_ == null) {
          ensureSmsSessionsIsMutable();
          smsSessions_.set(index, builderForValue.build());
          onChanged();
        } else {
          smsSessionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public Builder addSmsSessions(com.android.internal.telephony.TelephonyProto.SmsSession value) {
        if (smsSessionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSmsSessionsIsMutable();
          smsSessions_.add(value);
          onChanged();
        } else {
          smsSessionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public Builder addSmsSessions(
          int index, com.android.internal.telephony.TelephonyProto.SmsSession value) {
        if (smsSessionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSmsSessionsIsMutable();
          smsSessions_.add(index, value);
          onChanged();
        } else {
          smsSessionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public Builder addSmsSessions(
          com.android.internal.telephony.TelephonyProto.SmsSession.Builder builderForValue) {
        if (smsSessionsBuilder_ == null) {
          ensureSmsSessionsIsMutable();
          smsSessions_.add(builderForValue.build());
          onChanged();
        } else {
          smsSessionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public Builder addSmsSessions(
          int index, com.android.internal.telephony.TelephonyProto.SmsSession.Builder builderForValue) {
        if (smsSessionsBuilder_ == null) {
          ensureSmsSessionsIsMutable();
          smsSessions_.add(index, builderForValue.build());
          onChanged();
        } else {
          smsSessionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public Builder addAllSmsSessions(
          java.lang.Iterable<? extends com.android.internal.telephony.TelephonyProto.SmsSession> values) {
        if (smsSessionsBuilder_ == null) {
          ensureSmsSessionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, smsSessions_);
          onChanged();
        } else {
          smsSessionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public Builder clearSmsSessions() {
        if (smsSessionsBuilder_ == null) {
          smsSessions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          smsSessionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public Builder removeSmsSessions(int index) {
        if (smsSessionsBuilder_ == null) {
          ensureSmsSessionsIsMutable();
          smsSessions_.remove(index);
          onChanged();
        } else {
          smsSessionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.SmsSession.Builder getSmsSessionsBuilder(
          int index) {
        return getSmsSessionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.SmsSessionOrBuilder getSmsSessionsOrBuilder(
          int index) {
        if (smsSessionsBuilder_ == null) {
          return smsSessions_.get(index);  } else {
          return smsSessionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public java.util.List<? extends com.android.internal.telephony.TelephonyProto.SmsSessionOrBuilder> 
           getSmsSessionsOrBuilderList() {
        if (smsSessionsBuilder_ != null) {
          return smsSessionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(smsSessions_);
        }
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.SmsSession.Builder addSmsSessionsBuilder() {
        return getSmsSessionsFieldBuilder().addBuilder(
            com.android.internal.telephony.TelephonyProto.SmsSession.getDefaultInstance());
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.SmsSession.Builder addSmsSessionsBuilder(
          int index) {
        return getSmsSessionsFieldBuilder().addBuilder(
            index, com.android.internal.telephony.TelephonyProto.SmsSession.getDefaultInstance());
      }
      /**
       * <pre>
       * Send/Receive SMS sessions
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession sms_sessions = 3;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.SmsSession.Builder> 
           getSmsSessionsBuilderList() {
        return getSmsSessionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.SmsSession, com.android.internal.telephony.TelephonyProto.SmsSession.Builder, com.android.internal.telephony.TelephonyProto.SmsSessionOrBuilder> 
          getSmsSessionsFieldBuilder() {
        if (smsSessionsBuilder_ == null) {
          smsSessionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.SmsSession, com.android.internal.telephony.TelephonyProto.SmsSession.Builder, com.android.internal.telephony.TelephonyProto.SmsSessionOrBuilder>(
                  smsSessions_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          smsSessions_ = null;
        }
        return smsSessionsBuilder_;
      }

      private java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyHistogram> histograms_ =
        java.util.Collections.emptyList();
      private void ensureHistogramsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          histograms_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.TelephonyHistogram>(histograms_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyHistogram, com.android.internal.telephony.TelephonyProto.TelephonyHistogram.Builder, com.android.internal.telephony.TelephonyProto.TelephonyHistogramOrBuilder> histogramsBuilder_;

      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyHistogram> getHistogramsList() {
        if (histogramsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(histograms_);
        } else {
          return histogramsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public int getHistogramsCount() {
        if (histogramsBuilder_ == null) {
          return histograms_.size();
        } else {
          return histogramsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyHistogram getHistograms(int index) {
        if (histogramsBuilder_ == null) {
          return histograms_.get(index);
        } else {
          return histogramsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public Builder setHistograms(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyHistogram value) {
        if (histogramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistogramsIsMutable();
          histograms_.set(index, value);
          onChanged();
        } else {
          histogramsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public Builder setHistograms(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyHistogram.Builder builderForValue) {
        if (histogramsBuilder_ == null) {
          ensureHistogramsIsMutable();
          histograms_.set(index, builderForValue.build());
          onChanged();
        } else {
          histogramsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public Builder addHistograms(com.android.internal.telephony.TelephonyProto.TelephonyHistogram value) {
        if (histogramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistogramsIsMutable();
          histograms_.add(value);
          onChanged();
        } else {
          histogramsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public Builder addHistograms(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyHistogram value) {
        if (histogramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistogramsIsMutable();
          histograms_.add(index, value);
          onChanged();
        } else {
          histogramsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public Builder addHistograms(
          com.android.internal.telephony.TelephonyProto.TelephonyHistogram.Builder builderForValue) {
        if (histogramsBuilder_ == null) {
          ensureHistogramsIsMutable();
          histograms_.add(builderForValue.build());
          onChanged();
        } else {
          histogramsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public Builder addHistograms(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyHistogram.Builder builderForValue) {
        if (histogramsBuilder_ == null) {
          ensureHistogramsIsMutable();
          histograms_.add(index, builderForValue.build());
          onChanged();
        } else {
          histogramsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public Builder addAllHistograms(
          java.lang.Iterable<? extends com.android.internal.telephony.TelephonyProto.TelephonyHistogram> values) {
        if (histogramsBuilder_ == null) {
          ensureHistogramsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, histograms_);
          onChanged();
        } else {
          histogramsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public Builder clearHistograms() {
        if (histogramsBuilder_ == null) {
          histograms_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          histogramsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public Builder removeHistograms(int index) {
        if (histogramsBuilder_ == null) {
          ensureHistogramsIsMutable();
          histograms_.remove(index);
          onChanged();
        } else {
          histogramsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyHistogram.Builder getHistogramsBuilder(
          int index) {
        return getHistogramsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyHistogramOrBuilder getHistogramsOrBuilder(
          int index) {
        if (histogramsBuilder_ == null) {
          return histograms_.get(index);  } else {
          return histogramsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public java.util.List<? extends com.android.internal.telephony.TelephonyProto.TelephonyHistogramOrBuilder> 
           getHistogramsOrBuilderList() {
        if (histogramsBuilder_ != null) {
          return histogramsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(histograms_);
        }
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyHistogram.Builder addHistogramsBuilder() {
        return getHistogramsFieldBuilder().addBuilder(
            com.android.internal.telephony.TelephonyProto.TelephonyHistogram.getDefaultInstance());
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyHistogram.Builder addHistogramsBuilder(
          int index) {
        return getHistogramsFieldBuilder().addBuilder(
            index, com.android.internal.telephony.TelephonyProto.TelephonyHistogram.getDefaultInstance());
      }
      /**
       * <pre>
       * Telephony Histograms
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyHistogram.Builder> 
           getHistogramsBuilderList() {
        return getHistogramsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyHistogram, com.android.internal.telephony.TelephonyProto.TelephonyHistogram.Builder, com.android.internal.telephony.TelephonyProto.TelephonyHistogramOrBuilder> 
          getHistogramsFieldBuilder() {
        if (histogramsBuilder_ == null) {
          histogramsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.TelephonyHistogram, com.android.internal.telephony.TelephonyProto.TelephonyHistogram.Builder, com.android.internal.telephony.TelephonyProto.TelephonyHistogramOrBuilder>(
                  histograms_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          histograms_ = null;
        }
        return histogramsBuilder_;
      }

      private boolean eventsDropped_ ;
      /**
       * <pre>
       * Indicating some telephony events are dropped
       * </pre>
       *
       * <code>optional bool events_dropped = 5;</code>
       */
      public boolean hasEventsDropped() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * Indicating some telephony events are dropped
       * </pre>
       *
       * <code>optional bool events_dropped = 5;</code>
       */
      public boolean getEventsDropped() {
        return eventsDropped_;
      }
      /**
       * <pre>
       * Indicating some telephony events are dropped
       * </pre>
       *
       * <code>optional bool events_dropped = 5;</code>
       */
      public Builder setEventsDropped(boolean value) {
        bitField0_ |= 0x00000010;
        eventsDropped_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Indicating some telephony events are dropped
       * </pre>
       *
       * <code>optional bool events_dropped = 5;</code>
       */
      public Builder clearEventsDropped() {
        bitField0_ = (bitField0_ & ~0x00000010);
        eventsDropped_ = false;
        onChanged();
        return this;
      }

      private com.android.internal.telephony.TelephonyProto.Time startTime_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.Time, com.android.internal.telephony.TelephonyProto.Time.Builder, com.android.internal.telephony.TelephonyProto.TimeOrBuilder> startTimeBuilder_;
      /**
       * <pre>
       * The start time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time start_time = 6;</code>
       */
      public boolean hasStartTime() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * The start time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time start_time = 6;</code>
       */
      public com.android.internal.telephony.TelephonyProto.Time getStartTime() {
        if (startTimeBuilder_ == null) {
          return startTime_ == null ? com.android.internal.telephony.TelephonyProto.Time.getDefaultInstance() : startTime_;
        } else {
          return startTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The start time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time start_time = 6;</code>
       */
      public Builder setStartTime(com.android.internal.telephony.TelephonyProto.Time value) {
        if (startTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          startTime_ = value;
          onChanged();
        } else {
          startTimeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       * The start time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time start_time = 6;</code>
       */
      public Builder setStartTime(
          com.android.internal.telephony.TelephonyProto.Time.Builder builderForValue) {
        if (startTimeBuilder_ == null) {
          startTime_ = builderForValue.build();
          onChanged();
        } else {
          startTimeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       * The start time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time start_time = 6;</code>
       */
      public Builder mergeStartTime(com.android.internal.telephony.TelephonyProto.Time value) {
        if (startTimeBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              startTime_ != null &&
              startTime_ != com.android.internal.telephony.TelephonyProto.Time.getDefaultInstance()) {
            startTime_ =
              com.android.internal.telephony.TelephonyProto.Time.newBuilder(startTime_).mergeFrom(value).buildPartial();
          } else {
            startTime_ = value;
          }
          onChanged();
        } else {
          startTimeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       * The start time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time start_time = 6;</code>
       */
      public Builder clearStartTime() {
        if (startTimeBuilder_ == null) {
          startTime_ = null;
          onChanged();
        } else {
          startTimeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <pre>
       * The start time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time start_time = 6;</code>
       */
      public com.android.internal.telephony.TelephonyProto.Time.Builder getStartTimeBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getStartTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The start time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time start_time = 6;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TimeOrBuilder getStartTimeOrBuilder() {
        if (startTimeBuilder_ != null) {
          return startTimeBuilder_.getMessageOrBuilder();
        } else {
          return startTime_ == null ?
              com.android.internal.telephony.TelephonyProto.Time.getDefaultInstance() : startTime_;
        }
      }
      /**
       * <pre>
       * The start time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time start_time = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.Time, com.android.internal.telephony.TelephonyProto.Time.Builder, com.android.internal.telephony.TelephonyProto.TimeOrBuilder> 
          getStartTimeFieldBuilder() {
        if (startTimeBuilder_ == null) {
          startTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.Time, com.android.internal.telephony.TelephonyProto.Time.Builder, com.android.internal.telephony.TelephonyProto.TimeOrBuilder>(
                  getStartTime(),
                  getParentForChildren(),
                  isClean());
          startTime_ = null;
        }
        return startTimeBuilder_;
      }

      private com.android.internal.telephony.TelephonyProto.Time endTime_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.Time, com.android.internal.telephony.TelephonyProto.Time.Builder, com.android.internal.telephony.TelephonyProto.TimeOrBuilder> endTimeBuilder_;
      /**
       * <pre>
       * The end time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time end_time = 7;</code>
       */
      public boolean hasEndTime() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * The end time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time end_time = 7;</code>
       */
      public com.android.internal.telephony.TelephonyProto.Time getEndTime() {
        if (endTimeBuilder_ == null) {
          return endTime_ == null ? com.android.internal.telephony.TelephonyProto.Time.getDefaultInstance() : endTime_;
        } else {
          return endTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The end time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time end_time = 7;</code>
       */
      public Builder setEndTime(com.android.internal.telephony.TelephonyProto.Time value) {
        if (endTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          endTime_ = value;
          onChanged();
        } else {
          endTimeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       * The end time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time end_time = 7;</code>
       */
      public Builder setEndTime(
          com.android.internal.telephony.TelephonyProto.Time.Builder builderForValue) {
        if (endTimeBuilder_ == null) {
          endTime_ = builderForValue.build();
          onChanged();
        } else {
          endTimeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       * The end time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time end_time = 7;</code>
       */
      public Builder mergeEndTime(com.android.internal.telephony.TelephonyProto.Time value) {
        if (endTimeBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              endTime_ != null &&
              endTime_ != com.android.internal.telephony.TelephonyProto.Time.getDefaultInstance()) {
            endTime_ =
              com.android.internal.telephony.TelephonyProto.Time.newBuilder(endTime_).mergeFrom(value).buildPartial();
          } else {
            endTime_ = value;
          }
          onChanged();
        } else {
          endTimeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       * The end time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time end_time = 7;</code>
       */
      public Builder clearEndTime() {
        if (endTimeBuilder_ == null) {
          endTime_ = null;
          onChanged();
        } else {
          endTimeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <pre>
       * The end time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time end_time = 7;</code>
       */
      public com.android.internal.telephony.TelephonyProto.Time.Builder getEndTimeBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getEndTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The end time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time end_time = 7;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TimeOrBuilder getEndTimeOrBuilder() {
        if (endTimeBuilder_ != null) {
          return endTimeBuilder_.getMessageOrBuilder();
        } else {
          return endTime_ == null ?
              com.android.internal.telephony.TelephonyProto.Time.getDefaultInstance() : endTime_;
        }
      }
      /**
       * <pre>
       * The end time of this log
       * </pre>
       *
       * <code>optional .clearcut.connectivity.Time end_time = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.Time, com.android.internal.telephony.TelephonyProto.Time.Builder, com.android.internal.telephony.TelephonyProto.TimeOrBuilder> 
          getEndTimeFieldBuilder() {
        if (endTimeBuilder_ == null) {
          endTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.Time, com.android.internal.telephony.TelephonyProto.Time.Builder, com.android.internal.telephony.TelephonyProto.TimeOrBuilder>(
                  getEndTime(),
                  getParentForChildren(),
                  isClean());
          endTime_ = null;
        }
        return endTimeBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clearcut.connectivity.TelephonyLog)
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyLog)
    private static final com.android.internal.telephony.TelephonyProto.TelephonyLog DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.TelephonyLog();
    }

    public static com.android.internal.telephony.TelephonyProto.TelephonyLog getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TelephonyLog>
        PARSER = new com.google.protobuf.AbstractParser<TelephonyLog>() {
      public TelephonyLog parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new TelephonyLog(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TelephonyLog> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TelephonyLog> getParserForType() {
      return PARSER;
    }

    public com.android.internal.telephony.TelephonyProto.TelephonyLog getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TimeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clearcut.connectivity.Time)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The system time in milli seconds. This represents the actual
     * time of the events.
     * </pre>
     *
     * <code>optional int64 system_timestamp_millis = 1;</code>
     */
    boolean hasSystemTimestampMillis();
    /**
     * <pre>
     * The system time in milli seconds. This represents the actual
     * time of the events.
     * </pre>
     *
     * <code>optional int64 system_timestamp_millis = 1;</code>
     */
    long getSystemTimestampMillis();

    /**
     * <pre>
     * The time since boot in milli seconds.
     * This is used for calculating the time interval between events. Different
     * from the system time, this won't be affected by time changed by the network or users.
     * </pre>
     *
     * <code>optional int64 elapsed_timestamp_millis = 2;</code>
     */
    boolean hasElapsedTimestampMillis();
    /**
     * <pre>
     * The time since boot in milli seconds.
     * This is used for calculating the time interval between events. Different
     * from the system time, this won't be affected by time changed by the network or users.
     * </pre>
     *
     * <code>optional int64 elapsed_timestamp_millis = 2;</code>
     */
    long getElapsedTimestampMillis();
  }
  /**
   * <pre>
   * The time information
   * </pre>
   *
   * Protobuf type {@code clearcut.connectivity.Time}
   */
  public  static final class Time extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clearcut.connectivity.Time)
      TimeOrBuilder {
    // Use Time.newBuilder() to construct.
    private Time(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Time() {
      systemTimestampMillis_ = 0L;
      elapsedTimestampMillis_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Time(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              systemTimestampMillis_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              elapsedTimestampMillis_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_Time_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_Time_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.internal.telephony.TelephonyProto.Time.class, com.android.internal.telephony.TelephonyProto.Time.Builder.class);
    }

    private int bitField0_;
    public static final int SYSTEM_TIMESTAMP_MILLIS_FIELD_NUMBER = 1;
    private long systemTimestampMillis_;
    /**
     * <pre>
     * The system time in milli seconds. This represents the actual
     * time of the events.
     * </pre>
     *
     * <code>optional int64 system_timestamp_millis = 1;</code>
     */
    public boolean hasSystemTimestampMillis() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The system time in milli seconds. This represents the actual
     * time of the events.
     * </pre>
     *
     * <code>optional int64 system_timestamp_millis = 1;</code>
     */
    public long getSystemTimestampMillis() {
      return systemTimestampMillis_;
    }

    public static final int ELAPSED_TIMESTAMP_MILLIS_FIELD_NUMBER = 2;
    private long elapsedTimestampMillis_;
    /**
     * <pre>
     * The time since boot in milli seconds.
     * This is used for calculating the time interval between events. Different
     * from the system time, this won't be affected by time changed by the network or users.
     * </pre>
     *
     * <code>optional int64 elapsed_timestamp_millis = 2;</code>
     */
    public boolean hasElapsedTimestampMillis() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The time since boot in milli seconds.
     * This is used for calculating the time interval between events. Different
     * from the system time, this won't be affected by time changed by the network or users.
     * </pre>
     *
     * <code>optional int64 elapsed_timestamp_millis = 2;</code>
     */
    public long getElapsedTimestampMillis() {
      return elapsedTimestampMillis_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, systemTimestampMillis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, elapsedTimestampMillis_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, systemTimestampMillis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, elapsedTimestampMillis_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.internal.telephony.TelephonyProto.Time)) {
        return super.equals(obj);
      }
      com.android.internal.telephony.TelephonyProto.Time other = (com.android.internal.telephony.TelephonyProto.Time) obj;

      boolean result = true;
      result = result && (hasSystemTimestampMillis() == other.hasSystemTimestampMillis());
      if (hasSystemTimestampMillis()) {
        result = result && (getSystemTimestampMillis()
            == other.getSystemTimestampMillis());
      }
      result = result && (hasElapsedTimestampMillis() == other.hasElapsedTimestampMillis());
      if (hasElapsedTimestampMillis()) {
        result = result && (getElapsedTimestampMillis()
            == other.getElapsedTimestampMillis());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasSystemTimestampMillis()) {
        hash = (37 * hash) + SYSTEM_TIMESTAMP_MILLIS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getSystemTimestampMillis());
      }
      if (hasElapsedTimestampMillis()) {
        hash = (37 * hash) + ELAPSED_TIMESTAMP_MILLIS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getElapsedTimestampMillis());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.internal.telephony.TelephonyProto.Time parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.Time parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.Time parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.Time parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.Time parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.Time parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.Time parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.Time parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.Time parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.Time parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.Time prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The time information
     * </pre>
     *
     * Protobuf type {@code clearcut.connectivity.Time}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clearcut.connectivity.Time)
        com.android.internal.telephony.TelephonyProto.TimeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_Time_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_Time_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.Time.class, com.android.internal.telephony.TelephonyProto.Time.Builder.class);
      }

      // Construct using com.android.internal.telephony.TelephonyProto.Time.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        systemTimestampMillis_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        elapsedTimestampMillis_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_Time_descriptor;
      }

      public com.android.internal.telephony.TelephonyProto.Time getDefaultInstanceForType() {
        return com.android.internal.telephony.TelephonyProto.Time.getDefaultInstance();
      }

      public com.android.internal.telephony.TelephonyProto.Time build() {
        com.android.internal.telephony.TelephonyProto.Time result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.android.internal.telephony.TelephonyProto.Time buildPartial() {
        com.android.internal.telephony.TelephonyProto.Time result = new com.android.internal.telephony.TelephonyProto.Time(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.systemTimestampMillis_ = systemTimestampMillis_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.elapsedTimestampMillis_ = elapsedTimestampMillis_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.internal.telephony.TelephonyProto.Time) {
          return mergeFrom((com.android.internal.telephony.TelephonyProto.Time)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.Time other) {
        if (other == com.android.internal.telephony.TelephonyProto.Time.getDefaultInstance()) return this;
        if (other.hasSystemTimestampMillis()) {
          setSystemTimestampMillis(other.getSystemTimestampMillis());
        }
        if (other.hasElapsedTimestampMillis()) {
          setElapsedTimestampMillis(other.getElapsedTimestampMillis());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.android.internal.telephony.TelephonyProto.Time parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.android.internal.telephony.TelephonyProto.Time) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long systemTimestampMillis_ ;
      /**
       * <pre>
       * The system time in milli seconds. This represents the actual
       * time of the events.
       * </pre>
       *
       * <code>optional int64 system_timestamp_millis = 1;</code>
       */
      public boolean hasSystemTimestampMillis() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * The system time in milli seconds. This represents the actual
       * time of the events.
       * </pre>
       *
       * <code>optional int64 system_timestamp_millis = 1;</code>
       */
      public long getSystemTimestampMillis() {
        return systemTimestampMillis_;
      }
      /**
       * <pre>
       * The system time in milli seconds. This represents the actual
       * time of the events.
       * </pre>
       *
       * <code>optional int64 system_timestamp_millis = 1;</code>
       */
      public Builder setSystemTimestampMillis(long value) {
        bitField0_ |= 0x00000001;
        systemTimestampMillis_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The system time in milli seconds. This represents the actual
       * time of the events.
       * </pre>
       *
       * <code>optional int64 system_timestamp_millis = 1;</code>
       */
      public Builder clearSystemTimestampMillis() {
        bitField0_ = (bitField0_ & ~0x00000001);
        systemTimestampMillis_ = 0L;
        onChanged();
        return this;
      }

      private long elapsedTimestampMillis_ ;
      /**
       * <pre>
       * The time since boot in milli seconds.
       * This is used for calculating the time interval between events. Different
       * from the system time, this won't be affected by time changed by the network or users.
       * </pre>
       *
       * <code>optional int64 elapsed_timestamp_millis = 2;</code>
       */
      public boolean hasElapsedTimestampMillis() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * The time since boot in milli seconds.
       * This is used for calculating the time interval between events. Different
       * from the system time, this won't be affected by time changed by the network or users.
       * </pre>
       *
       * <code>optional int64 elapsed_timestamp_millis = 2;</code>
       */
      public long getElapsedTimestampMillis() {
        return elapsedTimestampMillis_;
      }
      /**
       * <pre>
       * The time since boot in milli seconds.
       * This is used for calculating the time interval between events. Different
       * from the system time, this won't be affected by time changed by the network or users.
       * </pre>
       *
       * <code>optional int64 elapsed_timestamp_millis = 2;</code>
       */
      public Builder setElapsedTimestampMillis(long value) {
        bitField0_ |= 0x00000002;
        elapsedTimestampMillis_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The time since boot in milli seconds.
       * This is used for calculating the time interval between events. Different
       * from the system time, this won't be affected by time changed by the network or users.
       * </pre>
       *
       * <code>optional int64 elapsed_timestamp_millis = 2;</code>
       */
      public Builder clearElapsedTimestampMillis() {
        bitField0_ = (bitField0_ & ~0x00000002);
        elapsedTimestampMillis_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clearcut.connectivity.Time)
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.Time)
    private static final com.android.internal.telephony.TelephonyProto.Time DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.Time();
    }

    public static com.android.internal.telephony.TelephonyProto.Time getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Time>
        PARSER = new com.google.protobuf.AbstractParser<Time>() {
      public Time parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Time(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Time> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Time> getParserForType() {
      return PARSER;
    }

    public com.android.internal.telephony.TelephonyProto.Time getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TelephonyHistogramOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clearcut.connectivity.TelephonyHistogram)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Type of histogram
     * </pre>
     *
     * <code>optional int32 category = 1;</code>
     */
    boolean hasCategory();
    /**
     * <pre>
     * Type of histogram
     * </pre>
     *
     * <code>optional int32 category = 1;</code>
     */
    int getCategory();

    /**
     * <pre>
     * Unique Id identifying a sample within
     * particular category of the histogram.
     * </pre>
     *
     * <code>optional int32 id = 2;</code>
     */
    boolean hasId();
    /**
     * <pre>
     * Unique Id identifying a sample within
     * particular category of the histogram.
     * </pre>
     *
     * <code>optional int32 id = 2;</code>
     */
    int getId();

    /**
     * <pre>
     * Min time taken in millis.
     * </pre>
     *
     * <code>optional int32 min_time_millis = 3;</code>
     */
    boolean hasMinTimeMillis();
    /**
     * <pre>
     * Min time taken in millis.
     * </pre>
     *
     * <code>optional int32 min_time_millis = 3;</code>
     */
    int getMinTimeMillis();

    /**
     * <pre>
     * Max time taken in millis.
     * </pre>
     *
     * <code>optional int32 max_time_millis = 4;</code>
     */
    boolean hasMaxTimeMillis();
    /**
     * <pre>
     * Max time taken in millis.
     * </pre>
     *
     * <code>optional int32 max_time_millis = 4;</code>
     */
    int getMaxTimeMillis();

    /**
     * <pre>
     * Average time taken in millis.
     * </pre>
     *
     * <code>optional int32 avg_time_millis = 5;</code>
     */
    boolean hasAvgTimeMillis();
    /**
     * <pre>
     * Average time taken in millis.
     * </pre>
     *
     * <code>optional int32 avg_time_millis = 5;</code>
     */
    int getAvgTimeMillis();

    /**
     * <pre>
     * Total count of histogram samples.
     * </pre>
     *
     * <code>optional int32 count = 6;</code>
     */
    boolean hasCount();
    /**
     * <pre>
     * Total count of histogram samples.
     * </pre>
     *
     * <code>optional int32 count = 6;</code>
     */
    int getCount();

    /**
     * <pre>
     * Total number of time ranges expected
     * (must be greater than 1).
     * </pre>
     *
     * <code>optional int32 bucket_count = 7;</code>
     */
    boolean hasBucketCount();
    /**
     * <pre>
     * Total number of time ranges expected
     * (must be greater than 1).
     * </pre>
     *
     * <code>optional int32 bucket_count = 7;</code>
     */
    int getBucketCount();

    /**
     * <pre>
     * Array storing endpoints of range buckets.
     * </pre>
     *
     * <code>repeated int32 bucket_end_points = 8;</code>
     */
    java.util.List<java.lang.Integer> getBucketEndPointsList();
    /**
     * <pre>
     * Array storing endpoints of range buckets.
     * </pre>
     *
     * <code>repeated int32 bucket_end_points = 8;</code>
     */
    int getBucketEndPointsCount();
    /**
     * <pre>
     * Array storing endpoints of range buckets.
     * </pre>
     *
     * <code>repeated int32 bucket_end_points = 8;</code>
     */
    int getBucketEndPoints(int index);

    /**
     * <pre>
     * Array storing counts for each time range
     * starting from smallest value range.
     * </pre>
     *
     * <code>repeated int32 bucket_counters = 9;</code>
     */
    java.util.List<java.lang.Integer> getBucketCountersList();
    /**
     * <pre>
     * Array storing counts for each time range
     * starting from smallest value range.
     * </pre>
     *
     * <code>repeated int32 bucket_counters = 9;</code>
     */
    int getBucketCountersCount();
    /**
     * <pre>
     * Array storing counts for each time range
     * starting from smallest value range.
     * </pre>
     *
     * <code>repeated int32 bucket_counters = 9;</code>
     */
    int getBucketCounters(int index);
  }
  /**
   * <pre>
   * Telephony Histogram
   * </pre>
   *
   * Protobuf type {@code clearcut.connectivity.TelephonyHistogram}
   */
  public  static final class TelephonyHistogram extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clearcut.connectivity.TelephonyHistogram)
      TelephonyHistogramOrBuilder {
    // Use TelephonyHistogram.newBuilder() to construct.
    private TelephonyHistogram(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TelephonyHistogram() {
      category_ = 0;
      id_ = 0;
      minTimeMillis_ = 0;
      maxTimeMillis_ = 0;
      avgTimeMillis_ = 0;
      count_ = 0;
      bucketCount_ = 0;
      bucketEndPoints_ = java.util.Collections.emptyList();
      bucketCounters_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TelephonyHistogram(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              category_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              id_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              minTimeMillis_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              maxTimeMillis_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              avgTimeMillis_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              count_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              bucketCount_ = input.readInt32();
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                bucketEndPoints_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              bucketEndPoints_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                bucketEndPoints_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                bucketEndPoints_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                bucketCounters_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              bucketCounters_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                bucketCounters_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                bucketCounters_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          bucketEndPoints_ = java.util.Collections.unmodifiableList(bucketEndPoints_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          bucketCounters_ = java.util.Collections.unmodifiableList(bucketCounters_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyHistogram_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyHistogram_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.internal.telephony.TelephonyProto.TelephonyHistogram.class, com.android.internal.telephony.TelephonyProto.TelephonyHistogram.Builder.class);
    }

    private int bitField0_;
    public static final int CATEGORY_FIELD_NUMBER = 1;
    private int category_;
    /**
     * <pre>
     * Type of histogram
     * </pre>
     *
     * <code>optional int32 category = 1;</code>
     */
    public boolean hasCategory() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Type of histogram
     * </pre>
     *
     * <code>optional int32 category = 1;</code>
     */
    public int getCategory() {
      return category_;
    }

    public static final int ID_FIELD_NUMBER = 2;
    private int id_;
    /**
     * <pre>
     * Unique Id identifying a sample within
     * particular category of the histogram.
     * </pre>
     *
     * <code>optional int32 id = 2;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Unique Id identifying a sample within
     * particular category of the histogram.
     * </pre>
     *
     * <code>optional int32 id = 2;</code>
     */
    public int getId() {
      return id_;
    }

    public static final int MIN_TIME_MILLIS_FIELD_NUMBER = 3;
    private int minTimeMillis_;
    /**
     * <pre>
     * Min time taken in millis.
     * </pre>
     *
     * <code>optional int32 min_time_millis = 3;</code>
     */
    public boolean hasMinTimeMillis() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Min time taken in millis.
     * </pre>
     *
     * <code>optional int32 min_time_millis = 3;</code>
     */
    public int getMinTimeMillis() {
      return minTimeMillis_;
    }

    public static final int MAX_TIME_MILLIS_FIELD_NUMBER = 4;
    private int maxTimeMillis_;
    /**
     * <pre>
     * Max time taken in millis.
     * </pre>
     *
     * <code>optional int32 max_time_millis = 4;</code>
     */
    public boolean hasMaxTimeMillis() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Max time taken in millis.
     * </pre>
     *
     * <code>optional int32 max_time_millis = 4;</code>
     */
    public int getMaxTimeMillis() {
      return maxTimeMillis_;
    }

    public static final int AVG_TIME_MILLIS_FIELD_NUMBER = 5;
    private int avgTimeMillis_;
    /**
     * <pre>
     * Average time taken in millis.
     * </pre>
     *
     * <code>optional int32 avg_time_millis = 5;</code>
     */
    public boolean hasAvgTimeMillis() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * Average time taken in millis.
     * </pre>
     *
     * <code>optional int32 avg_time_millis = 5;</code>
     */
    public int getAvgTimeMillis() {
      return avgTimeMillis_;
    }

    public static final int COUNT_FIELD_NUMBER = 6;
    private int count_;
    /**
     * <pre>
     * Total count of histogram samples.
     * </pre>
     *
     * <code>optional int32 count = 6;</code>
     */
    public boolean hasCount() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * Total count of histogram samples.
     * </pre>
     *
     * <code>optional int32 count = 6;</code>
     */
    public int getCount() {
      return count_;
    }

    public static final int BUCKET_COUNT_FIELD_NUMBER = 7;
    private int bucketCount_;
    /**
     * <pre>
     * Total number of time ranges expected
     * (must be greater than 1).
     * </pre>
     *
     * <code>optional int32 bucket_count = 7;</code>
     */
    public boolean hasBucketCount() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * Total number of time ranges expected
     * (must be greater than 1).
     * </pre>
     *
     * <code>optional int32 bucket_count = 7;</code>
     */
    public int getBucketCount() {
      return bucketCount_;
    }

    public static final int BUCKET_END_POINTS_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> bucketEndPoints_;
    /**
     * <pre>
     * Array storing endpoints of range buckets.
     * </pre>
     *
     * <code>repeated int32 bucket_end_points = 8;</code>
     */
    public java.util.List<java.lang.Integer>
        getBucketEndPointsList() {
      return bucketEndPoints_;
    }
    /**
     * <pre>
     * Array storing endpoints of range buckets.
     * </pre>
     *
     * <code>repeated int32 bucket_end_points = 8;</code>
     */
    public int getBucketEndPointsCount() {
      return bucketEndPoints_.size();
    }
    /**
     * <pre>
     * Array storing endpoints of range buckets.
     * </pre>
     *
     * <code>repeated int32 bucket_end_points = 8;</code>
     */
    public int getBucketEndPoints(int index) {
      return bucketEndPoints_.get(index);
    }

    public static final int BUCKET_COUNTERS_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> bucketCounters_;
    /**
     * <pre>
     * Array storing counts for each time range
     * starting from smallest value range.
     * </pre>
     *
     * <code>repeated int32 bucket_counters = 9;</code>
     */
    public java.util.List<java.lang.Integer>
        getBucketCountersList() {
      return bucketCounters_;
    }
    /**
     * <pre>
     * Array storing counts for each time range
     * starting from smallest value range.
     * </pre>
     *
     * <code>repeated int32 bucket_counters = 9;</code>
     */
    public int getBucketCountersCount() {
      return bucketCounters_.size();
    }
    /**
     * <pre>
     * Array storing counts for each time range
     * starting from smallest value range.
     * </pre>
     *
     * <code>repeated int32 bucket_counters = 9;</code>
     */
    public int getBucketCounters(int index) {
      return bucketCounters_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, category_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, id_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, minTimeMillis_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, maxTimeMillis_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, avgTimeMillis_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, count_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, bucketCount_);
      }
      for (int i = 0; i < bucketEndPoints_.size(); i++) {
        output.writeInt32(8, bucketEndPoints_.get(i));
      }
      for (int i = 0; i < bucketCounters_.size(); i++) {
        output.writeInt32(9, bucketCounters_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, category_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, id_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, minTimeMillis_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, maxTimeMillis_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, avgTimeMillis_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, count_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, bucketCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bucketEndPoints_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(bucketEndPoints_.get(i));
        }
        size += dataSize;
        size += 1 * getBucketEndPointsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bucketCounters_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(bucketCounters_.get(i));
        }
        size += dataSize;
        size += 1 * getBucketCountersList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.internal.telephony.TelephonyProto.TelephonyHistogram)) {
        return super.equals(obj);
      }
      com.android.internal.telephony.TelephonyProto.TelephonyHistogram other = (com.android.internal.telephony.TelephonyProto.TelephonyHistogram) obj;

      boolean result = true;
      result = result && (hasCategory() == other.hasCategory());
      if (hasCategory()) {
        result = result && (getCategory()
            == other.getCategory());
      }
      result = result && (hasId() == other.hasId());
      if (hasId()) {
        result = result && (getId()
            == other.getId());
      }
      result = result && (hasMinTimeMillis() == other.hasMinTimeMillis());
      if (hasMinTimeMillis()) {
        result = result && (getMinTimeMillis()
            == other.getMinTimeMillis());
      }
      result = result && (hasMaxTimeMillis() == other.hasMaxTimeMillis());
      if (hasMaxTimeMillis()) {
        result = result && (getMaxTimeMillis()
            == other.getMaxTimeMillis());
      }
      result = result && (hasAvgTimeMillis() == other.hasAvgTimeMillis());
      if (hasAvgTimeMillis()) {
        result = result && (getAvgTimeMillis()
            == other.getAvgTimeMillis());
      }
      result = result && (hasCount() == other.hasCount());
      if (hasCount()) {
        result = result && (getCount()
            == other.getCount());
      }
      result = result && (hasBucketCount() == other.hasBucketCount());
      if (hasBucketCount()) {
        result = result && (getBucketCount()
            == other.getBucketCount());
      }
      result = result && getBucketEndPointsList()
          .equals(other.getBucketEndPointsList());
      result = result && getBucketCountersList()
          .equals(other.getBucketCountersList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasCategory()) {
        hash = (37 * hash) + CATEGORY_FIELD_NUMBER;
        hash = (53 * hash) + getCategory();
      }
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId();
      }
      if (hasMinTimeMillis()) {
        hash = (37 * hash) + MIN_TIME_MILLIS_FIELD_NUMBER;
        hash = (53 * hash) + getMinTimeMillis();
      }
      if (hasMaxTimeMillis()) {
        hash = (37 * hash) + MAX_TIME_MILLIS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxTimeMillis();
      }
      if (hasAvgTimeMillis()) {
        hash = (37 * hash) + AVG_TIME_MILLIS_FIELD_NUMBER;
        hash = (53 * hash) + getAvgTimeMillis();
      }
      if (hasCount()) {
        hash = (37 * hash) + COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getCount();
      }
      if (hasBucketCount()) {
        hash = (37 * hash) + BUCKET_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getBucketCount();
      }
      if (getBucketEndPointsCount() > 0) {
        hash = (37 * hash) + BUCKET_END_POINTS_FIELD_NUMBER;
        hash = (53 * hash) + getBucketEndPointsList().hashCode();
      }
      if (getBucketCountersCount() > 0) {
        hash = (37 * hash) + BUCKET_COUNTERS_FIELD_NUMBER;
        hash = (53 * hash) + getBucketCountersList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.internal.telephony.TelephonyProto.TelephonyHistogram parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyHistogram parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyHistogram parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyHistogram parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyHistogram parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyHistogram parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyHistogram parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyHistogram parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyHistogram parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyHistogram parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.TelephonyHistogram prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Telephony Histogram
     * </pre>
     *
     * Protobuf type {@code clearcut.connectivity.TelephonyHistogram}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clearcut.connectivity.TelephonyHistogram)
        com.android.internal.telephony.TelephonyProto.TelephonyHistogramOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyHistogram_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyHistogram_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.TelephonyHistogram.class, com.android.internal.telephony.TelephonyProto.TelephonyHistogram.Builder.class);
      }

      // Construct using com.android.internal.telephony.TelephonyProto.TelephonyHistogram.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        category_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        minTimeMillis_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        maxTimeMillis_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        avgTimeMillis_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        count_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        bucketCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        bucketEndPoints_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        bucketCounters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyHistogram_descriptor;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyHistogram getDefaultInstanceForType() {
        return com.android.internal.telephony.TelephonyProto.TelephonyHistogram.getDefaultInstance();
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyHistogram build() {
        com.android.internal.telephony.TelephonyProto.TelephonyHistogram result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyHistogram buildPartial() {
        com.android.internal.telephony.TelephonyProto.TelephonyHistogram result = new com.android.internal.telephony.TelephonyProto.TelephonyHistogram(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.category_ = category_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.minTimeMillis_ = minTimeMillis_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.maxTimeMillis_ = maxTimeMillis_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.avgTimeMillis_ = avgTimeMillis_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.count_ = count_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.bucketCount_ = bucketCount_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          bucketEndPoints_ = java.util.Collections.unmodifiableList(bucketEndPoints_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.bucketEndPoints_ = bucketEndPoints_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          bucketCounters_ = java.util.Collections.unmodifiableList(bucketCounters_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.bucketCounters_ = bucketCounters_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.internal.telephony.TelephonyProto.TelephonyHistogram) {
          return mergeFrom((com.android.internal.telephony.TelephonyProto.TelephonyHistogram)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.TelephonyHistogram other) {
        if (other == com.android.internal.telephony.TelephonyProto.TelephonyHistogram.getDefaultInstance()) return this;
        if (other.hasCategory()) {
          setCategory(other.getCategory());
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasMinTimeMillis()) {
          setMinTimeMillis(other.getMinTimeMillis());
        }
        if (other.hasMaxTimeMillis()) {
          setMaxTimeMillis(other.getMaxTimeMillis());
        }
        if (other.hasAvgTimeMillis()) {
          setAvgTimeMillis(other.getAvgTimeMillis());
        }
        if (other.hasCount()) {
          setCount(other.getCount());
        }
        if (other.hasBucketCount()) {
          setBucketCount(other.getBucketCount());
        }
        if (!other.bucketEndPoints_.isEmpty()) {
          if (bucketEndPoints_.isEmpty()) {
            bucketEndPoints_ = other.bucketEndPoints_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureBucketEndPointsIsMutable();
            bucketEndPoints_.addAll(other.bucketEndPoints_);
          }
          onChanged();
        }
        if (!other.bucketCounters_.isEmpty()) {
          if (bucketCounters_.isEmpty()) {
            bucketCounters_ = other.bucketCounters_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureBucketCountersIsMutable();
            bucketCounters_.addAll(other.bucketCounters_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.android.internal.telephony.TelephonyProto.TelephonyHistogram parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.android.internal.telephony.TelephonyProto.TelephonyHistogram) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int category_ ;
      /**
       * <pre>
       * Type of histogram
       * </pre>
       *
       * <code>optional int32 category = 1;</code>
       */
      public boolean hasCategory() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Type of histogram
       * </pre>
       *
       * <code>optional int32 category = 1;</code>
       */
      public int getCategory() {
        return category_;
      }
      /**
       * <pre>
       * Type of histogram
       * </pre>
       *
       * <code>optional int32 category = 1;</code>
       */
      public Builder setCategory(int value) {
        bitField0_ |= 0x00000001;
        category_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type of histogram
       * </pre>
       *
       * <code>optional int32 category = 1;</code>
       */
      public Builder clearCategory() {
        bitField0_ = (bitField0_ & ~0x00000001);
        category_ = 0;
        onChanged();
        return this;
      }

      private int id_ ;
      /**
       * <pre>
       * Unique Id identifying a sample within
       * particular category of the histogram.
       * </pre>
       *
       * <code>optional int32 id = 2;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Unique Id identifying a sample within
       * particular category of the histogram.
       * </pre>
       *
       * <code>optional int32 id = 2;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <pre>
       * Unique Id identifying a sample within
       * particular category of the histogram.
       * </pre>
       *
       * <code>optional int32 id = 2;</code>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000002;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique Id identifying a sample within
       * particular category of the histogram.
       * </pre>
       *
       * <code>optional int32 id = 2;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        id_ = 0;
        onChanged();
        return this;
      }

      private int minTimeMillis_ ;
      /**
       * <pre>
       * Min time taken in millis.
       * </pre>
       *
       * <code>optional int32 min_time_millis = 3;</code>
       */
      public boolean hasMinTimeMillis() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Min time taken in millis.
       * </pre>
       *
       * <code>optional int32 min_time_millis = 3;</code>
       */
      public int getMinTimeMillis() {
        return minTimeMillis_;
      }
      /**
       * <pre>
       * Min time taken in millis.
       * </pre>
       *
       * <code>optional int32 min_time_millis = 3;</code>
       */
      public Builder setMinTimeMillis(int value) {
        bitField0_ |= 0x00000004;
        minTimeMillis_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Min time taken in millis.
       * </pre>
       *
       * <code>optional int32 min_time_millis = 3;</code>
       */
      public Builder clearMinTimeMillis() {
        bitField0_ = (bitField0_ & ~0x00000004);
        minTimeMillis_ = 0;
        onChanged();
        return this;
      }

      private int maxTimeMillis_ ;
      /**
       * <pre>
       * Max time taken in millis.
       * </pre>
       *
       * <code>optional int32 max_time_millis = 4;</code>
       */
      public boolean hasMaxTimeMillis() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * Max time taken in millis.
       * </pre>
       *
       * <code>optional int32 max_time_millis = 4;</code>
       */
      public int getMaxTimeMillis() {
        return maxTimeMillis_;
      }
      /**
       * <pre>
       * Max time taken in millis.
       * </pre>
       *
       * <code>optional int32 max_time_millis = 4;</code>
       */
      public Builder setMaxTimeMillis(int value) {
        bitField0_ |= 0x00000008;
        maxTimeMillis_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Max time taken in millis.
       * </pre>
       *
       * <code>optional int32 max_time_millis = 4;</code>
       */
      public Builder clearMaxTimeMillis() {
        bitField0_ = (bitField0_ & ~0x00000008);
        maxTimeMillis_ = 0;
        onChanged();
        return this;
      }

      private int avgTimeMillis_ ;
      /**
       * <pre>
       * Average time taken in millis.
       * </pre>
       *
       * <code>optional int32 avg_time_millis = 5;</code>
       */
      public boolean hasAvgTimeMillis() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * Average time taken in millis.
       * </pre>
       *
       * <code>optional int32 avg_time_millis = 5;</code>
       */
      public int getAvgTimeMillis() {
        return avgTimeMillis_;
      }
      /**
       * <pre>
       * Average time taken in millis.
       * </pre>
       *
       * <code>optional int32 avg_time_millis = 5;</code>
       */
      public Builder setAvgTimeMillis(int value) {
        bitField0_ |= 0x00000010;
        avgTimeMillis_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Average time taken in millis.
       * </pre>
       *
       * <code>optional int32 avg_time_millis = 5;</code>
       */
      public Builder clearAvgTimeMillis() {
        bitField0_ = (bitField0_ & ~0x00000010);
        avgTimeMillis_ = 0;
        onChanged();
        return this;
      }

      private int count_ ;
      /**
       * <pre>
       * Total count of histogram samples.
       * </pre>
       *
       * <code>optional int32 count = 6;</code>
       */
      public boolean hasCount() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * Total count of histogram samples.
       * </pre>
       *
       * <code>optional int32 count = 6;</code>
       */
      public int getCount() {
        return count_;
      }
      /**
       * <pre>
       * Total count of histogram samples.
       * </pre>
       *
       * <code>optional int32 count = 6;</code>
       */
      public Builder setCount(int value) {
        bitField0_ |= 0x00000020;
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Total count of histogram samples.
       * </pre>
       *
       * <code>optional int32 count = 6;</code>
       */
      public Builder clearCount() {
        bitField0_ = (bitField0_ & ~0x00000020);
        count_ = 0;
        onChanged();
        return this;
      }

      private int bucketCount_ ;
      /**
       * <pre>
       * Total number of time ranges expected
       * (must be greater than 1).
       * </pre>
       *
       * <code>optional int32 bucket_count = 7;</code>
       */
      public boolean hasBucketCount() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * Total number of time ranges expected
       * (must be greater than 1).
       * </pre>
       *
       * <code>optional int32 bucket_count = 7;</code>
       */
      public int getBucketCount() {
        return bucketCount_;
      }
      /**
       * <pre>
       * Total number of time ranges expected
       * (must be greater than 1).
       * </pre>
       *
       * <code>optional int32 bucket_count = 7;</code>
       */
      public Builder setBucketCount(int value) {
        bitField0_ |= 0x00000040;
        bucketCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Total number of time ranges expected
       * (must be greater than 1).
       * </pre>
       *
       * <code>optional int32 bucket_count = 7;</code>
       */
      public Builder clearBucketCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        bucketCount_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> bucketEndPoints_ = java.util.Collections.emptyList();
      private void ensureBucketEndPointsIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          bucketEndPoints_ = new java.util.ArrayList<java.lang.Integer>(bucketEndPoints_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <pre>
       * Array storing endpoints of range buckets.
       * </pre>
       *
       * <code>repeated int32 bucket_end_points = 8;</code>
       */
      public java.util.List<java.lang.Integer>
          getBucketEndPointsList() {
        return java.util.Collections.unmodifiableList(bucketEndPoints_);
      }
      /**
       * <pre>
       * Array storing endpoints of range buckets.
       * </pre>
       *
       * <code>repeated int32 bucket_end_points = 8;</code>
       */
      public int getBucketEndPointsCount() {
        return bucketEndPoints_.size();
      }
      /**
       * <pre>
       * Array storing endpoints of range buckets.
       * </pre>
       *
       * <code>repeated int32 bucket_end_points = 8;</code>
       */
      public int getBucketEndPoints(int index) {
        return bucketEndPoints_.get(index);
      }
      /**
       * <pre>
       * Array storing endpoints of range buckets.
       * </pre>
       *
       * <code>repeated int32 bucket_end_points = 8;</code>
       */
      public Builder setBucketEndPoints(
          int index, int value) {
        ensureBucketEndPointsIsMutable();
        bucketEndPoints_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Array storing endpoints of range buckets.
       * </pre>
       *
       * <code>repeated int32 bucket_end_points = 8;</code>
       */
      public Builder addBucketEndPoints(int value) {
        ensureBucketEndPointsIsMutable();
        bucketEndPoints_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Array storing endpoints of range buckets.
       * </pre>
       *
       * <code>repeated int32 bucket_end_points = 8;</code>
       */
      public Builder addAllBucketEndPoints(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBucketEndPointsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bucketEndPoints_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Array storing endpoints of range buckets.
       * </pre>
       *
       * <code>repeated int32 bucket_end_points = 8;</code>
       */
      public Builder clearBucketEndPoints() {
        bucketEndPoints_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> bucketCounters_ = java.util.Collections.emptyList();
      private void ensureBucketCountersIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          bucketCounters_ = new java.util.ArrayList<java.lang.Integer>(bucketCounters_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <pre>
       * Array storing counts for each time range
       * starting from smallest value range.
       * </pre>
       *
       * <code>repeated int32 bucket_counters = 9;</code>
       */
      public java.util.List<java.lang.Integer>
          getBucketCountersList() {
        return java.util.Collections.unmodifiableList(bucketCounters_);
      }
      /**
       * <pre>
       * Array storing counts for each time range
       * starting from smallest value range.
       * </pre>
       *
       * <code>repeated int32 bucket_counters = 9;</code>
       */
      public int getBucketCountersCount() {
        return bucketCounters_.size();
      }
      /**
       * <pre>
       * Array storing counts for each time range
       * starting from smallest value range.
       * </pre>
       *
       * <code>repeated int32 bucket_counters = 9;</code>
       */
      public int getBucketCounters(int index) {
        return bucketCounters_.get(index);
      }
      /**
       * <pre>
       * Array storing counts for each time range
       * starting from smallest value range.
       * </pre>
       *
       * <code>repeated int32 bucket_counters = 9;</code>
       */
      public Builder setBucketCounters(
          int index, int value) {
        ensureBucketCountersIsMutable();
        bucketCounters_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Array storing counts for each time range
       * starting from smallest value range.
       * </pre>
       *
       * <code>repeated int32 bucket_counters = 9;</code>
       */
      public Builder addBucketCounters(int value) {
        ensureBucketCountersIsMutable();
        bucketCounters_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Array storing counts for each time range
       * starting from smallest value range.
       * </pre>
       *
       * <code>repeated int32 bucket_counters = 9;</code>
       */
      public Builder addAllBucketCounters(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBucketCountersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bucketCounters_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Array storing counts for each time range
       * starting from smallest value range.
       * </pre>
       *
       * <code>repeated int32 bucket_counters = 9;</code>
       */
      public Builder clearBucketCounters() {
        bucketCounters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clearcut.connectivity.TelephonyHistogram)
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyHistogram)
    private static final com.android.internal.telephony.TelephonyProto.TelephonyHistogram DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.TelephonyHistogram();
    }

    public static com.android.internal.telephony.TelephonyProto.TelephonyHistogram getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TelephonyHistogram>
        PARSER = new com.google.protobuf.AbstractParser<TelephonyHistogram>() {
      public TelephonyHistogram parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new TelephonyHistogram(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TelephonyHistogram> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TelephonyHistogram> getParserForType() {
      return PARSER;
    }

    public com.android.internal.telephony.TelephonyProto.TelephonyHistogram getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TelephonySettingsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clearcut.connectivity.TelephonySettings)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * If the device is in airplane mode.
     * </pre>
     *
     * <code>optional bool is_airplane_mode = 1;</code>
     */
    boolean hasIsAirplaneMode();
    /**
     * <pre>
     * If the device is in airplane mode.
     * </pre>
     *
     * <code>optional bool is_airplane_mode = 1;</code>
     */
    boolean getIsAirplaneMode();

    /**
     * <pre>
     * If cell-data has been enabled.
     * </pre>
     *
     * <code>optional bool is_cellular_data_enabled = 2;</code>
     */
    boolean hasIsCellularDataEnabled();
    /**
     * <pre>
     * If cell-data has been enabled.
     * </pre>
     *
     * <code>optional bool is_cellular_data_enabled = 2;</code>
     */
    boolean getIsCellularDataEnabled();

    /**
     * <pre>
     * If cell-roaming has been enabled.
     * </pre>
     *
     * <code>optional bool is_data_roaming_enabled = 3;</code>
     */
    boolean hasIsDataRoamingEnabled();
    /**
     * <pre>
     * If cell-roaming has been enabled.
     * </pre>
     *
     * <code>optional bool is_data_roaming_enabled = 3;</code>
     */
    boolean getIsDataRoamingEnabled();

    /**
     * <pre>
     * Preferred network mode.
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;</code>
     */
    boolean hasPreferredNetworkMode();
    /**
     * <pre>
     * Preferred network mode.
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode getPreferredNetworkMode();

    /**
     * <pre>
     * If enhanced mode enabled.
     * </pre>
     *
     * <code>optional bool is_enhanced_4g_lte_mode_enabled = 5;</code>
     */
    boolean hasIsEnhanced4GLteModeEnabled();
    /**
     * <pre>
     * If enhanced mode enabled.
     * </pre>
     *
     * <code>optional bool is_enhanced_4g_lte_mode_enabled = 5;</code>
     */
    boolean getIsEnhanced4GLteModeEnabled();

    /**
     * <pre>
     * If wifi has been enabled.
     * </pre>
     *
     * <code>optional bool is_wifi_enabled = 6;</code>
     */
    boolean hasIsWifiEnabled();
    /**
     * <pre>
     * If wifi has been enabled.
     * </pre>
     *
     * <code>optional bool is_wifi_enabled = 6;</code>
     */
    boolean getIsWifiEnabled();

    /**
     * <pre>
     * If wifi-calling has been enabled.
     * </pre>
     *
     * <code>optional bool is_wifi_calling_enabled = 7;</code>
     */
    boolean hasIsWifiCallingEnabled();
    /**
     * <pre>
     * If wifi-calling has been enabled.
     * </pre>
     *
     * <code>optional bool is_wifi_calling_enabled = 7;</code>
     */
    boolean getIsWifiCallingEnabled();

    /**
     * <pre>
     * Wifi-calling Mode.
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;</code>
     */
    boolean hasWifiCallingMode();
    /**
     * <pre>
     * Wifi-calling Mode.
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode getWifiCallingMode();

    /**
     * <pre>
     * If video over LTE enabled.
     * </pre>
     *
     * <code>optional bool is_vt_over_lte_enabled = 9;</code>
     */
    boolean hasIsVtOverLteEnabled();
    /**
     * <pre>
     * If video over LTE enabled.
     * </pre>
     *
     * <code>optional bool is_vt_over_lte_enabled = 9;</code>
     */
    boolean getIsVtOverLteEnabled();

    /**
     * <pre>
     * If video over wifi enabled.
     * </pre>
     *
     * <code>optional bool is_vt_over_wifi_enabled = 10;</code>
     */
    boolean hasIsVtOverWifiEnabled();
    /**
     * <pre>
     * If video over wifi enabled.
     * </pre>
     *
     * <code>optional bool is_vt_over_wifi_enabled = 10;</code>
     */
    boolean getIsVtOverWifiEnabled();
  }
  /**
   * <pre>
   * Telephony related user settings
   * </pre>
   *
   * Protobuf type {@code clearcut.connectivity.TelephonySettings}
   */
  public  static final class TelephonySettings extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clearcut.connectivity.TelephonySettings)
      TelephonySettingsOrBuilder {
    // Use TelephonySettings.newBuilder() to construct.
    private TelephonySettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TelephonySettings() {
      isAirplaneMode_ = false;
      isCellularDataEnabled_ = false;
      isDataRoamingEnabled_ = false;
      preferredNetworkMode_ = 0;
      isEnhanced4GLteModeEnabled_ = false;
      isWifiEnabled_ = false;
      isWifiCallingEnabled_ = false;
      wifiCallingMode_ = 0;
      isVtOverLteEnabled_ = false;
      isVtOverWifiEnabled_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TelephonySettings(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              isAirplaneMode_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              isCellularDataEnabled_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              isDataRoamingEnabled_ = input.readBool();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode value = com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                preferredNetworkMode_ = rawValue;
              }
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              isEnhanced4GLteModeEnabled_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              isWifiEnabled_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              isWifiCallingEnabled_ = input.readBool();
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode value = com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                wifiCallingMode_ = rawValue;
              }
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              isVtOverLteEnabled_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              isVtOverWifiEnabled_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonySettings_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonySettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.internal.telephony.TelephonyProto.TelephonySettings.class, com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder.class);
    }

    /**
     * <pre>
     * NETWORK_MODE_* See ril.h PREF_NET_TYPE_XXXX
     * </pre>
     *
     * Protobuf enum {@code clearcut.connectivity.TelephonySettings.RilNetworkMode}
     */
    public enum RilNetworkMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Mode is unknown.
       * </pre>
       *
       * <code>NETWORK_MODE_UNKNOWN = 0;</code>
       */
      NETWORK_MODE_UNKNOWN(0),
      /**
       * <pre>
       * GSM/WCDMA (WCDMA preferred). Note the following values are all off by 1.
       * </pre>
       *
       * <code>NETWORK_MODE_WCDMA_PREF = 1;</code>
       */
      NETWORK_MODE_WCDMA_PREF(1),
      /**
       * <pre>
       * GSM only
       * </pre>
       *
       * <code>NETWORK_MODE_GSM_ONLY = 2;</code>
       */
      NETWORK_MODE_GSM_ONLY(2),
      /**
       * <pre>
       * WCDMA only
       * </pre>
       *
       * <code>NETWORK_MODE_WCDMA_ONLY = 3;</code>
       */
      NETWORK_MODE_WCDMA_ONLY(3),
      /**
       * <pre>
       * GSM/WCDMA (auto mode, according to PRL)
       * </pre>
       *
       * <code>NETWORK_MODE_GSM_UMTS = 4;</code>
       */
      NETWORK_MODE_GSM_UMTS(4),
      /**
       * <pre>
       * CDMA and EvDo (auto mode, according to PRL)
       * </pre>
       *
       * <code>NETWORK_MODE_CDMA = 5;</code>
       */
      NETWORK_MODE_CDMA(5),
      /**
       * <pre>
       * CDMA only
       * </pre>
       *
       * <code>NETWORK_MODE_CDMA_NO_EVDO = 6;</code>
       */
      NETWORK_MODE_CDMA_NO_EVDO(6),
      /**
       * <pre>
       * EvDo only
       * </pre>
       *
       * <code>NETWORK_MODE_EVDO_NO_CDMA = 7;</code>
       */
      NETWORK_MODE_EVDO_NO_CDMA(7),
      /**
       * <pre>
       * GSM/WCDMA, CDMA, and EvDo (auto mode, according to PRL)
       * </pre>
       *
       * <code>NETWORK_MODE_GLOBAL = 8;</code>
       */
      NETWORK_MODE_GLOBAL(8),
      /**
       * <pre>
       * LTE, CDMA and EvDo
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_CDMA_EVDO = 9;</code>
       */
      NETWORK_MODE_LTE_CDMA_EVDO(9),
      /**
       * <pre>
       * LTE, GSM/WCDMA
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_GSM_WCDMA = 10;</code>
       */
      NETWORK_MODE_LTE_GSM_WCDMA(10),
      /**
       * <pre>
       * LTE, CDMA, EvDo, GSM/WCDMA
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA = 11;</code>
       */
      NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA(11),
      /**
       * <pre>
       * LTE Only mode
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_ONLY = 12;</code>
       */
      NETWORK_MODE_LTE_ONLY(12),
      /**
       * <pre>
       * LTE/WCDMA
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_WCDMA = 13;</code>
       */
      NETWORK_MODE_LTE_WCDMA(13),
      /**
       * <pre>
       * TD-SCDMA only
       * </pre>
       *
       * <code>NETWORK_MODE_TDSCDMA_ONLY = 14;</code>
       */
      NETWORK_MODE_TDSCDMA_ONLY(14),
      /**
       * <pre>
       * TD-SCDMA and WCDMA
       * </pre>
       *
       * <code>NETWORK_MODE_TDSCDMA_WCDMA = 15;</code>
       */
      NETWORK_MODE_TDSCDMA_WCDMA(15),
      /**
       * <pre>
       * TD-SCDMA and LTE
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_TDSCDMA = 16;</code>
       */
      NETWORK_MODE_LTE_TDSCDMA(16),
      /**
       * <pre>
       * TD-SCDMA and GSM
       * </pre>
       *
       * <code>NETWORK_MODE_TDSCDMA_GSM = 17;</code>
       */
      NETWORK_MODE_TDSCDMA_GSM(17),
      /**
       * <pre>
       * TD-SCDMA,GSM and LTE
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_TDSCDMA_GSM = 18;</code>
       */
      NETWORK_MODE_LTE_TDSCDMA_GSM(18),
      /**
       * <pre>
       * TD-SCDMA, GSM/WCDMA
       * </pre>
       *
       * <code>NETWORK_MODE_TDSCDMA_GSM_WCDMA = 19;</code>
       */
      NETWORK_MODE_TDSCDMA_GSM_WCDMA(19),
      /**
       * <pre>
       * TD-SCDMA, WCDMA and LTE
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_TDSCDMA_WCDMA = 20;</code>
       */
      NETWORK_MODE_LTE_TDSCDMA_WCDMA(20),
      /**
       * <pre>
       * TD-SCDMA, GSM/WCDMA and LTE
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA = 21;</code>
       */
      NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA(21),
      /**
       * <pre>
       * TD-SCDMA,EvDo,CDMA,GSM/WCDMA
       * </pre>
       *
       * <code>NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA = 22;</code>
       */
      NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA(22),
      /**
       * <pre>
       * TD-SCDMA/LTE/GSM/WCDMA, CDMA, and EvDo
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA = 23;</code>
       */
      NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA(23),
      ;

      /**
       * <pre>
       * Mode is unknown.
       * </pre>
       *
       * <code>NETWORK_MODE_UNKNOWN = 0;</code>
       */
      public static final int NETWORK_MODE_UNKNOWN_VALUE = 0;
      /**
       * <pre>
       * GSM/WCDMA (WCDMA preferred). Note the following values are all off by 1.
       * </pre>
       *
       * <code>NETWORK_MODE_WCDMA_PREF = 1;</code>
       */
      public static final int NETWORK_MODE_WCDMA_PREF_VALUE = 1;
      /**
       * <pre>
       * GSM only
       * </pre>
       *
       * <code>NETWORK_MODE_GSM_ONLY = 2;</code>
       */
      public static final int NETWORK_MODE_GSM_ONLY_VALUE = 2;
      /**
       * <pre>
       * WCDMA only
       * </pre>
       *
       * <code>NETWORK_MODE_WCDMA_ONLY = 3;</code>
       */
      public static final int NETWORK_MODE_WCDMA_ONLY_VALUE = 3;
      /**
       * <pre>
       * GSM/WCDMA (auto mode, according to PRL)
       * </pre>
       *
       * <code>NETWORK_MODE_GSM_UMTS = 4;</code>
       */
      public static final int NETWORK_MODE_GSM_UMTS_VALUE = 4;
      /**
       * <pre>
       * CDMA and EvDo (auto mode, according to PRL)
       * </pre>
       *
       * <code>NETWORK_MODE_CDMA = 5;</code>
       */
      public static final int NETWORK_MODE_CDMA_VALUE = 5;
      /**
       * <pre>
       * CDMA only
       * </pre>
       *
       * <code>NETWORK_MODE_CDMA_NO_EVDO = 6;</code>
       */
      public static final int NETWORK_MODE_CDMA_NO_EVDO_VALUE = 6;
      /**
       * <pre>
       * EvDo only
       * </pre>
       *
       * <code>NETWORK_MODE_EVDO_NO_CDMA = 7;</code>
       */
      public static final int NETWORK_MODE_EVDO_NO_CDMA_VALUE = 7;
      /**
       * <pre>
       * GSM/WCDMA, CDMA, and EvDo (auto mode, according to PRL)
       * </pre>
       *
       * <code>NETWORK_MODE_GLOBAL = 8;</code>
       */
      public static final int NETWORK_MODE_GLOBAL_VALUE = 8;
      /**
       * <pre>
       * LTE, CDMA and EvDo
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_CDMA_EVDO = 9;</code>
       */
      public static final int NETWORK_MODE_LTE_CDMA_EVDO_VALUE = 9;
      /**
       * <pre>
       * LTE, GSM/WCDMA
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_GSM_WCDMA = 10;</code>
       */
      public static final int NETWORK_MODE_LTE_GSM_WCDMA_VALUE = 10;
      /**
       * <pre>
       * LTE, CDMA, EvDo, GSM/WCDMA
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA = 11;</code>
       */
      public static final int NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA_VALUE = 11;
      /**
       * <pre>
       * LTE Only mode
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_ONLY = 12;</code>
       */
      public static final int NETWORK_MODE_LTE_ONLY_VALUE = 12;
      /**
       * <pre>
       * LTE/WCDMA
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_WCDMA = 13;</code>
       */
      public static final int NETWORK_MODE_LTE_WCDMA_VALUE = 13;
      /**
       * <pre>
       * TD-SCDMA only
       * </pre>
       *
       * <code>NETWORK_MODE_TDSCDMA_ONLY = 14;</code>
       */
      public static final int NETWORK_MODE_TDSCDMA_ONLY_VALUE = 14;
      /**
       * <pre>
       * TD-SCDMA and WCDMA
       * </pre>
       *
       * <code>NETWORK_MODE_TDSCDMA_WCDMA = 15;</code>
       */
      public static final int NETWORK_MODE_TDSCDMA_WCDMA_VALUE = 15;
      /**
       * <pre>
       * TD-SCDMA and LTE
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_TDSCDMA = 16;</code>
       */
      public static final int NETWORK_MODE_LTE_TDSCDMA_VALUE = 16;
      /**
       * <pre>
       * TD-SCDMA and GSM
       * </pre>
       *
       * <code>NETWORK_MODE_TDSCDMA_GSM = 17;</code>
       */
      public static final int NETWORK_MODE_TDSCDMA_GSM_VALUE = 17;
      /**
       * <pre>
       * TD-SCDMA,GSM and LTE
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_TDSCDMA_GSM = 18;</code>
       */
      public static final int NETWORK_MODE_LTE_TDSCDMA_GSM_VALUE = 18;
      /**
       * <pre>
       * TD-SCDMA, GSM/WCDMA
       * </pre>
       *
       * <code>NETWORK_MODE_TDSCDMA_GSM_WCDMA = 19;</code>
       */
      public static final int NETWORK_MODE_TDSCDMA_GSM_WCDMA_VALUE = 19;
      /**
       * <pre>
       * TD-SCDMA, WCDMA and LTE
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_TDSCDMA_WCDMA = 20;</code>
       */
      public static final int NETWORK_MODE_LTE_TDSCDMA_WCDMA_VALUE = 20;
      /**
       * <pre>
       * TD-SCDMA, GSM/WCDMA and LTE
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA = 21;</code>
       */
      public static final int NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA_VALUE = 21;
      /**
       * <pre>
       * TD-SCDMA,EvDo,CDMA,GSM/WCDMA
       * </pre>
       *
       * <code>NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA = 22;</code>
       */
      public static final int NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA_VALUE = 22;
      /**
       * <pre>
       * TD-SCDMA/LTE/GSM/WCDMA, CDMA, and EvDo
       * </pre>
       *
       * <code>NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA = 23;</code>
       */
      public static final int NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA_VALUE = 23;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RilNetworkMode valueOf(int value) {
        return forNumber(value);
      }

      public static RilNetworkMode forNumber(int value) {
        switch (value) {
          case 0: return NETWORK_MODE_UNKNOWN;
          case 1: return NETWORK_MODE_WCDMA_PREF;
          case 2: return NETWORK_MODE_GSM_ONLY;
          case 3: return NETWORK_MODE_WCDMA_ONLY;
          case 4: return NETWORK_MODE_GSM_UMTS;
          case 5: return NETWORK_MODE_CDMA;
          case 6: return NETWORK_MODE_CDMA_NO_EVDO;
          case 7: return NETWORK_MODE_EVDO_NO_CDMA;
          case 8: return NETWORK_MODE_GLOBAL;
          case 9: return NETWORK_MODE_LTE_CDMA_EVDO;
          case 10: return NETWORK_MODE_LTE_GSM_WCDMA;
          case 11: return NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA;
          case 12: return NETWORK_MODE_LTE_ONLY;
          case 13: return NETWORK_MODE_LTE_WCDMA;
          case 14: return NETWORK_MODE_TDSCDMA_ONLY;
          case 15: return NETWORK_MODE_TDSCDMA_WCDMA;
          case 16: return NETWORK_MODE_LTE_TDSCDMA;
          case 17: return NETWORK_MODE_TDSCDMA_GSM;
          case 18: return NETWORK_MODE_LTE_TDSCDMA_GSM;
          case 19: return NETWORK_MODE_TDSCDMA_GSM_WCDMA;
          case 20: return NETWORK_MODE_LTE_TDSCDMA_WCDMA;
          case 21: return NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA;
          case 22: return NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA;
          case 23: return NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RilNetworkMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          RilNetworkMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RilNetworkMode>() {
              public RilNetworkMode findValueByNumber(int number) {
                return RilNetworkMode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.TelephonySettings.getDescriptor().getEnumTypes().get(0);
      }

      private static final RilNetworkMode[] VALUES = values();

      public static RilNetworkMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private RilNetworkMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:clearcut.connectivity.TelephonySettings.RilNetworkMode)
    }

    /**
     * <pre>
     * Constants for WiFi Calling mode
     * </pre>
     *
     * Protobuf enum {@code clearcut.connectivity.TelephonySettings.WiFiCallingMode}
     */
    public enum WiFiCallingMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Calling mode is unknown.
       * </pre>
       *
       * <code>WFC_MODE_UNKNOWN = 0;</code>
       */
      WFC_MODE_UNKNOWN(0),
      /**
       * <code>WFC_MODE_WIFI_ONLY = 1;</code>
       */
      WFC_MODE_WIFI_ONLY(1),
      /**
       * <code>WFC_MODE_CELLULAR_PREFERRED = 2;</code>
       */
      WFC_MODE_CELLULAR_PREFERRED(2),
      /**
       * <code>WFC_MODE_WIFI_PREFERRED = 3;</code>
       */
      WFC_MODE_WIFI_PREFERRED(3),
      ;

      /**
       * <pre>
       * Calling mode is unknown.
       * </pre>
       *
       * <code>WFC_MODE_UNKNOWN = 0;</code>
       */
      public static final int WFC_MODE_UNKNOWN_VALUE = 0;
      /**
       * <code>WFC_MODE_WIFI_ONLY = 1;</code>
       */
      public static final int WFC_MODE_WIFI_ONLY_VALUE = 1;
      /**
       * <code>WFC_MODE_CELLULAR_PREFERRED = 2;</code>
       */
      public static final int WFC_MODE_CELLULAR_PREFERRED_VALUE = 2;
      /**
       * <code>WFC_MODE_WIFI_PREFERRED = 3;</code>
       */
      public static final int WFC_MODE_WIFI_PREFERRED_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static WiFiCallingMode valueOf(int value) {
        return forNumber(value);
      }

      public static WiFiCallingMode forNumber(int value) {
        switch (value) {
          case 0: return WFC_MODE_UNKNOWN;
          case 1: return WFC_MODE_WIFI_ONLY;
          case 2: return WFC_MODE_CELLULAR_PREFERRED;
          case 3: return WFC_MODE_WIFI_PREFERRED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<WiFiCallingMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          WiFiCallingMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<WiFiCallingMode>() {
              public WiFiCallingMode findValueByNumber(int number) {
                return WiFiCallingMode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.TelephonySettings.getDescriptor().getEnumTypes().get(1);
      }

      private static final WiFiCallingMode[] VALUES = values();

      public static WiFiCallingMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private WiFiCallingMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:clearcut.connectivity.TelephonySettings.WiFiCallingMode)
    }

    private int bitField0_;
    public static final int IS_AIRPLANE_MODE_FIELD_NUMBER = 1;
    private boolean isAirplaneMode_;
    /**
     * <pre>
     * If the device is in airplane mode.
     * </pre>
     *
     * <code>optional bool is_airplane_mode = 1;</code>
     */
    public boolean hasIsAirplaneMode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * If the device is in airplane mode.
     * </pre>
     *
     * <code>optional bool is_airplane_mode = 1;</code>
     */
    public boolean getIsAirplaneMode() {
      return isAirplaneMode_;
    }

    public static final int IS_CELLULAR_DATA_ENABLED_FIELD_NUMBER = 2;
    private boolean isCellularDataEnabled_;
    /**
     * <pre>
     * If cell-data has been enabled.
     * </pre>
     *
     * <code>optional bool is_cellular_data_enabled = 2;</code>
     */
    public boolean hasIsCellularDataEnabled() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * If cell-data has been enabled.
     * </pre>
     *
     * <code>optional bool is_cellular_data_enabled = 2;</code>
     */
    public boolean getIsCellularDataEnabled() {
      return isCellularDataEnabled_;
    }

    public static final int IS_DATA_ROAMING_ENABLED_FIELD_NUMBER = 3;
    private boolean isDataRoamingEnabled_;
    /**
     * <pre>
     * If cell-roaming has been enabled.
     * </pre>
     *
     * <code>optional bool is_data_roaming_enabled = 3;</code>
     */
    public boolean hasIsDataRoamingEnabled() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * If cell-roaming has been enabled.
     * </pre>
     *
     * <code>optional bool is_data_roaming_enabled = 3;</code>
     */
    public boolean getIsDataRoamingEnabled() {
      return isDataRoamingEnabled_;
    }

    public static final int PREFERRED_NETWORK_MODE_FIELD_NUMBER = 4;
    private int preferredNetworkMode_;
    /**
     * <pre>
     * Preferred network mode.
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;</code>
     */
    public boolean hasPreferredNetworkMode() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Preferred network mode.
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode getPreferredNetworkMode() {
      com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode result = com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.valueOf(preferredNetworkMode_);
      return result == null ? com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_UNKNOWN : result;
    }

    public static final int IS_ENHANCED_4G_LTE_MODE_ENABLED_FIELD_NUMBER = 5;
    private boolean isEnhanced4GLteModeEnabled_;
    /**
     * <pre>
     * If enhanced mode enabled.
     * </pre>
     *
     * <code>optional bool is_enhanced_4g_lte_mode_enabled = 5;</code>
     */
    public boolean hasIsEnhanced4GLteModeEnabled() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * If enhanced mode enabled.
     * </pre>
     *
     * <code>optional bool is_enhanced_4g_lte_mode_enabled = 5;</code>
     */
    public boolean getIsEnhanced4GLteModeEnabled() {
      return isEnhanced4GLteModeEnabled_;
    }

    public static final int IS_WIFI_ENABLED_FIELD_NUMBER = 6;
    private boolean isWifiEnabled_;
    /**
     * <pre>
     * If wifi has been enabled.
     * </pre>
     *
     * <code>optional bool is_wifi_enabled = 6;</code>
     */
    public boolean hasIsWifiEnabled() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * If wifi has been enabled.
     * </pre>
     *
     * <code>optional bool is_wifi_enabled = 6;</code>
     */
    public boolean getIsWifiEnabled() {
      return isWifiEnabled_;
    }

    public static final int IS_WIFI_CALLING_ENABLED_FIELD_NUMBER = 7;
    private boolean isWifiCallingEnabled_;
    /**
     * <pre>
     * If wifi-calling has been enabled.
     * </pre>
     *
     * <code>optional bool is_wifi_calling_enabled = 7;</code>
     */
    public boolean hasIsWifiCallingEnabled() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * If wifi-calling has been enabled.
     * </pre>
     *
     * <code>optional bool is_wifi_calling_enabled = 7;</code>
     */
    public boolean getIsWifiCallingEnabled() {
      return isWifiCallingEnabled_;
    }

    public static final int WIFI_CALLING_MODE_FIELD_NUMBER = 8;
    private int wifiCallingMode_;
    /**
     * <pre>
     * Wifi-calling Mode.
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;</code>
     */
    public boolean hasWifiCallingMode() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * Wifi-calling Mode.
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode getWifiCallingMode() {
      com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode result = com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode.valueOf(wifiCallingMode_);
      return result == null ? com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode.WFC_MODE_UNKNOWN : result;
    }

    public static final int IS_VT_OVER_LTE_ENABLED_FIELD_NUMBER = 9;
    private boolean isVtOverLteEnabled_;
    /**
     * <pre>
     * If video over LTE enabled.
     * </pre>
     *
     * <code>optional bool is_vt_over_lte_enabled = 9;</code>
     */
    public boolean hasIsVtOverLteEnabled() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * If video over LTE enabled.
     * </pre>
     *
     * <code>optional bool is_vt_over_lte_enabled = 9;</code>
     */
    public boolean getIsVtOverLteEnabled() {
      return isVtOverLteEnabled_;
    }

    public static final int IS_VT_OVER_WIFI_ENABLED_FIELD_NUMBER = 10;
    private boolean isVtOverWifiEnabled_;
    /**
     * <pre>
     * If video over wifi enabled.
     * </pre>
     *
     * <code>optional bool is_vt_over_wifi_enabled = 10;</code>
     */
    public boolean hasIsVtOverWifiEnabled() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     * If video over wifi enabled.
     * </pre>
     *
     * <code>optional bool is_vt_over_wifi_enabled = 10;</code>
     */
    public boolean getIsVtOverWifiEnabled() {
      return isVtOverWifiEnabled_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, isAirplaneMode_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, isCellularDataEnabled_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, isDataRoamingEnabled_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, preferredNetworkMode_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, isEnhanced4GLteModeEnabled_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, isWifiEnabled_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, isWifiCallingEnabled_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(8, wifiCallingMode_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(9, isVtOverLteEnabled_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(10, isVtOverWifiEnabled_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isAirplaneMode_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, isCellularDataEnabled_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, isDataRoamingEnabled_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, preferredNetworkMode_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isEnhanced4GLteModeEnabled_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, isWifiEnabled_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, isWifiCallingEnabled_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, wifiCallingMode_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, isVtOverLteEnabled_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, isVtOverWifiEnabled_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.internal.telephony.TelephonyProto.TelephonySettings)) {
        return super.equals(obj);
      }
      com.android.internal.telephony.TelephonyProto.TelephonySettings other = (com.android.internal.telephony.TelephonyProto.TelephonySettings) obj;

      boolean result = true;
      result = result && (hasIsAirplaneMode() == other.hasIsAirplaneMode());
      if (hasIsAirplaneMode()) {
        result = result && (getIsAirplaneMode()
            == other.getIsAirplaneMode());
      }
      result = result && (hasIsCellularDataEnabled() == other.hasIsCellularDataEnabled());
      if (hasIsCellularDataEnabled()) {
        result = result && (getIsCellularDataEnabled()
            == other.getIsCellularDataEnabled());
      }
      result = result && (hasIsDataRoamingEnabled() == other.hasIsDataRoamingEnabled());
      if (hasIsDataRoamingEnabled()) {
        result = result && (getIsDataRoamingEnabled()
            == other.getIsDataRoamingEnabled());
      }
      result = result && (hasPreferredNetworkMode() == other.hasPreferredNetworkMode());
      if (hasPreferredNetworkMode()) {
        result = result && preferredNetworkMode_ == other.preferredNetworkMode_;
      }
      result = result && (hasIsEnhanced4GLteModeEnabled() == other.hasIsEnhanced4GLteModeEnabled());
      if (hasIsEnhanced4GLteModeEnabled()) {
        result = result && (getIsEnhanced4GLteModeEnabled()
            == other.getIsEnhanced4GLteModeEnabled());
      }
      result = result && (hasIsWifiEnabled() == other.hasIsWifiEnabled());
      if (hasIsWifiEnabled()) {
        result = result && (getIsWifiEnabled()
            == other.getIsWifiEnabled());
      }
      result = result && (hasIsWifiCallingEnabled() == other.hasIsWifiCallingEnabled());
      if (hasIsWifiCallingEnabled()) {
        result = result && (getIsWifiCallingEnabled()
            == other.getIsWifiCallingEnabled());
      }
      result = result && (hasWifiCallingMode() == other.hasWifiCallingMode());
      if (hasWifiCallingMode()) {
        result = result && wifiCallingMode_ == other.wifiCallingMode_;
      }
      result = result && (hasIsVtOverLteEnabled() == other.hasIsVtOverLteEnabled());
      if (hasIsVtOverLteEnabled()) {
        result = result && (getIsVtOverLteEnabled()
            == other.getIsVtOverLteEnabled());
      }
      result = result && (hasIsVtOverWifiEnabled() == other.hasIsVtOverWifiEnabled());
      if (hasIsVtOverWifiEnabled()) {
        result = result && (getIsVtOverWifiEnabled()
            == other.getIsVtOverWifiEnabled());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasIsAirplaneMode()) {
        hash = (37 * hash) + IS_AIRPLANE_MODE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsAirplaneMode());
      }
      if (hasIsCellularDataEnabled()) {
        hash = (37 * hash) + IS_CELLULAR_DATA_ENABLED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsCellularDataEnabled());
      }
      if (hasIsDataRoamingEnabled()) {
        hash = (37 * hash) + IS_DATA_ROAMING_ENABLED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsDataRoamingEnabled());
      }
      if (hasPreferredNetworkMode()) {
        hash = (37 * hash) + PREFERRED_NETWORK_MODE_FIELD_NUMBER;
        hash = (53 * hash) + preferredNetworkMode_;
      }
      if (hasIsEnhanced4GLteModeEnabled()) {
        hash = (37 * hash) + IS_ENHANCED_4G_LTE_MODE_ENABLED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsEnhanced4GLteModeEnabled());
      }
      if (hasIsWifiEnabled()) {
        hash = (37 * hash) + IS_WIFI_ENABLED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsWifiEnabled());
      }
      if (hasIsWifiCallingEnabled()) {
        hash = (37 * hash) + IS_WIFI_CALLING_ENABLED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsWifiCallingEnabled());
      }
      if (hasWifiCallingMode()) {
        hash = (37 * hash) + WIFI_CALLING_MODE_FIELD_NUMBER;
        hash = (53 * hash) + wifiCallingMode_;
      }
      if (hasIsVtOverLteEnabled()) {
        hash = (37 * hash) + IS_VT_OVER_LTE_ENABLED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsVtOverLteEnabled());
      }
      if (hasIsVtOverWifiEnabled()) {
        hash = (37 * hash) + IS_VT_OVER_WIFI_ENABLED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsVtOverWifiEnabled());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.internal.telephony.TelephonyProto.TelephonySettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonySettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonySettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonySettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonySettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonySettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonySettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonySettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonySettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonySettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.TelephonySettings prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Telephony related user settings
     * </pre>
     *
     * Protobuf type {@code clearcut.connectivity.TelephonySettings}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clearcut.connectivity.TelephonySettings)
        com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonySettings_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonySettings_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.TelephonySettings.class, com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder.class);
      }

      // Construct using com.android.internal.telephony.TelephonyProto.TelephonySettings.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        isAirplaneMode_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        isCellularDataEnabled_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        isDataRoamingEnabled_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        preferredNetworkMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        isEnhanced4GLteModeEnabled_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        isWifiEnabled_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        isWifiCallingEnabled_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        wifiCallingMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        isVtOverLteEnabled_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        isVtOverWifiEnabled_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonySettings_descriptor;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonySettings getDefaultInstanceForType() {
        return com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance();
      }

      public com.android.internal.telephony.TelephonyProto.TelephonySettings build() {
        com.android.internal.telephony.TelephonyProto.TelephonySettings result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonySettings buildPartial() {
        com.android.internal.telephony.TelephonyProto.TelephonySettings result = new com.android.internal.telephony.TelephonyProto.TelephonySettings(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.isAirplaneMode_ = isAirplaneMode_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.isCellularDataEnabled_ = isCellularDataEnabled_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.isDataRoamingEnabled_ = isDataRoamingEnabled_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.preferredNetworkMode_ = preferredNetworkMode_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.isEnhanced4GLteModeEnabled_ = isEnhanced4GLteModeEnabled_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.isWifiEnabled_ = isWifiEnabled_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isWifiCallingEnabled_ = isWifiCallingEnabled_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.wifiCallingMode_ = wifiCallingMode_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.isVtOverLteEnabled_ = isVtOverLteEnabled_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isVtOverWifiEnabled_ = isVtOverWifiEnabled_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.internal.telephony.TelephonyProto.TelephonySettings) {
          return mergeFrom((com.android.internal.telephony.TelephonyProto.TelephonySettings)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.TelephonySettings other) {
        if (other == com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance()) return this;
        if (other.hasIsAirplaneMode()) {
          setIsAirplaneMode(other.getIsAirplaneMode());
        }
        if (other.hasIsCellularDataEnabled()) {
          setIsCellularDataEnabled(other.getIsCellularDataEnabled());
        }
        if (other.hasIsDataRoamingEnabled()) {
          setIsDataRoamingEnabled(other.getIsDataRoamingEnabled());
        }
        if (other.hasPreferredNetworkMode()) {
          setPreferredNetworkMode(other.getPreferredNetworkMode());
        }
        if (other.hasIsEnhanced4GLteModeEnabled()) {
          setIsEnhanced4GLteModeEnabled(other.getIsEnhanced4GLteModeEnabled());
        }
        if (other.hasIsWifiEnabled()) {
          setIsWifiEnabled(other.getIsWifiEnabled());
        }
        if (other.hasIsWifiCallingEnabled()) {
          setIsWifiCallingEnabled(other.getIsWifiCallingEnabled());
        }
        if (other.hasWifiCallingMode()) {
          setWifiCallingMode(other.getWifiCallingMode());
        }
        if (other.hasIsVtOverLteEnabled()) {
          setIsVtOverLteEnabled(other.getIsVtOverLteEnabled());
        }
        if (other.hasIsVtOverWifiEnabled()) {
          setIsVtOverWifiEnabled(other.getIsVtOverWifiEnabled());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.android.internal.telephony.TelephonyProto.TelephonySettings parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.android.internal.telephony.TelephonyProto.TelephonySettings) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean isAirplaneMode_ ;
      /**
       * <pre>
       * If the device is in airplane mode.
       * </pre>
       *
       * <code>optional bool is_airplane_mode = 1;</code>
       */
      public boolean hasIsAirplaneMode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * If the device is in airplane mode.
       * </pre>
       *
       * <code>optional bool is_airplane_mode = 1;</code>
       */
      public boolean getIsAirplaneMode() {
        return isAirplaneMode_;
      }
      /**
       * <pre>
       * If the device is in airplane mode.
       * </pre>
       *
       * <code>optional bool is_airplane_mode = 1;</code>
       */
      public Builder setIsAirplaneMode(boolean value) {
        bitField0_ |= 0x00000001;
        isAirplaneMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If the device is in airplane mode.
       * </pre>
       *
       * <code>optional bool is_airplane_mode = 1;</code>
       */
      public Builder clearIsAirplaneMode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isAirplaneMode_ = false;
        onChanged();
        return this;
      }

      private boolean isCellularDataEnabled_ ;
      /**
       * <pre>
       * If cell-data has been enabled.
       * </pre>
       *
       * <code>optional bool is_cellular_data_enabled = 2;</code>
       */
      public boolean hasIsCellularDataEnabled() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * If cell-data has been enabled.
       * </pre>
       *
       * <code>optional bool is_cellular_data_enabled = 2;</code>
       */
      public boolean getIsCellularDataEnabled() {
        return isCellularDataEnabled_;
      }
      /**
       * <pre>
       * If cell-data has been enabled.
       * </pre>
       *
       * <code>optional bool is_cellular_data_enabled = 2;</code>
       */
      public Builder setIsCellularDataEnabled(boolean value) {
        bitField0_ |= 0x00000002;
        isCellularDataEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If cell-data has been enabled.
       * </pre>
       *
       * <code>optional bool is_cellular_data_enabled = 2;</code>
       */
      public Builder clearIsCellularDataEnabled() {
        bitField0_ = (bitField0_ & ~0x00000002);
        isCellularDataEnabled_ = false;
        onChanged();
        return this;
      }

      private boolean isDataRoamingEnabled_ ;
      /**
       * <pre>
       * If cell-roaming has been enabled.
       * </pre>
       *
       * <code>optional bool is_data_roaming_enabled = 3;</code>
       */
      public boolean hasIsDataRoamingEnabled() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * If cell-roaming has been enabled.
       * </pre>
       *
       * <code>optional bool is_data_roaming_enabled = 3;</code>
       */
      public boolean getIsDataRoamingEnabled() {
        return isDataRoamingEnabled_;
      }
      /**
       * <pre>
       * If cell-roaming has been enabled.
       * </pre>
       *
       * <code>optional bool is_data_roaming_enabled = 3;</code>
       */
      public Builder setIsDataRoamingEnabled(boolean value) {
        bitField0_ |= 0x00000004;
        isDataRoamingEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If cell-roaming has been enabled.
       * </pre>
       *
       * <code>optional bool is_data_roaming_enabled = 3;</code>
       */
      public Builder clearIsDataRoamingEnabled() {
        bitField0_ = (bitField0_ & ~0x00000004);
        isDataRoamingEnabled_ = false;
        onChanged();
        return this;
      }

      private int preferredNetworkMode_ = 0;
      /**
       * <pre>
       * Preferred network mode.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;</code>
       */
      public boolean hasPreferredNetworkMode() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * Preferred network mode.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode getPreferredNetworkMode() {
        com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode result = com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.valueOf(preferredNetworkMode_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_UNKNOWN : result;
      }
      /**
       * <pre>
       * Preferred network mode.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;</code>
       */
      public Builder setPreferredNetworkMode(com.android.internal.telephony.TelephonyProto.TelephonySettings.RilNetworkMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        preferredNetworkMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Preferred network mode.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;</code>
       */
      public Builder clearPreferredNetworkMode() {
        bitField0_ = (bitField0_ & ~0x00000008);
        preferredNetworkMode_ = 0;
        onChanged();
        return this;
      }

      private boolean isEnhanced4GLteModeEnabled_ ;
      /**
       * <pre>
       * If enhanced mode enabled.
       * </pre>
       *
       * <code>optional bool is_enhanced_4g_lte_mode_enabled = 5;</code>
       */
      public boolean hasIsEnhanced4GLteModeEnabled() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * If enhanced mode enabled.
       * </pre>
       *
       * <code>optional bool is_enhanced_4g_lte_mode_enabled = 5;</code>
       */
      public boolean getIsEnhanced4GLteModeEnabled() {
        return isEnhanced4GLteModeEnabled_;
      }
      /**
       * <pre>
       * If enhanced mode enabled.
       * </pre>
       *
       * <code>optional bool is_enhanced_4g_lte_mode_enabled = 5;</code>
       */
      public Builder setIsEnhanced4GLteModeEnabled(boolean value) {
        bitField0_ |= 0x00000010;
        isEnhanced4GLteModeEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If enhanced mode enabled.
       * </pre>
       *
       * <code>optional bool is_enhanced_4g_lte_mode_enabled = 5;</code>
       */
      public Builder clearIsEnhanced4GLteModeEnabled() {
        bitField0_ = (bitField0_ & ~0x00000010);
        isEnhanced4GLteModeEnabled_ = false;
        onChanged();
        return this;
      }

      private boolean isWifiEnabled_ ;
      /**
       * <pre>
       * If wifi has been enabled.
       * </pre>
       *
       * <code>optional bool is_wifi_enabled = 6;</code>
       */
      public boolean hasIsWifiEnabled() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * If wifi has been enabled.
       * </pre>
       *
       * <code>optional bool is_wifi_enabled = 6;</code>
       */
      public boolean getIsWifiEnabled() {
        return isWifiEnabled_;
      }
      /**
       * <pre>
       * If wifi has been enabled.
       * </pre>
       *
       * <code>optional bool is_wifi_enabled = 6;</code>
       */
      public Builder setIsWifiEnabled(boolean value) {
        bitField0_ |= 0x00000020;
        isWifiEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If wifi has been enabled.
       * </pre>
       *
       * <code>optional bool is_wifi_enabled = 6;</code>
       */
      public Builder clearIsWifiEnabled() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isWifiEnabled_ = false;
        onChanged();
        return this;
      }

      private boolean isWifiCallingEnabled_ ;
      /**
       * <pre>
       * If wifi-calling has been enabled.
       * </pre>
       *
       * <code>optional bool is_wifi_calling_enabled = 7;</code>
       */
      public boolean hasIsWifiCallingEnabled() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * If wifi-calling has been enabled.
       * </pre>
       *
       * <code>optional bool is_wifi_calling_enabled = 7;</code>
       */
      public boolean getIsWifiCallingEnabled() {
        return isWifiCallingEnabled_;
      }
      /**
       * <pre>
       * If wifi-calling has been enabled.
       * </pre>
       *
       * <code>optional bool is_wifi_calling_enabled = 7;</code>
       */
      public Builder setIsWifiCallingEnabled(boolean value) {
        bitField0_ |= 0x00000040;
        isWifiCallingEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If wifi-calling has been enabled.
       * </pre>
       *
       * <code>optional bool is_wifi_calling_enabled = 7;</code>
       */
      public Builder clearIsWifiCallingEnabled() {
        bitField0_ = (bitField0_ & ~0x00000040);
        isWifiCallingEnabled_ = false;
        onChanged();
        return this;
      }

      private int wifiCallingMode_ = 0;
      /**
       * <pre>
       * Wifi-calling Mode.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;</code>
       */
      public boolean hasWifiCallingMode() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * Wifi-calling Mode.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode getWifiCallingMode() {
        com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode result = com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode.valueOf(wifiCallingMode_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode.WFC_MODE_UNKNOWN : result;
      }
      /**
       * <pre>
       * Wifi-calling Mode.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;</code>
       */
      public Builder setWifiCallingMode(com.android.internal.telephony.TelephonyProto.TelephonySettings.WiFiCallingMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        wifiCallingMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Wifi-calling Mode.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;</code>
       */
      public Builder clearWifiCallingMode() {
        bitField0_ = (bitField0_ & ~0x00000080);
        wifiCallingMode_ = 0;
        onChanged();
        return this;
      }

      private boolean isVtOverLteEnabled_ ;
      /**
       * <pre>
       * If video over LTE enabled.
       * </pre>
       *
       * <code>optional bool is_vt_over_lte_enabled = 9;</code>
       */
      public boolean hasIsVtOverLteEnabled() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * If video over LTE enabled.
       * </pre>
       *
       * <code>optional bool is_vt_over_lte_enabled = 9;</code>
       */
      public boolean getIsVtOverLteEnabled() {
        return isVtOverLteEnabled_;
      }
      /**
       * <pre>
       * If video over LTE enabled.
       * </pre>
       *
       * <code>optional bool is_vt_over_lte_enabled = 9;</code>
       */
      public Builder setIsVtOverLteEnabled(boolean value) {
        bitField0_ |= 0x00000100;
        isVtOverLteEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If video over LTE enabled.
       * </pre>
       *
       * <code>optional bool is_vt_over_lte_enabled = 9;</code>
       */
      public Builder clearIsVtOverLteEnabled() {
        bitField0_ = (bitField0_ & ~0x00000100);
        isVtOverLteEnabled_ = false;
        onChanged();
        return this;
      }

      private boolean isVtOverWifiEnabled_ ;
      /**
       * <pre>
       * If video over wifi enabled.
       * </pre>
       *
       * <code>optional bool is_vt_over_wifi_enabled = 10;</code>
       */
      public boolean hasIsVtOverWifiEnabled() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * If video over wifi enabled.
       * </pre>
       *
       * <code>optional bool is_vt_over_wifi_enabled = 10;</code>
       */
      public boolean getIsVtOverWifiEnabled() {
        return isVtOverWifiEnabled_;
      }
      /**
       * <pre>
       * If video over wifi enabled.
       * </pre>
       *
       * <code>optional bool is_vt_over_wifi_enabled = 10;</code>
       */
      public Builder setIsVtOverWifiEnabled(boolean value) {
        bitField0_ |= 0x00000200;
        isVtOverWifiEnabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If video over wifi enabled.
       * </pre>
       *
       * <code>optional bool is_vt_over_wifi_enabled = 10;</code>
       */
      public Builder clearIsVtOverWifiEnabled() {
        bitField0_ = (bitField0_ & ~0x00000200);
        isVtOverWifiEnabled_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clearcut.connectivity.TelephonySettings)
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonySettings)
    private static final com.android.internal.telephony.TelephonyProto.TelephonySettings DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.TelephonySettings();
    }

    public static com.android.internal.telephony.TelephonyProto.TelephonySettings getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TelephonySettings>
        PARSER = new com.google.protobuf.AbstractParser<TelephonySettings>() {
      public TelephonySettings parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new TelephonySettings(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TelephonySettings> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TelephonySettings> getParserForType() {
      return PARSER;
    }

    public com.android.internal.telephony.TelephonyProto.TelephonySettings getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TelephonyServiceStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clearcut.connectivity.TelephonyServiceState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Current registered operator
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;</code>
     */
    boolean hasVoiceOperator();
    /**
     * <pre>
     * Current registered operator
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator getVoiceOperator();
    /**
     * <pre>
     * Current registered operator
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperatorOrBuilder getVoiceOperatorOrBuilder();

    /**
     * <pre>
     * Current registered data network operator
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;</code>
     */
    boolean hasDataOperator();
    /**
     * <pre>
     * Current registered data network operator
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator getDataOperator();
    /**
     * <pre>
     * Current registered data network operator
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperatorOrBuilder getDataOperatorOrBuilder();

    /**
     * <pre>
     * Current voice network roaming type
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];</code>
     */
    boolean hasVoiceRoamingType();
    /**
     * <pre>
     * Current voice network roaming type
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType getVoiceRoamingType();

    /**
     * <pre>
     * Current data network roaming type
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];</code>
     */
    boolean hasDataRoamingType();
    /**
     * <pre>
     * Current data network roaming type
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType getDataRoamingType();

    /**
     * <pre>
     * Current voice radio technology
     * </pre>
     *
     * <code>optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];</code>
     */
    boolean hasVoiceRat();
    /**
     * <pre>
     * Current voice radio technology
     * </pre>
     *
     * <code>optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];</code>
     */
    com.android.internal.telephony.TelephonyProto.RadioAccessTechnology getVoiceRat();

    /**
     * <pre>
     * Current data radio technology
     * </pre>
     *
     * <code>optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];</code>
     */
    boolean hasDataRat();
    /**
     * <pre>
     * Current data radio technology
     * </pre>
     *
     * <code>optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];</code>
     */
    com.android.internal.telephony.TelephonyProto.RadioAccessTechnology getDataRat();
  }
  /**
   * <pre>
   * Contains phone state and service related information.
   * </pre>
   *
   * Protobuf type {@code clearcut.connectivity.TelephonyServiceState}
   */
  public  static final class TelephonyServiceState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clearcut.connectivity.TelephonyServiceState)
      TelephonyServiceStateOrBuilder {
    // Use TelephonyServiceState.newBuilder() to construct.
    private TelephonyServiceState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TelephonyServiceState() {
      voiceRoamingType_ = -1;
      dataRoamingType_ = -1;
      voiceRat_ = -1;
      dataRat_ = -1;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TelephonyServiceState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = voiceOperator_.toBuilder();
              }
              voiceOperator_ = input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(voiceOperator_);
                voiceOperator_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = dataOperator_.toBuilder();
              }
              dataOperator_ = input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dataOperator_);
                dataOperator_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType value = com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                voiceRoamingType_ = rawValue;
              }
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType value = com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                dataRoamingType_ = rawValue;
              }
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              com.android.internal.telephony.TelephonyProto.RadioAccessTechnology value = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                voiceRat_ = rawValue;
              }
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              com.android.internal.telephony.TelephonyProto.RadioAccessTechnology value = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                dataRat_ = rawValue;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyServiceState_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyServiceState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.internal.telephony.TelephonyProto.TelephonyServiceState.class, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder.class);
    }

    /**
     * <pre>
     * Roaming type
     * </pre>
     *
     * Protobuf enum {@code clearcut.connectivity.TelephonyServiceState.RoamingType}
     */
    public enum RoamingType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Unknown. The default value. Different from ROAMING_TYPE_UNKNOWN.
       * </pre>
       *
       * <code>UNKNOWN = -1;</code>
       */
      UNKNOWN(-1),
      /**
       * <pre>
       * In home network
       * </pre>
       *
       * <code>ROAMING_TYPE_NOT_ROAMING = 0;</code>
       */
      ROAMING_TYPE_NOT_ROAMING(0),
      /**
       * <pre>
       * In domestic roaming network
       * </pre>
       *
       * <code>ROAMING_TYPE_DOMESTIC = 2;</code>
       */
      ROAMING_TYPE_DOMESTIC(2),
      /**
       * <pre>
       * In international roaming network
       * </pre>
       *
       * <code>ROAMING_TYPE_INTERNATIONAL = 3;</code>
       */
      ROAMING_TYPE_INTERNATIONAL(3),
      ;

      /**
       * <pre>
       * Unknown. The default value. Different from ROAMING_TYPE_UNKNOWN.
       * </pre>
       *
       * <code>UNKNOWN = -1;</code>
       */
      public static final int UNKNOWN_VALUE = -1;
      /**
       * <pre>
       * In home network
       * </pre>
       *
       * <code>ROAMING_TYPE_NOT_ROAMING = 0;</code>
       */
      public static final int ROAMING_TYPE_NOT_ROAMING_VALUE = 0;
      /**
       * <pre>
       * In domestic roaming network
       * </pre>
       *
       * <code>ROAMING_TYPE_DOMESTIC = 2;</code>
       */
      public static final int ROAMING_TYPE_DOMESTIC_VALUE = 2;
      /**
       * <pre>
       * In international roaming network
       * </pre>
       *
       * <code>ROAMING_TYPE_INTERNATIONAL = 3;</code>
       */
      public static final int ROAMING_TYPE_INTERNATIONAL_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RoamingType valueOf(int value) {
        return forNumber(value);
      }

      public static RoamingType forNumber(int value) {
        switch (value) {
          case -1: return UNKNOWN;
          case 0: return ROAMING_TYPE_NOT_ROAMING;
          case 2: return ROAMING_TYPE_DOMESTIC;
          case 3: return ROAMING_TYPE_INTERNATIONAL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RoamingType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          RoamingType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RoamingType>() {
              public RoamingType findValueByNumber(int number) {
                return RoamingType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDescriptor().getEnumTypes().get(0);
      }

      private static final RoamingType[] VALUES = values();

      public static RoamingType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private RoamingType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:clearcut.connectivity.TelephonyServiceState.RoamingType)
    }

    public interface TelephonyOperatorOrBuilder extends
        // @@protoc_insertion_point(interface_extends:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Name in long alphanumeric format
       * </pre>
       *
       * <code>optional string alpha_long = 1;</code>
       */
      boolean hasAlphaLong();
      /**
       * <pre>
       * Name in long alphanumeric format
       * </pre>
       *
       * <code>optional string alpha_long = 1;</code>
       */
      java.lang.String getAlphaLong();
      /**
       * <pre>
       * Name in long alphanumeric format
       * </pre>
       *
       * <code>optional string alpha_long = 1;</code>
       */
      com.google.protobuf.ByteString
          getAlphaLongBytes();

      /**
       * <pre>
       * Name in short alphanumeric format
       * </pre>
       *
       * <code>optional string alpha_short = 2;</code>
       */
      boolean hasAlphaShort();
      /**
       * <pre>
       * Name in short alphanumeric format
       * </pre>
       *
       * <code>optional string alpha_short = 2;</code>
       */
      java.lang.String getAlphaShort();
      /**
       * <pre>
       * Name in short alphanumeric format
       * </pre>
       *
       * <code>optional string alpha_short = 2;</code>
       */
      com.google.protobuf.ByteString
          getAlphaShortBytes();

      /**
       * <pre>
       * Numeric id.
       * In GSM/UMTS, numeric format is 3 digit country code plus 2 or 3 digit
       * network code. Same as MCC/MNC.
       * </pre>
       *
       * <code>optional string numeric = 3;</code>
       */
      boolean hasNumeric();
      /**
       * <pre>
       * Numeric id.
       * In GSM/UMTS, numeric format is 3 digit country code plus 2 or 3 digit
       * network code. Same as MCC/MNC.
       * </pre>
       *
       * <code>optional string numeric = 3;</code>
       */
      java.lang.String getNumeric();
      /**
       * <pre>
       * Numeric id.
       * In GSM/UMTS, numeric format is 3 digit country code plus 2 or 3 digit
       * network code. Same as MCC/MNC.
       * </pre>
       *
       * <code>optional string numeric = 3;</code>
       */
      com.google.protobuf.ByteString
          getNumericBytes();
    }
    /**
     * <pre>
     * The information about cellular network operator
     * </pre>
     *
     * Protobuf type {@code clearcut.connectivity.TelephonyServiceState.TelephonyOperator}
     */
    public  static final class TelephonyOperator extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
        TelephonyOperatorOrBuilder {
      // Use TelephonyOperator.newBuilder() to construct.
      private TelephonyOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private TelephonyOperator() {
        alphaLong_ = "";
        alphaShort_ = "";
        numeric_ = "";
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private TelephonyOperator(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000001;
                alphaLong_ = bs;
                break;
              }
              case 18: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000002;
                alphaShort_ = bs;
                break;
              }
              case 26: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000004;
                numeric_ = bs;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyServiceState_TelephonyOperator_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyServiceState_TelephonyOperator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.class, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.Builder.class);
      }

      private int bitField0_;
      public static final int ALPHA_LONG_FIELD_NUMBER = 1;
      private volatile java.lang.Object alphaLong_;
      /**
       * <pre>
       * Name in long alphanumeric format
       * </pre>
       *
       * <code>optional string alpha_long = 1;</code>
       */
      public boolean hasAlphaLong() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Name in long alphanumeric format
       * </pre>
       *
       * <code>optional string alpha_long = 1;</code>
       */
      public java.lang.String getAlphaLong() {
        java.lang.Object ref = alphaLong_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            alphaLong_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * Name in long alphanumeric format
       * </pre>
       *
       * <code>optional string alpha_long = 1;</code>
       */
      public com.google.protobuf.ByteString
          getAlphaLongBytes() {
        java.lang.Object ref = alphaLong_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          alphaLong_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int ALPHA_SHORT_FIELD_NUMBER = 2;
      private volatile java.lang.Object alphaShort_;
      /**
       * <pre>
       * Name in short alphanumeric format
       * </pre>
       *
       * <code>optional string alpha_short = 2;</code>
       */
      public boolean hasAlphaShort() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Name in short alphanumeric format
       * </pre>
       *
       * <code>optional string alpha_short = 2;</code>
       */
      public java.lang.String getAlphaShort() {
        java.lang.Object ref = alphaShort_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            alphaShort_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * Name in short alphanumeric format
       * </pre>
       *
       * <code>optional string alpha_short = 2;</code>
       */
      public com.google.protobuf.ByteString
          getAlphaShortBytes() {
        java.lang.Object ref = alphaShort_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          alphaShort_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int NUMERIC_FIELD_NUMBER = 3;
      private volatile java.lang.Object numeric_;
      /**
       * <pre>
       * Numeric id.
       * In GSM/UMTS, numeric format is 3 digit country code plus 2 or 3 digit
       * network code. Same as MCC/MNC.
       * </pre>
       *
       * <code>optional string numeric = 3;</code>
       */
      public boolean hasNumeric() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Numeric id.
       * In GSM/UMTS, numeric format is 3 digit country code plus 2 or 3 digit
       * network code. Same as MCC/MNC.
       * </pre>
       *
       * <code>optional string numeric = 3;</code>
       */
      public java.lang.String getNumeric() {
        java.lang.Object ref = numeric_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            numeric_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * Numeric id.
       * In GSM/UMTS, numeric format is 3 digit country code plus 2 or 3 digit
       * network code. Same as MCC/MNC.
       * </pre>
       *
       * <code>optional string numeric = 3;</code>
       */
      public com.google.protobuf.ByteString
          getNumericBytes() {
        java.lang.Object ref = numeric_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          numeric_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, alphaLong_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, alphaShort_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 3, numeric_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, alphaLong_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, alphaShort_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, numeric_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator)) {
          return super.equals(obj);
        }
        com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator other = (com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator) obj;

        boolean result = true;
        result = result && (hasAlphaLong() == other.hasAlphaLong());
        if (hasAlphaLong()) {
          result = result && getAlphaLong()
              .equals(other.getAlphaLong());
        }
        result = result && (hasAlphaShort() == other.hasAlphaShort());
        if (hasAlphaShort()) {
          result = result && getAlphaShort()
              .equals(other.getAlphaShort());
        }
        result = result && (hasNumeric() == other.hasNumeric());
        if (hasNumeric()) {
          result = result && getNumeric()
              .equals(other.getNumeric());
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptorForType().hashCode();
        if (hasAlphaLong()) {
          hash = (37 * hash) + ALPHA_LONG_FIELD_NUMBER;
          hash = (53 * hash) + getAlphaLong().hashCode();
        }
        if (hasAlphaShort()) {
          hash = (37 * hash) + ALPHA_SHORT_FIELD_NUMBER;
          hash = (53 * hash) + getAlphaShort().hashCode();
        }
        if (hasNumeric()) {
          hash = (37 * hash) + NUMERIC_FIELD_NUMBER;
          hash = (53 * hash) + getNumeric().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * The information about cellular network operator
       * </pre>
       *
       * Protobuf type {@code clearcut.connectivity.TelephonyServiceState.TelephonyOperator}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
          com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperatorOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyServiceState_TelephonyOperator_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyServiceState_TelephonyOperator_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.class, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.Builder.class);
        }

        // Construct using com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          alphaLong_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          alphaShort_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          numeric_ = "";
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyServiceState_TelephonyOperator_descriptor;
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator getDefaultInstanceForType() {
          return com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.getDefaultInstance();
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator build() {
          com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator buildPartial() {
          com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator result = new com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.alphaLong_ = alphaLong_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.alphaShort_ = alphaShort_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.numeric_ = numeric_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator) {
            return mergeFrom((com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator other) {
          if (other == com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.getDefaultInstance()) return this;
          if (other.hasAlphaLong()) {
            bitField0_ |= 0x00000001;
            alphaLong_ = other.alphaLong_;
            onChanged();
          }
          if (other.hasAlphaShort()) {
            bitField0_ |= 0x00000002;
            alphaShort_ = other.alphaShort_;
            onChanged();
          }
          if (other.hasNumeric()) {
            bitField0_ |= 0x00000004;
            numeric_ = other.numeric_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object alphaLong_ = "";
        /**
         * <pre>
         * Name in long alphanumeric format
         * </pre>
         *
         * <code>optional string alpha_long = 1;</code>
         */
        public boolean hasAlphaLong() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <pre>
         * Name in long alphanumeric format
         * </pre>
         *
         * <code>optional string alpha_long = 1;</code>
         */
        public java.lang.String getAlphaLong() {
          java.lang.Object ref = alphaLong_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              alphaLong_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Name in long alphanumeric format
         * </pre>
         *
         * <code>optional string alpha_long = 1;</code>
         */
        public com.google.protobuf.ByteString
            getAlphaLongBytes() {
          java.lang.Object ref = alphaLong_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            alphaLong_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Name in long alphanumeric format
         * </pre>
         *
         * <code>optional string alpha_long = 1;</code>
         */
        public Builder setAlphaLong(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          alphaLong_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Name in long alphanumeric format
         * </pre>
         *
         * <code>optional string alpha_long = 1;</code>
         */
        public Builder clearAlphaLong() {
          bitField0_ = (bitField0_ & ~0x00000001);
          alphaLong_ = getDefaultInstance().getAlphaLong();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Name in long alphanumeric format
         * </pre>
         *
         * <code>optional string alpha_long = 1;</code>
         */
        public Builder setAlphaLongBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          alphaLong_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object alphaShort_ = "";
        /**
         * <pre>
         * Name in short alphanumeric format
         * </pre>
         *
         * <code>optional string alpha_short = 2;</code>
         */
        public boolean hasAlphaShort() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <pre>
         * Name in short alphanumeric format
         * </pre>
         *
         * <code>optional string alpha_short = 2;</code>
         */
        public java.lang.String getAlphaShort() {
          java.lang.Object ref = alphaShort_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              alphaShort_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Name in short alphanumeric format
         * </pre>
         *
         * <code>optional string alpha_short = 2;</code>
         */
        public com.google.protobuf.ByteString
            getAlphaShortBytes() {
          java.lang.Object ref = alphaShort_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            alphaShort_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Name in short alphanumeric format
         * </pre>
         *
         * <code>optional string alpha_short = 2;</code>
         */
        public Builder setAlphaShort(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          alphaShort_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Name in short alphanumeric format
         * </pre>
         *
         * <code>optional string alpha_short = 2;</code>
         */
        public Builder clearAlphaShort() {
          bitField0_ = (bitField0_ & ~0x00000002);
          alphaShort_ = getDefaultInstance().getAlphaShort();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Name in short alphanumeric format
         * </pre>
         *
         * <code>optional string alpha_short = 2;</code>
         */
        public Builder setAlphaShortBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          alphaShort_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object numeric_ = "";
        /**
         * <pre>
         * Numeric id.
         * In GSM/UMTS, numeric format is 3 digit country code plus 2 or 3 digit
         * network code. Same as MCC/MNC.
         * </pre>
         *
         * <code>optional string numeric = 3;</code>
         */
        public boolean hasNumeric() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <pre>
         * Numeric id.
         * In GSM/UMTS, numeric format is 3 digit country code plus 2 or 3 digit
         * network code. Same as MCC/MNC.
         * </pre>
         *
         * <code>optional string numeric = 3;</code>
         */
        public java.lang.String getNumeric() {
          java.lang.Object ref = numeric_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              numeric_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Numeric id.
         * In GSM/UMTS, numeric format is 3 digit country code plus 2 or 3 digit
         * network code. Same as MCC/MNC.
         * </pre>
         *
         * <code>optional string numeric = 3;</code>
         */
        public com.google.protobuf.ByteString
            getNumericBytes() {
          java.lang.Object ref = numeric_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            numeric_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Numeric id.
         * In GSM/UMTS, numeric format is 3 digit country code plus 2 or 3 digit
         * network code. Same as MCC/MNC.
         * </pre>
         *
         * <code>optional string numeric = 3;</code>
         */
        public Builder setNumeric(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          numeric_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Numeric id.
         * In GSM/UMTS, numeric format is 3 digit country code plus 2 or 3 digit
         * network code. Same as MCC/MNC.
         * </pre>
         *
         * <code>optional string numeric = 3;</code>
         */
        public Builder clearNumeric() {
          bitField0_ = (bitField0_ & ~0x00000004);
          numeric_ = getDefaultInstance().getNumeric();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Numeric id.
         * In GSM/UMTS, numeric format is 3 digit country code plus 2 or 3 digit
         * network code. Same as MCC/MNC.
         * </pre>
         *
         * <code>optional string numeric = 3;</code>
         */
        public Builder setNumericBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          numeric_ = value;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
      }

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyServiceState.TelephonyOperator)
      private static final com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator();
      }

      public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<TelephonyOperator>
          PARSER = new com.google.protobuf.AbstractParser<TelephonyOperator>() {
        public TelephonyOperator parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new TelephonyOperator(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<TelephonyOperator> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TelephonyOperator> getParserForType() {
        return PARSER;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int VOICE_OPERATOR_FIELD_NUMBER = 1;
    private com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator voiceOperator_;
    /**
     * <pre>
     * Current registered operator
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;</code>
     */
    public boolean hasVoiceOperator() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Current registered operator
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator getVoiceOperator() {
      return voiceOperator_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.getDefaultInstance() : voiceOperator_;
    }
    /**
     * <pre>
     * Current registered operator
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperatorOrBuilder getVoiceOperatorOrBuilder() {
      return voiceOperator_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.getDefaultInstance() : voiceOperator_;
    }

    public static final int DATA_OPERATOR_FIELD_NUMBER = 2;
    private com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator dataOperator_;
    /**
     * <pre>
     * Current registered data network operator
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;</code>
     */
    public boolean hasDataOperator() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Current registered data network operator
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator getDataOperator() {
      return dataOperator_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.getDefaultInstance() : dataOperator_;
    }
    /**
     * <pre>
     * Current registered data network operator
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperatorOrBuilder getDataOperatorOrBuilder() {
      return dataOperator_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.getDefaultInstance() : dataOperator_;
    }

    public static final int VOICE_ROAMING_TYPE_FIELD_NUMBER = 3;
    private int voiceRoamingType_;
    /**
     * <pre>
     * Current voice network roaming type
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];</code>
     */
    public boolean hasVoiceRoamingType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Current voice network roaming type
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType getVoiceRoamingType() {
      com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType result = com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.valueOf(voiceRoamingType_);
      return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.UNKNOWN : result;
    }

    public static final int DATA_ROAMING_TYPE_FIELD_NUMBER = 4;
    private int dataRoamingType_;
    /**
     * <pre>
     * Current data network roaming type
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];</code>
     */
    public boolean hasDataRoamingType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Current data network roaming type
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType getDataRoamingType() {
      com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType result = com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.valueOf(dataRoamingType_);
      return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.UNKNOWN : result;
    }

    public static final int VOICE_RAT_FIELD_NUMBER = 5;
    private int voiceRat_;
    /**
     * <pre>
     * Current voice radio technology
     * </pre>
     *
     * <code>optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];</code>
     */
    public boolean hasVoiceRat() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * Current voice radio technology
     * </pre>
     *
     * <code>optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];</code>
     */
    public com.android.internal.telephony.TelephonyProto.RadioAccessTechnology getVoiceRat() {
      com.android.internal.telephony.TelephonyProto.RadioAccessTechnology result = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.valueOf(voiceRat_);
      return result == null ? com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.UNKNOWN : result;
    }

    public static final int DATA_RAT_FIELD_NUMBER = 6;
    private int dataRat_;
    /**
     * <pre>
     * Current data radio technology
     * </pre>
     *
     * <code>optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];</code>
     */
    public boolean hasDataRat() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * Current data radio technology
     * </pre>
     *
     * <code>optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];</code>
     */
    public com.android.internal.telephony.TelephonyProto.RadioAccessTechnology getDataRat() {
      com.android.internal.telephony.TelephonyProto.RadioAccessTechnology result = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.valueOf(dataRat_);
      return result == null ? com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.UNKNOWN : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getVoiceOperator());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getDataOperator());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, voiceRoamingType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, dataRoamingType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, voiceRat_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, dataRat_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getVoiceOperator());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getDataOperator());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, voiceRoamingType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, dataRoamingType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, voiceRat_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, dataRat_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.internal.telephony.TelephonyProto.TelephonyServiceState)) {
        return super.equals(obj);
      }
      com.android.internal.telephony.TelephonyProto.TelephonyServiceState other = (com.android.internal.telephony.TelephonyProto.TelephonyServiceState) obj;

      boolean result = true;
      result = result && (hasVoiceOperator() == other.hasVoiceOperator());
      if (hasVoiceOperator()) {
        result = result && getVoiceOperator()
            .equals(other.getVoiceOperator());
      }
      result = result && (hasDataOperator() == other.hasDataOperator());
      if (hasDataOperator()) {
        result = result && getDataOperator()
            .equals(other.getDataOperator());
      }
      result = result && (hasVoiceRoamingType() == other.hasVoiceRoamingType());
      if (hasVoiceRoamingType()) {
        result = result && voiceRoamingType_ == other.voiceRoamingType_;
      }
      result = result && (hasDataRoamingType() == other.hasDataRoamingType());
      if (hasDataRoamingType()) {
        result = result && dataRoamingType_ == other.dataRoamingType_;
      }
      result = result && (hasVoiceRat() == other.hasVoiceRat());
      if (hasVoiceRat()) {
        result = result && voiceRat_ == other.voiceRat_;
      }
      result = result && (hasDataRat() == other.hasDataRat());
      if (hasDataRat()) {
        result = result && dataRat_ == other.dataRat_;
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasVoiceOperator()) {
        hash = (37 * hash) + VOICE_OPERATOR_FIELD_NUMBER;
        hash = (53 * hash) + getVoiceOperator().hashCode();
      }
      if (hasDataOperator()) {
        hash = (37 * hash) + DATA_OPERATOR_FIELD_NUMBER;
        hash = (53 * hash) + getDataOperator().hashCode();
      }
      if (hasVoiceRoamingType()) {
        hash = (37 * hash) + VOICE_ROAMING_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + voiceRoamingType_;
      }
      if (hasDataRoamingType()) {
        hash = (37 * hash) + DATA_ROAMING_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + dataRoamingType_;
      }
      if (hasVoiceRat()) {
        hash = (37 * hash) + VOICE_RAT_FIELD_NUMBER;
        hash = (53 * hash) + voiceRat_;
      }
      if (hasDataRat()) {
        hash = (37 * hash) + DATA_RAT_FIELD_NUMBER;
        hash = (53 * hash) + dataRat_;
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.TelephonyServiceState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Contains phone state and service related information.
     * </pre>
     *
     * Protobuf type {@code clearcut.connectivity.TelephonyServiceState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clearcut.connectivity.TelephonyServiceState)
        com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyServiceState_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyServiceState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.TelephonyServiceState.class, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder.class);
      }

      // Construct using com.android.internal.telephony.TelephonyProto.TelephonyServiceState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getVoiceOperatorFieldBuilder();
          getDataOperatorFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (voiceOperatorBuilder_ == null) {
          voiceOperator_ = null;
        } else {
          voiceOperatorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (dataOperatorBuilder_ == null) {
          dataOperator_ = null;
        } else {
          dataOperatorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        voiceRoamingType_ = -1;
        bitField0_ = (bitField0_ & ~0x00000004);
        dataRoamingType_ = -1;
        bitField0_ = (bitField0_ & ~0x00000008);
        voiceRat_ = -1;
        bitField0_ = (bitField0_ & ~0x00000010);
        dataRat_ = -1;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyServiceState_descriptor;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState getDefaultInstanceForType() {
        return com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance();
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState build() {
        com.android.internal.telephony.TelephonyProto.TelephonyServiceState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState buildPartial() {
        com.android.internal.telephony.TelephonyProto.TelephonyServiceState result = new com.android.internal.telephony.TelephonyProto.TelephonyServiceState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (voiceOperatorBuilder_ == null) {
          result.voiceOperator_ = voiceOperator_;
        } else {
          result.voiceOperator_ = voiceOperatorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (dataOperatorBuilder_ == null) {
          result.dataOperator_ = dataOperator_;
        } else {
          result.dataOperator_ = dataOperatorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.voiceRoamingType_ = voiceRoamingType_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.dataRoamingType_ = dataRoamingType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.voiceRat_ = voiceRat_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.dataRat_ = dataRat_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.internal.telephony.TelephonyProto.TelephonyServiceState) {
          return mergeFrom((com.android.internal.telephony.TelephonyProto.TelephonyServiceState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.TelephonyServiceState other) {
        if (other == com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance()) return this;
        if (other.hasVoiceOperator()) {
          mergeVoiceOperator(other.getVoiceOperator());
        }
        if (other.hasDataOperator()) {
          mergeDataOperator(other.getDataOperator());
        }
        if (other.hasVoiceRoamingType()) {
          setVoiceRoamingType(other.getVoiceRoamingType());
        }
        if (other.hasDataRoamingType()) {
          setDataRoamingType(other.getDataRoamingType());
        }
        if (other.hasVoiceRat()) {
          setVoiceRat(other.getVoiceRat());
        }
        if (other.hasDataRat()) {
          setDataRat(other.getDataRat());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.android.internal.telephony.TelephonyProto.TelephonyServiceState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.android.internal.telephony.TelephonyProto.TelephonyServiceState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator voiceOperator_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.Builder, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperatorOrBuilder> voiceOperatorBuilder_;
      /**
       * <pre>
       * Current registered operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;</code>
       */
      public boolean hasVoiceOperator() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Current registered operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator getVoiceOperator() {
        if (voiceOperatorBuilder_ == null) {
          return voiceOperator_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.getDefaultInstance() : voiceOperator_;
        } else {
          return voiceOperatorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Current registered operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;</code>
       */
      public Builder setVoiceOperator(com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator value) {
        if (voiceOperatorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          voiceOperator_ = value;
          onChanged();
        } else {
          voiceOperatorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * Current registered operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;</code>
       */
      public Builder setVoiceOperator(
          com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.Builder builderForValue) {
        if (voiceOperatorBuilder_ == null) {
          voiceOperator_ = builderForValue.build();
          onChanged();
        } else {
          voiceOperatorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * Current registered operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;</code>
       */
      public Builder mergeVoiceOperator(com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator value) {
        if (voiceOperatorBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              voiceOperator_ != null &&
              voiceOperator_ != com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.getDefaultInstance()) {
            voiceOperator_ =
              com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.newBuilder(voiceOperator_).mergeFrom(value).buildPartial();
          } else {
            voiceOperator_ = value;
          }
          onChanged();
        } else {
          voiceOperatorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * Current registered operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;</code>
       */
      public Builder clearVoiceOperator() {
        if (voiceOperatorBuilder_ == null) {
          voiceOperator_ = null;
          onChanged();
        } else {
          voiceOperatorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <pre>
       * Current registered operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.Builder getVoiceOperatorBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getVoiceOperatorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Current registered operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperatorOrBuilder getVoiceOperatorOrBuilder() {
        if (voiceOperatorBuilder_ != null) {
          return voiceOperatorBuilder_.getMessageOrBuilder();
        } else {
          return voiceOperator_ == null ?
              com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.getDefaultInstance() : voiceOperator_;
        }
      }
      /**
       * <pre>
       * Current registered operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.Builder, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperatorOrBuilder> 
          getVoiceOperatorFieldBuilder() {
        if (voiceOperatorBuilder_ == null) {
          voiceOperatorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.Builder, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperatorOrBuilder>(
                  getVoiceOperator(),
                  getParentForChildren(),
                  isClean());
          voiceOperator_ = null;
        }
        return voiceOperatorBuilder_;
      }

      private com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator dataOperator_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.Builder, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperatorOrBuilder> dataOperatorBuilder_;
      /**
       * <pre>
       * Current registered data network operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;</code>
       */
      public boolean hasDataOperator() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Current registered data network operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator getDataOperator() {
        if (dataOperatorBuilder_ == null) {
          return dataOperator_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.getDefaultInstance() : dataOperator_;
        } else {
          return dataOperatorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Current registered data network operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;</code>
       */
      public Builder setDataOperator(com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator value) {
        if (dataOperatorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dataOperator_ = value;
          onChanged();
        } else {
          dataOperatorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * Current registered data network operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;</code>
       */
      public Builder setDataOperator(
          com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.Builder builderForValue) {
        if (dataOperatorBuilder_ == null) {
          dataOperator_ = builderForValue.build();
          onChanged();
        } else {
          dataOperatorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * Current registered data network operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;</code>
       */
      public Builder mergeDataOperator(com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator value) {
        if (dataOperatorBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              dataOperator_ != null &&
              dataOperator_ != com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.getDefaultInstance()) {
            dataOperator_ =
              com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.newBuilder(dataOperator_).mergeFrom(value).buildPartial();
          } else {
            dataOperator_ = value;
          }
          onChanged();
        } else {
          dataOperatorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * Current registered data network operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;</code>
       */
      public Builder clearDataOperator() {
        if (dataOperatorBuilder_ == null) {
          dataOperator_ = null;
          onChanged();
        } else {
          dataOperatorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       * Current registered data network operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.Builder getDataOperatorBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getDataOperatorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Current registered data network operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperatorOrBuilder getDataOperatorOrBuilder() {
        if (dataOperatorBuilder_ != null) {
          return dataOperatorBuilder_.getMessageOrBuilder();
        } else {
          return dataOperator_ == null ?
              com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.getDefaultInstance() : dataOperator_;
        }
      }
      /**
       * <pre>
       * Current registered data network operator
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.Builder, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperatorOrBuilder> 
          getDataOperatorFieldBuilder() {
        if (dataOperatorBuilder_ == null) {
          dataOperatorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperator.Builder, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.TelephonyOperatorOrBuilder>(
                  getDataOperator(),
                  getParentForChildren(),
                  isClean());
          dataOperator_ = null;
        }
        return dataOperatorBuilder_;
      }

      private int voiceRoamingType_ = -1;
      /**
       * <pre>
       * Current voice network roaming type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];</code>
       */
      public boolean hasVoiceRoamingType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Current voice network roaming type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType getVoiceRoamingType() {
        com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType result = com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.valueOf(voiceRoamingType_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.UNKNOWN : result;
      }
      /**
       * <pre>
       * Current voice network roaming type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];</code>
       */
      public Builder setVoiceRoamingType(com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        voiceRoamingType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Current voice network roaming type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];</code>
       */
      public Builder clearVoiceRoamingType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        voiceRoamingType_ = -1;
        onChanged();
        return this;
      }

      private int dataRoamingType_ = -1;
      /**
       * <pre>
       * Current data network roaming type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];</code>
       */
      public boolean hasDataRoamingType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * Current data network roaming type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType getDataRoamingType() {
        com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType result = com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.valueOf(dataRoamingType_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType.UNKNOWN : result;
      }
      /**
       * <pre>
       * Current data network roaming type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];</code>
       */
      public Builder setDataRoamingType(com.android.internal.telephony.TelephonyProto.TelephonyServiceState.RoamingType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        dataRoamingType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Current data network roaming type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];</code>
       */
      public Builder clearDataRoamingType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        dataRoamingType_ = -1;
        onChanged();
        return this;
      }

      private int voiceRat_ = -1;
      /**
       * <pre>
       * Current voice radio technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];</code>
       */
      public boolean hasVoiceRat() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * Current voice radio technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];</code>
       */
      public com.android.internal.telephony.TelephonyProto.RadioAccessTechnology getVoiceRat() {
        com.android.internal.telephony.TelephonyProto.RadioAccessTechnology result = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.valueOf(voiceRat_);
        return result == null ? com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.UNKNOWN : result;
      }
      /**
       * <pre>
       * Current voice radio technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];</code>
       */
      public Builder setVoiceRat(com.android.internal.telephony.TelephonyProto.RadioAccessTechnology value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        voiceRat_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Current voice radio technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];</code>
       */
      public Builder clearVoiceRat() {
        bitField0_ = (bitField0_ & ~0x00000010);
        voiceRat_ = -1;
        onChanged();
        return this;
      }

      private int dataRat_ = -1;
      /**
       * <pre>
       * Current data radio technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];</code>
       */
      public boolean hasDataRat() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * Current data radio technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];</code>
       */
      public com.android.internal.telephony.TelephonyProto.RadioAccessTechnology getDataRat() {
        com.android.internal.telephony.TelephonyProto.RadioAccessTechnology result = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.valueOf(dataRat_);
        return result == null ? com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.UNKNOWN : result;
      }
      /**
       * <pre>
       * Current data radio technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];</code>
       */
      public Builder setDataRat(com.android.internal.telephony.TelephonyProto.RadioAccessTechnology value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        dataRat_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Current data radio technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];</code>
       */
      public Builder clearDataRat() {
        bitField0_ = (bitField0_ & ~0x00000020);
        dataRat_ = -1;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clearcut.connectivity.TelephonyServiceState)
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyServiceState)
    private static final com.android.internal.telephony.TelephonyProto.TelephonyServiceState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.TelephonyServiceState();
    }

    public static com.android.internal.telephony.TelephonyProto.TelephonyServiceState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TelephonyServiceState>
        PARSER = new com.google.protobuf.AbstractParser<TelephonyServiceState>() {
      public TelephonyServiceState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new TelephonyServiceState(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TelephonyServiceState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TelephonyServiceState> getParserForType() {
      return PARSER;
    }

    public com.android.internal.telephony.TelephonyProto.TelephonyServiceState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ImsReasonInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clearcut.connectivity.ImsReasonInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Main reason code.
     * </pre>
     *
     * <code>optional int32 reason_code = 1;</code>
     */
    boolean hasReasonCode();
    /**
     * <pre>
     * Main reason code.
     * </pre>
     *
     * <code>optional int32 reason_code = 1;</code>
     */
    int getReasonCode();

    /**
     * <pre>
     * Extra code value; it depends on the code value.
     * </pre>
     *
     * <code>optional int32 extra_code = 2;</code>
     */
    boolean hasExtraCode();
    /**
     * <pre>
     * Extra code value; it depends on the code value.
     * </pre>
     *
     * <code>optional int32 extra_code = 2;</code>
     */
    int getExtraCode();

    /**
     * <pre>
     * Additional message of the reason info. We get this from the modem.
     * </pre>
     *
     * <code>optional string extra_message = 3;</code>
     */
    boolean hasExtraMessage();
    /**
     * <pre>
     * Additional message of the reason info. We get this from the modem.
     * </pre>
     *
     * <code>optional string extra_message = 3;</code>
     */
    java.lang.String getExtraMessage();
    /**
     * <pre>
     * Additional message of the reason info. We get this from the modem.
     * </pre>
     *
     * <code>optional string extra_message = 3;</code>
     */
    com.google.protobuf.ByteString
        getExtraMessageBytes();
  }
  /**
   * <pre>
   * The information about IMS errors
   * https://cs.corp.google.com/#android/frameworks/base/telephony/java/com/android/ims/ImsReasonInfo.java
   * </pre>
   *
   * Protobuf type {@code clearcut.connectivity.ImsReasonInfo}
   */
  public  static final class ImsReasonInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clearcut.connectivity.ImsReasonInfo)
      ImsReasonInfoOrBuilder {
    // Use ImsReasonInfo.newBuilder() to construct.
    private ImsReasonInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ImsReasonInfo() {
      reasonCode_ = 0;
      extraCode_ = 0;
      extraMessage_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ImsReasonInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              reasonCode_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              extraCode_ = input.readInt32();
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              extraMessage_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_ImsReasonInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_ImsReasonInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.internal.telephony.TelephonyProto.ImsReasonInfo.class, com.android.internal.telephony.TelephonyProto.ImsReasonInfo.Builder.class);
    }

    private int bitField0_;
    public static final int REASON_CODE_FIELD_NUMBER = 1;
    private int reasonCode_;
    /**
     * <pre>
     * Main reason code.
     * </pre>
     *
     * <code>optional int32 reason_code = 1;</code>
     */
    public boolean hasReasonCode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Main reason code.
     * </pre>
     *
     * <code>optional int32 reason_code = 1;</code>
     */
    public int getReasonCode() {
      return reasonCode_;
    }

    public static final int EXTRA_CODE_FIELD_NUMBER = 2;
    private int extraCode_;
    /**
     * <pre>
     * Extra code value; it depends on the code value.
     * </pre>
     *
     * <code>optional int32 extra_code = 2;</code>
     */
    public boolean hasExtraCode() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Extra code value; it depends on the code value.
     * </pre>
     *
     * <code>optional int32 extra_code = 2;</code>
     */
    public int getExtraCode() {
      return extraCode_;
    }

    public static final int EXTRA_MESSAGE_FIELD_NUMBER = 3;
    private volatile java.lang.Object extraMessage_;
    /**
     * <pre>
     * Additional message of the reason info. We get this from the modem.
     * </pre>
     *
     * <code>optional string extra_message = 3;</code>
     */
    public boolean hasExtraMessage() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Additional message of the reason info. We get this from the modem.
     * </pre>
     *
     * <code>optional string extra_message = 3;</code>
     */
    public java.lang.String getExtraMessage() {
      java.lang.Object ref = extraMessage_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          extraMessage_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Additional message of the reason info. We get this from the modem.
     * </pre>
     *
     * <code>optional string extra_message = 3;</code>
     */
    public com.google.protobuf.ByteString
        getExtraMessageBytes() {
      java.lang.Object ref = extraMessage_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        extraMessage_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, reasonCode_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, extraCode_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, extraMessage_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, reasonCode_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, extraCode_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, extraMessage_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.internal.telephony.TelephonyProto.ImsReasonInfo)) {
        return super.equals(obj);
      }
      com.android.internal.telephony.TelephonyProto.ImsReasonInfo other = (com.android.internal.telephony.TelephonyProto.ImsReasonInfo) obj;

      boolean result = true;
      result = result && (hasReasonCode() == other.hasReasonCode());
      if (hasReasonCode()) {
        result = result && (getReasonCode()
            == other.getReasonCode());
      }
      result = result && (hasExtraCode() == other.hasExtraCode());
      if (hasExtraCode()) {
        result = result && (getExtraCode()
            == other.getExtraCode());
      }
      result = result && (hasExtraMessage() == other.hasExtraMessage());
      if (hasExtraMessage()) {
        result = result && getExtraMessage()
            .equals(other.getExtraMessage());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasReasonCode()) {
        hash = (37 * hash) + REASON_CODE_FIELD_NUMBER;
        hash = (53 * hash) + getReasonCode();
      }
      if (hasExtraCode()) {
        hash = (37 * hash) + EXTRA_CODE_FIELD_NUMBER;
        hash = (53 * hash) + getExtraCode();
      }
      if (hasExtraMessage()) {
        hash = (37 * hash) + EXTRA_MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getExtraMessage().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.internal.telephony.TelephonyProto.ImsReasonInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsReasonInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsReasonInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsReasonInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsReasonInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsReasonInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsReasonInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsReasonInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsReasonInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsReasonInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.ImsReasonInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The information about IMS errors
     * https://cs.corp.google.com/#android/frameworks/base/telephony/java/com/android/ims/ImsReasonInfo.java
     * </pre>
     *
     * Protobuf type {@code clearcut.connectivity.ImsReasonInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clearcut.connectivity.ImsReasonInfo)
        com.android.internal.telephony.TelephonyProto.ImsReasonInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_ImsReasonInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_ImsReasonInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.ImsReasonInfo.class, com.android.internal.telephony.TelephonyProto.ImsReasonInfo.Builder.class);
      }

      // Construct using com.android.internal.telephony.TelephonyProto.ImsReasonInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        reasonCode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        extraCode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        extraMessage_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_ImsReasonInfo_descriptor;
      }

      public com.android.internal.telephony.TelephonyProto.ImsReasonInfo getDefaultInstanceForType() {
        return com.android.internal.telephony.TelephonyProto.ImsReasonInfo.getDefaultInstance();
      }

      public com.android.internal.telephony.TelephonyProto.ImsReasonInfo build() {
        com.android.internal.telephony.TelephonyProto.ImsReasonInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.android.internal.telephony.TelephonyProto.ImsReasonInfo buildPartial() {
        com.android.internal.telephony.TelephonyProto.ImsReasonInfo result = new com.android.internal.telephony.TelephonyProto.ImsReasonInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.reasonCode_ = reasonCode_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.extraCode_ = extraCode_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.extraMessage_ = extraMessage_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.internal.telephony.TelephonyProto.ImsReasonInfo) {
          return mergeFrom((com.android.internal.telephony.TelephonyProto.ImsReasonInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.ImsReasonInfo other) {
        if (other == com.android.internal.telephony.TelephonyProto.ImsReasonInfo.getDefaultInstance()) return this;
        if (other.hasReasonCode()) {
          setReasonCode(other.getReasonCode());
        }
        if (other.hasExtraCode()) {
          setExtraCode(other.getExtraCode());
        }
        if (other.hasExtraMessage()) {
          bitField0_ |= 0x00000004;
          extraMessage_ = other.extraMessage_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.android.internal.telephony.TelephonyProto.ImsReasonInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.android.internal.telephony.TelephonyProto.ImsReasonInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int reasonCode_ ;
      /**
       * <pre>
       * Main reason code.
       * </pre>
       *
       * <code>optional int32 reason_code = 1;</code>
       */
      public boolean hasReasonCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Main reason code.
       * </pre>
       *
       * <code>optional int32 reason_code = 1;</code>
       */
      public int getReasonCode() {
        return reasonCode_;
      }
      /**
       * <pre>
       * Main reason code.
       * </pre>
       *
       * <code>optional int32 reason_code = 1;</code>
       */
      public Builder setReasonCode(int value) {
        bitField0_ |= 0x00000001;
        reasonCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Main reason code.
       * </pre>
       *
       * <code>optional int32 reason_code = 1;</code>
       */
      public Builder clearReasonCode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        reasonCode_ = 0;
        onChanged();
        return this;
      }

      private int extraCode_ ;
      /**
       * <pre>
       * Extra code value; it depends on the code value.
       * </pre>
       *
       * <code>optional int32 extra_code = 2;</code>
       */
      public boolean hasExtraCode() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Extra code value; it depends on the code value.
       * </pre>
       *
       * <code>optional int32 extra_code = 2;</code>
       */
      public int getExtraCode() {
        return extraCode_;
      }
      /**
       * <pre>
       * Extra code value; it depends on the code value.
       * </pre>
       *
       * <code>optional int32 extra_code = 2;</code>
       */
      public Builder setExtraCode(int value) {
        bitField0_ |= 0x00000002;
        extraCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Extra code value; it depends on the code value.
       * </pre>
       *
       * <code>optional int32 extra_code = 2;</code>
       */
      public Builder clearExtraCode() {
        bitField0_ = (bitField0_ & ~0x00000002);
        extraCode_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object extraMessage_ = "";
      /**
       * <pre>
       * Additional message of the reason info. We get this from the modem.
       * </pre>
       *
       * <code>optional string extra_message = 3;</code>
       */
      public boolean hasExtraMessage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Additional message of the reason info. We get this from the modem.
       * </pre>
       *
       * <code>optional string extra_message = 3;</code>
       */
      public java.lang.String getExtraMessage() {
        java.lang.Object ref = extraMessage_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            extraMessage_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Additional message of the reason info. We get this from the modem.
       * </pre>
       *
       * <code>optional string extra_message = 3;</code>
       */
      public com.google.protobuf.ByteString
          getExtraMessageBytes() {
        java.lang.Object ref = extraMessage_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          extraMessage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Additional message of the reason info. We get this from the modem.
       * </pre>
       *
       * <code>optional string extra_message = 3;</code>
       */
      public Builder setExtraMessage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        extraMessage_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional message of the reason info. We get this from the modem.
       * </pre>
       *
       * <code>optional string extra_message = 3;</code>
       */
      public Builder clearExtraMessage() {
        bitField0_ = (bitField0_ & ~0x00000004);
        extraMessage_ = getDefaultInstance().getExtraMessage();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Additional message of the reason info. We get this from the modem.
       * </pre>
       *
       * <code>optional string extra_message = 3;</code>
       */
      public Builder setExtraMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        extraMessage_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clearcut.connectivity.ImsReasonInfo)
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.ImsReasonInfo)
    private static final com.android.internal.telephony.TelephonyProto.ImsReasonInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.ImsReasonInfo();
    }

    public static com.android.internal.telephony.TelephonyProto.ImsReasonInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ImsReasonInfo>
        PARSER = new com.google.protobuf.AbstractParser<ImsReasonInfo>() {
      public ImsReasonInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ImsReasonInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ImsReasonInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ImsReasonInfo> getParserForType() {
      return PARSER;
    }

    public com.android.internal.telephony.TelephonyProto.ImsReasonInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ImsConnectionStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clearcut.connectivity.ImsConnectionState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Current state
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsConnectionState.State state = 1;</code>
     */
    boolean hasState();
    /**
     * <pre>
     * Current state
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsConnectionState.State state = 1;</code>
     */
    com.android.internal.telephony.TelephonyProto.ImsConnectionState.State getState();

    /**
     * <pre>
     * If DISCONNECTED then this field may have additional information about
     * connection problem.
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;</code>
     */
    boolean hasReasonInfo();
    /**
     * <pre>
     * If DISCONNECTED then this field may have additional information about
     * connection problem.
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;</code>
     */
    com.android.internal.telephony.TelephonyProto.ImsReasonInfo getReasonInfo();
    /**
     * <pre>
     * If DISCONNECTED then this field may have additional information about
     * connection problem.
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;</code>
     */
    com.android.internal.telephony.TelephonyProto.ImsReasonInfoOrBuilder getReasonInfoOrBuilder();
  }
  /**
   * <pre>
   * The information about state connection between IMS service and IMS server
   * </pre>
   *
   * Protobuf type {@code clearcut.connectivity.ImsConnectionState}
   */
  public  static final class ImsConnectionState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clearcut.connectivity.ImsConnectionState)
      ImsConnectionStateOrBuilder {
    // Use ImsConnectionState.newBuilder() to construct.
    private ImsConnectionState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ImsConnectionState() {
      state_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ImsConnectionState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.android.internal.telephony.TelephonyProto.ImsConnectionState.State value = com.android.internal.telephony.TelephonyProto.ImsConnectionState.State.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                state_ = rawValue;
              }
              break;
            }
            case 18: {
              com.android.internal.telephony.TelephonyProto.ImsReasonInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = reasonInfo_.toBuilder();
              }
              reasonInfo_ = input.readMessage(com.android.internal.telephony.TelephonyProto.ImsReasonInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(reasonInfo_);
                reasonInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_ImsConnectionState_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_ImsConnectionState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.internal.telephony.TelephonyProto.ImsConnectionState.class, com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder.class);
    }

    /**
     * <pre>
     * Posible states
     * </pre>
     *
     * Protobuf enum {@code clearcut.connectivity.ImsConnectionState.State}
     */
    public enum State
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * State is unknown.
       * </pre>
       *
       * <code>STATE_UNKNOWN = 0;</code>
       */
      STATE_UNKNOWN(0),
      /**
       * <code>CONNECTED = 1;</code>
       */
      CONNECTED(1),
      /**
       * <code>PROGRESSING = 2;</code>
       */
      PROGRESSING(2),
      /**
       * <code>DISCONNECTED = 3;</code>
       */
      DISCONNECTED(3),
      /**
       * <code>RESUMED = 4;</code>
       */
      RESUMED(4),
      /**
       * <code>SUSPENDED = 5;</code>
       */
      SUSPENDED(5),
      ;

      /**
       * <pre>
       * State is unknown.
       * </pre>
       *
       * <code>STATE_UNKNOWN = 0;</code>
       */
      public static final int STATE_UNKNOWN_VALUE = 0;
      /**
       * <code>CONNECTED = 1;</code>
       */
      public static final int CONNECTED_VALUE = 1;
      /**
       * <code>PROGRESSING = 2;</code>
       */
      public static final int PROGRESSING_VALUE = 2;
      /**
       * <code>DISCONNECTED = 3;</code>
       */
      public static final int DISCONNECTED_VALUE = 3;
      /**
       * <code>RESUMED = 4;</code>
       */
      public static final int RESUMED_VALUE = 4;
      /**
       * <code>SUSPENDED = 5;</code>
       */
      public static final int SUSPENDED_VALUE = 5;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static State valueOf(int value) {
        return forNumber(value);
      }

      public static State forNumber(int value) {
        switch (value) {
          case 0: return STATE_UNKNOWN;
          case 1: return CONNECTED;
          case 2: return PROGRESSING;
          case 3: return DISCONNECTED;
          case 4: return RESUMED;
          case 5: return SUSPENDED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<State>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          State> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<State>() {
              public State findValueByNumber(int number) {
                return State.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDescriptor().getEnumTypes().get(0);
      }

      private static final State[] VALUES = values();

      public static State valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private State(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:clearcut.connectivity.ImsConnectionState.State)
    }

    private int bitField0_;
    public static final int STATE_FIELD_NUMBER = 1;
    private int state_;
    /**
     * <pre>
     * Current state
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsConnectionState.State state = 1;</code>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Current state
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsConnectionState.State state = 1;</code>
     */
    public com.android.internal.telephony.TelephonyProto.ImsConnectionState.State getState() {
      com.android.internal.telephony.TelephonyProto.ImsConnectionState.State result = com.android.internal.telephony.TelephonyProto.ImsConnectionState.State.valueOf(state_);
      return result == null ? com.android.internal.telephony.TelephonyProto.ImsConnectionState.State.STATE_UNKNOWN : result;
    }

    public static final int REASON_INFO_FIELD_NUMBER = 2;
    private com.android.internal.telephony.TelephonyProto.ImsReasonInfo reasonInfo_;
    /**
     * <pre>
     * If DISCONNECTED then this field may have additional information about
     * connection problem.
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;</code>
     */
    public boolean hasReasonInfo() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * If DISCONNECTED then this field may have additional information about
     * connection problem.
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;</code>
     */
    public com.android.internal.telephony.TelephonyProto.ImsReasonInfo getReasonInfo() {
      return reasonInfo_ == null ? com.android.internal.telephony.TelephonyProto.ImsReasonInfo.getDefaultInstance() : reasonInfo_;
    }
    /**
     * <pre>
     * If DISCONNECTED then this field may have additional information about
     * connection problem.
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;</code>
     */
    public com.android.internal.telephony.TelephonyProto.ImsReasonInfoOrBuilder getReasonInfoOrBuilder() {
      return reasonInfo_ == null ? com.android.internal.telephony.TelephonyProto.ImsReasonInfo.getDefaultInstance() : reasonInfo_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, state_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getReasonInfo());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getReasonInfo());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.internal.telephony.TelephonyProto.ImsConnectionState)) {
        return super.equals(obj);
      }
      com.android.internal.telephony.TelephonyProto.ImsConnectionState other = (com.android.internal.telephony.TelephonyProto.ImsConnectionState) obj;

      boolean result = true;
      result = result && (hasState() == other.hasState());
      if (hasState()) {
        result = result && state_ == other.state_;
      }
      result = result && (hasReasonInfo() == other.hasReasonInfo());
      if (hasReasonInfo()) {
        result = result && getReasonInfo()
            .equals(other.getReasonInfo());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasState()) {
        hash = (37 * hash) + STATE_FIELD_NUMBER;
        hash = (53 * hash) + state_;
      }
      if (hasReasonInfo()) {
        hash = (37 * hash) + REASON_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getReasonInfo().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.internal.telephony.TelephonyProto.ImsConnectionState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsConnectionState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsConnectionState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsConnectionState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsConnectionState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsConnectionState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsConnectionState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsConnectionState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsConnectionState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsConnectionState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.ImsConnectionState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The information about state connection between IMS service and IMS server
     * </pre>
     *
     * Protobuf type {@code clearcut.connectivity.ImsConnectionState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clearcut.connectivity.ImsConnectionState)
        com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_ImsConnectionState_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_ImsConnectionState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.ImsConnectionState.class, com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder.class);
      }

      // Construct using com.android.internal.telephony.TelephonyProto.ImsConnectionState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getReasonInfoFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        state_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (reasonInfoBuilder_ == null) {
          reasonInfo_ = null;
        } else {
          reasonInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_ImsConnectionState_descriptor;
      }

      public com.android.internal.telephony.TelephonyProto.ImsConnectionState getDefaultInstanceForType() {
        return com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance();
      }

      public com.android.internal.telephony.TelephonyProto.ImsConnectionState build() {
        com.android.internal.telephony.TelephonyProto.ImsConnectionState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.android.internal.telephony.TelephonyProto.ImsConnectionState buildPartial() {
        com.android.internal.telephony.TelephonyProto.ImsConnectionState result = new com.android.internal.telephony.TelephonyProto.ImsConnectionState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (reasonInfoBuilder_ == null) {
          result.reasonInfo_ = reasonInfo_;
        } else {
          result.reasonInfo_ = reasonInfoBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.internal.telephony.TelephonyProto.ImsConnectionState) {
          return mergeFrom((com.android.internal.telephony.TelephonyProto.ImsConnectionState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.ImsConnectionState other) {
        if (other == com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance()) return this;
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasReasonInfo()) {
          mergeReasonInfo(other.getReasonInfo());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.android.internal.telephony.TelephonyProto.ImsConnectionState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.android.internal.telephony.TelephonyProto.ImsConnectionState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int state_ = 0;
      /**
       * <pre>
       * Current state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState.State state = 1;</code>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Current state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState.State state = 1;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsConnectionState.State getState() {
        com.android.internal.telephony.TelephonyProto.ImsConnectionState.State result = com.android.internal.telephony.TelephonyProto.ImsConnectionState.State.valueOf(state_);
        return result == null ? com.android.internal.telephony.TelephonyProto.ImsConnectionState.State.STATE_UNKNOWN : result;
      }
      /**
       * <pre>
       * Current state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState.State state = 1;</code>
       */
      public Builder setState(com.android.internal.telephony.TelephonyProto.ImsConnectionState.State value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        state_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Current state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState.State state = 1;</code>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = 0;
        onChanged();
        return this;
      }

      private com.android.internal.telephony.TelephonyProto.ImsReasonInfo reasonInfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.ImsReasonInfo, com.android.internal.telephony.TelephonyProto.ImsReasonInfo.Builder, com.android.internal.telephony.TelephonyProto.ImsReasonInfoOrBuilder> reasonInfoBuilder_;
      /**
       * <pre>
       * If DISCONNECTED then this field may have additional information about
       * connection problem.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;</code>
       */
      public boolean hasReasonInfo() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * If DISCONNECTED then this field may have additional information about
       * connection problem.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsReasonInfo getReasonInfo() {
        if (reasonInfoBuilder_ == null) {
          return reasonInfo_ == null ? com.android.internal.telephony.TelephonyProto.ImsReasonInfo.getDefaultInstance() : reasonInfo_;
        } else {
          return reasonInfoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * If DISCONNECTED then this field may have additional information about
       * connection problem.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;</code>
       */
      public Builder setReasonInfo(com.android.internal.telephony.TelephonyProto.ImsReasonInfo value) {
        if (reasonInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reasonInfo_ = value;
          onChanged();
        } else {
          reasonInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * If DISCONNECTED then this field may have additional information about
       * connection problem.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;</code>
       */
      public Builder setReasonInfo(
          com.android.internal.telephony.TelephonyProto.ImsReasonInfo.Builder builderForValue) {
        if (reasonInfoBuilder_ == null) {
          reasonInfo_ = builderForValue.build();
          onChanged();
        } else {
          reasonInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * If DISCONNECTED then this field may have additional information about
       * connection problem.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;</code>
       */
      public Builder mergeReasonInfo(com.android.internal.telephony.TelephonyProto.ImsReasonInfo value) {
        if (reasonInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              reasonInfo_ != null &&
              reasonInfo_ != com.android.internal.telephony.TelephonyProto.ImsReasonInfo.getDefaultInstance()) {
            reasonInfo_ =
              com.android.internal.telephony.TelephonyProto.ImsReasonInfo.newBuilder(reasonInfo_).mergeFrom(value).buildPartial();
          } else {
            reasonInfo_ = value;
          }
          onChanged();
        } else {
          reasonInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * If DISCONNECTED then this field may have additional information about
       * connection problem.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;</code>
       */
      public Builder clearReasonInfo() {
        if (reasonInfoBuilder_ == null) {
          reasonInfo_ = null;
          onChanged();
        } else {
          reasonInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       * If DISCONNECTED then this field may have additional information about
       * connection problem.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsReasonInfo.Builder getReasonInfoBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getReasonInfoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * If DISCONNECTED then this field may have additional information about
       * connection problem.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsReasonInfoOrBuilder getReasonInfoOrBuilder() {
        if (reasonInfoBuilder_ != null) {
          return reasonInfoBuilder_.getMessageOrBuilder();
        } else {
          return reasonInfo_ == null ?
              com.android.internal.telephony.TelephonyProto.ImsReasonInfo.getDefaultInstance() : reasonInfo_;
        }
      }
      /**
       * <pre>
       * If DISCONNECTED then this field may have additional information about
       * connection problem.
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.ImsReasonInfo, com.android.internal.telephony.TelephonyProto.ImsReasonInfo.Builder, com.android.internal.telephony.TelephonyProto.ImsReasonInfoOrBuilder> 
          getReasonInfoFieldBuilder() {
        if (reasonInfoBuilder_ == null) {
          reasonInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.ImsReasonInfo, com.android.internal.telephony.TelephonyProto.ImsReasonInfo.Builder, com.android.internal.telephony.TelephonyProto.ImsReasonInfoOrBuilder>(
                  getReasonInfo(),
                  getParentForChildren(),
                  isClean());
          reasonInfo_ = null;
        }
        return reasonInfoBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clearcut.connectivity.ImsConnectionState)
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.ImsConnectionState)
    private static final com.android.internal.telephony.TelephonyProto.ImsConnectionState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.ImsConnectionState();
    }

    public static com.android.internal.telephony.TelephonyProto.ImsConnectionState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ImsConnectionState>
        PARSER = new com.google.protobuf.AbstractParser<ImsConnectionState>() {
      public ImsConnectionState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ImsConnectionState(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ImsConnectionState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ImsConnectionState> getParserForType() {
      return PARSER;
    }

    public com.android.internal.telephony.TelephonyProto.ImsConnectionState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ImsCapabilitiesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clearcut.connectivity.ImsCapabilities)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bool voice_over_lte = 1;</code>
     */
    boolean hasVoiceOverLte();
    /**
     * <code>optional bool voice_over_lte = 1;</code>
     */
    boolean getVoiceOverLte();

    /**
     * <code>optional bool voice_over_wifi = 2;</code>
     */
    boolean hasVoiceOverWifi();
    /**
     * <code>optional bool voice_over_wifi = 2;</code>
     */
    boolean getVoiceOverWifi();

    /**
     * <code>optional bool video_over_lte = 3;</code>
     */
    boolean hasVideoOverLte();
    /**
     * <code>optional bool video_over_lte = 3;</code>
     */
    boolean getVideoOverLte();

    /**
     * <code>optional bool video_over_wifi = 4;</code>
     */
    boolean hasVideoOverWifi();
    /**
     * <code>optional bool video_over_wifi = 4;</code>
     */
    boolean getVideoOverWifi();

    /**
     * <code>optional bool ut_over_lte = 5;</code>
     */
    boolean hasUtOverLte();
    /**
     * <code>optional bool ut_over_lte = 5;</code>
     */
    boolean getUtOverLte();

    /**
     * <code>optional bool ut_over_wifi = 6;</code>
     */
    boolean hasUtOverWifi();
    /**
     * <code>optional bool ut_over_wifi = 6;</code>
     */
    boolean getUtOverWifi();
  }
  /**
   * <pre>
   * The information about current capabilities of IMS service
   * </pre>
   *
   * Protobuf type {@code clearcut.connectivity.ImsCapabilities}
   */
  public  static final class ImsCapabilities extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clearcut.connectivity.ImsCapabilities)
      ImsCapabilitiesOrBuilder {
    // Use ImsCapabilities.newBuilder() to construct.
    private ImsCapabilities(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ImsCapabilities() {
      voiceOverLte_ = false;
      voiceOverWifi_ = false;
      videoOverLte_ = false;
      videoOverWifi_ = false;
      utOverLte_ = false;
      utOverWifi_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ImsCapabilities(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              voiceOverLte_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              voiceOverWifi_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              videoOverLte_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              videoOverWifi_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              utOverLte_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              utOverWifi_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_ImsCapabilities_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_ImsCapabilities_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.internal.telephony.TelephonyProto.ImsCapabilities.class, com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder.class);
    }

    private int bitField0_;
    public static final int VOICE_OVER_LTE_FIELD_NUMBER = 1;
    private boolean voiceOverLte_;
    /**
     * <code>optional bool voice_over_lte = 1;</code>
     */
    public boolean hasVoiceOverLte() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool voice_over_lte = 1;</code>
     */
    public boolean getVoiceOverLte() {
      return voiceOverLte_;
    }

    public static final int VOICE_OVER_WIFI_FIELD_NUMBER = 2;
    private boolean voiceOverWifi_;
    /**
     * <code>optional bool voice_over_wifi = 2;</code>
     */
    public boolean hasVoiceOverWifi() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool voice_over_wifi = 2;</code>
     */
    public boolean getVoiceOverWifi() {
      return voiceOverWifi_;
    }

    public static final int VIDEO_OVER_LTE_FIELD_NUMBER = 3;
    private boolean videoOverLte_;
    /**
     * <code>optional bool video_over_lte = 3;</code>
     */
    public boolean hasVideoOverLte() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool video_over_lte = 3;</code>
     */
    public boolean getVideoOverLte() {
      return videoOverLte_;
    }

    public static final int VIDEO_OVER_WIFI_FIELD_NUMBER = 4;
    private boolean videoOverWifi_;
    /**
     * <code>optional bool video_over_wifi = 4;</code>
     */
    public boolean hasVideoOverWifi() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool video_over_wifi = 4;</code>
     */
    public boolean getVideoOverWifi() {
      return videoOverWifi_;
    }

    public static final int UT_OVER_LTE_FIELD_NUMBER = 5;
    private boolean utOverLte_;
    /**
     * <code>optional bool ut_over_lte = 5;</code>
     */
    public boolean hasUtOverLte() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool ut_over_lte = 5;</code>
     */
    public boolean getUtOverLte() {
      return utOverLte_;
    }

    public static final int UT_OVER_WIFI_FIELD_NUMBER = 6;
    private boolean utOverWifi_;
    /**
     * <code>optional bool ut_over_wifi = 6;</code>
     */
    public boolean hasUtOverWifi() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool ut_over_wifi = 6;</code>
     */
    public boolean getUtOverWifi() {
      return utOverWifi_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, voiceOverLte_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, voiceOverWifi_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, videoOverLte_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, videoOverWifi_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, utOverLte_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, utOverWifi_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, voiceOverLte_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, voiceOverWifi_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, videoOverLte_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, videoOverWifi_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, utOverLte_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, utOverWifi_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.internal.telephony.TelephonyProto.ImsCapabilities)) {
        return super.equals(obj);
      }
      com.android.internal.telephony.TelephonyProto.ImsCapabilities other = (com.android.internal.telephony.TelephonyProto.ImsCapabilities) obj;

      boolean result = true;
      result = result && (hasVoiceOverLte() == other.hasVoiceOverLte());
      if (hasVoiceOverLte()) {
        result = result && (getVoiceOverLte()
            == other.getVoiceOverLte());
      }
      result = result && (hasVoiceOverWifi() == other.hasVoiceOverWifi());
      if (hasVoiceOverWifi()) {
        result = result && (getVoiceOverWifi()
            == other.getVoiceOverWifi());
      }
      result = result && (hasVideoOverLte() == other.hasVideoOverLte());
      if (hasVideoOverLte()) {
        result = result && (getVideoOverLte()
            == other.getVideoOverLte());
      }
      result = result && (hasVideoOverWifi() == other.hasVideoOverWifi());
      if (hasVideoOverWifi()) {
        result = result && (getVideoOverWifi()
            == other.getVideoOverWifi());
      }
      result = result && (hasUtOverLte() == other.hasUtOverLte());
      if (hasUtOverLte()) {
        result = result && (getUtOverLte()
            == other.getUtOverLte());
      }
      result = result && (hasUtOverWifi() == other.hasUtOverWifi());
      if (hasUtOverWifi()) {
        result = result && (getUtOverWifi()
            == other.getUtOverWifi());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasVoiceOverLte()) {
        hash = (37 * hash) + VOICE_OVER_LTE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVoiceOverLte());
      }
      if (hasVoiceOverWifi()) {
        hash = (37 * hash) + VOICE_OVER_WIFI_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVoiceOverWifi());
      }
      if (hasVideoOverLte()) {
        hash = (37 * hash) + VIDEO_OVER_LTE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVideoOverLte());
      }
      if (hasVideoOverWifi()) {
        hash = (37 * hash) + VIDEO_OVER_WIFI_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVideoOverWifi());
      }
      if (hasUtOverLte()) {
        hash = (37 * hash) + UT_OVER_LTE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getUtOverLte());
      }
      if (hasUtOverWifi()) {
        hash = (37 * hash) + UT_OVER_WIFI_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getUtOverWifi());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.internal.telephony.TelephonyProto.ImsCapabilities parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsCapabilities parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsCapabilities parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsCapabilities parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsCapabilities parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsCapabilities parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsCapabilities parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsCapabilities parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsCapabilities parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.ImsCapabilities parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.ImsCapabilities prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The information about current capabilities of IMS service
     * </pre>
     *
     * Protobuf type {@code clearcut.connectivity.ImsCapabilities}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clearcut.connectivity.ImsCapabilities)
        com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_ImsCapabilities_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_ImsCapabilities_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.ImsCapabilities.class, com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder.class);
      }

      // Construct using com.android.internal.telephony.TelephonyProto.ImsCapabilities.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        voiceOverLte_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        voiceOverWifi_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        videoOverLte_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        videoOverWifi_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        utOverLte_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        utOverWifi_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_ImsCapabilities_descriptor;
      }

      public com.android.internal.telephony.TelephonyProto.ImsCapabilities getDefaultInstanceForType() {
        return com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance();
      }

      public com.android.internal.telephony.TelephonyProto.ImsCapabilities build() {
        com.android.internal.telephony.TelephonyProto.ImsCapabilities result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.android.internal.telephony.TelephonyProto.ImsCapabilities buildPartial() {
        com.android.internal.telephony.TelephonyProto.ImsCapabilities result = new com.android.internal.telephony.TelephonyProto.ImsCapabilities(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.voiceOverLte_ = voiceOverLte_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.voiceOverWifi_ = voiceOverWifi_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.videoOverLte_ = videoOverLte_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.videoOverWifi_ = videoOverWifi_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.utOverLte_ = utOverLte_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.utOverWifi_ = utOverWifi_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.internal.telephony.TelephonyProto.ImsCapabilities) {
          return mergeFrom((com.android.internal.telephony.TelephonyProto.ImsCapabilities)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.ImsCapabilities other) {
        if (other == com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance()) return this;
        if (other.hasVoiceOverLte()) {
          setVoiceOverLte(other.getVoiceOverLte());
        }
        if (other.hasVoiceOverWifi()) {
          setVoiceOverWifi(other.getVoiceOverWifi());
        }
        if (other.hasVideoOverLte()) {
          setVideoOverLte(other.getVideoOverLte());
        }
        if (other.hasVideoOverWifi()) {
          setVideoOverWifi(other.getVideoOverWifi());
        }
        if (other.hasUtOverLte()) {
          setUtOverLte(other.getUtOverLte());
        }
        if (other.hasUtOverWifi()) {
          setUtOverWifi(other.getUtOverWifi());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.android.internal.telephony.TelephonyProto.ImsCapabilities parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.android.internal.telephony.TelephonyProto.ImsCapabilities) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean voiceOverLte_ ;
      /**
       * <code>optional bool voice_over_lte = 1;</code>
       */
      public boolean hasVoiceOverLte() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool voice_over_lte = 1;</code>
       */
      public boolean getVoiceOverLte() {
        return voiceOverLte_;
      }
      /**
       * <code>optional bool voice_over_lte = 1;</code>
       */
      public Builder setVoiceOverLte(boolean value) {
        bitField0_ |= 0x00000001;
        voiceOverLte_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool voice_over_lte = 1;</code>
       */
      public Builder clearVoiceOverLte() {
        bitField0_ = (bitField0_ & ~0x00000001);
        voiceOverLte_ = false;
        onChanged();
        return this;
      }

      private boolean voiceOverWifi_ ;
      /**
       * <code>optional bool voice_over_wifi = 2;</code>
       */
      public boolean hasVoiceOverWifi() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool voice_over_wifi = 2;</code>
       */
      public boolean getVoiceOverWifi() {
        return voiceOverWifi_;
      }
      /**
       * <code>optional bool voice_over_wifi = 2;</code>
       */
      public Builder setVoiceOverWifi(boolean value) {
        bitField0_ |= 0x00000002;
        voiceOverWifi_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool voice_over_wifi = 2;</code>
       */
      public Builder clearVoiceOverWifi() {
        bitField0_ = (bitField0_ & ~0x00000002);
        voiceOverWifi_ = false;
        onChanged();
        return this;
      }

      private boolean videoOverLte_ ;
      /**
       * <code>optional bool video_over_lte = 3;</code>
       */
      public boolean hasVideoOverLte() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool video_over_lte = 3;</code>
       */
      public boolean getVideoOverLte() {
        return videoOverLte_;
      }
      /**
       * <code>optional bool video_over_lte = 3;</code>
       */
      public Builder setVideoOverLte(boolean value) {
        bitField0_ |= 0x00000004;
        videoOverLte_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool video_over_lte = 3;</code>
       */
      public Builder clearVideoOverLte() {
        bitField0_ = (bitField0_ & ~0x00000004);
        videoOverLte_ = false;
        onChanged();
        return this;
      }

      private boolean videoOverWifi_ ;
      /**
       * <code>optional bool video_over_wifi = 4;</code>
       */
      public boolean hasVideoOverWifi() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool video_over_wifi = 4;</code>
       */
      public boolean getVideoOverWifi() {
        return videoOverWifi_;
      }
      /**
       * <code>optional bool video_over_wifi = 4;</code>
       */
      public Builder setVideoOverWifi(boolean value) {
        bitField0_ |= 0x00000008;
        videoOverWifi_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool video_over_wifi = 4;</code>
       */
      public Builder clearVideoOverWifi() {
        bitField0_ = (bitField0_ & ~0x00000008);
        videoOverWifi_ = false;
        onChanged();
        return this;
      }

      private boolean utOverLte_ ;
      /**
       * <code>optional bool ut_over_lte = 5;</code>
       */
      public boolean hasUtOverLte() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool ut_over_lte = 5;</code>
       */
      public boolean getUtOverLte() {
        return utOverLte_;
      }
      /**
       * <code>optional bool ut_over_lte = 5;</code>
       */
      public Builder setUtOverLte(boolean value) {
        bitField0_ |= 0x00000010;
        utOverLte_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool ut_over_lte = 5;</code>
       */
      public Builder clearUtOverLte() {
        bitField0_ = (bitField0_ & ~0x00000010);
        utOverLte_ = false;
        onChanged();
        return this;
      }

      private boolean utOverWifi_ ;
      /**
       * <code>optional bool ut_over_wifi = 6;</code>
       */
      public boolean hasUtOverWifi() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool ut_over_wifi = 6;</code>
       */
      public boolean getUtOverWifi() {
        return utOverWifi_;
      }
      /**
       * <code>optional bool ut_over_wifi = 6;</code>
       */
      public Builder setUtOverWifi(boolean value) {
        bitField0_ |= 0x00000020;
        utOverWifi_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool ut_over_wifi = 6;</code>
       */
      public Builder clearUtOverWifi() {
        bitField0_ = (bitField0_ & ~0x00000020);
        utOverWifi_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clearcut.connectivity.ImsCapabilities)
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.ImsCapabilities)
    private static final com.android.internal.telephony.TelephonyProto.ImsCapabilities DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.ImsCapabilities();
    }

    public static com.android.internal.telephony.TelephonyProto.ImsCapabilities getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ImsCapabilities>
        PARSER = new com.google.protobuf.AbstractParser<ImsCapabilities>() {
      public ImsCapabilities parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ImsCapabilities(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ImsCapabilities> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ImsCapabilities> getParserForType() {
      return PARSER;
    }

    public com.android.internal.telephony.TelephonyProto.ImsCapabilities getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RilDataCallOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clearcut.connectivity.RilDataCall)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Context ID, uniquely identifies this call
     * </pre>
     *
     * <code>optional int32 cid = 1;</code>
     */
    boolean hasCid();
    /**
     * <pre>
     * Context ID, uniquely identifies this call
     * </pre>
     *
     * <code>optional int32 cid = 1;</code>
     */
    int getCid();

    /**
     * <pre>
     * One of the PDP_type values in TS 27.007 section 10.1.1
     * </pre>
     *
     * <code>optional .clearcut.connectivity.PdpType type = 2;</code>
     */
    boolean hasType();
    /**
     * <pre>
     * One of the PDP_type values in TS 27.007 section 10.1.1
     * </pre>
     *
     * <code>optional .clearcut.connectivity.PdpType type = 2;</code>
     */
    com.android.internal.telephony.TelephonyProto.PdpType getType();

    /**
     * <pre>
     * The network interface name e.g. wlan0, rmnet_data0.
     * </pre>
     *
     * <code>optional string iframe = 3;</code>
     */
    boolean hasIframe();
    /**
     * <pre>
     * The network interface name e.g. wlan0, rmnet_data0.
     * </pre>
     *
     * <code>optional string iframe = 3;</code>
     */
    java.lang.String getIframe();
    /**
     * <pre>
     * The network interface name e.g. wlan0, rmnet_data0.
     * </pre>
     *
     * <code>optional string iframe = 3;</code>
     */
    com.google.protobuf.ByteString
        getIframeBytes();
  }
  /**
   * <pre>
   * The information about packet data connection
   * </pre>
   *
   * Protobuf type {@code clearcut.connectivity.RilDataCall}
   */
  public  static final class RilDataCall extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clearcut.connectivity.RilDataCall)
      RilDataCallOrBuilder {
    // Use RilDataCall.newBuilder() to construct.
    private RilDataCall(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RilDataCall() {
      cid_ = 0;
      type_ = 0;
      iframe_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RilDataCall(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cid_ = input.readInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.android.internal.telephony.TelephonyProto.PdpType value = com.android.internal.telephony.TelephonyProto.PdpType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                type_ = rawValue;
              }
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              iframe_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_RilDataCall_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_RilDataCall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.internal.telephony.TelephonyProto.RilDataCall.class, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder.class);
    }

    private int bitField0_;
    public static final int CID_FIELD_NUMBER = 1;
    private int cid_;
    /**
     * <pre>
     * Context ID, uniquely identifies this call
     * </pre>
     *
     * <code>optional int32 cid = 1;</code>
     */
    public boolean hasCid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Context ID, uniquely identifies this call
     * </pre>
     *
     * <code>optional int32 cid = 1;</code>
     */
    public int getCid() {
      return cid_;
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_;
    /**
     * <pre>
     * One of the PDP_type values in TS 27.007 section 10.1.1
     * </pre>
     *
     * <code>optional .clearcut.connectivity.PdpType type = 2;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * One of the PDP_type values in TS 27.007 section 10.1.1
     * </pre>
     *
     * <code>optional .clearcut.connectivity.PdpType type = 2;</code>
     */
    public com.android.internal.telephony.TelephonyProto.PdpType getType() {
      com.android.internal.telephony.TelephonyProto.PdpType result = com.android.internal.telephony.TelephonyProto.PdpType.valueOf(type_);
      return result == null ? com.android.internal.telephony.TelephonyProto.PdpType.PDP_UNKNOWN : result;
    }

    public static final int IFRAME_FIELD_NUMBER = 3;
    private volatile java.lang.Object iframe_;
    /**
     * <pre>
     * The network interface name e.g. wlan0, rmnet_data0.
     * </pre>
     *
     * <code>optional string iframe = 3;</code>
     */
    public boolean hasIframe() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * The network interface name e.g. wlan0, rmnet_data0.
     * </pre>
     *
     * <code>optional string iframe = 3;</code>
     */
    public java.lang.String getIframe() {
      java.lang.Object ref = iframe_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          iframe_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * The network interface name e.g. wlan0, rmnet_data0.
     * </pre>
     *
     * <code>optional string iframe = 3;</code>
     */
    public com.google.protobuf.ByteString
        getIframeBytes() {
      java.lang.Object ref = iframe_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        iframe_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, cid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, type_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, iframe_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, cid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, iframe_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.internal.telephony.TelephonyProto.RilDataCall)) {
        return super.equals(obj);
      }
      com.android.internal.telephony.TelephonyProto.RilDataCall other = (com.android.internal.telephony.TelephonyProto.RilDataCall) obj;

      boolean result = true;
      result = result && (hasCid() == other.hasCid());
      if (hasCid()) {
        result = result && (getCid()
            == other.getCid());
      }
      result = result && (hasType() == other.hasType());
      if (hasType()) {
        result = result && type_ == other.type_;
      }
      result = result && (hasIframe() == other.hasIframe());
      if (hasIframe()) {
        result = result && getIframe()
            .equals(other.getIframe());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasCid()) {
        hash = (37 * hash) + CID_FIELD_NUMBER;
        hash = (53 * hash) + getCid();
      }
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
      }
      if (hasIframe()) {
        hash = (37 * hash) + IFRAME_FIELD_NUMBER;
        hash = (53 * hash) + getIframe().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.internal.telephony.TelephonyProto.RilDataCall parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.RilDataCall parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.RilDataCall parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.RilDataCall parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.RilDataCall parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.RilDataCall parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.RilDataCall parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.RilDataCall parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.RilDataCall parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.RilDataCall parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.RilDataCall prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The information about packet data connection
     * </pre>
     *
     * Protobuf type {@code clearcut.connectivity.RilDataCall}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clearcut.connectivity.RilDataCall)
        com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_RilDataCall_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_RilDataCall_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.RilDataCall.class, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder.class);
      }

      // Construct using com.android.internal.telephony.TelephonyProto.RilDataCall.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        cid_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        iframe_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_RilDataCall_descriptor;
      }

      public com.android.internal.telephony.TelephonyProto.RilDataCall getDefaultInstanceForType() {
        return com.android.internal.telephony.TelephonyProto.RilDataCall.getDefaultInstance();
      }

      public com.android.internal.telephony.TelephonyProto.RilDataCall build() {
        com.android.internal.telephony.TelephonyProto.RilDataCall result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.android.internal.telephony.TelephonyProto.RilDataCall buildPartial() {
        com.android.internal.telephony.TelephonyProto.RilDataCall result = new com.android.internal.telephony.TelephonyProto.RilDataCall(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cid_ = cid_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.iframe_ = iframe_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.internal.telephony.TelephonyProto.RilDataCall) {
          return mergeFrom((com.android.internal.telephony.TelephonyProto.RilDataCall)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.RilDataCall other) {
        if (other == com.android.internal.telephony.TelephonyProto.RilDataCall.getDefaultInstance()) return this;
        if (other.hasCid()) {
          setCid(other.getCid());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasIframe()) {
          bitField0_ |= 0x00000004;
          iframe_ = other.iframe_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.android.internal.telephony.TelephonyProto.RilDataCall parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.android.internal.telephony.TelephonyProto.RilDataCall) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int cid_ ;
      /**
       * <pre>
       * Context ID, uniquely identifies this call
       * </pre>
       *
       * <code>optional int32 cid = 1;</code>
       */
      public boolean hasCid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Context ID, uniquely identifies this call
       * </pre>
       *
       * <code>optional int32 cid = 1;</code>
       */
      public int getCid() {
        return cid_;
      }
      /**
       * <pre>
       * Context ID, uniquely identifies this call
       * </pre>
       *
       * <code>optional int32 cid = 1;</code>
       */
      public Builder setCid(int value) {
        bitField0_ |= 0x00000001;
        cid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Context ID, uniquely identifies this call
       * </pre>
       *
       * <code>optional int32 cid = 1;</code>
       */
      public Builder clearCid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cid_ = 0;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <pre>
       * One of the PDP_type values in TS 27.007 section 10.1.1
       * </pre>
       *
       * <code>optional .clearcut.connectivity.PdpType type = 2;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * One of the PDP_type values in TS 27.007 section 10.1.1
       * </pre>
       *
       * <code>optional .clearcut.connectivity.PdpType type = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.PdpType getType() {
        com.android.internal.telephony.TelephonyProto.PdpType result = com.android.internal.telephony.TelephonyProto.PdpType.valueOf(type_);
        return result == null ? com.android.internal.telephony.TelephonyProto.PdpType.PDP_UNKNOWN : result;
      }
      /**
       * <pre>
       * One of the PDP_type values in TS 27.007 section 10.1.1
       * </pre>
       *
       * <code>optional .clearcut.connectivity.PdpType type = 2;</code>
       */
      public Builder setType(com.android.internal.telephony.TelephonyProto.PdpType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * One of the PDP_type values in TS 27.007 section 10.1.1
       * </pre>
       *
       * <code>optional .clearcut.connectivity.PdpType type = 2;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object iframe_ = "";
      /**
       * <pre>
       * The network interface name e.g. wlan0, rmnet_data0.
       * </pre>
       *
       * <code>optional string iframe = 3;</code>
       */
      public boolean hasIframe() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * The network interface name e.g. wlan0, rmnet_data0.
       * </pre>
       *
       * <code>optional string iframe = 3;</code>
       */
      public java.lang.String getIframe() {
        java.lang.Object ref = iframe_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            iframe_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The network interface name e.g. wlan0, rmnet_data0.
       * </pre>
       *
       * <code>optional string iframe = 3;</code>
       */
      public com.google.protobuf.ByteString
          getIframeBytes() {
        java.lang.Object ref = iframe_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          iframe_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The network interface name e.g. wlan0, rmnet_data0.
       * </pre>
       *
       * <code>optional string iframe = 3;</code>
       */
      public Builder setIframe(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        iframe_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The network interface name e.g. wlan0, rmnet_data0.
       * </pre>
       *
       * <code>optional string iframe = 3;</code>
       */
      public Builder clearIframe() {
        bitField0_ = (bitField0_ & ~0x00000004);
        iframe_ = getDefaultInstance().getIframe();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The network interface name e.g. wlan0, rmnet_data0.
       * </pre>
       *
       * <code>optional string iframe = 3;</code>
       */
      public Builder setIframeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        iframe_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clearcut.connectivity.RilDataCall)
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.RilDataCall)
    private static final com.android.internal.telephony.TelephonyProto.RilDataCall DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.RilDataCall();
    }

    public static com.android.internal.telephony.TelephonyProto.RilDataCall getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<RilDataCall>
        PARSER = new com.google.protobuf.AbstractParser<RilDataCall>() {
      public RilDataCall parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new RilDataCall(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RilDataCall> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RilDataCall> getParserForType() {
      return PARSER;
    }

    public com.android.internal.telephony.TelephonyProto.RilDataCall getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TelephonyEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clearcut.connectivity.TelephonyEvent)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Time when event happened on device, in milliseconds since epoch
     * </pre>
     *
     * <code>optional int64 timestamp_millis = 1;</code>
     */
    boolean hasTimestampMillis();
    /**
     * <pre>
     * Time when event happened on device, in milliseconds since epoch
     * </pre>
     *
     * <code>optional int64 timestamp_millis = 1;</code>
     */
    long getTimestampMillis();

    /**
     * <pre>
     * In Multi-SIM devices this indicates SIM slot
     * </pre>
     *
     * <code>optional int32 phone_id = 2;</code>
     */
    boolean hasPhoneId();
    /**
     * <pre>
     * In Multi-SIM devices this indicates SIM slot
     * </pre>
     *
     * <code>optional int32 phone_id = 2;</code>
     */
    int getPhoneId();

    /**
     * <pre>
     * Event type
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.Type type = 3;</code>
     */
    boolean hasType();
    /**
     * <pre>
     * Event type
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.Type type = 3;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type getType();

    /**
     * <pre>
     * User settings
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonySettings settings = 4;</code>
     */
    boolean hasSettings();
    /**
     * <pre>
     * User settings
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonySettings settings = 4;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonySettings getSettings();
    /**
     * <pre>
     * User settings
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonySettings settings = 4;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder getSettingsOrBuilder();

    /**
     * <pre>
     * RIL Service State
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 5;</code>
     */
    boolean hasServiceState();
    /**
     * <pre>
     * RIL Service State
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 5;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyServiceState getServiceState();
    /**
     * <pre>
     * RIL Service State
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 5;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder getServiceStateOrBuilder();

    /**
     * <pre>
     * IMS state
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;</code>
     */
    boolean hasImsConnectionState();
    /**
     * <pre>
     * IMS state
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;</code>
     */
    com.android.internal.telephony.TelephonyProto.ImsConnectionState getImsConnectionState();
    /**
     * <pre>
     * IMS state
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;</code>
     */
    com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder getImsConnectionStateOrBuilder();

    /**
     * <pre>
     * IMS capabilities
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;</code>
     */
    boolean hasImsCapabilities();
    /**
     * <pre>
     * IMS capabilities
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;</code>
     */
    com.android.internal.telephony.TelephonyProto.ImsCapabilities getImsCapabilities();
    /**
     * <pre>
     * IMS capabilities
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;</code>
     */
    com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder getImsCapabilitiesOrBuilder();

    /**
     * <pre>
     * List of data calls when changed
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
     */
    java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall> 
        getDataCallsList();
    /**
     * <pre>
     * List of data calls when changed
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
     */
    com.android.internal.telephony.TelephonyProto.RilDataCall getDataCalls(int index);
    /**
     * <pre>
     * List of data calls when changed
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
     */
    int getDataCallsCount();
    /**
     * <pre>
     * List of data calls when changed
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
     */
    java.util.List<? extends com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> 
        getDataCallsOrBuilderList();
    /**
     * <pre>
     * List of data calls when changed
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
     */
    com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder getDataCallsOrBuilder(
        int index);

    /**
     * <pre>
     * RIL error code
     * </pre>
     *
     * <code>optional .clearcut.connectivity.RilErrno error = 9;</code>
     */
    boolean hasError();
    /**
     * <pre>
     * RIL error code
     * </pre>
     *
     * <code>optional .clearcut.connectivity.RilErrno error = 9;</code>
     */
    com.android.internal.telephony.TelephonyProto.RilErrno getError();

    /**
     * <pre>
     * Setup data call request
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;</code>
     */
    boolean hasSetupDataCall();
    /**
     * <pre>
     * Setup data call request
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall getSetupDataCall();
    /**
     * <pre>
     * Setup data call request
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallOrBuilder getSetupDataCallOrBuilder();

    /**
     * <pre>
     * Setup data call response
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;</code>
     */
    boolean hasSetupDataCallResponse();
    /**
     * <pre>
     * Setup data call response
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse getSetupDataCallResponse();
    /**
     * <pre>
     * Setup data call response
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponseOrBuilder getSetupDataCallResponseOrBuilder();

    /**
     * <pre>
     * Deactivate data call request
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;</code>
     */
    boolean hasDeactivateDataCall();
    /**
     * <pre>
     * Deactivate data call request
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall getDeactivateDataCall();
    /**
     * <pre>
     * Deactivate data call request
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCallOrBuilder getDeactivateDataCallOrBuilder();

    /**
     * <pre>
     * Data call stall recovery action
     * </pre>
     *
     * <code>optional int32 data_stall_action = 13;</code>
     */
    boolean hasDataStallAction();
    /**
     * <pre>
     * Data call stall recovery action
     * </pre>
     *
     * <code>optional int32 data_stall_action = 13;</code>
     */
    int getDataStallAction();

    /**
     * <pre>
     * Modem restart event
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;</code>
     */
    boolean hasModemRestart();
    /**
     * <pre>
     * Modem restart event
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart getModemRestart();
    /**
     * <pre>
     * Modem restart event
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestartOrBuilder getModemRestartOrBuilder();

    /**
     * <pre>
     * NITZ time in milliseconds
     * </pre>
     *
     * <code>optional int64 nitz_timestamp_millis = 15;</code>
     */
    boolean hasNitzTimestampMillis();
    /**
     * <pre>
     * NITZ time in milliseconds
     * </pre>
     *
     * <code>optional int64 nitz_timestamp_millis = 15;</code>
     */
    long getNitzTimestampMillis();
  }
  /**
   * Protobuf type {@code clearcut.connectivity.TelephonyEvent}
   */
  public  static final class TelephonyEvent extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clearcut.connectivity.TelephonyEvent)
      TelephonyEventOrBuilder {
    // Use TelephonyEvent.newBuilder() to construct.
    private TelephonyEvent(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TelephonyEvent() {
      timestampMillis_ = 0L;
      phoneId_ = 0;
      type_ = 0;
      dataCalls_ = java.util.Collections.emptyList();
      error_ = 0;
      dataStallAction_ = 0;
      nitzTimestampMillis_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TelephonyEvent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              timestampMillis_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              phoneId_ = input.readInt32();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type value = com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                type_ = rawValue;
              }
              break;
            }
            case 34: {
              com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = settings_.toBuilder();
              }
              settings_ = input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonySettings.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(settings_);
                settings_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = serviceState_.toBuilder();
              }
              serviceState_ = input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonyServiceState.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(serviceState_);
                serviceState_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = imsConnectionState_.toBuilder();
              }
              imsConnectionState_ = input.readMessage(com.android.internal.telephony.TelephonyProto.ImsConnectionState.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(imsConnectionState_);
                imsConnectionState_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = imsCapabilities_.toBuilder();
              }
              imsCapabilities_ = input.readMessage(com.android.internal.telephony.TelephonyProto.ImsCapabilities.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(imsCapabilities_);
                imsCapabilities_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                dataCalls_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.RilDataCall>();
                mutable_bitField0_ |= 0x00000080;
              }
              dataCalls_.add(
                  input.readMessage(com.android.internal.telephony.TelephonyProto.RilDataCall.PARSER, extensionRegistry));
              break;
            }
            case 72: {
              int rawValue = input.readEnum();
              com.android.internal.telephony.TelephonyProto.RilErrno value = com.android.internal.telephony.TelephonyProto.RilErrno.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(9, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                error_ = rawValue;
              }
              break;
            }
            case 82: {
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = setupDataCall_.toBuilder();
              }
              setupDataCall_ = input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(setupDataCall_);
                setupDataCall_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 90: {
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = setupDataCallResponse_.toBuilder();
              }
              setupDataCallResponse_ = input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(setupDataCallResponse_);
                setupDataCallResponse_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 98: {
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = deactivateDataCall_.toBuilder();
              }
              deactivateDataCall_ = input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(deactivateDataCall_);
                deactivateDataCall_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 104: {
              bitField0_ |= 0x00000800;
              dataStallAction_ = input.readInt32();
              break;
            }
            case 114: {
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = modemRestart_.toBuilder();
              }
              modemRestart_ = input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(modemRestart_);
                modemRestart_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
            case 120: {
              bitField0_ |= 0x00002000;
              nitzTimestampMillis_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          dataCalls_ = java.util.Collections.unmodifiableList(dataCalls_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.class, com.android.internal.telephony.TelephonyProto.TelephonyEvent.Builder.class);
    }

    /**
     * Protobuf enum {@code clearcut.connectivity.TelephonyEvent.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Unknown event
       * </pre>
       *
       * <code>UNKNOWN = 0;</code>
       */
      UNKNOWN(0),
      /**
       * <pre>
       * Telephony related user settings changed
       * </pre>
       *
       * <code>SETTINGS_CHANGED = 1;</code>
       */
      SETTINGS_CHANGED(1),
      /**
       * <pre>
       * Phone state changed
       * </pre>
       *
       * <code>RIL_SERVICE_STATE_CHANGED = 2;</code>
       */
      RIL_SERVICE_STATE_CHANGED(2),
      /**
       * <pre>
       * IMS connected/disconnected
       * </pre>
       *
       * <code>IMS_CONNECTION_STATE_CHANGED = 3;</code>
       */
      IMS_CONNECTION_STATE_CHANGED(3),
      /**
       * <pre>
       * IMS Voice, Video and Ut capabilities changed
       * </pre>
       *
       * <code>IMS_CAPABILITIES_CHANGED = 4;</code>
       */
      IMS_CAPABILITIES_CHANGED(4),
      /**
       * <pre>
       * Setup a packet data connection
       * </pre>
       *
       * <code>DATA_CALL_SETUP = 5;</code>
       */
      DATA_CALL_SETUP(5),
      /**
       * <pre>
       * RIL request result
       * </pre>
       *
       * <code>DATA_CALL_SETUP_RESPONSE = 6;</code>
       */
      DATA_CALL_SETUP_RESPONSE(6),
      /**
       * <pre>
       * Notification that new data call has appeared in the list
       * or old data call has removed.
       * </pre>
       *
       * <code>DATA_CALL_LIST_CHANGED = 7;</code>
       */
      DATA_CALL_LIST_CHANGED(7),
      /**
       * <pre>
       * Deactivate packet data connection
       * </pre>
       *
       * <code>DATA_CALL_DEACTIVATE = 8;</code>
       */
      DATA_CALL_DEACTIVATE(8),
      /**
       * <pre>
       * RIL request result
       * </pre>
       *
       * <code>DATA_CALL_DEACTIVATE_RESPONSE = 9;</code>
       */
      DATA_CALL_DEACTIVATE_RESPONSE(9),
      /**
       * <pre>
       * Logging a data stall + its action
       * </pre>
       *
       * <code>DATA_STALL_ACTION = 10;</code>
       */
      DATA_STALL_ACTION(10),
      /**
       * <pre>
       * Modem Restarted. Logging a baseband version and reason for restart
       * along with the event if it is available
       * </pre>
       *
       * <code>MODEM_RESTART = 11;</code>
       */
      MODEM_RESTART(11),
      /**
       * <pre>
       * System time overwritten by NITZ (Network time)
       * </pre>
       *
       * <code>NITZ_TIME = 12;</code>
       */
      NITZ_TIME(12),
      ;

      /**
       * <pre>
       * Unknown event
       * </pre>
       *
       * <code>UNKNOWN = 0;</code>
       */
      public static final int UNKNOWN_VALUE = 0;
      /**
       * <pre>
       * Telephony related user settings changed
       * </pre>
       *
       * <code>SETTINGS_CHANGED = 1;</code>
       */
      public static final int SETTINGS_CHANGED_VALUE = 1;
      /**
       * <pre>
       * Phone state changed
       * </pre>
       *
       * <code>RIL_SERVICE_STATE_CHANGED = 2;</code>
       */
      public static final int RIL_SERVICE_STATE_CHANGED_VALUE = 2;
      /**
       * <pre>
       * IMS connected/disconnected
       * </pre>
       *
       * <code>IMS_CONNECTION_STATE_CHANGED = 3;</code>
       */
      public static final int IMS_CONNECTION_STATE_CHANGED_VALUE = 3;
      /**
       * <pre>
       * IMS Voice, Video and Ut capabilities changed
       * </pre>
       *
       * <code>IMS_CAPABILITIES_CHANGED = 4;</code>
       */
      public static final int IMS_CAPABILITIES_CHANGED_VALUE = 4;
      /**
       * <pre>
       * Setup a packet data connection
       * </pre>
       *
       * <code>DATA_CALL_SETUP = 5;</code>
       */
      public static final int DATA_CALL_SETUP_VALUE = 5;
      /**
       * <pre>
       * RIL request result
       * </pre>
       *
       * <code>DATA_CALL_SETUP_RESPONSE = 6;</code>
       */
      public static final int DATA_CALL_SETUP_RESPONSE_VALUE = 6;
      /**
       * <pre>
       * Notification that new data call has appeared in the list
       * or old data call has removed.
       * </pre>
       *
       * <code>DATA_CALL_LIST_CHANGED = 7;</code>
       */
      public static final int DATA_CALL_LIST_CHANGED_VALUE = 7;
      /**
       * <pre>
       * Deactivate packet data connection
       * </pre>
       *
       * <code>DATA_CALL_DEACTIVATE = 8;</code>
       */
      public static final int DATA_CALL_DEACTIVATE_VALUE = 8;
      /**
       * <pre>
       * RIL request result
       * </pre>
       *
       * <code>DATA_CALL_DEACTIVATE_RESPONSE = 9;</code>
       */
      public static final int DATA_CALL_DEACTIVATE_RESPONSE_VALUE = 9;
      /**
       * <pre>
       * Logging a data stall + its action
       * </pre>
       *
       * <code>DATA_STALL_ACTION = 10;</code>
       */
      public static final int DATA_STALL_ACTION_VALUE = 10;
      /**
       * <pre>
       * Modem Restarted. Logging a baseband version and reason for restart
       * along with the event if it is available
       * </pre>
       *
       * <code>MODEM_RESTART = 11;</code>
       */
      public static final int MODEM_RESTART_VALUE = 11;
      /**
       * <pre>
       * System time overwritten by NITZ (Network time)
       * </pre>
       *
       * <code>NITZ_TIME = 12;</code>
       */
      public static final int NITZ_TIME_VALUE = 12;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      public static Type forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN;
          case 1: return SETTINGS_CHANGED;
          case 2: return RIL_SERVICE_STATE_CHANGED;
          case 3: return IMS_CONNECTION_STATE_CHANGED;
          case 4: return IMS_CAPABILITIES_CHANGED;
          case 5: return DATA_CALL_SETUP;
          case 6: return DATA_CALL_SETUP_RESPONSE;
          case 7: return DATA_CALL_LIST_CHANGED;
          case 8: return DATA_CALL_DEACTIVATE;
          case 9: return DATA_CALL_DEACTIVATE_RESPONSE;
          case 10: return DATA_STALL_ACTION;
          case 11: return MODEM_RESTART;
          case 12: return NITZ_TIME;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.TelephonyEvent.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:clearcut.connectivity.TelephonyEvent.Type)
    }

    public interface RilSetupDataCallOrBuilder extends
        // @@protoc_insertion_point(interface_extends:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Radio technology to use
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];</code>
       */
      boolean hasRat();
      /**
       * <pre>
       * Radio technology to use
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];</code>
       */
      com.android.internal.telephony.TelephonyProto.RadioAccessTechnology getRat();

      /**
       * <pre>
       * optional RIL_DataProfile
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;</code>
       */
      boolean hasDataProfile();
      /**
       * <pre>
       * optional RIL_DataProfile
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile getDataProfile();

      /**
       * <pre>
       * APN to connect to if radio technology is GSM/UMTS
       * </pre>
       *
       * <code>optional string apn = 3;</code>
       */
      boolean hasApn();
      /**
       * <pre>
       * APN to connect to if radio technology is GSM/UMTS
       * </pre>
       *
       * <code>optional string apn = 3;</code>
       */
      java.lang.String getApn();
      /**
       * <pre>
       * APN to connect to if radio technology is GSM/UMTS
       * </pre>
       *
       * <code>optional string apn = 3;</code>
       */
      com.google.protobuf.ByteString
          getApnBytes();

      /**
       * <pre>
       * the connection type to request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.PdpType type = 4;</code>
       */
      boolean hasType();
      /**
       * <pre>
       * the connection type to request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.PdpType type = 4;</code>
       */
      com.android.internal.telephony.TelephonyProto.PdpType getType();
    }
    /**
     * <pre>
     * Setup a packet data connection
     * </pre>
     *
     * Protobuf type {@code clearcut.connectivity.TelephonyEvent.RilSetupDataCall}
     */
    public  static final class RilSetupDataCall extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
        RilSetupDataCallOrBuilder {
      // Use RilSetupDataCall.newBuilder() to construct.
      private RilSetupDataCall(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RilSetupDataCall() {
        rat_ = -1;
        dataProfile_ = 0;
        apn_ = "";
        type_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private RilSetupDataCall(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.RadioAccessTechnology value = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  rat_ = rawValue;
                }
                break;
              }
              case 16: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile value = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(2, rawValue);
                } else {
                  bitField0_ |= 0x00000002;
                  dataProfile_ = rawValue;
                }
                break;
              }
              case 26: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000004;
                apn_ = bs;
                break;
              }
              case 32: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.PdpType value = com.android.internal.telephony.TelephonyProto.PdpType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(4, rawValue);
                } else {
                  bitField0_ |= 0x00000008;
                  type_ = rawValue;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCall_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCall_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.class, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.Builder.class);
      }

      /**
       * <pre>
       * See ril.h RIL_REQUEST_SETUP_DATA_CALL
       * </pre>
       *
       * Protobuf enum {@code clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile}
       */
      public enum RilDataProfile
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * type is unknown.
         * </pre>
         *
         * <code>RIL_DATA_UNKNOWN = 0;</code>
         */
        RIL_DATA_UNKNOWN(0),
        /**
         * <code>RIL_DATA_PROFILE_DEFAULT = 1;</code>
         */
        RIL_DATA_PROFILE_DEFAULT(1),
        /**
         * <code>RIL_DATA_PROFILE_TETHERED = 2;</code>
         */
        RIL_DATA_PROFILE_TETHERED(2),
        /**
         * <code>RIL_DATA_PROFILE_IMS = 3;</code>
         */
        RIL_DATA_PROFILE_IMS(3),
        /**
         * <code>RIL_DATA_PROFILE_FOTA = 4;</code>
         */
        RIL_DATA_PROFILE_FOTA(4),
        /**
         * <code>RIL_DATA_PROFILE_CBS = 5;</code>
         */
        RIL_DATA_PROFILE_CBS(5),
        /**
         * <code>RIL_DATA_PROFILE_OEM_BASE = 6;</code>
         */
        RIL_DATA_PROFILE_OEM_BASE(6),
        /**
         * <code>RIL_DATA_PROFILE_INVALID = 7;</code>
         */
        RIL_DATA_PROFILE_INVALID(7),
        ;

        /**
         * <pre>
         * type is unknown.
         * </pre>
         *
         * <code>RIL_DATA_UNKNOWN = 0;</code>
         */
        public static final int RIL_DATA_UNKNOWN_VALUE = 0;
        /**
         * <code>RIL_DATA_PROFILE_DEFAULT = 1;</code>
         */
        public static final int RIL_DATA_PROFILE_DEFAULT_VALUE = 1;
        /**
         * <code>RIL_DATA_PROFILE_TETHERED = 2;</code>
         */
        public static final int RIL_DATA_PROFILE_TETHERED_VALUE = 2;
        /**
         * <code>RIL_DATA_PROFILE_IMS = 3;</code>
         */
        public static final int RIL_DATA_PROFILE_IMS_VALUE = 3;
        /**
         * <code>RIL_DATA_PROFILE_FOTA = 4;</code>
         */
        public static final int RIL_DATA_PROFILE_FOTA_VALUE = 4;
        /**
         * <code>RIL_DATA_PROFILE_CBS = 5;</code>
         */
        public static final int RIL_DATA_PROFILE_CBS_VALUE = 5;
        /**
         * <code>RIL_DATA_PROFILE_OEM_BASE = 6;</code>
         */
        public static final int RIL_DATA_PROFILE_OEM_BASE_VALUE = 6;
        /**
         * <code>RIL_DATA_PROFILE_INVALID = 7;</code>
         */
        public static final int RIL_DATA_PROFILE_INVALID_VALUE = 7;


        public final int getNumber() {
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static RilDataProfile valueOf(int value) {
          return forNumber(value);
        }

        public static RilDataProfile forNumber(int value) {
          switch (value) {
            case 0: return RIL_DATA_UNKNOWN;
            case 1: return RIL_DATA_PROFILE_DEFAULT;
            case 2: return RIL_DATA_PROFILE_TETHERED;
            case 3: return RIL_DATA_PROFILE_IMS;
            case 4: return RIL_DATA_PROFILE_FOTA;
            case 5: return RIL_DATA_PROFILE_CBS;
            case 6: return RIL_DATA_PROFILE_OEM_BASE;
            case 7: return RIL_DATA_PROFILE_INVALID;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<RilDataProfile>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            RilDataProfile> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<RilDataProfile>() {
                public RilDataProfile findValueByNumber(int number) {
                  return RilDataProfile.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.getDescriptor().getEnumTypes().get(0);
        }

        private static final RilDataProfile[] VALUES = values();

        public static RilDataProfile valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private RilDataProfile(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile)
      }

      private int bitField0_;
      public static final int RAT_FIELD_NUMBER = 1;
      private int rat_;
      /**
       * <pre>
       * Radio technology to use
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];</code>
       */
      public boolean hasRat() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Radio technology to use
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];</code>
       */
      public com.android.internal.telephony.TelephonyProto.RadioAccessTechnology getRat() {
        com.android.internal.telephony.TelephonyProto.RadioAccessTechnology result = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.valueOf(rat_);
        return result == null ? com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.UNKNOWN : result;
      }

      public static final int DATA_PROFILE_FIELD_NUMBER = 2;
      private int dataProfile_;
      /**
       * <pre>
       * optional RIL_DataProfile
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;</code>
       */
      public boolean hasDataProfile() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * optional RIL_DataProfile
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile getDataProfile() {
        com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile result = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.valueOf(dataProfile_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_UNKNOWN : result;
      }

      public static final int APN_FIELD_NUMBER = 3;
      private volatile java.lang.Object apn_;
      /**
       * <pre>
       * APN to connect to if radio technology is GSM/UMTS
       * </pre>
       *
       * <code>optional string apn = 3;</code>
       */
      public boolean hasApn() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * APN to connect to if radio technology is GSM/UMTS
       * </pre>
       *
       * <code>optional string apn = 3;</code>
       */
      public java.lang.String getApn() {
        java.lang.Object ref = apn_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            apn_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * APN to connect to if radio technology is GSM/UMTS
       * </pre>
       *
       * <code>optional string apn = 3;</code>
       */
      public com.google.protobuf.ByteString
          getApnBytes() {
        java.lang.Object ref = apn_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          apn_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int TYPE_FIELD_NUMBER = 4;
      private int type_;
      /**
       * <pre>
       * the connection type to request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.PdpType type = 4;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * the connection type to request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.PdpType type = 4;</code>
       */
      public com.android.internal.telephony.TelephonyProto.PdpType getType() {
        com.android.internal.telephony.TelephonyProto.PdpType result = com.android.internal.telephony.TelephonyProto.PdpType.valueOf(type_);
        return result == null ? com.android.internal.telephony.TelephonyProto.PdpType.PDP_UNKNOWN : result;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, rat_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeEnum(2, dataProfile_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 3, apn_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeEnum(4, type_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, rat_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(2, dataProfile_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, apn_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(4, type_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall)) {
          return super.equals(obj);
        }
        com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall other = (com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall) obj;

        boolean result = true;
        result = result && (hasRat() == other.hasRat());
        if (hasRat()) {
          result = result && rat_ == other.rat_;
        }
        result = result && (hasDataProfile() == other.hasDataProfile());
        if (hasDataProfile()) {
          result = result && dataProfile_ == other.dataProfile_;
        }
        result = result && (hasApn() == other.hasApn());
        if (hasApn()) {
          result = result && getApn()
              .equals(other.getApn());
        }
        result = result && (hasType() == other.hasType());
        if (hasType()) {
          result = result && type_ == other.type_;
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptorForType().hashCode();
        if (hasRat()) {
          hash = (37 * hash) + RAT_FIELD_NUMBER;
          hash = (53 * hash) + rat_;
        }
        if (hasDataProfile()) {
          hash = (37 * hash) + DATA_PROFILE_FIELD_NUMBER;
          hash = (53 * hash) + dataProfile_;
        }
        if (hasApn()) {
          hash = (37 * hash) + APN_FIELD_NUMBER;
          hash = (53 * hash) + getApn().hashCode();
        }
        if (hasType()) {
          hash = (37 * hash) + TYPE_FIELD_NUMBER;
          hash = (53 * hash) + type_;
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Setup a packet data connection
       * </pre>
       *
       * Protobuf type {@code clearcut.connectivity.TelephonyEvent.RilSetupDataCall}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCall_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCall_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.class, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.Builder.class);
        }

        // Construct using com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          rat_ = -1;
          bitField0_ = (bitField0_ & ~0x00000001);
          dataProfile_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          apn_ = "";
          bitField0_ = (bitField0_ & ~0x00000004);
          type_ = 0;
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCall_descriptor;
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall getDefaultInstanceForType() {
          return com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.getDefaultInstance();
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall build() {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall buildPartial() {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall result = new com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.rat_ = rat_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.dataProfile_ = dataProfile_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.apn_ = apn_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.type_ = type_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall) {
            return mergeFrom((com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall other) {
          if (other == com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.getDefaultInstance()) return this;
          if (other.hasRat()) {
            setRat(other.getRat());
          }
          if (other.hasDataProfile()) {
            setDataProfile(other.getDataProfile());
          }
          if (other.hasApn()) {
            bitField0_ |= 0x00000004;
            apn_ = other.apn_;
            onChanged();
          }
          if (other.hasType()) {
            setType(other.getType());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int rat_ = -1;
        /**
         * <pre>
         * Radio technology to use
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];</code>
         */
        public boolean hasRat() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <pre>
         * Radio technology to use
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];</code>
         */
        public com.android.internal.telephony.TelephonyProto.RadioAccessTechnology getRat() {
          com.android.internal.telephony.TelephonyProto.RadioAccessTechnology result = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.valueOf(rat_);
          return result == null ? com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.UNKNOWN : result;
        }
        /**
         * <pre>
         * Radio technology to use
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];</code>
         */
        public Builder setRat(com.android.internal.telephony.TelephonyProto.RadioAccessTechnology value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          rat_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Radio technology to use
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];</code>
         */
        public Builder clearRat() {
          bitField0_ = (bitField0_ & ~0x00000001);
          rat_ = -1;
          onChanged();
          return this;
        }

        private int dataProfile_ = 0;
        /**
         * <pre>
         * optional RIL_DataProfile
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;</code>
         */
        public boolean hasDataProfile() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <pre>
         * optional RIL_DataProfile
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile getDataProfile() {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile result = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.valueOf(dataProfile_);
          return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_UNKNOWN : result;
        }
        /**
         * <pre>
         * optional RIL_DataProfile
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;</code>
         */
        public Builder setDataProfile(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000002;
          dataProfile_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * optional RIL_DataProfile
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;</code>
         */
        public Builder clearDataProfile() {
          bitField0_ = (bitField0_ & ~0x00000002);
          dataProfile_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object apn_ = "";
        /**
         * <pre>
         * APN to connect to if radio technology is GSM/UMTS
         * </pre>
         *
         * <code>optional string apn = 3;</code>
         */
        public boolean hasApn() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <pre>
         * APN to connect to if radio technology is GSM/UMTS
         * </pre>
         *
         * <code>optional string apn = 3;</code>
         */
        public java.lang.String getApn() {
          java.lang.Object ref = apn_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              apn_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * APN to connect to if radio technology is GSM/UMTS
         * </pre>
         *
         * <code>optional string apn = 3;</code>
         */
        public com.google.protobuf.ByteString
            getApnBytes() {
          java.lang.Object ref = apn_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            apn_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * APN to connect to if radio technology is GSM/UMTS
         * </pre>
         *
         * <code>optional string apn = 3;</code>
         */
        public Builder setApn(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          apn_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * APN to connect to if radio technology is GSM/UMTS
         * </pre>
         *
         * <code>optional string apn = 3;</code>
         */
        public Builder clearApn() {
          bitField0_ = (bitField0_ & ~0x00000004);
          apn_ = getDefaultInstance().getApn();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * APN to connect to if radio technology is GSM/UMTS
         * </pre>
         *
         * <code>optional string apn = 3;</code>
         */
        public Builder setApnBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          apn_ = value;
          onChanged();
          return this;
        }

        private int type_ = 0;
        /**
         * <pre>
         * the connection type to request
         * </pre>
         *
         * <code>optional .clearcut.connectivity.PdpType type = 4;</code>
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <pre>
         * the connection type to request
         * </pre>
         *
         * <code>optional .clearcut.connectivity.PdpType type = 4;</code>
         */
        public com.android.internal.telephony.TelephonyProto.PdpType getType() {
          com.android.internal.telephony.TelephonyProto.PdpType result = com.android.internal.telephony.TelephonyProto.PdpType.valueOf(type_);
          return result == null ? com.android.internal.telephony.TelephonyProto.PdpType.PDP_UNKNOWN : result;
        }
        /**
         * <pre>
         * the connection type to request
         * </pre>
         *
         * <code>optional .clearcut.connectivity.PdpType type = 4;</code>
         */
        public Builder setType(com.android.internal.telephony.TelephonyProto.PdpType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000008;
          type_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the connection type to request
         * </pre>
         *
         * <code>optional .clearcut.connectivity.PdpType type = 4;</code>
         */
        public Builder clearType() {
          bitField0_ = (bitField0_ & ~0x00000008);
          type_ = 0;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
      }

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyEvent.RilSetupDataCall)
      private static final com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall();
      }

      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<RilSetupDataCall>
          PARSER = new com.google.protobuf.AbstractParser<RilSetupDataCall>() {
        public RilSetupDataCall parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new RilSetupDataCall(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<RilSetupDataCall> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RilSetupDataCall> getParserForType() {
        return PARSER;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RilSetupDataCallResponseOrBuilder extends
        // @@protoc_insertion_point(interface_extends:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * A RIL_DataCallFailCause, 0 which is PDP_FAIL_NONE if no error
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;</code>
       */
      boolean hasStatus();
      /**
       * <pre>
       * A RIL_DataCallFailCause, 0 which is PDP_FAIL_NONE if no error
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause getStatus();

      /**
       * <pre>
       * If status != 0, this fields indicates the suggested retry back-off timer
       * value RIL wants to override the one pre-configured in FW
       * </pre>
       *
       * <code>optional int32 suggested_retry_time_millis = 2;</code>
       */
      boolean hasSuggestedRetryTimeMillis();
      /**
       * <pre>
       * If status != 0, this fields indicates the suggested retry back-off timer
       * value RIL wants to override the one pre-configured in FW
       * </pre>
       *
       * <code>optional int32 suggested_retry_time_millis = 2;</code>
       */
      int getSuggestedRetryTimeMillis();

      /**
       * <code>optional .clearcut.connectivity.RilDataCall call = 3;</code>
       */
      boolean hasCall();
      /**
       * <code>optional .clearcut.connectivity.RilDataCall call = 3;</code>
       */
      com.android.internal.telephony.TelephonyProto.RilDataCall getCall();
      /**
       * <code>optional .clearcut.connectivity.RilDataCall call = 3;</code>
       */
      com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder getCallOrBuilder();
    }
    /**
     * <pre>
     * RIL response to RilSetupDataCall
     * </pre>
     *
     * Protobuf type {@code clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse}
     */
    public  static final class RilSetupDataCallResponse extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
        RilSetupDataCallResponseOrBuilder {
      // Use RilSetupDataCallResponse.newBuilder() to construct.
      private RilSetupDataCallResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RilSetupDataCallResponse() {
        status_ = 0;
        suggestedRetryTimeMillis_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private RilSetupDataCallResponse(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause value = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  status_ = rawValue;
                }
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                suggestedRetryTimeMillis_ = input.readInt32();
                break;
              }
              case 26: {
                com.android.internal.telephony.TelephonyProto.RilDataCall.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = call_.toBuilder();
                }
                call_ = input.readMessage(com.android.internal.telephony.TelephonyProto.RilDataCall.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(call_);
                  call_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCallResponse_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCallResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.class, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.Builder.class);
      }

      /**
       * <pre>
       * Copy of enum RIL_DataCallFailCause defined at ril.h
       * </pre>
       *
       * Protobuf enum {@code clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause}
       */
      public enum RilDataCallFailCause
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * Failure reason is unknown.
         * </pre>
         *
         * <code>PDP_FAIL_UNKNOWN = 0;</code>
         */
        PDP_FAIL_UNKNOWN(0),
        /**
         * <pre>
         * No error, connection ok
         * </pre>
         *
         * <code>PDP_FAIL_NONE = 1;</code>
         */
        PDP_FAIL_NONE(1),
        /**
         * <code>PDP_FAIL_OPERATOR_BARRED = 8;</code>
         */
        PDP_FAIL_OPERATOR_BARRED(8),
        /**
         * <code>PDP_FAIL_NAS_SIGNALLING = 14;</code>
         */
        PDP_FAIL_NAS_SIGNALLING(14),
        /**
         * <code>PDP_FAIL_LLC_SNDCP = 25;</code>
         */
        PDP_FAIL_LLC_SNDCP(25),
        /**
         * <code>PDP_FAIL_INSUFFICIENT_RESOURCES = 26;</code>
         */
        PDP_FAIL_INSUFFICIENT_RESOURCES(26),
        /**
         * <code>PDP_FAIL_MISSING_UKNOWN_APN = 27;</code>
         */
        PDP_FAIL_MISSING_UKNOWN_APN(27),
        /**
         * <code>PDP_FAIL_UNKNOWN_PDP_ADDRESS_TYPE = 28;</code>
         */
        PDP_FAIL_UNKNOWN_PDP_ADDRESS_TYPE(28),
        /**
         * <code>PDP_FAIL_USER_AUTHENTICATION = 29;</code>
         */
        PDP_FAIL_USER_AUTHENTICATION(29),
        /**
         * <code>PDP_FAIL_ACTIVATION_REJECT_GGSN = 30;</code>
         */
        PDP_FAIL_ACTIVATION_REJECT_GGSN(30),
        /**
         * <code>PDP_FAIL_ACTIVATION_REJECT_UNSPECIFIED = 31;</code>
         */
        PDP_FAIL_ACTIVATION_REJECT_UNSPECIFIED(31),
        /**
         * <code>PDP_FAIL_SERVICE_OPTION_NOT_SUPPORTED = 32;</code>
         */
        PDP_FAIL_SERVICE_OPTION_NOT_SUPPORTED(32),
        /**
         * <code>PDP_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED = 33;</code>
         */
        PDP_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED(33),
        /**
         * <code>PDP_FAIL_SERVICE_OPTION_OUT_OF_ORDER = 34;</code>
         */
        PDP_FAIL_SERVICE_OPTION_OUT_OF_ORDER(34),
        /**
         * <code>PDP_FAIL_NSAPI_IN_USE = 35;</code>
         */
        PDP_FAIL_NSAPI_IN_USE(35),
        /**
         * <pre>
         * Possibly restart radio, based on framework config
         * </pre>
         *
         * <code>PDP_FAIL_REGULAR_DEACTIVATION = 36;</code>
         */
        PDP_FAIL_REGULAR_DEACTIVATION(36),
        /**
         * <code>PDP_FAIL_QOS_NOT_ACCEPTED = 37;</code>
         */
        PDP_FAIL_QOS_NOT_ACCEPTED(37),
        /**
         * <code>PDP_FAIL_NETWORK_FAILURE = 38;</code>
         */
        PDP_FAIL_NETWORK_FAILURE(38),
        /**
         * <code>PDP_FAIL_UMTS_REACTIVATION_REQ = 39;</code>
         */
        PDP_FAIL_UMTS_REACTIVATION_REQ(39),
        /**
         * <code>PDP_FAIL_FEATURE_NOT_SUPP = 40;</code>
         */
        PDP_FAIL_FEATURE_NOT_SUPP(40),
        /**
         * <code>PDP_FAIL_TFT_SEMANTIC_ERROR = 41;</code>
         */
        PDP_FAIL_TFT_SEMANTIC_ERROR(41),
        /**
         * <code>PDP_FAIL_TFT_SYTAX_ERROR = 42;</code>
         */
        PDP_FAIL_TFT_SYTAX_ERROR(42),
        /**
         * <code>PDP_FAIL_UNKNOWN_PDP_CONTEXT = 43;</code>
         */
        PDP_FAIL_UNKNOWN_PDP_CONTEXT(43),
        /**
         * <code>PDP_FAIL_FILTER_SEMANTIC_ERROR = 44;</code>
         */
        PDP_FAIL_FILTER_SEMANTIC_ERROR(44),
        /**
         * <code>PDP_FAIL_FILTER_SYTAX_ERROR = 45;</code>
         */
        PDP_FAIL_FILTER_SYTAX_ERROR(45),
        /**
         * <code>PDP_FAIL_PDP_WITHOUT_ACTIVE_TFT = 46;</code>
         */
        PDP_FAIL_PDP_WITHOUT_ACTIVE_TFT(46),
        /**
         * <code>PDP_FAIL_ONLY_IPV4_ALLOWED = 50;</code>
         */
        PDP_FAIL_ONLY_IPV4_ALLOWED(50),
        /**
         * <code>PDP_FAIL_ONLY_IPV6_ALLOWED = 51;</code>
         */
        PDP_FAIL_ONLY_IPV6_ALLOWED(51),
        /**
         * <code>PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED = 52;</code>
         */
        PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED(52),
        /**
         * <code>PDP_FAIL_ESM_INFO_NOT_RECEIVED = 53;</code>
         */
        PDP_FAIL_ESM_INFO_NOT_RECEIVED(53),
        /**
         * <code>PDP_FAIL_PDN_CONN_DOES_NOT_EXIST = 54;</code>
         */
        PDP_FAIL_PDN_CONN_DOES_NOT_EXIST(54),
        /**
         * <code>PDP_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED = 55;</code>
         */
        PDP_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED(55),
        /**
         * <code>PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED = 65;</code>
         */
        PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED(65),
        /**
         * <code>PDP_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN = 66;</code>
         */
        PDP_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN(66),
        /**
         * <code>PDP_FAIL_INVALID_TRANSACTION_ID = 81;</code>
         */
        PDP_FAIL_INVALID_TRANSACTION_ID(81),
        /**
         * <code>PDP_FAIL_MESSAGE_INCORRECT_SEMANTIC = 95;</code>
         */
        PDP_FAIL_MESSAGE_INCORRECT_SEMANTIC(95),
        /**
         * <code>PDP_FAIL_INVALID_MANDATORY_INFO = 96;</code>
         */
        PDP_FAIL_INVALID_MANDATORY_INFO(96),
        /**
         * <code>PDP_FAIL_MESSAGE_TYPE_UNSUPPORTED = 97;</code>
         */
        PDP_FAIL_MESSAGE_TYPE_UNSUPPORTED(97),
        /**
         * <code>PDP_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE = 98;</code>
         */
        PDP_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE(98),
        /**
         * <code>PDP_FAIL_UNKNOWN_INFO_ELEMENT = 99;</code>
         */
        PDP_FAIL_UNKNOWN_INFO_ELEMENT(99),
        /**
         * <code>PDP_FAIL_CONDITIONAL_IE_ERROR = 100;</code>
         */
        PDP_FAIL_CONDITIONAL_IE_ERROR(100),
        /**
         * <code>PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE = 101;</code>
         */
        PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE(101),
        /**
         * <code>PDP_FAIL_PROTOCOL_ERRORS = 111;</code>
         */
        PDP_FAIL_PROTOCOL_ERRORS(111),
        /**
         * <code>PDP_FAIL_APN_TYPE_CONFLICT = 112;</code>
         */
        PDP_FAIL_APN_TYPE_CONFLICT(112),
        /**
         * <code>PDP_FAIL_INVALID_PCSCF_ADDR = 113;</code>
         */
        PDP_FAIL_INVALID_PCSCF_ADDR(113),
        /**
         * <code>PDP_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN = 114;</code>
         */
        PDP_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN(114),
        /**
         * <code>PDP_FAIL_EMM_ACCESS_BARRED = 115;</code>
         */
        PDP_FAIL_EMM_ACCESS_BARRED(115),
        /**
         * <code>PDP_FAIL_EMERGENCY_IFACE_ONLY = 116;</code>
         */
        PDP_FAIL_EMERGENCY_IFACE_ONLY(116),
        /**
         * <code>PDP_FAIL_IFACE_MISMATCH = 117;</code>
         */
        PDP_FAIL_IFACE_MISMATCH(117),
        /**
         * <code>PDP_FAIL_COMPANION_IFACE_IN_USE = 118;</code>
         */
        PDP_FAIL_COMPANION_IFACE_IN_USE(118),
        /**
         * <code>PDP_FAIL_IP_ADDRESS_MISMATCH = 119;</code>
         */
        PDP_FAIL_IP_ADDRESS_MISMATCH(119),
        /**
         * <code>PDP_FAIL_IFACE_AND_POL_FAMILY_MISMATCH = 120;</code>
         */
        PDP_FAIL_IFACE_AND_POL_FAMILY_MISMATCH(120),
        /**
         * <code>PDP_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY = 121;</code>
         */
        PDP_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY(121),
        /**
         * <code>PDP_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL = 122;</code>
         */
        PDP_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL(122),
        /**
         * <pre>
         * Not mentioned in the specification
         * </pre>
         *
         * <code>PDP_FAIL_VOICE_REGISTRATION_FAIL = -1;</code>
         */
        PDP_FAIL_VOICE_REGISTRATION_FAIL(-1),
        /**
         * <code>PDP_FAIL_DATA_REGISTRATION_FAIL = -2;</code>
         */
        PDP_FAIL_DATA_REGISTRATION_FAIL(-2),
        /**
         * <pre>
         * Reasons for data call drop - network/modem disconnect
         * </pre>
         *
         * <code>PDP_FAIL_SIGNAL_LOST = -3;</code>
         */
        PDP_FAIL_SIGNAL_LOST(-3),
        /**
         * <pre>
         * Preferred technology has changed, should retry with parameters
         * appropriate for new technology
         * </pre>
         *
         * <code>PDP_FAIL_PREF_RADIO_TECH_CHANGED = -4;</code>
         */
        PDP_FAIL_PREF_RADIO_TECH_CHANGED(-4),
        /**
         * <pre>
         * Data call was disconnected because radio was resetting,
         * powered off - no retry
         * </pre>
         *
         * <code>PDP_FAIL_RADIO_POWER_OFF = -5;</code>
         */
        PDP_FAIL_RADIO_POWER_OFF(-5),
        /**
         * <pre>
         * Data call was disconnected by modem because tethered mode was up
         * on same APN/data profile - no retry until tethered call is off
         * </pre>
         *
         * <code>PDP_FAIL_TETHERED_CALL_ACTIVE = -6;</code>
         */
        PDP_FAIL_TETHERED_CALL_ACTIVE(-6),
        /**
         * <pre>
         * retry silently
         * </pre>
         *
         * <code>PDP_FAIL_ERROR_UNSPECIFIED = 65535;</code>
         */
        PDP_FAIL_ERROR_UNSPECIFIED(65535),
        ;

        /**
         * <pre>
         * Failure reason is unknown.
         * </pre>
         *
         * <code>PDP_FAIL_UNKNOWN = 0;</code>
         */
        public static final int PDP_FAIL_UNKNOWN_VALUE = 0;
        /**
         * <pre>
         * No error, connection ok
         * </pre>
         *
         * <code>PDP_FAIL_NONE = 1;</code>
         */
        public static final int PDP_FAIL_NONE_VALUE = 1;
        /**
         * <code>PDP_FAIL_OPERATOR_BARRED = 8;</code>
         */
        public static final int PDP_FAIL_OPERATOR_BARRED_VALUE = 8;
        /**
         * <code>PDP_FAIL_NAS_SIGNALLING = 14;</code>
         */
        public static final int PDP_FAIL_NAS_SIGNALLING_VALUE = 14;
        /**
         * <code>PDP_FAIL_LLC_SNDCP = 25;</code>
         */
        public static final int PDP_FAIL_LLC_SNDCP_VALUE = 25;
        /**
         * <code>PDP_FAIL_INSUFFICIENT_RESOURCES = 26;</code>
         */
        public static final int PDP_FAIL_INSUFFICIENT_RESOURCES_VALUE = 26;
        /**
         * <code>PDP_FAIL_MISSING_UKNOWN_APN = 27;</code>
         */
        public static final int PDP_FAIL_MISSING_UKNOWN_APN_VALUE = 27;
        /**
         * <code>PDP_FAIL_UNKNOWN_PDP_ADDRESS_TYPE = 28;</code>
         */
        public static final int PDP_FAIL_UNKNOWN_PDP_ADDRESS_TYPE_VALUE = 28;
        /**
         * <code>PDP_FAIL_USER_AUTHENTICATION = 29;</code>
         */
        public static final int PDP_FAIL_USER_AUTHENTICATION_VALUE = 29;
        /**
         * <code>PDP_FAIL_ACTIVATION_REJECT_GGSN = 30;</code>
         */
        public static final int PDP_FAIL_ACTIVATION_REJECT_GGSN_VALUE = 30;
        /**
         * <code>PDP_FAIL_ACTIVATION_REJECT_UNSPECIFIED = 31;</code>
         */
        public static final int PDP_FAIL_ACTIVATION_REJECT_UNSPECIFIED_VALUE = 31;
        /**
         * <code>PDP_FAIL_SERVICE_OPTION_NOT_SUPPORTED = 32;</code>
         */
        public static final int PDP_FAIL_SERVICE_OPTION_NOT_SUPPORTED_VALUE = 32;
        /**
         * <code>PDP_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED = 33;</code>
         */
        public static final int PDP_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED_VALUE = 33;
        /**
         * <code>PDP_FAIL_SERVICE_OPTION_OUT_OF_ORDER = 34;</code>
         */
        public static final int PDP_FAIL_SERVICE_OPTION_OUT_OF_ORDER_VALUE = 34;
        /**
         * <code>PDP_FAIL_NSAPI_IN_USE = 35;</code>
         */
        public static final int PDP_FAIL_NSAPI_IN_USE_VALUE = 35;
        /**
         * <pre>
         * Possibly restart radio, based on framework config
         * </pre>
         *
         * <code>PDP_FAIL_REGULAR_DEACTIVATION = 36;</code>
         */
        public static final int PDP_FAIL_REGULAR_DEACTIVATION_VALUE = 36;
        /**
         * <code>PDP_FAIL_QOS_NOT_ACCEPTED = 37;</code>
         */
        public static final int PDP_FAIL_QOS_NOT_ACCEPTED_VALUE = 37;
        /**
         * <code>PDP_FAIL_NETWORK_FAILURE = 38;</code>
         */
        public static final int PDP_FAIL_NETWORK_FAILURE_VALUE = 38;
        /**
         * <code>PDP_FAIL_UMTS_REACTIVATION_REQ = 39;</code>
         */
        public static final int PDP_FAIL_UMTS_REACTIVATION_REQ_VALUE = 39;
        /**
         * <code>PDP_FAIL_FEATURE_NOT_SUPP = 40;</code>
         */
        public static final int PDP_FAIL_FEATURE_NOT_SUPP_VALUE = 40;
        /**
         * <code>PDP_FAIL_TFT_SEMANTIC_ERROR = 41;</code>
         */
        public static final int PDP_FAIL_TFT_SEMANTIC_ERROR_VALUE = 41;
        /**
         * <code>PDP_FAIL_TFT_SYTAX_ERROR = 42;</code>
         */
        public static final int PDP_FAIL_TFT_SYTAX_ERROR_VALUE = 42;
        /**
         * <code>PDP_FAIL_UNKNOWN_PDP_CONTEXT = 43;</code>
         */
        public static final int PDP_FAIL_UNKNOWN_PDP_CONTEXT_VALUE = 43;
        /**
         * <code>PDP_FAIL_FILTER_SEMANTIC_ERROR = 44;</code>
         */
        public static final int PDP_FAIL_FILTER_SEMANTIC_ERROR_VALUE = 44;
        /**
         * <code>PDP_FAIL_FILTER_SYTAX_ERROR = 45;</code>
         */
        public static final int PDP_FAIL_FILTER_SYTAX_ERROR_VALUE = 45;
        /**
         * <code>PDP_FAIL_PDP_WITHOUT_ACTIVE_TFT = 46;</code>
         */
        public static final int PDP_FAIL_PDP_WITHOUT_ACTIVE_TFT_VALUE = 46;
        /**
         * <code>PDP_FAIL_ONLY_IPV4_ALLOWED = 50;</code>
         */
        public static final int PDP_FAIL_ONLY_IPV4_ALLOWED_VALUE = 50;
        /**
         * <code>PDP_FAIL_ONLY_IPV6_ALLOWED = 51;</code>
         */
        public static final int PDP_FAIL_ONLY_IPV6_ALLOWED_VALUE = 51;
        /**
         * <code>PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED = 52;</code>
         */
        public static final int PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED_VALUE = 52;
        /**
         * <code>PDP_FAIL_ESM_INFO_NOT_RECEIVED = 53;</code>
         */
        public static final int PDP_FAIL_ESM_INFO_NOT_RECEIVED_VALUE = 53;
        /**
         * <code>PDP_FAIL_PDN_CONN_DOES_NOT_EXIST = 54;</code>
         */
        public static final int PDP_FAIL_PDN_CONN_DOES_NOT_EXIST_VALUE = 54;
        /**
         * <code>PDP_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED = 55;</code>
         */
        public static final int PDP_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED_VALUE = 55;
        /**
         * <code>PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED = 65;</code>
         */
        public static final int PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED_VALUE = 65;
        /**
         * <code>PDP_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN = 66;</code>
         */
        public static final int PDP_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN_VALUE = 66;
        /**
         * <code>PDP_FAIL_INVALID_TRANSACTION_ID = 81;</code>
         */
        public static final int PDP_FAIL_INVALID_TRANSACTION_ID_VALUE = 81;
        /**
         * <code>PDP_FAIL_MESSAGE_INCORRECT_SEMANTIC = 95;</code>
         */
        public static final int PDP_FAIL_MESSAGE_INCORRECT_SEMANTIC_VALUE = 95;
        /**
         * <code>PDP_FAIL_INVALID_MANDATORY_INFO = 96;</code>
         */
        public static final int PDP_FAIL_INVALID_MANDATORY_INFO_VALUE = 96;
        /**
         * <code>PDP_FAIL_MESSAGE_TYPE_UNSUPPORTED = 97;</code>
         */
        public static final int PDP_FAIL_MESSAGE_TYPE_UNSUPPORTED_VALUE = 97;
        /**
         * <code>PDP_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE = 98;</code>
         */
        public static final int PDP_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE_VALUE = 98;
        /**
         * <code>PDP_FAIL_UNKNOWN_INFO_ELEMENT = 99;</code>
         */
        public static final int PDP_FAIL_UNKNOWN_INFO_ELEMENT_VALUE = 99;
        /**
         * <code>PDP_FAIL_CONDITIONAL_IE_ERROR = 100;</code>
         */
        public static final int PDP_FAIL_CONDITIONAL_IE_ERROR_VALUE = 100;
        /**
         * <code>PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE = 101;</code>
         */
        public static final int PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE_VALUE = 101;
        /**
         * <code>PDP_FAIL_PROTOCOL_ERRORS = 111;</code>
         */
        public static final int PDP_FAIL_PROTOCOL_ERRORS_VALUE = 111;
        /**
         * <code>PDP_FAIL_APN_TYPE_CONFLICT = 112;</code>
         */
        public static final int PDP_FAIL_APN_TYPE_CONFLICT_VALUE = 112;
        /**
         * <code>PDP_FAIL_INVALID_PCSCF_ADDR = 113;</code>
         */
        public static final int PDP_FAIL_INVALID_PCSCF_ADDR_VALUE = 113;
        /**
         * <code>PDP_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN = 114;</code>
         */
        public static final int PDP_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN_VALUE = 114;
        /**
         * <code>PDP_FAIL_EMM_ACCESS_BARRED = 115;</code>
         */
        public static final int PDP_FAIL_EMM_ACCESS_BARRED_VALUE = 115;
        /**
         * <code>PDP_FAIL_EMERGENCY_IFACE_ONLY = 116;</code>
         */
        public static final int PDP_FAIL_EMERGENCY_IFACE_ONLY_VALUE = 116;
        /**
         * <code>PDP_FAIL_IFACE_MISMATCH = 117;</code>
         */
        public static final int PDP_FAIL_IFACE_MISMATCH_VALUE = 117;
        /**
         * <code>PDP_FAIL_COMPANION_IFACE_IN_USE = 118;</code>
         */
        public static final int PDP_FAIL_COMPANION_IFACE_IN_USE_VALUE = 118;
        /**
         * <code>PDP_FAIL_IP_ADDRESS_MISMATCH = 119;</code>
         */
        public static final int PDP_FAIL_IP_ADDRESS_MISMATCH_VALUE = 119;
        /**
         * <code>PDP_FAIL_IFACE_AND_POL_FAMILY_MISMATCH = 120;</code>
         */
        public static final int PDP_FAIL_IFACE_AND_POL_FAMILY_MISMATCH_VALUE = 120;
        /**
         * <code>PDP_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY = 121;</code>
         */
        public static final int PDP_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY_VALUE = 121;
        /**
         * <code>PDP_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL = 122;</code>
         */
        public static final int PDP_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL_VALUE = 122;
        /**
         * <pre>
         * Not mentioned in the specification
         * </pre>
         *
         * <code>PDP_FAIL_VOICE_REGISTRATION_FAIL = -1;</code>
         */
        public static final int PDP_FAIL_VOICE_REGISTRATION_FAIL_VALUE = -1;
        /**
         * <code>PDP_FAIL_DATA_REGISTRATION_FAIL = -2;</code>
         */
        public static final int PDP_FAIL_DATA_REGISTRATION_FAIL_VALUE = -2;
        /**
         * <pre>
         * Reasons for data call drop - network/modem disconnect
         * </pre>
         *
         * <code>PDP_FAIL_SIGNAL_LOST = -3;</code>
         */
        public static final int PDP_FAIL_SIGNAL_LOST_VALUE = -3;
        /**
         * <pre>
         * Preferred technology has changed, should retry with parameters
         * appropriate for new technology
         * </pre>
         *
         * <code>PDP_FAIL_PREF_RADIO_TECH_CHANGED = -4;</code>
         */
        public static final int PDP_FAIL_PREF_RADIO_TECH_CHANGED_VALUE = -4;
        /**
         * <pre>
         * Data call was disconnected because radio was resetting,
         * powered off - no retry
         * </pre>
         *
         * <code>PDP_FAIL_RADIO_POWER_OFF = -5;</code>
         */
        public static final int PDP_FAIL_RADIO_POWER_OFF_VALUE = -5;
        /**
         * <pre>
         * Data call was disconnected by modem because tethered mode was up
         * on same APN/data profile - no retry until tethered call is off
         * </pre>
         *
         * <code>PDP_FAIL_TETHERED_CALL_ACTIVE = -6;</code>
         */
        public static final int PDP_FAIL_TETHERED_CALL_ACTIVE_VALUE = -6;
        /**
         * <pre>
         * retry silently
         * </pre>
         *
         * <code>PDP_FAIL_ERROR_UNSPECIFIED = 65535;</code>
         */
        public static final int PDP_FAIL_ERROR_UNSPECIFIED_VALUE = 65535;


        public final int getNumber() {
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static RilDataCallFailCause valueOf(int value) {
          return forNumber(value);
        }

        public static RilDataCallFailCause forNumber(int value) {
          switch (value) {
            case 0: return PDP_FAIL_UNKNOWN;
            case 1: return PDP_FAIL_NONE;
            case 8: return PDP_FAIL_OPERATOR_BARRED;
            case 14: return PDP_FAIL_NAS_SIGNALLING;
            case 25: return PDP_FAIL_LLC_SNDCP;
            case 26: return PDP_FAIL_INSUFFICIENT_RESOURCES;
            case 27: return PDP_FAIL_MISSING_UKNOWN_APN;
            case 28: return PDP_FAIL_UNKNOWN_PDP_ADDRESS_TYPE;
            case 29: return PDP_FAIL_USER_AUTHENTICATION;
            case 30: return PDP_FAIL_ACTIVATION_REJECT_GGSN;
            case 31: return PDP_FAIL_ACTIVATION_REJECT_UNSPECIFIED;
            case 32: return PDP_FAIL_SERVICE_OPTION_NOT_SUPPORTED;
            case 33: return PDP_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED;
            case 34: return PDP_FAIL_SERVICE_OPTION_OUT_OF_ORDER;
            case 35: return PDP_FAIL_NSAPI_IN_USE;
            case 36: return PDP_FAIL_REGULAR_DEACTIVATION;
            case 37: return PDP_FAIL_QOS_NOT_ACCEPTED;
            case 38: return PDP_FAIL_NETWORK_FAILURE;
            case 39: return PDP_FAIL_UMTS_REACTIVATION_REQ;
            case 40: return PDP_FAIL_FEATURE_NOT_SUPP;
            case 41: return PDP_FAIL_TFT_SEMANTIC_ERROR;
            case 42: return PDP_FAIL_TFT_SYTAX_ERROR;
            case 43: return PDP_FAIL_UNKNOWN_PDP_CONTEXT;
            case 44: return PDP_FAIL_FILTER_SEMANTIC_ERROR;
            case 45: return PDP_FAIL_FILTER_SYTAX_ERROR;
            case 46: return PDP_FAIL_PDP_WITHOUT_ACTIVE_TFT;
            case 50: return PDP_FAIL_ONLY_IPV4_ALLOWED;
            case 51: return PDP_FAIL_ONLY_IPV6_ALLOWED;
            case 52: return PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED;
            case 53: return PDP_FAIL_ESM_INFO_NOT_RECEIVED;
            case 54: return PDP_FAIL_PDN_CONN_DOES_NOT_EXIST;
            case 55: return PDP_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED;
            case 65: return PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED;
            case 66: return PDP_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN;
            case 81: return PDP_FAIL_INVALID_TRANSACTION_ID;
            case 95: return PDP_FAIL_MESSAGE_INCORRECT_SEMANTIC;
            case 96: return PDP_FAIL_INVALID_MANDATORY_INFO;
            case 97: return PDP_FAIL_MESSAGE_TYPE_UNSUPPORTED;
            case 98: return PDP_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE;
            case 99: return PDP_FAIL_UNKNOWN_INFO_ELEMENT;
            case 100: return PDP_FAIL_CONDITIONAL_IE_ERROR;
            case 101: return PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE;
            case 111: return PDP_FAIL_PROTOCOL_ERRORS;
            case 112: return PDP_FAIL_APN_TYPE_CONFLICT;
            case 113: return PDP_FAIL_INVALID_PCSCF_ADDR;
            case 114: return PDP_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN;
            case 115: return PDP_FAIL_EMM_ACCESS_BARRED;
            case 116: return PDP_FAIL_EMERGENCY_IFACE_ONLY;
            case 117: return PDP_FAIL_IFACE_MISMATCH;
            case 118: return PDP_FAIL_COMPANION_IFACE_IN_USE;
            case 119: return PDP_FAIL_IP_ADDRESS_MISMATCH;
            case 120: return PDP_FAIL_IFACE_AND_POL_FAMILY_MISMATCH;
            case 121: return PDP_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY;
            case 122: return PDP_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL;
            case -1: return PDP_FAIL_VOICE_REGISTRATION_FAIL;
            case -2: return PDP_FAIL_DATA_REGISTRATION_FAIL;
            case -3: return PDP_FAIL_SIGNAL_LOST;
            case -4: return PDP_FAIL_PREF_RADIO_TECH_CHANGED;
            case -5: return PDP_FAIL_RADIO_POWER_OFF;
            case -6: return PDP_FAIL_TETHERED_CALL_ACTIVE;
            case 65535: return PDP_FAIL_ERROR_UNSPECIFIED;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<RilDataCallFailCause>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            RilDataCallFailCause> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<RilDataCallFailCause>() {
                public RilDataCallFailCause findValueByNumber(int number) {
                  return RilDataCallFailCause.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.getDescriptor().getEnumTypes().get(0);
        }

        private static final RilDataCallFailCause[] VALUES = values();

        public static RilDataCallFailCause valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private RilDataCallFailCause(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause)
      }

      private int bitField0_;
      public static final int STATUS_FIELD_NUMBER = 1;
      private int status_;
      /**
       * <pre>
       * A RIL_DataCallFailCause, 0 which is PDP_FAIL_NONE if no error
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * A RIL_DataCallFailCause, 0 which is PDP_FAIL_NONE if no error
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause getStatus() {
        com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause result = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.valueOf(status_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNKNOWN : result;
      }

      public static final int SUGGESTED_RETRY_TIME_MILLIS_FIELD_NUMBER = 2;
      private int suggestedRetryTimeMillis_;
      /**
       * <pre>
       * If status != 0, this fields indicates the suggested retry back-off timer
       * value RIL wants to override the one pre-configured in FW
       * </pre>
       *
       * <code>optional int32 suggested_retry_time_millis = 2;</code>
       */
      public boolean hasSuggestedRetryTimeMillis() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * If status != 0, this fields indicates the suggested retry back-off timer
       * value RIL wants to override the one pre-configured in FW
       * </pre>
       *
       * <code>optional int32 suggested_retry_time_millis = 2;</code>
       */
      public int getSuggestedRetryTimeMillis() {
        return suggestedRetryTimeMillis_;
      }

      public static final int CALL_FIELD_NUMBER = 3;
      private com.android.internal.telephony.TelephonyProto.RilDataCall call_;
      /**
       * <code>optional .clearcut.connectivity.RilDataCall call = 3;</code>
       */
      public boolean hasCall() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .clearcut.connectivity.RilDataCall call = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.RilDataCall getCall() {
        return call_ == null ? com.android.internal.telephony.TelephonyProto.RilDataCall.getDefaultInstance() : call_;
      }
      /**
       * <code>optional .clearcut.connectivity.RilDataCall call = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder getCallOrBuilder() {
        return call_ == null ? com.android.internal.telephony.TelephonyProto.RilDataCall.getDefaultInstance() : call_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, status_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, suggestedRetryTimeMillis_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeMessage(3, getCall());
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, status_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, suggestedRetryTimeMillis_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getCall());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse)) {
          return super.equals(obj);
        }
        com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse other = (com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse) obj;

        boolean result = true;
        result = result && (hasStatus() == other.hasStatus());
        if (hasStatus()) {
          result = result && status_ == other.status_;
        }
        result = result && (hasSuggestedRetryTimeMillis() == other.hasSuggestedRetryTimeMillis());
        if (hasSuggestedRetryTimeMillis()) {
          result = result && (getSuggestedRetryTimeMillis()
              == other.getSuggestedRetryTimeMillis());
        }
        result = result && (hasCall() == other.hasCall());
        if (hasCall()) {
          result = result && getCall()
              .equals(other.getCall());
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptorForType().hashCode();
        if (hasStatus()) {
          hash = (37 * hash) + STATUS_FIELD_NUMBER;
          hash = (53 * hash) + status_;
        }
        if (hasSuggestedRetryTimeMillis()) {
          hash = (37 * hash) + SUGGESTED_RETRY_TIME_MILLIS_FIELD_NUMBER;
          hash = (53 * hash) + getSuggestedRetryTimeMillis();
        }
        if (hasCall()) {
          hash = (37 * hash) + CALL_FIELD_NUMBER;
          hash = (53 * hash) + getCall().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * RIL response to RilSetupDataCall
       * </pre>
       *
       * Protobuf type {@code clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponseOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCallResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCallResponse_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.class, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.Builder.class);
        }

        // Construct using com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getCallFieldBuilder();
          }
        }
        public Builder clear() {
          super.clear();
          status_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          suggestedRetryTimeMillis_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          if (callBuilder_ == null) {
            call_ = null;
          } else {
            callBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCallResponse_descriptor;
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse getDefaultInstanceForType() {
          return com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.getDefaultInstance();
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse build() {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse buildPartial() {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse result = new com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.status_ = status_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.suggestedRetryTimeMillis_ = suggestedRetryTimeMillis_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          if (callBuilder_ == null) {
            result.call_ = call_;
          } else {
            result.call_ = callBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse) {
            return mergeFrom((com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse other) {
          if (other == com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.getDefaultInstance()) return this;
          if (other.hasStatus()) {
            setStatus(other.getStatus());
          }
          if (other.hasSuggestedRetryTimeMillis()) {
            setSuggestedRetryTimeMillis(other.getSuggestedRetryTimeMillis());
          }
          if (other.hasCall()) {
            mergeCall(other.getCall());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int status_ = 0;
        /**
         * <pre>
         * A RIL_DataCallFailCause, 0 which is PDP_FAIL_NONE if no error
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;</code>
         */
        public boolean hasStatus() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <pre>
         * A RIL_DataCallFailCause, 0 which is PDP_FAIL_NONE if no error
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause getStatus() {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause result = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.valueOf(status_);
          return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNKNOWN : result;
        }
        /**
         * <pre>
         * A RIL_DataCallFailCause, 0 which is PDP_FAIL_NONE if no error
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;</code>
         */
        public Builder setStatus(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          status_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * A RIL_DataCallFailCause, 0 which is PDP_FAIL_NONE if no error
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;</code>
         */
        public Builder clearStatus() {
          bitField0_ = (bitField0_ & ~0x00000001);
          status_ = 0;
          onChanged();
          return this;
        }

        private int suggestedRetryTimeMillis_ ;
        /**
         * <pre>
         * If status != 0, this fields indicates the suggested retry back-off timer
         * value RIL wants to override the one pre-configured in FW
         * </pre>
         *
         * <code>optional int32 suggested_retry_time_millis = 2;</code>
         */
        public boolean hasSuggestedRetryTimeMillis() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <pre>
         * If status != 0, this fields indicates the suggested retry back-off timer
         * value RIL wants to override the one pre-configured in FW
         * </pre>
         *
         * <code>optional int32 suggested_retry_time_millis = 2;</code>
         */
        public int getSuggestedRetryTimeMillis() {
          return suggestedRetryTimeMillis_;
        }
        /**
         * <pre>
         * If status != 0, this fields indicates the suggested retry back-off timer
         * value RIL wants to override the one pre-configured in FW
         * </pre>
         *
         * <code>optional int32 suggested_retry_time_millis = 2;</code>
         */
        public Builder setSuggestedRetryTimeMillis(int value) {
          bitField0_ |= 0x00000002;
          suggestedRetryTimeMillis_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * If status != 0, this fields indicates the suggested retry back-off timer
         * value RIL wants to override the one pre-configured in FW
         * </pre>
         *
         * <code>optional int32 suggested_retry_time_millis = 2;</code>
         */
        public Builder clearSuggestedRetryTimeMillis() {
          bitField0_ = (bitField0_ & ~0x00000002);
          suggestedRetryTimeMillis_ = 0;
          onChanged();
          return this;
        }

        private com.android.internal.telephony.TelephonyProto.RilDataCall call_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.RilDataCall, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder, com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> callBuilder_;
        /**
         * <code>optional .clearcut.connectivity.RilDataCall call = 3;</code>
         */
        public boolean hasCall() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .clearcut.connectivity.RilDataCall call = 3;</code>
         */
        public com.android.internal.telephony.TelephonyProto.RilDataCall getCall() {
          if (callBuilder_ == null) {
            return call_ == null ? com.android.internal.telephony.TelephonyProto.RilDataCall.getDefaultInstance() : call_;
          } else {
            return callBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .clearcut.connectivity.RilDataCall call = 3;</code>
         */
        public Builder setCall(com.android.internal.telephony.TelephonyProto.RilDataCall value) {
          if (callBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            call_ = value;
            onChanged();
          } else {
            callBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .clearcut.connectivity.RilDataCall call = 3;</code>
         */
        public Builder setCall(
            com.android.internal.telephony.TelephonyProto.RilDataCall.Builder builderForValue) {
          if (callBuilder_ == null) {
            call_ = builderForValue.build();
            onChanged();
          } else {
            callBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .clearcut.connectivity.RilDataCall call = 3;</code>
         */
        public Builder mergeCall(com.android.internal.telephony.TelephonyProto.RilDataCall value) {
          if (callBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004) &&
                call_ != null &&
                call_ != com.android.internal.telephony.TelephonyProto.RilDataCall.getDefaultInstance()) {
              call_ =
                com.android.internal.telephony.TelephonyProto.RilDataCall.newBuilder(call_).mergeFrom(value).buildPartial();
            } else {
              call_ = value;
            }
            onChanged();
          } else {
            callBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .clearcut.connectivity.RilDataCall call = 3;</code>
         */
        public Builder clearCall() {
          if (callBuilder_ == null) {
            call_ = null;
            onChanged();
          } else {
            callBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }
        /**
         * <code>optional .clearcut.connectivity.RilDataCall call = 3;</code>
         */
        public com.android.internal.telephony.TelephonyProto.RilDataCall.Builder getCallBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getCallFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .clearcut.connectivity.RilDataCall call = 3;</code>
         */
        public com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder getCallOrBuilder() {
          if (callBuilder_ != null) {
            return callBuilder_.getMessageOrBuilder();
          } else {
            return call_ == null ?
                com.android.internal.telephony.TelephonyProto.RilDataCall.getDefaultInstance() : call_;
          }
        }
        /**
         * <code>optional .clearcut.connectivity.RilDataCall call = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.RilDataCall, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder, com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> 
            getCallFieldBuilder() {
          if (callBuilder_ == null) {
            callBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.android.internal.telephony.TelephonyProto.RilDataCall, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder, com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder>(
                    getCall(),
                    getParentForChildren(),
                    isClean());
            call_ = null;
          }
          return callBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
      }

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse)
      private static final com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse();
      }

      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<RilSetupDataCallResponse>
          PARSER = new com.google.protobuf.AbstractParser<RilSetupDataCallResponse>() {
        public RilSetupDataCallResponse parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new RilSetupDataCallResponse(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<RilSetupDataCallResponse> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RilSetupDataCallResponse> getParserForType() {
        return PARSER;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface RilDeactivateDataCallOrBuilder extends
        // @@protoc_insertion_point(interface_extends:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Context ID
       * </pre>
       *
       * <code>optional int32 cid = 1;</code>
       */
      boolean hasCid();
      /**
       * <pre>
       * Context ID
       * </pre>
       *
       * <code>optional int32 cid = 1;</code>
       */
      int getCid();

      /**
       * <pre>
       * Reason for deactivating data call
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;</code>
       */
      boolean hasReason();
      /**
       * <pre>
       * Reason for deactivating data call
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason getReason();
    }
    /**
     * <pre>
     * Deactivate packet data connection
     * </pre>
     *
     * Protobuf type {@code clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall}
     */
    public  static final class RilDeactivateDataCall extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
        RilDeactivateDataCallOrBuilder {
      // Use RilDeactivateDataCall.newBuilder() to construct.
      private RilDeactivateDataCall(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RilDeactivateDataCall() {
        cid_ = 0;
        reason_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private RilDeactivateDataCall(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                cid_ = input.readInt32();
                break;
              }
              case 16: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason value = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(2, rawValue);
                } else {
                  bitField0_ |= 0x00000002;
                  reason_ = rawValue;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_RilDeactivateDataCall_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_RilDeactivateDataCall_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.class, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.Builder.class);
      }

      /**
       * <pre>
       * Deactivate data call reasons
       * </pre>
       *
       * Protobuf enum {@code clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason}
       */
      public enum DeactivateReason
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * Reason is unknown.
         * </pre>
         *
         * <code>DEACTIVATE_REASON_UNKNOWN = 0;</code>
         */
        DEACTIVATE_REASON_UNKNOWN(0),
        /**
         * <code>DEACTIVATE_REASON_NONE = 1;</code>
         */
        DEACTIVATE_REASON_NONE(1),
        /**
         * <code>DEACTIVATE_REASON_RADIO_OFF = 2;</code>
         */
        DEACTIVATE_REASON_RADIO_OFF(2),
        /**
         * <code>DEACTIVATE_REASON_PDP_RESET = 3;</code>
         */
        DEACTIVATE_REASON_PDP_RESET(3),
        ;

        /**
         * <pre>
         * Reason is unknown.
         * </pre>
         *
         * <code>DEACTIVATE_REASON_UNKNOWN = 0;</code>
         */
        public static final int DEACTIVATE_REASON_UNKNOWN_VALUE = 0;
        /**
         * <code>DEACTIVATE_REASON_NONE = 1;</code>
         */
        public static final int DEACTIVATE_REASON_NONE_VALUE = 1;
        /**
         * <code>DEACTIVATE_REASON_RADIO_OFF = 2;</code>
         */
        public static final int DEACTIVATE_REASON_RADIO_OFF_VALUE = 2;
        /**
         * <code>DEACTIVATE_REASON_PDP_RESET = 3;</code>
         */
        public static final int DEACTIVATE_REASON_PDP_RESET_VALUE = 3;


        public final int getNumber() {
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static DeactivateReason valueOf(int value) {
          return forNumber(value);
        }

        public static DeactivateReason forNumber(int value) {
          switch (value) {
            case 0: return DEACTIVATE_REASON_UNKNOWN;
            case 1: return DEACTIVATE_REASON_NONE;
            case 2: return DEACTIVATE_REASON_RADIO_OFF;
            case 3: return DEACTIVATE_REASON_PDP_RESET;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<DeactivateReason>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            DeactivateReason> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<DeactivateReason>() {
                public DeactivateReason findValueByNumber(int number) {
                  return DeactivateReason.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.getDescriptor().getEnumTypes().get(0);
        }

        private static final DeactivateReason[] VALUES = values();

        public static DeactivateReason valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private DeactivateReason(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason)
      }

      private int bitField0_;
      public static final int CID_FIELD_NUMBER = 1;
      private int cid_;
      /**
       * <pre>
       * Context ID
       * </pre>
       *
       * <code>optional int32 cid = 1;</code>
       */
      public boolean hasCid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Context ID
       * </pre>
       *
       * <code>optional int32 cid = 1;</code>
       */
      public int getCid() {
        return cid_;
      }

      public static final int REASON_FIELD_NUMBER = 2;
      private int reason_;
      /**
       * <pre>
       * Reason for deactivating data call
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;</code>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Reason for deactivating data call
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason getReason() {
        com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason result = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.valueOf(reason_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_UNKNOWN : result;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, cid_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeEnum(2, reason_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, cid_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(2, reason_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall)) {
          return super.equals(obj);
        }
        com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall other = (com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall) obj;

        boolean result = true;
        result = result && (hasCid() == other.hasCid());
        if (hasCid()) {
          result = result && (getCid()
              == other.getCid());
        }
        result = result && (hasReason() == other.hasReason());
        if (hasReason()) {
          result = result && reason_ == other.reason_;
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptorForType().hashCode();
        if (hasCid()) {
          hash = (37 * hash) + CID_FIELD_NUMBER;
          hash = (53 * hash) + getCid();
        }
        if (hasReason()) {
          hash = (37 * hash) + REASON_FIELD_NUMBER;
          hash = (53 * hash) + reason_;
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Deactivate packet data connection
       * </pre>
       *
       * Protobuf type {@code clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCallOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_RilDeactivateDataCall_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_RilDeactivateDataCall_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.class, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.Builder.class);
        }

        // Construct using com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          cid_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          reason_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_RilDeactivateDataCall_descriptor;
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall getDefaultInstanceForType() {
          return com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.getDefaultInstance();
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall build() {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall buildPartial() {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall result = new com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.cid_ = cid_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.reason_ = reason_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall) {
            return mergeFrom((com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall other) {
          if (other == com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.getDefaultInstance()) return this;
          if (other.hasCid()) {
            setCid(other.getCid());
          }
          if (other.hasReason()) {
            setReason(other.getReason());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int cid_ ;
        /**
         * <pre>
         * Context ID
         * </pre>
         *
         * <code>optional int32 cid = 1;</code>
         */
        public boolean hasCid() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <pre>
         * Context ID
         * </pre>
         *
         * <code>optional int32 cid = 1;</code>
         */
        public int getCid() {
          return cid_;
        }
        /**
         * <pre>
         * Context ID
         * </pre>
         *
         * <code>optional int32 cid = 1;</code>
         */
        public Builder setCid(int value) {
          bitField0_ |= 0x00000001;
          cid_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Context ID
         * </pre>
         *
         * <code>optional int32 cid = 1;</code>
         */
        public Builder clearCid() {
          bitField0_ = (bitField0_ & ~0x00000001);
          cid_ = 0;
          onChanged();
          return this;
        }

        private int reason_ = 0;
        /**
         * <pre>
         * Reason for deactivating data call
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;</code>
         */
        public boolean hasReason() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <pre>
         * Reason for deactivating data call
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason getReason() {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason result = com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.valueOf(reason_);
          return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_UNKNOWN : result;
        }
        /**
         * <pre>
         * Reason for deactivating data call
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;</code>
         */
        public Builder setReason(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000002;
          reason_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Reason for deactivating data call
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;</code>
         */
        public Builder clearReason() {
          bitField0_ = (bitField0_ & ~0x00000002);
          reason_ = 0;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
      }

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall)
      private static final com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall();
      }

      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<RilDeactivateDataCall>
          PARSER = new com.google.protobuf.AbstractParser<RilDeactivateDataCall>() {
        public RilDeactivateDataCall parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new RilDeactivateDataCall(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<RilDeactivateDataCall> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RilDeactivateDataCall> getParserForType() {
        return PARSER;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ModemRestartOrBuilder extends
        // @@protoc_insertion_point(interface_extends:clearcut.connectivity.TelephonyEvent.ModemRestart)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * The baseband_version is used to identify the particular software version
       * where the modem restarts happened
       * </pre>
       *
       * <code>optional string baseband_version = 1;</code>
       */
      boolean hasBasebandVersion();
      /**
       * <pre>
       * The baseband_version is used to identify the particular software version
       * where the modem restarts happened
       * </pre>
       *
       * <code>optional string baseband_version = 1;</code>
       */
      java.lang.String getBasebandVersion();
      /**
       * <pre>
       * The baseband_version is used to identify the particular software version
       * where the modem restarts happened
       * </pre>
       *
       * <code>optional string baseband_version = 1;</code>
       */
      com.google.protobuf.ByteString
          getBasebandVersionBytes();

      /**
       * <pre>
       * Indicates the modem restart reason. The restart reason can be used to
       * categorize any modem crashes and group similar crashes together. This
       * information will be useful to identify the cause of modem crashes,
       * reproduce the issue and confirm that the fix works.
       * </pre>
       *
       * <code>optional string reason = 2;</code>
       */
      boolean hasReason();
      /**
       * <pre>
       * Indicates the modem restart reason. The restart reason can be used to
       * categorize any modem crashes and group similar crashes together. This
       * information will be useful to identify the cause of modem crashes,
       * reproduce the issue and confirm that the fix works.
       * </pre>
       *
       * <code>optional string reason = 2;</code>
       */
      java.lang.String getReason();
      /**
       * <pre>
       * Indicates the modem restart reason. The restart reason can be used to
       * categorize any modem crashes and group similar crashes together. This
       * information will be useful to identify the cause of modem crashes,
       * reproduce the issue and confirm that the fix works.
       * </pre>
       *
       * <code>optional string reason = 2;</code>
       */
      com.google.protobuf.ByteString
          getReasonBytes();
    }
    /**
     * Protobuf type {@code clearcut.connectivity.TelephonyEvent.ModemRestart}
     */
    public  static final class ModemRestart extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:clearcut.connectivity.TelephonyEvent.ModemRestart)
        ModemRestartOrBuilder {
      // Use ModemRestart.newBuilder() to construct.
      private ModemRestart(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ModemRestart() {
        basebandVersion_ = "";
        reason_ = "";
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ModemRestart(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000001;
                basebandVersion_ = bs;
                break;
              }
              case 18: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000002;
                reason_ = bs;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_ModemRestart_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_ModemRestart_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.class, com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.Builder.class);
      }

      private int bitField0_;
      public static final int BASEBAND_VERSION_FIELD_NUMBER = 1;
      private volatile java.lang.Object basebandVersion_;
      /**
       * <pre>
       * The baseband_version is used to identify the particular software version
       * where the modem restarts happened
       * </pre>
       *
       * <code>optional string baseband_version = 1;</code>
       */
      public boolean hasBasebandVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * The baseband_version is used to identify the particular software version
       * where the modem restarts happened
       * </pre>
       *
       * <code>optional string baseband_version = 1;</code>
       */
      public java.lang.String getBasebandVersion() {
        java.lang.Object ref = basebandVersion_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            basebandVersion_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * The baseband_version is used to identify the particular software version
       * where the modem restarts happened
       * </pre>
       *
       * <code>optional string baseband_version = 1;</code>
       */
      public com.google.protobuf.ByteString
          getBasebandVersionBytes() {
        java.lang.Object ref = basebandVersion_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          basebandVersion_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int REASON_FIELD_NUMBER = 2;
      private volatile java.lang.Object reason_;
      /**
       * <pre>
       * Indicates the modem restart reason. The restart reason can be used to
       * categorize any modem crashes and group similar crashes together. This
       * information will be useful to identify the cause of modem crashes,
       * reproduce the issue and confirm that the fix works.
       * </pre>
       *
       * <code>optional string reason = 2;</code>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Indicates the modem restart reason. The restart reason can be used to
       * categorize any modem crashes and group similar crashes together. This
       * information will be useful to identify the cause of modem crashes,
       * reproduce the issue and confirm that the fix works.
       * </pre>
       *
       * <code>optional string reason = 2;</code>
       */
      public java.lang.String getReason() {
        java.lang.Object ref = reason_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            reason_ = s;
          }
          return s;
        }
      }
      /**
       * <pre>
       * Indicates the modem restart reason. The restart reason can be used to
       * categorize any modem crashes and group similar crashes together. This
       * information will be useful to identify the cause of modem crashes,
       * reproduce the issue and confirm that the fix works.
       * </pre>
       *
       * <code>optional string reason = 2;</code>
       */
      public com.google.protobuf.ByteString
          getReasonBytes() {
        java.lang.Object ref = reason_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          reason_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, basebandVersion_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, reason_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, basebandVersion_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, reason_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart)) {
          return super.equals(obj);
        }
        com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart other = (com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart) obj;

        boolean result = true;
        result = result && (hasBasebandVersion() == other.hasBasebandVersion());
        if (hasBasebandVersion()) {
          result = result && getBasebandVersion()
              .equals(other.getBasebandVersion());
        }
        result = result && (hasReason() == other.hasReason());
        if (hasReason()) {
          result = result && getReason()
              .equals(other.getReason());
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptorForType().hashCode();
        if (hasBasebandVersion()) {
          hash = (37 * hash) + BASEBAND_VERSION_FIELD_NUMBER;
          hash = (53 * hash) + getBasebandVersion().hashCode();
        }
        if (hasReason()) {
          hash = (37 * hash) + REASON_FIELD_NUMBER;
          hash = (53 * hash) + getReason().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code clearcut.connectivity.TelephonyEvent.ModemRestart}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:clearcut.connectivity.TelephonyEvent.ModemRestart)
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestartOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_ModemRestart_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_ModemRestart_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.class, com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.Builder.class);
        }

        // Construct using com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          basebandVersion_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          reason_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_ModemRestart_descriptor;
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart getDefaultInstanceForType() {
          return com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.getDefaultInstance();
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart build() {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart buildPartial() {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart result = new com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.basebandVersion_ = basebandVersion_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.reason_ = reason_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart) {
            return mergeFrom((com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart other) {
          if (other == com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.getDefaultInstance()) return this;
          if (other.hasBasebandVersion()) {
            bitField0_ |= 0x00000001;
            basebandVersion_ = other.basebandVersion_;
            onChanged();
          }
          if (other.hasReason()) {
            bitField0_ |= 0x00000002;
            reason_ = other.reason_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object basebandVersion_ = "";
        /**
         * <pre>
         * The baseband_version is used to identify the particular software version
         * where the modem restarts happened
         * </pre>
         *
         * <code>optional string baseband_version = 1;</code>
         */
        public boolean hasBasebandVersion() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <pre>
         * The baseband_version is used to identify the particular software version
         * where the modem restarts happened
         * </pre>
         *
         * <code>optional string baseband_version = 1;</code>
         */
        public java.lang.String getBasebandVersion() {
          java.lang.Object ref = basebandVersion_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              basebandVersion_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * The baseband_version is used to identify the particular software version
         * where the modem restarts happened
         * </pre>
         *
         * <code>optional string baseband_version = 1;</code>
         */
        public com.google.protobuf.ByteString
            getBasebandVersionBytes() {
          java.lang.Object ref = basebandVersion_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            basebandVersion_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * The baseband_version is used to identify the particular software version
         * where the modem restarts happened
         * </pre>
         *
         * <code>optional string baseband_version = 1;</code>
         */
        public Builder setBasebandVersion(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          basebandVersion_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The baseband_version is used to identify the particular software version
         * where the modem restarts happened
         * </pre>
         *
         * <code>optional string baseband_version = 1;</code>
         */
        public Builder clearBasebandVersion() {
          bitField0_ = (bitField0_ & ~0x00000001);
          basebandVersion_ = getDefaultInstance().getBasebandVersion();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The baseband_version is used to identify the particular software version
         * where the modem restarts happened
         * </pre>
         *
         * <code>optional string baseband_version = 1;</code>
         */
        public Builder setBasebandVersionBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          basebandVersion_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object reason_ = "";
        /**
         * <pre>
         * Indicates the modem restart reason. The restart reason can be used to
         * categorize any modem crashes and group similar crashes together. This
         * information will be useful to identify the cause of modem crashes,
         * reproduce the issue and confirm that the fix works.
         * </pre>
         *
         * <code>optional string reason = 2;</code>
         */
        public boolean hasReason() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <pre>
         * Indicates the modem restart reason. The restart reason can be used to
         * categorize any modem crashes and group similar crashes together. This
         * information will be useful to identify the cause of modem crashes,
         * reproduce the issue and confirm that the fix works.
         * </pre>
         *
         * <code>optional string reason = 2;</code>
         */
        public java.lang.String getReason() {
          java.lang.Object ref = reason_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              reason_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Indicates the modem restart reason. The restart reason can be used to
         * categorize any modem crashes and group similar crashes together. This
         * information will be useful to identify the cause of modem crashes,
         * reproduce the issue and confirm that the fix works.
         * </pre>
         *
         * <code>optional string reason = 2;</code>
         */
        public com.google.protobuf.ByteString
            getReasonBytes() {
          java.lang.Object ref = reason_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            reason_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Indicates the modem restart reason. The restart reason can be used to
         * categorize any modem crashes and group similar crashes together. This
         * information will be useful to identify the cause of modem crashes,
         * reproduce the issue and confirm that the fix works.
         * </pre>
         *
         * <code>optional string reason = 2;</code>
         */
        public Builder setReason(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          reason_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Indicates the modem restart reason. The restart reason can be used to
         * categorize any modem crashes and group similar crashes together. This
         * information will be useful to identify the cause of modem crashes,
         * reproduce the issue and confirm that the fix works.
         * </pre>
         *
         * <code>optional string reason = 2;</code>
         */
        public Builder clearReason() {
          bitField0_ = (bitField0_ & ~0x00000002);
          reason_ = getDefaultInstance().getReason();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Indicates the modem restart reason. The restart reason can be used to
         * categorize any modem crashes and group similar crashes together. This
         * information will be useful to identify the cause of modem crashes,
         * reproduce the issue and confirm that the fix works.
         * </pre>
         *
         * <code>optional string reason = 2;</code>
         */
        public Builder setReasonBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          reason_ = value;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:clearcut.connectivity.TelephonyEvent.ModemRestart)
      }

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyEvent.ModemRestart)
      private static final com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart();
      }

      public static com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<ModemRestart>
          PARSER = new com.google.protobuf.AbstractParser<ModemRestart>() {
        public ModemRestart parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new ModemRestart(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<ModemRestart> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ModemRestart> getParserForType() {
        return PARSER;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int TIMESTAMP_MILLIS_FIELD_NUMBER = 1;
    private long timestampMillis_;
    /**
     * <pre>
     * Time when event happened on device, in milliseconds since epoch
     * </pre>
     *
     * <code>optional int64 timestamp_millis = 1;</code>
     */
    public boolean hasTimestampMillis() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Time when event happened on device, in milliseconds since epoch
     * </pre>
     *
     * <code>optional int64 timestamp_millis = 1;</code>
     */
    public long getTimestampMillis() {
      return timestampMillis_;
    }

    public static final int PHONE_ID_FIELD_NUMBER = 2;
    private int phoneId_;
    /**
     * <pre>
     * In Multi-SIM devices this indicates SIM slot
     * </pre>
     *
     * <code>optional int32 phone_id = 2;</code>
     */
    public boolean hasPhoneId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * In Multi-SIM devices this indicates SIM slot
     * </pre>
     *
     * <code>optional int32 phone_id = 2;</code>
     */
    public int getPhoneId() {
      return phoneId_;
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private int type_;
    /**
     * <pre>
     * Event type
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.Type type = 3;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Event type
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.Type type = 3;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type getType() {
      com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type result = com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.valueOf(type_);
      return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.UNKNOWN : result;
    }

    public static final int SETTINGS_FIELD_NUMBER = 4;
    private com.android.internal.telephony.TelephonyProto.TelephonySettings settings_;
    /**
     * <pre>
     * User settings
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonySettings settings = 4;</code>
     */
    public boolean hasSettings() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * User settings
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonySettings settings = 4;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonySettings getSettings() {
      return settings_ == null ? com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance() : settings_;
    }
    /**
     * <pre>
     * User settings
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonySettings settings = 4;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder getSettingsOrBuilder() {
      return settings_ == null ? com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance() : settings_;
    }

    public static final int SERVICE_STATE_FIELD_NUMBER = 5;
    private com.android.internal.telephony.TelephonyProto.TelephonyServiceState serviceState_;
    /**
     * <pre>
     * RIL Service State
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 5;</code>
     */
    public boolean hasServiceState() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * RIL Service State
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 5;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyServiceState getServiceState() {
      return serviceState_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance() : serviceState_;
    }
    /**
     * <pre>
     * RIL Service State
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 5;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder getServiceStateOrBuilder() {
      return serviceState_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance() : serviceState_;
    }

    public static final int IMS_CONNECTION_STATE_FIELD_NUMBER = 6;
    private com.android.internal.telephony.TelephonyProto.ImsConnectionState imsConnectionState_;
    /**
     * <pre>
     * IMS state
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;</code>
     */
    public boolean hasImsConnectionState() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * IMS state
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;</code>
     */
    public com.android.internal.telephony.TelephonyProto.ImsConnectionState getImsConnectionState() {
      return imsConnectionState_ == null ? com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance() : imsConnectionState_;
    }
    /**
     * <pre>
     * IMS state
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;</code>
     */
    public com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder getImsConnectionStateOrBuilder() {
      return imsConnectionState_ == null ? com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance() : imsConnectionState_;
    }

    public static final int IMS_CAPABILITIES_FIELD_NUMBER = 7;
    private com.android.internal.telephony.TelephonyProto.ImsCapabilities imsCapabilities_;
    /**
     * <pre>
     * IMS capabilities
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;</code>
     */
    public boolean hasImsCapabilities() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * IMS capabilities
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;</code>
     */
    public com.android.internal.telephony.TelephonyProto.ImsCapabilities getImsCapabilities() {
      return imsCapabilities_ == null ? com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance() : imsCapabilities_;
    }
    /**
     * <pre>
     * IMS capabilities
     * </pre>
     *
     * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;</code>
     */
    public com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder getImsCapabilitiesOrBuilder() {
      return imsCapabilities_ == null ? com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance() : imsCapabilities_;
    }

    public static final int DATA_CALLS_FIELD_NUMBER = 8;
    private java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall> dataCalls_;
    /**
     * <pre>
     * List of data calls when changed
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
     */
    public java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall> getDataCallsList() {
      return dataCalls_;
    }
    /**
     * <pre>
     * List of data calls when changed
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
     */
    public java.util.List<? extends com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> 
        getDataCallsOrBuilderList() {
      return dataCalls_;
    }
    /**
     * <pre>
     * List of data calls when changed
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
     */
    public int getDataCallsCount() {
      return dataCalls_.size();
    }
    /**
     * <pre>
     * List of data calls when changed
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
     */
    public com.android.internal.telephony.TelephonyProto.RilDataCall getDataCalls(int index) {
      return dataCalls_.get(index);
    }
    /**
     * <pre>
     * List of data calls when changed
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
     */
    public com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder getDataCallsOrBuilder(
        int index) {
      return dataCalls_.get(index);
    }

    public static final int ERROR_FIELD_NUMBER = 9;
    private int error_;
    /**
     * <pre>
     * RIL error code
     * </pre>
     *
     * <code>optional .clearcut.connectivity.RilErrno error = 9;</code>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * RIL error code
     * </pre>
     *
     * <code>optional .clearcut.connectivity.RilErrno error = 9;</code>
     */
    public com.android.internal.telephony.TelephonyProto.RilErrno getError() {
      com.android.internal.telephony.TelephonyProto.RilErrno result = com.android.internal.telephony.TelephonyProto.RilErrno.valueOf(error_);
      return result == null ? com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_UNKNOWN : result;
    }

    public static final int SETUP_DATA_CALL_FIELD_NUMBER = 10;
    private com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall setupDataCall_;
    /**
     * <pre>
     * Setup data call request
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;</code>
     */
    public boolean hasSetupDataCall() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * Setup data call request
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall getSetupDataCall() {
      return setupDataCall_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.getDefaultInstance() : setupDataCall_;
    }
    /**
     * <pre>
     * Setup data call request
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallOrBuilder getSetupDataCallOrBuilder() {
      return setupDataCall_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.getDefaultInstance() : setupDataCall_;
    }

    public static final int SETUP_DATA_CALL_RESPONSE_FIELD_NUMBER = 11;
    private com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse setupDataCallResponse_;
    /**
     * <pre>
     * Setup data call response
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;</code>
     */
    public boolean hasSetupDataCallResponse() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     * Setup data call response
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse getSetupDataCallResponse() {
      return setupDataCallResponse_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.getDefaultInstance() : setupDataCallResponse_;
    }
    /**
     * <pre>
     * Setup data call response
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponseOrBuilder getSetupDataCallResponseOrBuilder() {
      return setupDataCallResponse_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.getDefaultInstance() : setupDataCallResponse_;
    }

    public static final int DEACTIVATE_DATA_CALL_FIELD_NUMBER = 12;
    private com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall deactivateDataCall_;
    /**
     * <pre>
     * Deactivate data call request
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;</code>
     */
    public boolean hasDeactivateDataCall() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     * Deactivate data call request
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall getDeactivateDataCall() {
      return deactivateDataCall_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.getDefaultInstance() : deactivateDataCall_;
    }
    /**
     * <pre>
     * Deactivate data call request
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCallOrBuilder getDeactivateDataCallOrBuilder() {
      return deactivateDataCall_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.getDefaultInstance() : deactivateDataCall_;
    }

    public static final int DATA_STALL_ACTION_FIELD_NUMBER = 13;
    private int dataStallAction_;
    /**
     * <pre>
     * Data call stall recovery action
     * </pre>
     *
     * <code>optional int32 data_stall_action = 13;</code>
     */
    public boolean hasDataStallAction() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     * Data call stall recovery action
     * </pre>
     *
     * <code>optional int32 data_stall_action = 13;</code>
     */
    public int getDataStallAction() {
      return dataStallAction_;
    }

    public static final int MODEM_RESTART_FIELD_NUMBER = 14;
    private com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart modemRestart_;
    /**
     * <pre>
     * Modem restart event
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;</code>
     */
    public boolean hasModemRestart() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     * Modem restart event
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart getModemRestart() {
      return modemRestart_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.getDefaultInstance() : modemRestart_;
    }
    /**
     * <pre>
     * Modem restart event
     * </pre>
     *
     * <code>optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestartOrBuilder getModemRestartOrBuilder() {
      return modemRestart_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.getDefaultInstance() : modemRestart_;
    }

    public static final int NITZ_TIMESTAMP_MILLIS_FIELD_NUMBER = 15;
    private long nitzTimestampMillis_;
    /**
     * <pre>
     * NITZ time in milliseconds
     * </pre>
     *
     * <code>optional int64 nitz_timestamp_millis = 15;</code>
     */
    public boolean hasNitzTimestampMillis() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     * NITZ time in milliseconds
     * </pre>
     *
     * <code>optional int64 nitz_timestamp_millis = 15;</code>
     */
    public long getNitzTimestampMillis() {
      return nitzTimestampMillis_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, timestampMillis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, phoneId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, type_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, getSettings());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, getServiceState());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, getImsConnectionState());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, getImsCapabilities());
      }
      for (int i = 0; i < dataCalls_.size(); i++) {
        output.writeMessage(8, dataCalls_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(9, error_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(10, getSetupDataCall());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(11, getSetupDataCallResponse());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(12, getDeactivateDataCall());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(13, dataStallAction_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(14, getModemRestart());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt64(15, nitzTimestampMillis_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, timestampMillis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, phoneId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, type_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getSettings());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getServiceState());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getImsConnectionState());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getImsCapabilities());
      }
      for (int i = 0; i < dataCalls_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, dataCalls_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, error_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getSetupDataCall());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getSetupDataCallResponse());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getDeactivateDataCall());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, dataStallAction_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getModemRestart());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(15, nitzTimestampMillis_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.internal.telephony.TelephonyProto.TelephonyEvent)) {
        return super.equals(obj);
      }
      com.android.internal.telephony.TelephonyProto.TelephonyEvent other = (com.android.internal.telephony.TelephonyProto.TelephonyEvent) obj;

      boolean result = true;
      result = result && (hasTimestampMillis() == other.hasTimestampMillis());
      if (hasTimestampMillis()) {
        result = result && (getTimestampMillis()
            == other.getTimestampMillis());
      }
      result = result && (hasPhoneId() == other.hasPhoneId());
      if (hasPhoneId()) {
        result = result && (getPhoneId()
            == other.getPhoneId());
      }
      result = result && (hasType() == other.hasType());
      if (hasType()) {
        result = result && type_ == other.type_;
      }
      result = result && (hasSettings() == other.hasSettings());
      if (hasSettings()) {
        result = result && getSettings()
            .equals(other.getSettings());
      }
      result = result && (hasServiceState() == other.hasServiceState());
      if (hasServiceState()) {
        result = result && getServiceState()
            .equals(other.getServiceState());
      }
      result = result && (hasImsConnectionState() == other.hasImsConnectionState());
      if (hasImsConnectionState()) {
        result = result && getImsConnectionState()
            .equals(other.getImsConnectionState());
      }
      result = result && (hasImsCapabilities() == other.hasImsCapabilities());
      if (hasImsCapabilities()) {
        result = result && getImsCapabilities()
            .equals(other.getImsCapabilities());
      }
      result = result && getDataCallsList()
          .equals(other.getDataCallsList());
      result = result && (hasError() == other.hasError());
      if (hasError()) {
        result = result && error_ == other.error_;
      }
      result = result && (hasSetupDataCall() == other.hasSetupDataCall());
      if (hasSetupDataCall()) {
        result = result && getSetupDataCall()
            .equals(other.getSetupDataCall());
      }
      result = result && (hasSetupDataCallResponse() == other.hasSetupDataCallResponse());
      if (hasSetupDataCallResponse()) {
        result = result && getSetupDataCallResponse()
            .equals(other.getSetupDataCallResponse());
      }
      result = result && (hasDeactivateDataCall() == other.hasDeactivateDataCall());
      if (hasDeactivateDataCall()) {
        result = result && getDeactivateDataCall()
            .equals(other.getDeactivateDataCall());
      }
      result = result && (hasDataStallAction() == other.hasDataStallAction());
      if (hasDataStallAction()) {
        result = result && (getDataStallAction()
            == other.getDataStallAction());
      }
      result = result && (hasModemRestart() == other.hasModemRestart());
      if (hasModemRestart()) {
        result = result && getModemRestart()
            .equals(other.getModemRestart());
      }
      result = result && (hasNitzTimestampMillis() == other.hasNitzTimestampMillis());
      if (hasNitzTimestampMillis()) {
        result = result && (getNitzTimestampMillis()
            == other.getNitzTimestampMillis());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasTimestampMillis()) {
        hash = (37 * hash) + TIMESTAMP_MILLIS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTimestampMillis());
      }
      if (hasPhoneId()) {
        hash = (37 * hash) + PHONE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getPhoneId();
      }
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
      }
      if (hasSettings()) {
        hash = (37 * hash) + SETTINGS_FIELD_NUMBER;
        hash = (53 * hash) + getSettings().hashCode();
      }
      if (hasServiceState()) {
        hash = (37 * hash) + SERVICE_STATE_FIELD_NUMBER;
        hash = (53 * hash) + getServiceState().hashCode();
      }
      if (hasImsConnectionState()) {
        hash = (37 * hash) + IMS_CONNECTION_STATE_FIELD_NUMBER;
        hash = (53 * hash) + getImsConnectionState().hashCode();
      }
      if (hasImsCapabilities()) {
        hash = (37 * hash) + IMS_CAPABILITIES_FIELD_NUMBER;
        hash = (53 * hash) + getImsCapabilities().hashCode();
      }
      if (getDataCallsCount() > 0) {
        hash = (37 * hash) + DATA_CALLS_FIELD_NUMBER;
        hash = (53 * hash) + getDataCallsList().hashCode();
      }
      if (hasError()) {
        hash = (37 * hash) + ERROR_FIELD_NUMBER;
        hash = (53 * hash) + error_;
      }
      if (hasSetupDataCall()) {
        hash = (37 * hash) + SETUP_DATA_CALL_FIELD_NUMBER;
        hash = (53 * hash) + getSetupDataCall().hashCode();
      }
      if (hasSetupDataCallResponse()) {
        hash = (37 * hash) + SETUP_DATA_CALL_RESPONSE_FIELD_NUMBER;
        hash = (53 * hash) + getSetupDataCallResponse().hashCode();
      }
      if (hasDeactivateDataCall()) {
        hash = (37 * hash) + DEACTIVATE_DATA_CALL_FIELD_NUMBER;
        hash = (53 * hash) + getDeactivateDataCall().hashCode();
      }
      if (hasDataStallAction()) {
        hash = (37 * hash) + DATA_STALL_ACTION_FIELD_NUMBER;
        hash = (53 * hash) + getDataStallAction();
      }
      if (hasModemRestart()) {
        hash = (37 * hash) + MODEM_RESTART_FIELD_NUMBER;
        hash = (53 * hash) + getModemRestart().hashCode();
      }
      if (hasNitzTimestampMillis()) {
        hash = (37 * hash) + NITZ_TIMESTAMP_MILLIS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getNitzTimestampMillis());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.internal.telephony.TelephonyProto.TelephonyEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.TelephonyEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code clearcut.connectivity.TelephonyEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clearcut.connectivity.TelephonyEvent)
        com.android.internal.telephony.TelephonyProto.TelephonyEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.TelephonyEvent.class, com.android.internal.telephony.TelephonyProto.TelephonyEvent.Builder.class);
      }

      // Construct using com.android.internal.telephony.TelephonyProto.TelephonyEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSettingsFieldBuilder();
          getServiceStateFieldBuilder();
          getImsConnectionStateFieldBuilder();
          getImsCapabilitiesFieldBuilder();
          getDataCallsFieldBuilder();
          getSetupDataCallFieldBuilder();
          getSetupDataCallResponseFieldBuilder();
          getDeactivateDataCallFieldBuilder();
          getModemRestartFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        timestampMillis_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        phoneId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (settingsBuilder_ == null) {
          settings_ = null;
        } else {
          settingsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (serviceStateBuilder_ == null) {
          serviceState_ = null;
        } else {
          serviceStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (imsConnectionStateBuilder_ == null) {
          imsConnectionState_ = null;
        } else {
          imsConnectionStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (imsCapabilitiesBuilder_ == null) {
          imsCapabilities_ = null;
        } else {
          imsCapabilitiesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (dataCallsBuilder_ == null) {
          dataCalls_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          dataCallsBuilder_.clear();
        }
        error_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        if (setupDataCallBuilder_ == null) {
          setupDataCall_ = null;
        } else {
          setupDataCallBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (setupDataCallResponseBuilder_ == null) {
          setupDataCallResponse_ = null;
        } else {
          setupDataCallResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (deactivateDataCallBuilder_ == null) {
          deactivateDataCall_ = null;
        } else {
          deactivateDataCallBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        dataStallAction_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        if (modemRestartBuilder_ == null) {
          modemRestart_ = null;
        } else {
          modemRestartBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        nitzTimestampMillis_ = 0L;
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyEvent_descriptor;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyEvent getDefaultInstanceForType() {
        return com.android.internal.telephony.TelephonyProto.TelephonyEvent.getDefaultInstance();
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyEvent build() {
        com.android.internal.telephony.TelephonyProto.TelephonyEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyEvent buildPartial() {
        com.android.internal.telephony.TelephonyProto.TelephonyEvent result = new com.android.internal.telephony.TelephonyProto.TelephonyEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.timestampMillis_ = timestampMillis_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.phoneId_ = phoneId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (settingsBuilder_ == null) {
          result.settings_ = settings_;
        } else {
          result.settings_ = settingsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (serviceStateBuilder_ == null) {
          result.serviceState_ = serviceState_;
        } else {
          result.serviceState_ = serviceStateBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (imsConnectionStateBuilder_ == null) {
          result.imsConnectionState_ = imsConnectionState_;
        } else {
          result.imsConnectionState_ = imsConnectionStateBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (imsCapabilitiesBuilder_ == null) {
          result.imsCapabilities_ = imsCapabilities_;
        } else {
          result.imsCapabilities_ = imsCapabilitiesBuilder_.build();
        }
        if (dataCallsBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            dataCalls_ = java.util.Collections.unmodifiableList(dataCalls_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.dataCalls_ = dataCalls_;
        } else {
          result.dataCalls_ = dataCallsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.error_ = error_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        if (setupDataCallBuilder_ == null) {
          result.setupDataCall_ = setupDataCall_;
        } else {
          result.setupDataCall_ = setupDataCallBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        if (setupDataCallResponseBuilder_ == null) {
          result.setupDataCallResponse_ = setupDataCallResponse_;
        } else {
          result.setupDataCallResponse_ = setupDataCallResponseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        if (deactivateDataCallBuilder_ == null) {
          result.deactivateDataCall_ = deactivateDataCall_;
        } else {
          result.deactivateDataCall_ = deactivateDataCallBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.dataStallAction_ = dataStallAction_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (modemRestartBuilder_ == null) {
          result.modemRestart_ = modemRestart_;
        } else {
          result.modemRestart_ = modemRestartBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.nitzTimestampMillis_ = nitzTimestampMillis_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.internal.telephony.TelephonyProto.TelephonyEvent) {
          return mergeFrom((com.android.internal.telephony.TelephonyProto.TelephonyEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.TelephonyEvent other) {
        if (other == com.android.internal.telephony.TelephonyProto.TelephonyEvent.getDefaultInstance()) return this;
        if (other.hasTimestampMillis()) {
          setTimestampMillis(other.getTimestampMillis());
        }
        if (other.hasPhoneId()) {
          setPhoneId(other.getPhoneId());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasSettings()) {
          mergeSettings(other.getSettings());
        }
        if (other.hasServiceState()) {
          mergeServiceState(other.getServiceState());
        }
        if (other.hasImsConnectionState()) {
          mergeImsConnectionState(other.getImsConnectionState());
        }
        if (other.hasImsCapabilities()) {
          mergeImsCapabilities(other.getImsCapabilities());
        }
        if (dataCallsBuilder_ == null) {
          if (!other.dataCalls_.isEmpty()) {
            if (dataCalls_.isEmpty()) {
              dataCalls_ = other.dataCalls_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureDataCallsIsMutable();
              dataCalls_.addAll(other.dataCalls_);
            }
            onChanged();
          }
        } else {
          if (!other.dataCalls_.isEmpty()) {
            if (dataCallsBuilder_.isEmpty()) {
              dataCallsBuilder_.dispose();
              dataCallsBuilder_ = null;
              dataCalls_ = other.dataCalls_;
              bitField0_ = (bitField0_ & ~0x00000080);
              dataCallsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDataCallsFieldBuilder() : null;
            } else {
              dataCallsBuilder_.addAllMessages(other.dataCalls_);
            }
          }
        }
        if (other.hasError()) {
          setError(other.getError());
        }
        if (other.hasSetupDataCall()) {
          mergeSetupDataCall(other.getSetupDataCall());
        }
        if (other.hasSetupDataCallResponse()) {
          mergeSetupDataCallResponse(other.getSetupDataCallResponse());
        }
        if (other.hasDeactivateDataCall()) {
          mergeDeactivateDataCall(other.getDeactivateDataCall());
        }
        if (other.hasDataStallAction()) {
          setDataStallAction(other.getDataStallAction());
        }
        if (other.hasModemRestart()) {
          mergeModemRestart(other.getModemRestart());
        }
        if (other.hasNitzTimestampMillis()) {
          setNitzTimestampMillis(other.getNitzTimestampMillis());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.android.internal.telephony.TelephonyProto.TelephonyEvent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.android.internal.telephony.TelephonyProto.TelephonyEvent) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long timestampMillis_ ;
      /**
       * <pre>
       * Time when event happened on device, in milliseconds since epoch
       * </pre>
       *
       * <code>optional int64 timestamp_millis = 1;</code>
       */
      public boolean hasTimestampMillis() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Time when event happened on device, in milliseconds since epoch
       * </pre>
       *
       * <code>optional int64 timestamp_millis = 1;</code>
       */
      public long getTimestampMillis() {
        return timestampMillis_;
      }
      /**
       * <pre>
       * Time when event happened on device, in milliseconds since epoch
       * </pre>
       *
       * <code>optional int64 timestamp_millis = 1;</code>
       */
      public Builder setTimestampMillis(long value) {
        bitField0_ |= 0x00000001;
        timestampMillis_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Time when event happened on device, in milliseconds since epoch
       * </pre>
       *
       * <code>optional int64 timestamp_millis = 1;</code>
       */
      public Builder clearTimestampMillis() {
        bitField0_ = (bitField0_ & ~0x00000001);
        timestampMillis_ = 0L;
        onChanged();
        return this;
      }

      private int phoneId_ ;
      /**
       * <pre>
       * In Multi-SIM devices this indicates SIM slot
       * </pre>
       *
       * <code>optional int32 phone_id = 2;</code>
       */
      public boolean hasPhoneId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * In Multi-SIM devices this indicates SIM slot
       * </pre>
       *
       * <code>optional int32 phone_id = 2;</code>
       */
      public int getPhoneId() {
        return phoneId_;
      }
      /**
       * <pre>
       * In Multi-SIM devices this indicates SIM slot
       * </pre>
       *
       * <code>optional int32 phone_id = 2;</code>
       */
      public Builder setPhoneId(int value) {
        bitField0_ |= 0x00000002;
        phoneId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In Multi-SIM devices this indicates SIM slot
       * </pre>
       *
       * <code>optional int32 phone_id = 2;</code>
       */
      public Builder clearPhoneId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        phoneId_ = 0;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <pre>
       * Event type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.Type type = 3;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Event type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.Type type = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type getType() {
        com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type result = com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.valueOf(type_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type.UNKNOWN : result;
      }
      /**
       * <pre>
       * Event type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.Type type = 3;</code>
       */
      public Builder setType(com.android.internal.telephony.TelephonyProto.TelephonyEvent.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Event type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.Type type = 3;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        type_ = 0;
        onChanged();
        return this;
      }

      private com.android.internal.telephony.TelephonyProto.TelephonySettings settings_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonySettings, com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder, com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder> settingsBuilder_;
      /**
       * <pre>
       * User settings
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 4;</code>
       */
      public boolean hasSettings() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * User settings
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 4;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonySettings getSettings() {
        if (settingsBuilder_ == null) {
          return settings_ == null ? com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance() : settings_;
        } else {
          return settingsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * User settings
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 4;</code>
       */
      public Builder setSettings(com.android.internal.telephony.TelephonyProto.TelephonySettings value) {
        if (settingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          settings_ = value;
          onChanged();
        } else {
          settingsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * User settings
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 4;</code>
       */
      public Builder setSettings(
          com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder builderForValue) {
        if (settingsBuilder_ == null) {
          settings_ = builderForValue.build();
          onChanged();
        } else {
          settingsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * User settings
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 4;</code>
       */
      public Builder mergeSettings(com.android.internal.telephony.TelephonyProto.TelephonySettings value) {
        if (settingsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              settings_ != null &&
              settings_ != com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance()) {
            settings_ =
              com.android.internal.telephony.TelephonyProto.TelephonySettings.newBuilder(settings_).mergeFrom(value).buildPartial();
          } else {
            settings_ = value;
          }
          onChanged();
        } else {
          settingsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * User settings
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 4;</code>
       */
      public Builder clearSettings() {
        if (settingsBuilder_ == null) {
          settings_ = null;
          onChanged();
        } else {
          settingsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <pre>
       * User settings
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 4;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder getSettingsBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getSettingsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * User settings
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 4;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder getSettingsOrBuilder() {
        if (settingsBuilder_ != null) {
          return settingsBuilder_.getMessageOrBuilder();
        } else {
          return settings_ == null ?
              com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance() : settings_;
        }
      }
      /**
       * <pre>
       * User settings
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonySettings, com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder, com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder> 
          getSettingsFieldBuilder() {
        if (settingsBuilder_ == null) {
          settingsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.TelephonySettings, com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder, com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder>(
                  getSettings(),
                  getParentForChildren(),
                  isClean());
          settings_ = null;
        }
        return settingsBuilder_;
      }

      private com.android.internal.telephony.TelephonyProto.TelephonyServiceState serviceState_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyServiceState, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder, com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder> serviceStateBuilder_;
      /**
       * <pre>
       * RIL Service State
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 5;</code>
       */
      public boolean hasServiceState() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * RIL Service State
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 5;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState getServiceState() {
        if (serviceStateBuilder_ == null) {
          return serviceState_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance() : serviceState_;
        } else {
          return serviceStateBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * RIL Service State
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 5;</code>
       */
      public Builder setServiceState(com.android.internal.telephony.TelephonyProto.TelephonyServiceState value) {
        if (serviceStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          serviceState_ = value;
          onChanged();
        } else {
          serviceStateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * RIL Service State
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 5;</code>
       */
      public Builder setServiceState(
          com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder builderForValue) {
        if (serviceStateBuilder_ == null) {
          serviceState_ = builderForValue.build();
          onChanged();
        } else {
          serviceStateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * RIL Service State
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 5;</code>
       */
      public Builder mergeServiceState(com.android.internal.telephony.TelephonyProto.TelephonyServiceState value) {
        if (serviceStateBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              serviceState_ != null &&
              serviceState_ != com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance()) {
            serviceState_ =
              com.android.internal.telephony.TelephonyProto.TelephonyServiceState.newBuilder(serviceState_).mergeFrom(value).buildPartial();
          } else {
            serviceState_ = value;
          }
          onChanged();
        } else {
          serviceStateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * RIL Service State
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 5;</code>
       */
      public Builder clearServiceState() {
        if (serviceStateBuilder_ == null) {
          serviceState_ = null;
          onChanged();
        } else {
          serviceStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <pre>
       * RIL Service State
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 5;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder getServiceStateBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getServiceStateFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * RIL Service State
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 5;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder getServiceStateOrBuilder() {
        if (serviceStateBuilder_ != null) {
          return serviceStateBuilder_.getMessageOrBuilder();
        } else {
          return serviceState_ == null ?
              com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance() : serviceState_;
        }
      }
      /**
       * <pre>
       * RIL Service State
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyServiceState, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder, com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder> 
          getServiceStateFieldBuilder() {
        if (serviceStateBuilder_ == null) {
          serviceStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.TelephonyServiceState, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder, com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder>(
                  getServiceState(),
                  getParentForChildren(),
                  isClean());
          serviceState_ = null;
        }
        return serviceStateBuilder_;
      }

      private com.android.internal.telephony.TelephonyProto.ImsConnectionState imsConnectionState_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.ImsConnectionState, com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder, com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder> imsConnectionStateBuilder_;
      /**
       * <pre>
       * IMS state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;</code>
       */
      public boolean hasImsConnectionState() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * IMS state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsConnectionState getImsConnectionState() {
        if (imsConnectionStateBuilder_ == null) {
          return imsConnectionState_ == null ? com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance() : imsConnectionState_;
        } else {
          return imsConnectionStateBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * IMS state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;</code>
       */
      public Builder setImsConnectionState(com.android.internal.telephony.TelephonyProto.ImsConnectionState value) {
        if (imsConnectionStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          imsConnectionState_ = value;
          onChanged();
        } else {
          imsConnectionStateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       * IMS state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;</code>
       */
      public Builder setImsConnectionState(
          com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder builderForValue) {
        if (imsConnectionStateBuilder_ == null) {
          imsConnectionState_ = builderForValue.build();
          onChanged();
        } else {
          imsConnectionStateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       * IMS state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;</code>
       */
      public Builder mergeImsConnectionState(com.android.internal.telephony.TelephonyProto.ImsConnectionState value) {
        if (imsConnectionStateBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              imsConnectionState_ != null &&
              imsConnectionState_ != com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance()) {
            imsConnectionState_ =
              com.android.internal.telephony.TelephonyProto.ImsConnectionState.newBuilder(imsConnectionState_).mergeFrom(value).buildPartial();
          } else {
            imsConnectionState_ = value;
          }
          onChanged();
        } else {
          imsConnectionStateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <pre>
       * IMS state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;</code>
       */
      public Builder clearImsConnectionState() {
        if (imsConnectionStateBuilder_ == null) {
          imsConnectionState_ = null;
          onChanged();
        } else {
          imsConnectionStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <pre>
       * IMS state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder getImsConnectionStateBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getImsConnectionStateFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * IMS state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder getImsConnectionStateOrBuilder() {
        if (imsConnectionStateBuilder_ != null) {
          return imsConnectionStateBuilder_.getMessageOrBuilder();
        } else {
          return imsConnectionState_ == null ?
              com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance() : imsConnectionState_;
        }
      }
      /**
       * <pre>
       * IMS state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.ImsConnectionState, com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder, com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder> 
          getImsConnectionStateFieldBuilder() {
        if (imsConnectionStateBuilder_ == null) {
          imsConnectionStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.ImsConnectionState, com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder, com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder>(
                  getImsConnectionState(),
                  getParentForChildren(),
                  isClean());
          imsConnectionState_ = null;
        }
        return imsConnectionStateBuilder_;
      }

      private com.android.internal.telephony.TelephonyProto.ImsCapabilities imsCapabilities_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.ImsCapabilities, com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder, com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder> imsCapabilitiesBuilder_;
      /**
       * <pre>
       * IMS capabilities
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;</code>
       */
      public boolean hasImsCapabilities() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * IMS capabilities
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsCapabilities getImsCapabilities() {
        if (imsCapabilitiesBuilder_ == null) {
          return imsCapabilities_ == null ? com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance() : imsCapabilities_;
        } else {
          return imsCapabilitiesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * IMS capabilities
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;</code>
       */
      public Builder setImsCapabilities(com.android.internal.telephony.TelephonyProto.ImsCapabilities value) {
        if (imsCapabilitiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          imsCapabilities_ = value;
          onChanged();
        } else {
          imsCapabilitiesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       * IMS capabilities
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;</code>
       */
      public Builder setImsCapabilities(
          com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder builderForValue) {
        if (imsCapabilitiesBuilder_ == null) {
          imsCapabilities_ = builderForValue.build();
          onChanged();
        } else {
          imsCapabilitiesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       * IMS capabilities
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;</code>
       */
      public Builder mergeImsCapabilities(com.android.internal.telephony.TelephonyProto.ImsCapabilities value) {
        if (imsCapabilitiesBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              imsCapabilities_ != null &&
              imsCapabilities_ != com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance()) {
            imsCapabilities_ =
              com.android.internal.telephony.TelephonyProto.ImsCapabilities.newBuilder(imsCapabilities_).mergeFrom(value).buildPartial();
          } else {
            imsCapabilities_ = value;
          }
          onChanged();
        } else {
          imsCapabilitiesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <pre>
       * IMS capabilities
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;</code>
       */
      public Builder clearImsCapabilities() {
        if (imsCapabilitiesBuilder_ == null) {
          imsCapabilities_ = null;
          onChanged();
        } else {
          imsCapabilitiesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <pre>
       * IMS capabilities
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder getImsCapabilitiesBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getImsCapabilitiesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * IMS capabilities
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder getImsCapabilitiesOrBuilder() {
        if (imsCapabilitiesBuilder_ != null) {
          return imsCapabilitiesBuilder_.getMessageOrBuilder();
        } else {
          return imsCapabilities_ == null ?
              com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance() : imsCapabilities_;
        }
      }
      /**
       * <pre>
       * IMS capabilities
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.ImsCapabilities, com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder, com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder> 
          getImsCapabilitiesFieldBuilder() {
        if (imsCapabilitiesBuilder_ == null) {
          imsCapabilitiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.ImsCapabilities, com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder, com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder>(
                  getImsCapabilities(),
                  getParentForChildren(),
                  isClean());
          imsCapabilities_ = null;
        }
        return imsCapabilitiesBuilder_;
      }

      private java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall> dataCalls_ =
        java.util.Collections.emptyList();
      private void ensureDataCallsIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          dataCalls_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.RilDataCall>(dataCalls_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.RilDataCall, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder, com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> dataCallsBuilder_;

      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall> getDataCallsList() {
        if (dataCallsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dataCalls_);
        } else {
          return dataCallsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public int getDataCallsCount() {
        if (dataCallsBuilder_ == null) {
          return dataCalls_.size();
        } else {
          return dataCallsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public com.android.internal.telephony.TelephonyProto.RilDataCall getDataCalls(int index) {
        if (dataCallsBuilder_ == null) {
          return dataCalls_.get(index);
        } else {
          return dataCallsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public Builder setDataCalls(
          int index, com.android.internal.telephony.TelephonyProto.RilDataCall value) {
        if (dataCallsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataCallsIsMutable();
          dataCalls_.set(index, value);
          onChanged();
        } else {
          dataCallsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public Builder setDataCalls(
          int index, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder builderForValue) {
        if (dataCallsBuilder_ == null) {
          ensureDataCallsIsMutable();
          dataCalls_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataCallsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public Builder addDataCalls(com.android.internal.telephony.TelephonyProto.RilDataCall value) {
        if (dataCallsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataCallsIsMutable();
          dataCalls_.add(value);
          onChanged();
        } else {
          dataCallsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public Builder addDataCalls(
          int index, com.android.internal.telephony.TelephonyProto.RilDataCall value) {
        if (dataCallsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataCallsIsMutable();
          dataCalls_.add(index, value);
          onChanged();
        } else {
          dataCallsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public Builder addDataCalls(
          com.android.internal.telephony.TelephonyProto.RilDataCall.Builder builderForValue) {
        if (dataCallsBuilder_ == null) {
          ensureDataCallsIsMutable();
          dataCalls_.add(builderForValue.build());
          onChanged();
        } else {
          dataCallsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public Builder addDataCalls(
          int index, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder builderForValue) {
        if (dataCallsBuilder_ == null) {
          ensureDataCallsIsMutable();
          dataCalls_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataCallsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public Builder addAllDataCalls(
          java.lang.Iterable<? extends com.android.internal.telephony.TelephonyProto.RilDataCall> values) {
        if (dataCallsBuilder_ == null) {
          ensureDataCallsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dataCalls_);
          onChanged();
        } else {
          dataCallsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public Builder clearDataCalls() {
        if (dataCallsBuilder_ == null) {
          dataCalls_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          dataCallsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public Builder removeDataCalls(int index) {
        if (dataCallsBuilder_ == null) {
          ensureDataCallsIsMutable();
          dataCalls_.remove(index);
          onChanged();
        } else {
          dataCallsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public com.android.internal.telephony.TelephonyProto.RilDataCall.Builder getDataCallsBuilder(
          int index) {
        return getDataCallsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder getDataCallsOrBuilder(
          int index) {
        if (dataCallsBuilder_ == null) {
          return dataCalls_.get(index);  } else {
          return dataCallsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public java.util.List<? extends com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> 
           getDataCallsOrBuilderList() {
        if (dataCallsBuilder_ != null) {
          return dataCallsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dataCalls_);
        }
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public com.android.internal.telephony.TelephonyProto.RilDataCall.Builder addDataCallsBuilder() {
        return getDataCallsFieldBuilder().addBuilder(
            com.android.internal.telephony.TelephonyProto.RilDataCall.getDefaultInstance());
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public com.android.internal.telephony.TelephonyProto.RilDataCall.Builder addDataCallsBuilder(
          int index) {
        return getDataCallsFieldBuilder().addBuilder(
            index, com.android.internal.telephony.TelephonyProto.RilDataCall.getDefaultInstance());
      }
      /**
       * <pre>
       * List of data calls when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 8;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall.Builder> 
           getDataCallsBuilderList() {
        return getDataCallsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.RilDataCall, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder, com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> 
          getDataCallsFieldBuilder() {
        if (dataCallsBuilder_ == null) {
          dataCallsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.RilDataCall, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder, com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder>(
                  dataCalls_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          dataCalls_ = null;
        }
        return dataCallsBuilder_;
      }

      private int error_ = 0;
      /**
       * <pre>
       * RIL error code
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RilErrno error = 9;</code>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * RIL error code
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RilErrno error = 9;</code>
       */
      public com.android.internal.telephony.TelephonyProto.RilErrno getError() {
        com.android.internal.telephony.TelephonyProto.RilErrno result = com.android.internal.telephony.TelephonyProto.RilErrno.valueOf(error_);
        return result == null ? com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_UNKNOWN : result;
      }
      /**
       * <pre>
       * RIL error code
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RilErrno error = 9;</code>
       */
      public Builder setError(com.android.internal.telephony.TelephonyProto.RilErrno value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000100;
        error_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * RIL error code
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RilErrno error = 9;</code>
       */
      public Builder clearError() {
        bitField0_ = (bitField0_ & ~0x00000100);
        error_ = 0;
        onChanged();
        return this;
      }

      private com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall setupDataCall_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.Builder, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallOrBuilder> setupDataCallBuilder_;
      /**
       * <pre>
       * Setup data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;</code>
       */
      public boolean hasSetupDataCall() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * Setup data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall getSetupDataCall() {
        if (setupDataCallBuilder_ == null) {
          return setupDataCall_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.getDefaultInstance() : setupDataCall_;
        } else {
          return setupDataCallBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Setup data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;</code>
       */
      public Builder setSetupDataCall(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall value) {
        if (setupDataCallBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          setupDataCall_ = value;
          onChanged();
        } else {
          setupDataCallBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <pre>
       * Setup data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;</code>
       */
      public Builder setSetupDataCall(
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.Builder builderForValue) {
        if (setupDataCallBuilder_ == null) {
          setupDataCall_ = builderForValue.build();
          onChanged();
        } else {
          setupDataCallBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <pre>
       * Setup data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;</code>
       */
      public Builder mergeSetupDataCall(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall value) {
        if (setupDataCallBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              setupDataCall_ != null &&
              setupDataCall_ != com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.getDefaultInstance()) {
            setupDataCall_ =
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.newBuilder(setupDataCall_).mergeFrom(value).buildPartial();
          } else {
            setupDataCall_ = value;
          }
          onChanged();
        } else {
          setupDataCallBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <pre>
       * Setup data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;</code>
       */
      public Builder clearSetupDataCall() {
        if (setupDataCallBuilder_ == null) {
          setupDataCall_ = null;
          onChanged();
        } else {
          setupDataCallBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <pre>
       * Setup data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.Builder getSetupDataCallBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getSetupDataCallFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Setup data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallOrBuilder getSetupDataCallOrBuilder() {
        if (setupDataCallBuilder_ != null) {
          return setupDataCallBuilder_.getMessageOrBuilder();
        } else {
          return setupDataCall_ == null ?
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.getDefaultInstance() : setupDataCall_;
        }
      }
      /**
       * <pre>
       * Setup data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.Builder, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallOrBuilder> 
          getSetupDataCallFieldBuilder() {
        if (setupDataCallBuilder_ == null) {
          setupDataCallBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCall.Builder, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallOrBuilder>(
                  getSetupDataCall(),
                  getParentForChildren(),
                  isClean());
          setupDataCall_ = null;
        }
        return setupDataCallBuilder_;
      }

      private com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse setupDataCallResponse_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.Builder, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponseOrBuilder> setupDataCallResponseBuilder_;
      /**
       * <pre>
       * Setup data call response
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;</code>
       */
      public boolean hasSetupDataCallResponse() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       * Setup data call response
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse getSetupDataCallResponse() {
        if (setupDataCallResponseBuilder_ == null) {
          return setupDataCallResponse_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.getDefaultInstance() : setupDataCallResponse_;
        } else {
          return setupDataCallResponseBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Setup data call response
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;</code>
       */
      public Builder setSetupDataCallResponse(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse value) {
        if (setupDataCallResponseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          setupDataCallResponse_ = value;
          onChanged();
        } else {
          setupDataCallResponseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       * Setup data call response
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;</code>
       */
      public Builder setSetupDataCallResponse(
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.Builder builderForValue) {
        if (setupDataCallResponseBuilder_ == null) {
          setupDataCallResponse_ = builderForValue.build();
          onChanged();
        } else {
          setupDataCallResponseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       * Setup data call response
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;</code>
       */
      public Builder mergeSetupDataCallResponse(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse value) {
        if (setupDataCallResponseBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              setupDataCallResponse_ != null &&
              setupDataCallResponse_ != com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.getDefaultInstance()) {
            setupDataCallResponse_ =
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.newBuilder(setupDataCallResponse_).mergeFrom(value).buildPartial();
          } else {
            setupDataCallResponse_ = value;
          }
          onChanged();
        } else {
          setupDataCallResponseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <pre>
       * Setup data call response
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;</code>
       */
      public Builder clearSetupDataCallResponse() {
        if (setupDataCallResponseBuilder_ == null) {
          setupDataCallResponse_ = null;
          onChanged();
        } else {
          setupDataCallResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <pre>
       * Setup data call response
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.Builder getSetupDataCallResponseBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getSetupDataCallResponseFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Setup data call response
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponseOrBuilder getSetupDataCallResponseOrBuilder() {
        if (setupDataCallResponseBuilder_ != null) {
          return setupDataCallResponseBuilder_.getMessageOrBuilder();
        } else {
          return setupDataCallResponse_ == null ?
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.getDefaultInstance() : setupDataCallResponse_;
        }
      }
      /**
       * <pre>
       * Setup data call response
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.Builder, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponseOrBuilder> 
          getSetupDataCallResponseFieldBuilder() {
        if (setupDataCallResponseBuilder_ == null) {
          setupDataCallResponseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.Builder, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilSetupDataCallResponseOrBuilder>(
                  getSetupDataCallResponse(),
                  getParentForChildren(),
                  isClean());
          setupDataCallResponse_ = null;
        }
        return setupDataCallResponseBuilder_;
      }

      private com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall deactivateDataCall_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.Builder, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCallOrBuilder> deactivateDataCallBuilder_;
      /**
       * <pre>
       * Deactivate data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;</code>
       */
      public boolean hasDeactivateDataCall() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       * Deactivate data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall getDeactivateDataCall() {
        if (deactivateDataCallBuilder_ == null) {
          return deactivateDataCall_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.getDefaultInstance() : deactivateDataCall_;
        } else {
          return deactivateDataCallBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Deactivate data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;</code>
       */
      public Builder setDeactivateDataCall(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall value) {
        if (deactivateDataCallBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          deactivateDataCall_ = value;
          onChanged();
        } else {
          deactivateDataCallBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <pre>
       * Deactivate data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;</code>
       */
      public Builder setDeactivateDataCall(
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.Builder builderForValue) {
        if (deactivateDataCallBuilder_ == null) {
          deactivateDataCall_ = builderForValue.build();
          onChanged();
        } else {
          deactivateDataCallBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <pre>
       * Deactivate data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;</code>
       */
      public Builder mergeDeactivateDataCall(com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall value) {
        if (deactivateDataCallBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              deactivateDataCall_ != null &&
              deactivateDataCall_ != com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.getDefaultInstance()) {
            deactivateDataCall_ =
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.newBuilder(deactivateDataCall_).mergeFrom(value).buildPartial();
          } else {
            deactivateDataCall_ = value;
          }
          onChanged();
        } else {
          deactivateDataCallBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <pre>
       * Deactivate data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;</code>
       */
      public Builder clearDeactivateDataCall() {
        if (deactivateDataCallBuilder_ == null) {
          deactivateDataCall_ = null;
          onChanged();
        } else {
          deactivateDataCallBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <pre>
       * Deactivate data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.Builder getDeactivateDataCallBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getDeactivateDataCallFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Deactivate data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCallOrBuilder getDeactivateDataCallOrBuilder() {
        if (deactivateDataCallBuilder_ != null) {
          return deactivateDataCallBuilder_.getMessageOrBuilder();
        } else {
          return deactivateDataCall_ == null ?
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.getDefaultInstance() : deactivateDataCall_;
        }
      }
      /**
       * <pre>
       * Deactivate data call request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.Builder, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCallOrBuilder> 
          getDeactivateDataCallFieldBuilder() {
        if (deactivateDataCallBuilder_ == null) {
          deactivateDataCallBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.Builder, com.android.internal.telephony.TelephonyProto.TelephonyEvent.RilDeactivateDataCallOrBuilder>(
                  getDeactivateDataCall(),
                  getParentForChildren(),
                  isClean());
          deactivateDataCall_ = null;
        }
        return deactivateDataCallBuilder_;
      }

      private int dataStallAction_ ;
      /**
       * <pre>
       * Data call stall recovery action
       * </pre>
       *
       * <code>optional int32 data_stall_action = 13;</code>
       */
      public boolean hasDataStallAction() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       * Data call stall recovery action
       * </pre>
       *
       * <code>optional int32 data_stall_action = 13;</code>
       */
      public int getDataStallAction() {
        return dataStallAction_;
      }
      /**
       * <pre>
       * Data call stall recovery action
       * </pre>
       *
       * <code>optional int32 data_stall_action = 13;</code>
       */
      public Builder setDataStallAction(int value) {
        bitField0_ |= 0x00001000;
        dataStallAction_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Data call stall recovery action
       * </pre>
       *
       * <code>optional int32 data_stall_action = 13;</code>
       */
      public Builder clearDataStallAction() {
        bitField0_ = (bitField0_ & ~0x00001000);
        dataStallAction_ = 0;
        onChanged();
        return this;
      }

      private com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart modemRestart_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart, com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.Builder, com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestartOrBuilder> modemRestartBuilder_;
      /**
       * <pre>
       * Modem restart event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;</code>
       */
      public boolean hasModemRestart() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <pre>
       * Modem restart event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart getModemRestart() {
        if (modemRestartBuilder_ == null) {
          return modemRestart_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.getDefaultInstance() : modemRestart_;
        } else {
          return modemRestartBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Modem restart event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;</code>
       */
      public Builder setModemRestart(com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart value) {
        if (modemRestartBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          modemRestart_ = value;
          onChanged();
        } else {
          modemRestartBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <pre>
       * Modem restart event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;</code>
       */
      public Builder setModemRestart(
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.Builder builderForValue) {
        if (modemRestartBuilder_ == null) {
          modemRestart_ = builderForValue.build();
          onChanged();
        } else {
          modemRestartBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <pre>
       * Modem restart event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;</code>
       */
      public Builder mergeModemRestart(com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart value) {
        if (modemRestartBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              modemRestart_ != null &&
              modemRestart_ != com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.getDefaultInstance()) {
            modemRestart_ =
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.newBuilder(modemRestart_).mergeFrom(value).buildPartial();
          } else {
            modemRestart_ = value;
          }
          onChanged();
        } else {
          modemRestartBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <pre>
       * Modem restart event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;</code>
       */
      public Builder clearModemRestart() {
        if (modemRestartBuilder_ == null) {
          modemRestart_ = null;
          onChanged();
        } else {
          modemRestartBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <pre>
       * Modem restart event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.Builder getModemRestartBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getModemRestartFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Modem restart event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestartOrBuilder getModemRestartOrBuilder() {
        if (modemRestartBuilder_ != null) {
          return modemRestartBuilder_.getMessageOrBuilder();
        } else {
          return modemRestart_ == null ?
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.getDefaultInstance() : modemRestart_;
        }
      }
      /**
       * <pre>
       * Modem restart event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart, com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.Builder, com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestartOrBuilder> 
          getModemRestartFieldBuilder() {
        if (modemRestartBuilder_ == null) {
          modemRestartBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart, com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestart.Builder, com.android.internal.telephony.TelephonyProto.TelephonyEvent.ModemRestartOrBuilder>(
                  getModemRestart(),
                  getParentForChildren(),
                  isClean());
          modemRestart_ = null;
        }
        return modemRestartBuilder_;
      }

      private long nitzTimestampMillis_ ;
      /**
       * <pre>
       * NITZ time in milliseconds
       * </pre>
       *
       * <code>optional int64 nitz_timestamp_millis = 15;</code>
       */
      public boolean hasNitzTimestampMillis() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <pre>
       * NITZ time in milliseconds
       * </pre>
       *
       * <code>optional int64 nitz_timestamp_millis = 15;</code>
       */
      public long getNitzTimestampMillis() {
        return nitzTimestampMillis_;
      }
      /**
       * <pre>
       * NITZ time in milliseconds
       * </pre>
       *
       * <code>optional int64 nitz_timestamp_millis = 15;</code>
       */
      public Builder setNitzTimestampMillis(long value) {
        bitField0_ |= 0x00004000;
        nitzTimestampMillis_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * NITZ time in milliseconds
       * </pre>
       *
       * <code>optional int64 nitz_timestamp_millis = 15;</code>
       */
      public Builder clearNitzTimestampMillis() {
        bitField0_ = (bitField0_ & ~0x00004000);
        nitzTimestampMillis_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clearcut.connectivity.TelephonyEvent)
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyEvent)
    private static final com.android.internal.telephony.TelephonyProto.TelephonyEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.TelephonyEvent();
    }

    public static com.android.internal.telephony.TelephonyProto.TelephonyEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TelephonyEvent>
        PARSER = new com.google.protobuf.AbstractParser<TelephonyEvent>() {
      public TelephonyEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new TelephonyEvent(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TelephonyEvent> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TelephonyEvent> getParserForType() {
      return PARSER;
    }

    public com.android.internal.telephony.TelephonyProto.TelephonyEvent getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TelephonyCallSessionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clearcut.connectivity.TelephonyCallSession)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Time when call has started, in minutes since epoch,
     * with 5 minutes precision
     * </pre>
     *
     * <code>optional int32 start_time_minutes = 1;</code>
     */
    boolean hasStartTimeMinutes();
    /**
     * <pre>
     * Time when call has started, in minutes since epoch,
     * with 5 minutes precision
     * </pre>
     *
     * <code>optional int32 start_time_minutes = 1;</code>
     */
    int getStartTimeMinutes();

    /**
     * <pre>
     * In Multi-SIM devices this indicates SIM slot
     * </pre>
     *
     * <code>optional int32 phone_id = 2;</code>
     */
    boolean hasPhoneId();
    /**
     * <pre>
     * In Multi-SIM devices this indicates SIM slot
     * </pre>
     *
     * <code>optional int32 phone_id = 2;</code>
     */
    int getPhoneId();

    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
     */
    java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event> 
        getEventsList();
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event getEvents(int index);
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
     */
    int getEventsCount();
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
     */
    java.util.List<? extends com.android.internal.telephony.TelephonyProto.TelephonyCallSession.EventOrBuilder> 
        getEventsOrBuilderList();
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
     */
    com.android.internal.telephony.TelephonyProto.TelephonyCallSession.EventOrBuilder getEventsOrBuilder(
        int index);

    /**
     * <pre>
     * Indicating some call events are dropped
     * </pre>
     *
     * <code>optional bool events_dropped = 4;</code>
     */
    boolean hasEventsDropped();
    /**
     * <pre>
     * Indicating some call events are dropped
     * </pre>
     *
     * <code>optional bool events_dropped = 4;</code>
     */
    boolean getEventsDropped();
  }
  /**
   * <pre>
   * Information about CS and/or PS call session.
   * Session starts when call is placed or accepted and
   * ends when there are no more active calls.
   * </pre>
   *
   * Protobuf type {@code clearcut.connectivity.TelephonyCallSession}
   */
  public  static final class TelephonyCallSession extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clearcut.connectivity.TelephonyCallSession)
      TelephonyCallSessionOrBuilder {
    // Use TelephonyCallSession.newBuilder() to construct.
    private TelephonyCallSession(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TelephonyCallSession() {
      startTimeMinutes_ = 0;
      phoneId_ = 0;
      events_ = java.util.Collections.emptyList();
      eventsDropped_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TelephonyCallSession(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              startTimeMinutes_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              phoneId_ = input.readInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                events_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event>();
                mutable_bitField0_ |= 0x00000004;
              }
              events_.add(
                  input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              eventsDropped_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          events_ = java.util.Collections.unmodifiableList(events_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyCallSession_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyCallSession_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.internal.telephony.TelephonyProto.TelephonyCallSession.class, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Builder.class);
    }

    public interface EventOrBuilder extends
        // @@protoc_insertion_point(interface_extends:clearcut.connectivity.TelephonyCallSession.Event)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Event type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;</code>
       */
      boolean hasType();
      /**
       * <pre>
       * Event type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type getType();

      /**
       * <pre>
       * Time since previous event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
       */
      boolean hasDelay();
      /**
       * <pre>
       * Time since previous event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
       */
      com.android.internal.telephony.TelephonyProto.TimeInterval getDelay();

      /**
       * <pre>
       * Settings at the begining of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
       */
      boolean hasSettings();
      /**
       * <pre>
       * Settings at the begining of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonySettings getSettings();
      /**
       * <pre>
       * Settings at the begining of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder getSettingsOrBuilder();

      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
       */
      boolean hasServiceState();
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonyServiceState getServiceState();
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder getServiceStateOrBuilder();

      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
       */
      boolean hasImsConnectionState();
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
       */
      com.android.internal.telephony.TelephonyProto.ImsConnectionState getImsConnectionState();
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
       */
      com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder getImsConnectionStateOrBuilder();

      /**
       * <pre>
       * Capabilities at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
       */
      boolean hasImsCapabilities();
      /**
       * <pre>
       * Capabilities at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
       */
      com.android.internal.telephony.TelephonyProto.ImsCapabilities getImsCapabilities();
      /**
       * <pre>
       * Capabilities at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
       */
      com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder getImsCapabilitiesOrBuilder();

      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall> 
          getDataCallsList();
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      com.android.internal.telephony.TelephonyProto.RilDataCall getDataCalls(int index);
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      int getDataCallsCount();
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      java.util.List<? extends com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> 
          getDataCallsOrBuilderList();
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder getDataCallsOrBuilder(
          int index);

      /**
       * <pre>
       * New state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;</code>
       */
      boolean hasPhoneState();
      /**
       * <pre>
       * New state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState getPhoneState();

      /**
       * <pre>
       * New state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;</code>
       */
      boolean hasCallState();
      /**
       * <pre>
       * New state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState getCallState();

      /**
       * <pre>
       * CS or IMS Voice call index
       * </pre>
       *
       * <code>optional int32 call_index = 10;</code>
       */
      boolean hasCallIndex();
      /**
       * <pre>
       * CS or IMS Voice call index
       * </pre>
       *
       * <code>optional int32 call_index = 10;</code>
       */
      int getCallIndex();

      /**
       * <pre>
       * New merged call
       * </pre>
       *
       * <code>optional int32 merged_call_index = 11;</code>
       */
      boolean hasMergedCallIndex();
      /**
       * <pre>
       * New merged call
       * </pre>
       *
       * <code>optional int32 merged_call_index = 11;</code>
       */
      int getMergedCallIndex();

      /**
       * <pre>
       * Active CS Voice calls
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
       */
      java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall> 
          getCallsList();
      /**
       * <pre>
       * Active CS Voice calls
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall getCalls(int index);
      /**
       * <pre>
       * Active CS Voice calls
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
       */
      int getCallsCount();
      /**
       * <pre>
       * Active CS Voice calls
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
       */
      java.util.List<? extends com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCallOrBuilder> 
          getCallsOrBuilderList();
      /**
       * <pre>
       * Active CS Voice calls
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCallOrBuilder getCallsOrBuilder(
          int index);

      /**
       * <pre>
       * RIL error code
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RilErrno error = 13;</code>
       */
      boolean hasError();
      /**
       * <pre>
       * RIL error code
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RilErrno error = 13;</code>
       */
      com.android.internal.telephony.TelephonyProto.RilErrno getError();

      /**
       * <pre>
       * RIL request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;</code>
       */
      boolean hasRilRequest();
      /**
       * <pre>
       * RIL request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest getRilRequest();

      /**
       * <pre>
       * Numeric ID
       * </pre>
       *
       * <code>optional int32 ril_request_id = 15;</code>
       */
      boolean hasRilRequestId();
      /**
       * <pre>
       * Numeric ID
       * </pre>
       *
       * <code>optional int32 ril_request_id = 15;</code>
       */
      int getRilRequestId();

      /**
       * <pre>
       * New SRVCC state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;</code>
       */
      boolean hasSrvccState();
      /**
       * <pre>
       * New SRVCC state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState getSrvccState();

      /**
       * <pre>
       * IMS command
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;</code>
       */
      boolean hasImsCommand();
      /**
       * <pre>
       * IMS command
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand getImsCommand();

      /**
       * <pre>
       * IMS Failure reason
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;</code>
       */
      boolean hasReasonInfo();
      /**
       * <pre>
       * IMS Failure reason
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;</code>
       */
      com.android.internal.telephony.TelephonyProto.ImsReasonInfo getReasonInfo();
      /**
       * <pre>
       * IMS Failure reason
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;</code>
       */
      com.android.internal.telephony.TelephonyProto.ImsReasonInfoOrBuilder getReasonInfoOrBuilder();

      /**
       * <pre>
       * Original access technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];</code>
       */
      boolean hasSrcAccessTech();
      /**
       * <pre>
       * Original access technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];</code>
       */
      com.android.internal.telephony.TelephonyProto.RadioAccessTechnology getSrcAccessTech();

      /**
       * <pre>
       * New access technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];</code>
       */
      boolean hasTargetAccessTech();
      /**
       * <pre>
       * New access technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];</code>
       */
      com.android.internal.telephony.TelephonyProto.RadioAccessTechnology getTargetAccessTech();

      /**
       * <pre>
       * NITZ time in milliseconds
       * </pre>
       *
       * <code>optional int64 nitz_timestamp_millis = 21;</code>
       */
      boolean hasNitzTimestampMillis();
      /**
       * <pre>
       * NITZ time in milliseconds
       * </pre>
       *
       * <code>optional int64 nitz_timestamp_millis = 21;</code>
       */
      long getNitzTimestampMillis();
    }
    /**
     * Protobuf type {@code clearcut.connectivity.TelephonyCallSession.Event}
     */
    public  static final class Event extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:clearcut.connectivity.TelephonyCallSession.Event)
        EventOrBuilder {
      // Use Event.newBuilder() to construct.
      private Event(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Event() {
        type_ = 0;
        delay_ = 0;
        dataCalls_ = java.util.Collections.emptyList();
        phoneState_ = 0;
        callState_ = 0;
        callIndex_ = 0;
        mergedCallIndex_ = 0;
        calls_ = java.util.Collections.emptyList();
        error_ = 0;
        rilRequest_ = 0;
        rilRequestId_ = 0;
        srvccState_ = 0;
        imsCommand_ = 0;
        srcAccessTech_ = -1;
        targetAccessTech_ = -1;
        nitzTimestampMillis_ = 0L;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Event(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type value = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  type_ = rawValue;
                }
                break;
              }
              case 16: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.TimeInterval value = com.android.internal.telephony.TelephonyProto.TimeInterval.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(2, rawValue);
                } else {
                  bitField0_ |= 0x00000002;
                  delay_ = rawValue;
                }
                break;
              }
              case 26: {
                com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = settings_.toBuilder();
                }
                settings_ = input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonySettings.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(settings_);
                  settings_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
              case 34: {
                com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder subBuilder = null;
                if (((bitField0_ & 0x00000008) == 0x00000008)) {
                  subBuilder = serviceState_.toBuilder();
                }
                serviceState_ = input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonyServiceState.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(serviceState_);
                  serviceState_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000008;
                break;
              }
              case 42: {
                com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder subBuilder = null;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                  subBuilder = imsConnectionState_.toBuilder();
                }
                imsConnectionState_ = input.readMessage(com.android.internal.telephony.TelephonyProto.ImsConnectionState.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(imsConnectionState_);
                  imsConnectionState_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000010;
                break;
              }
              case 50: {
                com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder subBuilder = null;
                if (((bitField0_ & 0x00000020) == 0x00000020)) {
                  subBuilder = imsCapabilities_.toBuilder();
                }
                imsCapabilities_ = input.readMessage(com.android.internal.telephony.TelephonyProto.ImsCapabilities.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(imsCapabilities_);
                  imsCapabilities_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000020;
                break;
              }
              case 58: {
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                  dataCalls_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.RilDataCall>();
                  mutable_bitField0_ |= 0x00000040;
                }
                dataCalls_.add(
                    input.readMessage(com.android.internal.telephony.TelephonyProto.RilDataCall.PARSER, extensionRegistry));
                break;
              }
              case 64: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState value = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(8, rawValue);
                } else {
                  bitField0_ |= 0x00000040;
                  phoneState_ = rawValue;
                }
                break;
              }
              case 72: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState value = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(9, rawValue);
                } else {
                  bitField0_ |= 0x00000080;
                  callState_ = rawValue;
                }
                break;
              }
              case 80: {
                bitField0_ |= 0x00000100;
                callIndex_ = input.readInt32();
                break;
              }
              case 88: {
                bitField0_ |= 0x00000200;
                mergedCallIndex_ = input.readInt32();
                break;
              }
              case 98: {
                if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                  calls_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall>();
                  mutable_bitField0_ |= 0x00000800;
                }
                calls_.add(
                    input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.PARSER, extensionRegistry));
                break;
              }
              case 104: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.RilErrno value = com.android.internal.telephony.TelephonyProto.RilErrno.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(13, rawValue);
                } else {
                  bitField0_ |= 0x00000400;
                  error_ = rawValue;
                }
                break;
              }
              case 112: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest value = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(14, rawValue);
                } else {
                  bitField0_ |= 0x00000800;
                  rilRequest_ = rawValue;
                }
                break;
              }
              case 120: {
                bitField0_ |= 0x00001000;
                rilRequestId_ = input.readInt32();
                break;
              }
              case 128: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState value = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(16, rawValue);
                } else {
                  bitField0_ |= 0x00002000;
                  srvccState_ = rawValue;
                }
                break;
              }
              case 136: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand value = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(17, rawValue);
                } else {
                  bitField0_ |= 0x00004000;
                  imsCommand_ = rawValue;
                }
                break;
              }
              case 146: {
                com.android.internal.telephony.TelephonyProto.ImsReasonInfo.Builder subBuilder = null;
                if (((bitField0_ & 0x00008000) == 0x00008000)) {
                  subBuilder = reasonInfo_.toBuilder();
                }
                reasonInfo_ = input.readMessage(com.android.internal.telephony.TelephonyProto.ImsReasonInfo.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(reasonInfo_);
                  reasonInfo_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00008000;
                break;
              }
              case 152: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.RadioAccessTechnology value = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(19, rawValue);
                } else {
                  bitField0_ |= 0x00010000;
                  srcAccessTech_ = rawValue;
                }
                break;
              }
              case 160: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.RadioAccessTechnology value = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(20, rawValue);
                } else {
                  bitField0_ |= 0x00020000;
                  targetAccessTech_ = rawValue;
                }
                break;
              }
              case 168: {
                bitField0_ |= 0x00040000;
                nitzTimestampMillis_ = input.readInt64();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
            dataCalls_ = java.util.Collections.unmodifiableList(dataCalls_);
          }
          if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
            calls_ = java.util.Collections.unmodifiableList(calls_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyCallSession_Event_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyCallSession_Event_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.class, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Builder.class);
      }

      /**
       * Protobuf enum {@code clearcut.connectivity.TelephonyCallSession.Event.Type}
       */
      public enum Type
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * Unknown event
         * </pre>
         *
         * <code>EVENT_UNKNOWN = 0;</code>
         */
        EVENT_UNKNOWN(0),
        /**
         * <pre>
         * Telephony related user settings changed
         * </pre>
         *
         * <code>SETTINGS_CHANGED = 1;</code>
         */
        SETTINGS_CHANGED(1),
        /**
         * <pre>
         * Phone state changed
         * </pre>
         *
         * <code>RIL_SERVICE_STATE_CHANGED = 2;</code>
         */
        RIL_SERVICE_STATE_CHANGED(2),
        /**
         * <pre>
         * IMS connected/disconnected
         * </pre>
         *
         * <code>IMS_CONNECTION_STATE_CHANGED = 3;</code>
         */
        IMS_CONNECTION_STATE_CHANGED(3),
        /**
         * <pre>
         * IMS Voice, Video and Ut capabilities changed
         * </pre>
         *
         * <code>IMS_CAPABILITIES_CHANGED = 4;</code>
         */
        IMS_CAPABILITIES_CHANGED(4),
        /**
         * <pre>
         * Notification that new data call has appeared in the list
         * or old data call has removed.
         * </pre>
         *
         * <code>DATA_CALL_LIST_CHANGED = 5;</code>
         */
        DATA_CALL_LIST_CHANGED(5),
        /**
         * <pre>
         * Send request to RIL
         * </pre>
         *
         * <code>RIL_REQUEST = 6;</code>
         */
        RIL_REQUEST(6),
        /**
         * <pre>
         * Result of the RIL request
         * </pre>
         *
         * <code>RIL_RESPONSE = 7;</code>
         */
        RIL_RESPONSE(7),
        /**
         * <pre>
         * Ring indication for an incoming call
         * </pre>
         *
         * <code>RIL_CALL_RING = 8;</code>
         */
        RIL_CALL_RING(8),
        /**
         * <pre>
         * Notification that Single Radio Voice Call Continuity(SRVCC)
         * progress state has changed.
         * </pre>
         *
         * <code>RIL_CALL_SRVCC = 9;</code>
         */
        RIL_CALL_SRVCC(9),
        /**
         * <pre>
         * Notification that list of calls has changed.
         * </pre>
         *
         * <code>RIL_CALL_LIST_CHANGED = 10;</code>
         */
        RIL_CALL_LIST_CHANGED(10),
        /**
         * <pre>
         * Command sent to IMS Service. See ImsCommand.
         * </pre>
         *
         * <code>IMS_COMMAND = 11;</code>
         */
        IMS_COMMAND(11),
        /**
         * <pre>
         * Command sent to IMS Service. See ImsCommand.
         * </pre>
         *
         * <code>IMS_COMMAND_RECEIVED = 12;</code>
         */
        IMS_COMMAND_RECEIVED(12),
        /**
         * <pre>
         * Command sent to IMS Service. See ImsCommand.
         * </pre>
         *
         * <code>IMS_COMMAND_FAILED = 13;</code>
         */
        IMS_COMMAND_FAILED(13),
        /**
         * <pre>
         * Command sent to IMS Service. See ImsCommand.
         * </pre>
         *
         * <code>IMS_COMMAND_COMPLETE = 14;</code>
         */
        IMS_COMMAND_COMPLETE(14),
        /**
         * <pre>
         * Notification about incoming voice call
         * </pre>
         *
         * <code>IMS_CALL_RECEIVE = 15;</code>
         */
        IMS_CALL_RECEIVE(15),
        /**
         * <pre>
         * Notification that state of the call has changed
         * </pre>
         *
         * <code>IMS_CALL_STATE_CHANGED = 16;</code>
         */
        IMS_CALL_STATE_CHANGED(16),
        /**
         * <pre>
         * Notification about IMS call termination
         * </pre>
         *
         * <code>IMS_CALL_TERMINATED = 17;</code>
         */
        IMS_CALL_TERMINATED(17),
        /**
         * <pre>
         * Notification that session access technology has changed
         * </pre>
         *
         * <code>IMS_CALL_HANDOVER = 18;</code>
         */
        IMS_CALL_HANDOVER(18),
        /**
         * <pre>
         * Notification that session access technology has changed
         * </pre>
         *
         * <code>IMS_CALL_HANDOVER_FAILED = 19;</code>
         */
        IMS_CALL_HANDOVER_FAILED(19),
        /**
         * <pre>
         * Notification about phone state changed.
         * </pre>
         *
         * <code>PHONE_STATE_CHANGED = 20;</code>
         */
        PHONE_STATE_CHANGED(20),
        /**
         * <pre>
         * System time overwritten by NITZ (Network time)
         * </pre>
         *
         * <code>NITZ_TIME = 21;</code>
         */
        NITZ_TIME(21),
        ;

        /**
         * <pre>
         * Unknown event
         * </pre>
         *
         * <code>EVENT_UNKNOWN = 0;</code>
         */
        public static final int EVENT_UNKNOWN_VALUE = 0;
        /**
         * <pre>
         * Telephony related user settings changed
         * </pre>
         *
         * <code>SETTINGS_CHANGED = 1;</code>
         */
        public static final int SETTINGS_CHANGED_VALUE = 1;
        /**
         * <pre>
         * Phone state changed
         * </pre>
         *
         * <code>RIL_SERVICE_STATE_CHANGED = 2;</code>
         */
        public static final int RIL_SERVICE_STATE_CHANGED_VALUE = 2;
        /**
         * <pre>
         * IMS connected/disconnected
         * </pre>
         *
         * <code>IMS_CONNECTION_STATE_CHANGED = 3;</code>
         */
        public static final int IMS_CONNECTION_STATE_CHANGED_VALUE = 3;
        /**
         * <pre>
         * IMS Voice, Video and Ut capabilities changed
         * </pre>
         *
         * <code>IMS_CAPABILITIES_CHANGED = 4;</code>
         */
        public static final int IMS_CAPABILITIES_CHANGED_VALUE = 4;
        /**
         * <pre>
         * Notification that new data call has appeared in the list
         * or old data call has removed.
         * </pre>
         *
         * <code>DATA_CALL_LIST_CHANGED = 5;</code>
         */
        public static final int DATA_CALL_LIST_CHANGED_VALUE = 5;
        /**
         * <pre>
         * Send request to RIL
         * </pre>
         *
         * <code>RIL_REQUEST = 6;</code>
         */
        public static final int RIL_REQUEST_VALUE = 6;
        /**
         * <pre>
         * Result of the RIL request
         * </pre>
         *
         * <code>RIL_RESPONSE = 7;</code>
         */
        public static final int RIL_RESPONSE_VALUE = 7;
        /**
         * <pre>
         * Ring indication for an incoming call
         * </pre>
         *
         * <code>RIL_CALL_RING = 8;</code>
         */
        public static final int RIL_CALL_RING_VALUE = 8;
        /**
         * <pre>
         * Notification that Single Radio Voice Call Continuity(SRVCC)
         * progress state has changed.
         * </pre>
         *
         * <code>RIL_CALL_SRVCC = 9;</code>
         */
        public static final int RIL_CALL_SRVCC_VALUE = 9;
        /**
         * <pre>
         * Notification that list of calls has changed.
         * </pre>
         *
         * <code>RIL_CALL_LIST_CHANGED = 10;</code>
         */
        public static final int RIL_CALL_LIST_CHANGED_VALUE = 10;
        /**
         * <pre>
         * Command sent to IMS Service. See ImsCommand.
         * </pre>
         *
         * <code>IMS_COMMAND = 11;</code>
         */
        public static final int IMS_COMMAND_VALUE = 11;
        /**
         * <pre>
         * Command sent to IMS Service. See ImsCommand.
         * </pre>
         *
         * <code>IMS_COMMAND_RECEIVED = 12;</code>
         */
        public static final int IMS_COMMAND_RECEIVED_VALUE = 12;
        /**
         * <pre>
         * Command sent to IMS Service. See ImsCommand.
         * </pre>
         *
         * <code>IMS_COMMAND_FAILED = 13;</code>
         */
        public static final int IMS_COMMAND_FAILED_VALUE = 13;
        /**
         * <pre>
         * Command sent to IMS Service. See ImsCommand.
         * </pre>
         *
         * <code>IMS_COMMAND_COMPLETE = 14;</code>
         */
        public static final int IMS_COMMAND_COMPLETE_VALUE = 14;
        /**
         * <pre>
         * Notification about incoming voice call
         * </pre>
         *
         * <code>IMS_CALL_RECEIVE = 15;</code>
         */
        public static final int IMS_CALL_RECEIVE_VALUE = 15;
        /**
         * <pre>
         * Notification that state of the call has changed
         * </pre>
         *
         * <code>IMS_CALL_STATE_CHANGED = 16;</code>
         */
        public static final int IMS_CALL_STATE_CHANGED_VALUE = 16;
        /**
         * <pre>
         * Notification about IMS call termination
         * </pre>
         *
         * <code>IMS_CALL_TERMINATED = 17;</code>
         */
        public static final int IMS_CALL_TERMINATED_VALUE = 17;
        /**
         * <pre>
         * Notification that session access technology has changed
         * </pre>
         *
         * <code>IMS_CALL_HANDOVER = 18;</code>
         */
        public static final int IMS_CALL_HANDOVER_VALUE = 18;
        /**
         * <pre>
         * Notification that session access technology has changed
         * </pre>
         *
         * <code>IMS_CALL_HANDOVER_FAILED = 19;</code>
         */
        public static final int IMS_CALL_HANDOVER_FAILED_VALUE = 19;
        /**
         * <pre>
         * Notification about phone state changed.
         * </pre>
         *
         * <code>PHONE_STATE_CHANGED = 20;</code>
         */
        public static final int PHONE_STATE_CHANGED_VALUE = 20;
        /**
         * <pre>
         * System time overwritten by NITZ (Network time)
         * </pre>
         *
         * <code>NITZ_TIME = 21;</code>
         */
        public static final int NITZ_TIME_VALUE = 21;


        public final int getNumber() {
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Type valueOf(int value) {
          return forNumber(value);
        }

        public static Type forNumber(int value) {
          switch (value) {
            case 0: return EVENT_UNKNOWN;
            case 1: return SETTINGS_CHANGED;
            case 2: return RIL_SERVICE_STATE_CHANGED;
            case 3: return IMS_CONNECTION_STATE_CHANGED;
            case 4: return IMS_CAPABILITIES_CHANGED;
            case 5: return DATA_CALL_LIST_CHANGED;
            case 6: return RIL_REQUEST;
            case 7: return RIL_RESPONSE;
            case 8: return RIL_CALL_RING;
            case 9: return RIL_CALL_SRVCC;
            case 10: return RIL_CALL_LIST_CHANGED;
            case 11: return IMS_COMMAND;
            case 12: return IMS_COMMAND_RECEIVED;
            case 13: return IMS_COMMAND_FAILED;
            case 14: return IMS_COMMAND_COMPLETE;
            case 15: return IMS_CALL_RECEIVE;
            case 16: return IMS_CALL_STATE_CHANGED;
            case 17: return IMS_CALL_TERMINATED;
            case 18: return IMS_CALL_HANDOVER;
            case 19: return IMS_CALL_HANDOVER_FAILED;
            case 20: return PHONE_STATE_CHANGED;
            case 21: return NITZ_TIME;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Type>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            Type> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Type>() {
                public Type findValueByNumber(int number) {
                  return Type.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.getDescriptor().getEnumTypes().get(0);
        }

        private static final Type[] VALUES = values();

        public static Type valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Type(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:clearcut.connectivity.TelephonyCallSession.Event.Type)
      }

      /**
       * Protobuf enum {@code clearcut.connectivity.TelephonyCallSession.Event.RilRequest}
       */
      public enum RilRequest
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>RIL_REQUEST_UNKNOWN = 0;</code>
         */
        RIL_REQUEST_UNKNOWN(0),
        /**
         * <pre>
         * Initiate voice call
         * </pre>
         *
         * <code>RIL_REQUEST_DIAL = 1;</code>
         */
        RIL_REQUEST_DIAL(1),
        /**
         * <pre>
         * Answer incoming call
         * </pre>
         *
         * <code>RIL_REQUEST_ANSWER = 2;</code>
         */
        RIL_REQUEST_ANSWER(2),
        /**
         * <pre>
         * Hang up a specific line
         * </pre>
         *
         * <code>RIL_REQUEST_HANGUP = 3;</code>
         */
        RIL_REQUEST_HANGUP(3),
        /**
         * <pre>
         * Configure current call waiting state
         * </pre>
         *
         * <code>RIL_REQUEST_SET_CALL_WAITING = 4;</code>
         */
        RIL_REQUEST_SET_CALL_WAITING(4),
        /**
         * <code>RIL_REQUEST_SWITCH_HOLDING_AND_ACTIVE = 5;</code>
         */
        RIL_REQUEST_SWITCH_HOLDING_AND_ACTIVE(5),
        /**
         * <pre>
         * Send FLASH
         * </pre>
         *
         * <code>RIL_REQUEST_CDMA_FLASH = 6;</code>
         */
        RIL_REQUEST_CDMA_FLASH(6),
        /**
         * <pre>
         * Conference holding and active
         * </pre>
         *
         * <code>RIL_REQUEST_CONFERENCE = 7;</code>
         */
        RIL_REQUEST_CONFERENCE(7),
        ;

        /**
         * <code>RIL_REQUEST_UNKNOWN = 0;</code>
         */
        public static final int RIL_REQUEST_UNKNOWN_VALUE = 0;
        /**
         * <pre>
         * Initiate voice call
         * </pre>
         *
         * <code>RIL_REQUEST_DIAL = 1;</code>
         */
        public static final int RIL_REQUEST_DIAL_VALUE = 1;
        /**
         * <pre>
         * Answer incoming call
         * </pre>
         *
         * <code>RIL_REQUEST_ANSWER = 2;</code>
         */
        public static final int RIL_REQUEST_ANSWER_VALUE = 2;
        /**
         * <pre>
         * Hang up a specific line
         * </pre>
         *
         * <code>RIL_REQUEST_HANGUP = 3;</code>
         */
        public static final int RIL_REQUEST_HANGUP_VALUE = 3;
        /**
         * <pre>
         * Configure current call waiting state
         * </pre>
         *
         * <code>RIL_REQUEST_SET_CALL_WAITING = 4;</code>
         */
        public static final int RIL_REQUEST_SET_CALL_WAITING_VALUE = 4;
        /**
         * <code>RIL_REQUEST_SWITCH_HOLDING_AND_ACTIVE = 5;</code>
         */
        public static final int RIL_REQUEST_SWITCH_HOLDING_AND_ACTIVE_VALUE = 5;
        /**
         * <pre>
         * Send FLASH
         * </pre>
         *
         * <code>RIL_REQUEST_CDMA_FLASH = 6;</code>
         */
        public static final int RIL_REQUEST_CDMA_FLASH_VALUE = 6;
        /**
         * <pre>
         * Conference holding and active
         * </pre>
         *
         * <code>RIL_REQUEST_CONFERENCE = 7;</code>
         */
        public static final int RIL_REQUEST_CONFERENCE_VALUE = 7;


        public final int getNumber() {
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static RilRequest valueOf(int value) {
          return forNumber(value);
        }

        public static RilRequest forNumber(int value) {
          switch (value) {
            case 0: return RIL_REQUEST_UNKNOWN;
            case 1: return RIL_REQUEST_DIAL;
            case 2: return RIL_REQUEST_ANSWER;
            case 3: return RIL_REQUEST_HANGUP;
            case 4: return RIL_REQUEST_SET_CALL_WAITING;
            case 5: return RIL_REQUEST_SWITCH_HOLDING_AND_ACTIVE;
            case 6: return RIL_REQUEST_CDMA_FLASH;
            case 7: return RIL_REQUEST_CONFERENCE;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<RilRequest>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            RilRequest> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<RilRequest>() {
                public RilRequest findValueByNumber(int number) {
                  return RilRequest.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.getDescriptor().getEnumTypes().get(1);
        }

        private static final RilRequest[] VALUES = values();

        public static RilRequest valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private RilRequest(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:clearcut.connectivity.TelephonyCallSession.Event.RilRequest)
      }

      /**
       * Protobuf enum {@code clearcut.connectivity.TelephonyCallSession.Event.ImsCommand}
       */
      public enum ImsCommand
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * Command is unknown.
         * </pre>
         *
         * <code>IMS_CMD_UNKNOWN = 0;</code>
         */
        IMS_CMD_UNKNOWN(0),
        /**
         * <code>IMS_CMD_START = 1;</code>
         */
        IMS_CMD_START(1),
        /**
         * <code>IMS_CMD_ACCEPT = 2;</code>
         */
        IMS_CMD_ACCEPT(2),
        /**
         * <code>IMS_CMD_REJECT = 3;</code>
         */
        IMS_CMD_REJECT(3),
        /**
         * <code>IMS_CMD_TERMINATE = 4;</code>
         */
        IMS_CMD_TERMINATE(4),
        /**
         * <code>IMS_CMD_HOLD = 5;</code>
         */
        IMS_CMD_HOLD(5),
        /**
         * <code>IMS_CMD_RESUME = 6;</code>
         */
        IMS_CMD_RESUME(6),
        /**
         * <code>IMS_CMD_MERGE = 7;</code>
         */
        IMS_CMD_MERGE(7),
        /**
         * <code>IMS_CMD_UPDATE = 8;</code>
         */
        IMS_CMD_UPDATE(8),
        /**
         * <code>IMS_CMD_CONFERENCE_EXTEND = 9;</code>
         */
        IMS_CMD_CONFERENCE_EXTEND(9),
        /**
         * <code>IMS_CMD_INVITE_PARTICIPANT = 10;</code>
         */
        IMS_CMD_INVITE_PARTICIPANT(10),
        /**
         * <code>IMS_CMD_REMOVE_PARTICIPANT = 11;</code>
         */
        IMS_CMD_REMOVE_PARTICIPANT(11),
        ;

        /**
         * <pre>
         * Command is unknown.
         * </pre>
         *
         * <code>IMS_CMD_UNKNOWN = 0;</code>
         */
        public static final int IMS_CMD_UNKNOWN_VALUE = 0;
        /**
         * <code>IMS_CMD_START = 1;</code>
         */
        public static final int IMS_CMD_START_VALUE = 1;
        /**
         * <code>IMS_CMD_ACCEPT = 2;</code>
         */
        public static final int IMS_CMD_ACCEPT_VALUE = 2;
        /**
         * <code>IMS_CMD_REJECT = 3;</code>
         */
        public static final int IMS_CMD_REJECT_VALUE = 3;
        /**
         * <code>IMS_CMD_TERMINATE = 4;</code>
         */
        public static final int IMS_CMD_TERMINATE_VALUE = 4;
        /**
         * <code>IMS_CMD_HOLD = 5;</code>
         */
        public static final int IMS_CMD_HOLD_VALUE = 5;
        /**
         * <code>IMS_CMD_RESUME = 6;</code>
         */
        public static final int IMS_CMD_RESUME_VALUE = 6;
        /**
         * <code>IMS_CMD_MERGE = 7;</code>
         */
        public static final int IMS_CMD_MERGE_VALUE = 7;
        /**
         * <code>IMS_CMD_UPDATE = 8;</code>
         */
        public static final int IMS_CMD_UPDATE_VALUE = 8;
        /**
         * <code>IMS_CMD_CONFERENCE_EXTEND = 9;</code>
         */
        public static final int IMS_CMD_CONFERENCE_EXTEND_VALUE = 9;
        /**
         * <code>IMS_CMD_INVITE_PARTICIPANT = 10;</code>
         */
        public static final int IMS_CMD_INVITE_PARTICIPANT_VALUE = 10;
        /**
         * <code>IMS_CMD_REMOVE_PARTICIPANT = 11;</code>
         */
        public static final int IMS_CMD_REMOVE_PARTICIPANT_VALUE = 11;


        public final int getNumber() {
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static ImsCommand valueOf(int value) {
          return forNumber(value);
        }

        public static ImsCommand forNumber(int value) {
          switch (value) {
            case 0: return IMS_CMD_UNKNOWN;
            case 1: return IMS_CMD_START;
            case 2: return IMS_CMD_ACCEPT;
            case 3: return IMS_CMD_REJECT;
            case 4: return IMS_CMD_TERMINATE;
            case 5: return IMS_CMD_HOLD;
            case 6: return IMS_CMD_RESUME;
            case 7: return IMS_CMD_MERGE;
            case 8: return IMS_CMD_UPDATE;
            case 9: return IMS_CMD_CONFERENCE_EXTEND;
            case 10: return IMS_CMD_INVITE_PARTICIPANT;
            case 11: return IMS_CMD_REMOVE_PARTICIPANT;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ImsCommand>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            ImsCommand> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<ImsCommand>() {
                public ImsCommand findValueByNumber(int number) {
                  return ImsCommand.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.getDescriptor().getEnumTypes().get(2);
        }

        private static final ImsCommand[] VALUES = values();

        public static ImsCommand valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private ImsCommand(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:clearcut.connectivity.TelephonyCallSession.Event.ImsCommand)
      }

      /**
       * Protobuf enum {@code clearcut.connectivity.TelephonyCallSession.Event.PhoneState}
       */
      public enum PhoneState
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * State is unknown.
         * </pre>
         *
         * <code>STATE_UNKNOWN = 0;</code>
         */
        STATE_UNKNOWN(0),
        /**
         * <code>STATE_IDLE = 1;</code>
         */
        STATE_IDLE(1),
        /**
         * <code>STATE_RINGING = 2;</code>
         */
        STATE_RINGING(2),
        /**
         * <code>STATE_OFFHOOK = 3;</code>
         */
        STATE_OFFHOOK(3),
        ;

        /**
         * <pre>
         * State is unknown.
         * </pre>
         *
         * <code>STATE_UNKNOWN = 0;</code>
         */
        public static final int STATE_UNKNOWN_VALUE = 0;
        /**
         * <code>STATE_IDLE = 1;</code>
         */
        public static final int STATE_IDLE_VALUE = 1;
        /**
         * <code>STATE_RINGING = 2;</code>
         */
        public static final int STATE_RINGING_VALUE = 2;
        /**
         * <code>STATE_OFFHOOK = 3;</code>
         */
        public static final int STATE_OFFHOOK_VALUE = 3;


        public final int getNumber() {
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static PhoneState valueOf(int value) {
          return forNumber(value);
        }

        public static PhoneState forNumber(int value) {
          switch (value) {
            case 0: return STATE_UNKNOWN;
            case 1: return STATE_IDLE;
            case 2: return STATE_RINGING;
            case 3: return STATE_OFFHOOK;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<PhoneState>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            PhoneState> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<PhoneState>() {
                public PhoneState findValueByNumber(int number) {
                  return PhoneState.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.getDescriptor().getEnumTypes().get(3);
        }

        private static final PhoneState[] VALUES = values();

        public static PhoneState valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private PhoneState(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:clearcut.connectivity.TelephonyCallSession.Event.PhoneState)
      }

      /**
       * <pre>
       * Telephony call states
       * </pre>
       *
       * Protobuf enum {@code clearcut.connectivity.TelephonyCallSession.Event.CallState}
       */
      public enum CallState
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * State is unknown.
         * </pre>
         *
         * <code>CALL_UNKNOWN = 0;</code>
         */
        CALL_UNKNOWN(0),
        /**
         * <code>CALL_IDLE = 1;</code>
         */
        CALL_IDLE(1),
        /**
         * <code>CALL_ACTIVE = 2;</code>
         */
        CALL_ACTIVE(2),
        /**
         * <code>CALL_HOLDING = 3;</code>
         */
        CALL_HOLDING(3),
        /**
         * <code>CALL_DIALING = 4;</code>
         */
        CALL_DIALING(4),
        /**
         * <code>CALL_ALERTING = 5;</code>
         */
        CALL_ALERTING(5),
        /**
         * <code>CALL_INCOMING = 6;</code>
         */
        CALL_INCOMING(6),
        /**
         * <code>CALL_WAITING = 7;</code>
         */
        CALL_WAITING(7),
        /**
         * <code>CALL_DISCONNECTED = 8;</code>
         */
        CALL_DISCONNECTED(8),
        /**
         * <code>CALL_DISCONNECTING = 9;</code>
         */
        CALL_DISCONNECTING(9),
        ;

        /**
         * <pre>
         * State is unknown.
         * </pre>
         *
         * <code>CALL_UNKNOWN = 0;</code>
         */
        public static final int CALL_UNKNOWN_VALUE = 0;
        /**
         * <code>CALL_IDLE = 1;</code>
         */
        public static final int CALL_IDLE_VALUE = 1;
        /**
         * <code>CALL_ACTIVE = 2;</code>
         */
        public static final int CALL_ACTIVE_VALUE = 2;
        /**
         * <code>CALL_HOLDING = 3;</code>
         */
        public static final int CALL_HOLDING_VALUE = 3;
        /**
         * <code>CALL_DIALING = 4;</code>
         */
        public static final int CALL_DIALING_VALUE = 4;
        /**
         * <code>CALL_ALERTING = 5;</code>
         */
        public static final int CALL_ALERTING_VALUE = 5;
        /**
         * <code>CALL_INCOMING = 6;</code>
         */
        public static final int CALL_INCOMING_VALUE = 6;
        /**
         * <code>CALL_WAITING = 7;</code>
         */
        public static final int CALL_WAITING_VALUE = 7;
        /**
         * <code>CALL_DISCONNECTED = 8;</code>
         */
        public static final int CALL_DISCONNECTED_VALUE = 8;
        /**
         * <code>CALL_DISCONNECTING = 9;</code>
         */
        public static final int CALL_DISCONNECTING_VALUE = 9;


        public final int getNumber() {
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static CallState valueOf(int value) {
          return forNumber(value);
        }

        public static CallState forNumber(int value) {
          switch (value) {
            case 0: return CALL_UNKNOWN;
            case 1: return CALL_IDLE;
            case 2: return CALL_ACTIVE;
            case 3: return CALL_HOLDING;
            case 4: return CALL_DIALING;
            case 5: return CALL_ALERTING;
            case 6: return CALL_INCOMING;
            case 7: return CALL_WAITING;
            case 8: return CALL_DISCONNECTED;
            case 9: return CALL_DISCONNECTING;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<CallState>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            CallState> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<CallState>() {
                public CallState findValueByNumber(int number) {
                  return CallState.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.getDescriptor().getEnumTypes().get(4);
        }

        private static final CallState[] VALUES = values();

        public static CallState valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private CallState(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:clearcut.connectivity.TelephonyCallSession.Event.CallState)
      }

      /**
       * <pre>
       * Single Radio Voice Call Continuity(SRVCC) progress state
       * </pre>
       *
       * Protobuf enum {@code clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState}
       */
      public enum RilSrvccState
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * State is unknown.
         * </pre>
         *
         * <code>HANDOVER_UNKNOWN = 0;</code>
         */
        HANDOVER_UNKNOWN(0),
        /**
         * <code>HANDOVER_STARTED = 1;</code>
         */
        HANDOVER_STARTED(1),
        /**
         * <code>HANDOVER_COMPLETED = 2;</code>
         */
        HANDOVER_COMPLETED(2),
        /**
         * <code>HANDOVER_FAILED = 3;</code>
         */
        HANDOVER_FAILED(3),
        /**
         * <code>HANDOVER_CANCELED = 4;</code>
         */
        HANDOVER_CANCELED(4),
        ;

        /**
         * <pre>
         * State is unknown.
         * </pre>
         *
         * <code>HANDOVER_UNKNOWN = 0;</code>
         */
        public static final int HANDOVER_UNKNOWN_VALUE = 0;
        /**
         * <code>HANDOVER_STARTED = 1;</code>
         */
        public static final int HANDOVER_STARTED_VALUE = 1;
        /**
         * <code>HANDOVER_COMPLETED = 2;</code>
         */
        public static final int HANDOVER_COMPLETED_VALUE = 2;
        /**
         * <code>HANDOVER_FAILED = 3;</code>
         */
        public static final int HANDOVER_FAILED_VALUE = 3;
        /**
         * <code>HANDOVER_CANCELED = 4;</code>
         */
        public static final int HANDOVER_CANCELED_VALUE = 4;


        public final int getNumber() {
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static RilSrvccState valueOf(int value) {
          return forNumber(value);
        }

        public static RilSrvccState forNumber(int value) {
          switch (value) {
            case 0: return HANDOVER_UNKNOWN;
            case 1: return HANDOVER_STARTED;
            case 2: return HANDOVER_COMPLETED;
            case 3: return HANDOVER_FAILED;
            case 4: return HANDOVER_CANCELED;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<RilSrvccState>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            RilSrvccState> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<RilSrvccState>() {
                public RilSrvccState findValueByNumber(int number) {
                  return RilSrvccState.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.getDescriptor().getEnumTypes().get(5);
        }

        private static final RilSrvccState[] VALUES = values();

        public static RilSrvccState valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private RilSrvccState(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState)
      }

      public interface RilCallOrBuilder extends
          // @@protoc_insertion_point(interface_extends:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Connection Index
         * </pre>
         *
         * <code>optional int32 index = 1;</code>
         */
        boolean hasIndex();
        /**
         * <pre>
         * Connection Index
         * </pre>
         *
         * <code>optional int32 index = 1;</code>
         */
        int getIndex();

        /**
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;</code>
         */
        boolean hasState();
        /**
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;</code>
         */
        com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState getState();

        /**
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;</code>
         */
        boolean hasType();
        /**
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;</code>
         */
        com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type getType();

        /**
         * <pre>
         * For possible values for a call end reason check
         * frameworks/base/telephony/java/android/telephony/DisconnectCause.java
         * </pre>
         *
         * <code>optional int32 call_end_reason = 4;</code>
         */
        boolean hasCallEndReason();
        /**
         * <pre>
         * For possible values for a call end reason check
         * frameworks/base/telephony/java/android/telephony/DisconnectCause.java
         * </pre>
         *
         * <code>optional int32 call_end_reason = 4;</code>
         */
        int getCallEndReason();

        /**
         * <pre>
         * This field is true for Conference Calls
         * </pre>
         *
         * <code>optional bool is_multiparty = 5;</code>
         */
        boolean hasIsMultiparty();
        /**
         * <pre>
         * This field is true for Conference Calls
         * </pre>
         *
         * <code>optional bool is_multiparty = 5;</code>
         */
        boolean getIsMultiparty();
      }
      /**
       * <pre>
       * The information about a voice call
       * </pre>
       *
       * Protobuf type {@code clearcut.connectivity.TelephonyCallSession.Event.RilCall}
       */
      public  static final class RilCall extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
          RilCallOrBuilder {
        // Use RilCall.newBuilder() to construct.
        private RilCall(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private RilCall() {
          index_ = 0;
          state_ = 0;
          type_ = 0;
          callEndReason_ = 0;
          isMultiparty_ = false;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private RilCall(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(input, unknownFields,
                                         extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  index_ = input.readInt32();
                  break;
                }
                case 16: {
                  int rawValue = input.readEnum();
                  com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState value = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.valueOf(rawValue);
                  if (value == null) {
                    unknownFields.mergeVarintField(2, rawValue);
                  } else {
                    bitField0_ |= 0x00000002;
                    state_ = rawValue;
                  }
                  break;
                }
                case 24: {
                  int rawValue = input.readEnum();
                  com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type value = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.valueOf(rawValue);
                  if (value == null) {
                    unknownFields.mergeVarintField(3, rawValue);
                  } else {
                    bitField0_ |= 0x00000004;
                    type_ = rawValue;
                  }
                  break;
                }
                case 32: {
                  bitField0_ |= 0x00000008;
                  callEndReason_ = input.readInt32();
                  break;
                }
                case 40: {
                  bitField0_ |= 0x00000010;
                  isMultiparty_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyCallSession_Event_RilCall_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyCallSession_Event_RilCall_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.class, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Builder.class);
        }

        /**
         * Protobuf enum {@code clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type}
         */
        public enum Type
            implements com.google.protobuf.ProtocolMessageEnum {
          /**
           * <pre>
           * Scan Type is unknown.
           * </pre>
           *
           * <code>UNKNOWN = 0;</code>
           */
          UNKNOWN(0),
          /**
           * <pre>
           * Mobile originated
           * </pre>
           *
           * <code>MO = 1;</code>
           */
          MO(1),
          /**
           * <pre>
           * Mobile terminated
           * </pre>
           *
           * <code>MT = 2;</code>
           */
          MT(2),
          ;

          /**
           * <pre>
           * Scan Type is unknown.
           * </pre>
           *
           * <code>UNKNOWN = 0;</code>
           */
          public static final int UNKNOWN_VALUE = 0;
          /**
           * <pre>
           * Mobile originated
           * </pre>
           *
           * <code>MO = 1;</code>
           */
          public static final int MO_VALUE = 1;
          /**
           * <pre>
           * Mobile terminated
           * </pre>
           *
           * <code>MT = 2;</code>
           */
          public static final int MT_VALUE = 2;


          public final int getNumber() {
            return value;
          }

          /**
           * @deprecated Use {@link #forNumber(int)} instead.
           */
          @java.lang.Deprecated
          public static Type valueOf(int value) {
            return forNumber(value);
          }

          public static Type forNumber(int value) {
            switch (value) {
              case 0: return UNKNOWN;
              case 1: return MO;
              case 2: return MT;
              default: return null;
            }
          }

          public static com.google.protobuf.Internal.EnumLiteMap<Type>
              internalGetValueMap() {
            return internalValueMap;
          }
          private static final com.google.protobuf.Internal.EnumLiteMap<
              Type> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<Type>() {
                  public Type findValueByNumber(int number) {
                    return Type.forNumber(number);
                  }
                };

          public final com.google.protobuf.Descriptors.EnumValueDescriptor
              getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
          }
          public final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptorForType() {
            return getDescriptor();
          }
          public static final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptor() {
            return com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.getDescriptor().getEnumTypes().get(0);
          }

          private static final Type[] VALUES = values();

          public static Type valueOf(
              com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
              throw new java.lang.IllegalArgumentException(
                "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
          }

          private final int value;

          private Type(int value) {
            this.value = value;
          }

          // @@protoc_insertion_point(enum_scope:clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type)
        }

        private int bitField0_;
        public static final int INDEX_FIELD_NUMBER = 1;
        private int index_;
        /**
         * <pre>
         * Connection Index
         * </pre>
         *
         * <code>optional int32 index = 1;</code>
         */
        public boolean hasIndex() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <pre>
         * Connection Index
         * </pre>
         *
         * <code>optional int32 index = 1;</code>
         */
        public int getIndex() {
          return index_;
        }

        public static final int STATE_FIELD_NUMBER = 2;
        private int state_;
        /**
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;</code>
         */
        public boolean hasState() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState getState() {
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.valueOf(state_);
          return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN : result;
        }

        public static final int TYPE_FIELD_NUMBER = 3;
        private int type_;
        /**
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;</code>
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type getType() {
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.valueOf(type_);
          return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.UNKNOWN : result;
        }

        public static final int CALL_END_REASON_FIELD_NUMBER = 4;
        private int callEndReason_;
        /**
         * <pre>
         * For possible values for a call end reason check
         * frameworks/base/telephony/java/android/telephony/DisconnectCause.java
         * </pre>
         *
         * <code>optional int32 call_end_reason = 4;</code>
         */
        public boolean hasCallEndReason() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <pre>
         * For possible values for a call end reason check
         * frameworks/base/telephony/java/android/telephony/DisconnectCause.java
         * </pre>
         *
         * <code>optional int32 call_end_reason = 4;</code>
         */
        public int getCallEndReason() {
          return callEndReason_;
        }

        public static final int IS_MULTIPARTY_FIELD_NUMBER = 5;
        private boolean isMultiparty_;
        /**
         * <pre>
         * This field is true for Conference Calls
         * </pre>
         *
         * <code>optional bool is_multiparty = 5;</code>
         */
        public boolean hasIsMultiparty() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <pre>
         * This field is true for Conference Calls
         * </pre>
         *
         * <code>optional bool is_multiparty = 5;</code>
         */
        public boolean getIsMultiparty() {
          return isMultiparty_;
        }

        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeInt32(1, index_);
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeEnum(2, state_);
          }
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeEnum(3, type_);
          }
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            output.writeInt32(4, callEndReason_);
          }
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            output.writeBool(5, isMultiparty_);
          }
          unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += com.google.protobuf.CodedOutputStream
              .computeInt32Size(1, index_);
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += com.google.protobuf.CodedOutputStream
              .computeEnumSize(2, state_);
          }
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += com.google.protobuf.CodedOutputStream
              .computeEnumSize(3, type_);
          }
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            size += com.google.protobuf.CodedOutputStream
              .computeInt32Size(4, callEndReason_);
          }
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBoolSize(5, isMultiparty_);
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall)) {
            return super.equals(obj);
          }
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall other = (com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall) obj;

          boolean result = true;
          result = result && (hasIndex() == other.hasIndex());
          if (hasIndex()) {
            result = result && (getIndex()
                == other.getIndex());
          }
          result = result && (hasState() == other.hasState());
          if (hasState()) {
            result = result && state_ == other.state_;
          }
          result = result && (hasType() == other.hasType());
          if (hasType()) {
            result = result && type_ == other.type_;
          }
          result = result && (hasCallEndReason() == other.hasCallEndReason());
          if (hasCallEndReason()) {
            result = result && (getCallEndReason()
                == other.getCallEndReason());
          }
          result = result && (hasIsMultiparty() == other.hasIsMultiparty());
          if (hasIsMultiparty()) {
            result = result && (getIsMultiparty()
                == other.getIsMultiparty());
          }
          result = result && unknownFields.equals(other.unknownFields);
          return result;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptorForType().hashCode();
          if (hasIndex()) {
            hash = (37 * hash) + INDEX_FIELD_NUMBER;
            hash = (53 * hash) + getIndex();
          }
          if (hasState()) {
            hash = (37 * hash) + STATE_FIELD_NUMBER;
            hash = (53 * hash) + state_;
          }
          if (hasType()) {
            hash = (37 * hash) + TYPE_FIELD_NUMBER;
            hash = (53 * hash) + type_;
          }
          if (hasCallEndReason()) {
            hash = (37 * hash) + CALL_END_REASON_FIELD_NUMBER;
            hash = (53 * hash) + getCallEndReason();
          }
          if (hasIsMultiparty()) {
            hash = (37 * hash) + IS_MULTIPARTY_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                getIsMultiparty());
          }
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * <pre>
         * The information about a voice call
         * </pre>
         *
         * Protobuf type {@code clearcut.connectivity.TelephonyCallSession.Event.RilCall}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
            com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCallOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyCallSession_Event_RilCall_descriptor;
          }

          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyCallSession_Event_RilCall_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.class, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Builder.class);
          }

          // Construct using com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
          }
          public Builder clear() {
            super.clear();
            index_ = 0;
            bitField0_ = (bitField0_ & ~0x00000001);
            state_ = 0;
            bitField0_ = (bitField0_ & ~0x00000002);
            type_ = 0;
            bitField0_ = (bitField0_ & ~0x00000004);
            callEndReason_ = 0;
            bitField0_ = (bitField0_ & ~0x00000008);
            isMultiparty_ = false;
            bitField0_ = (bitField0_ & ~0x00000010);
            return this;
          }

          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyCallSession_Event_RilCall_descriptor;
          }

          public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall getDefaultInstanceForType() {
            return com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.getDefaultInstance();
          }

          public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall build() {
            com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall buildPartial() {
            com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall result = new com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
              to_bitField0_ |= 0x00000001;
            }
            result.index_ = index_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
              to_bitField0_ |= 0x00000002;
            }
            result.state_ = state_;
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
              to_bitField0_ |= 0x00000004;
            }
            result.type_ = type_;
            if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
              to_bitField0_ |= 0x00000008;
            }
            result.callEndReason_ = callEndReason_;
            if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
              to_bitField0_ |= 0x00000010;
            }
            result.isMultiparty_ = isMultiparty_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
          }

          public Builder clone() {
            return (Builder) super.clone();
          }
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
            return (Builder) super.setField(field, value);
          }
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
          }
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
          }
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
          }
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
            return (Builder) super.addRepeatedField(field, value);
          }
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall) {
              return mergeFrom((com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall other) {
            if (other == com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.getDefaultInstance()) return this;
            if (other.hasIndex()) {
              setIndex(other.getIndex());
            }
            if (other.hasState()) {
              setState(other.getState());
            }
            if (other.hasType()) {
              setType(other.getType());
            }
            if (other.hasCallEndReason()) {
              setCallEndReason(other.getCallEndReason());
            }
            if (other.hasIsMultiparty()) {
              setIsMultiparty(other.getIsMultiparty());
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          public final boolean isInitialized() {
            return true;
          }

          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          private int index_ ;
          /**
           * <pre>
           * Connection Index
           * </pre>
           *
           * <code>optional int32 index = 1;</code>
           */
          public boolean hasIndex() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
          }
          /**
           * <pre>
           * Connection Index
           * </pre>
           *
           * <code>optional int32 index = 1;</code>
           */
          public int getIndex() {
            return index_;
          }
          /**
           * <pre>
           * Connection Index
           * </pre>
           *
           * <code>optional int32 index = 1;</code>
           */
          public Builder setIndex(int value) {
            bitField0_ |= 0x00000001;
            index_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Connection Index
           * </pre>
           *
           * <code>optional int32 index = 1;</code>
           */
          public Builder clearIndex() {
            bitField0_ = (bitField0_ & ~0x00000001);
            index_ = 0;
            onChanged();
            return this;
          }

          private int state_ = 0;
          /**
           * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;</code>
           */
          public boolean hasState() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
          }
          /**
           * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;</code>
           */
          public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState getState() {
            com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.valueOf(state_);
            return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN : result;
          }
          /**
           * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;</code>
           */
          public Builder setState(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState value) {
            if (value == null) {
              throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            state_ = value.getNumber();
            onChanged();
            return this;
          }
          /**
           * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;</code>
           */
          public Builder clearState() {
            bitField0_ = (bitField0_ & ~0x00000002);
            state_ = 0;
            onChanged();
            return this;
          }

          private int type_ = 0;
          /**
           * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;</code>
           */
          public boolean hasType() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
          }
          /**
           * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;</code>
           */
          public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type getType() {
            com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.valueOf(type_);
            return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.UNKNOWN : result;
          }
          /**
           * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;</code>
           */
          public Builder setType(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Type value) {
            if (value == null) {
              throw new NullPointerException();
            }
            bitField0_ |= 0x00000004;
            type_ = value.getNumber();
            onChanged();
            return this;
          }
          /**
           * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;</code>
           */
          public Builder clearType() {
            bitField0_ = (bitField0_ & ~0x00000004);
            type_ = 0;
            onChanged();
            return this;
          }

          private int callEndReason_ ;
          /**
           * <pre>
           * For possible values for a call end reason check
           * frameworks/base/telephony/java/android/telephony/DisconnectCause.java
           * </pre>
           *
           * <code>optional int32 call_end_reason = 4;</code>
           */
          public boolean hasCallEndReason() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
          }
          /**
           * <pre>
           * For possible values for a call end reason check
           * frameworks/base/telephony/java/android/telephony/DisconnectCause.java
           * </pre>
           *
           * <code>optional int32 call_end_reason = 4;</code>
           */
          public int getCallEndReason() {
            return callEndReason_;
          }
          /**
           * <pre>
           * For possible values for a call end reason check
           * frameworks/base/telephony/java/android/telephony/DisconnectCause.java
           * </pre>
           *
           * <code>optional int32 call_end_reason = 4;</code>
           */
          public Builder setCallEndReason(int value) {
            bitField0_ |= 0x00000008;
            callEndReason_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * For possible values for a call end reason check
           * frameworks/base/telephony/java/android/telephony/DisconnectCause.java
           * </pre>
           *
           * <code>optional int32 call_end_reason = 4;</code>
           */
          public Builder clearCallEndReason() {
            bitField0_ = (bitField0_ & ~0x00000008);
            callEndReason_ = 0;
            onChanged();
            return this;
          }

          private boolean isMultiparty_ ;
          /**
           * <pre>
           * This field is true for Conference Calls
           * </pre>
           *
           * <code>optional bool is_multiparty = 5;</code>
           */
          public boolean hasIsMultiparty() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
          }
          /**
           * <pre>
           * This field is true for Conference Calls
           * </pre>
           *
           * <code>optional bool is_multiparty = 5;</code>
           */
          public boolean getIsMultiparty() {
            return isMultiparty_;
          }
          /**
           * <pre>
           * This field is true for Conference Calls
           * </pre>
           *
           * <code>optional bool is_multiparty = 5;</code>
           */
          public Builder setIsMultiparty(boolean value) {
            bitField0_ |= 0x00000010;
            isMultiparty_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * This field is true for Conference Calls
           * </pre>
           *
           * <code>optional bool is_multiparty = 5;</code>
           */
          public Builder clearIsMultiparty() {
            bitField0_ = (bitField0_ & ~0x00000010);
            isMultiparty_ = false;
            onChanged();
            return this;
          }
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
        }

        // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyCallSession.Event.RilCall)
        private static final com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall();
        }

        public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        @java.lang.Deprecated public static final com.google.protobuf.Parser<RilCall>
            PARSER = new com.google.protobuf.AbstractParser<RilCall>() {
          public RilCall parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
              return new RilCall(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<RilCall> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<RilCall> getParserForType() {
          return PARSER;
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int bitField0_;
      public static final int TYPE_FIELD_NUMBER = 1;
      private int type_;
      /**
       * <pre>
       * Event type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Event type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type getType() {
        com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.valueOf(type_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.EVENT_UNKNOWN : result;
      }

      public static final int DELAY_FIELD_NUMBER = 2;
      private int delay_;
      /**
       * <pre>
       * Time since previous event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
       */
      public boolean hasDelay() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Time since previous event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TimeInterval getDelay() {
        com.android.internal.telephony.TelephonyProto.TimeInterval result = com.android.internal.telephony.TelephonyProto.TimeInterval.valueOf(delay_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TimeInterval.TI_UNKNOWN : result;
      }

      public static final int SETTINGS_FIELD_NUMBER = 3;
      private com.android.internal.telephony.TelephonyProto.TelephonySettings settings_;
      /**
       * <pre>
       * Settings at the begining of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
       */
      public boolean hasSettings() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Settings at the begining of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonySettings getSettings() {
        return settings_ == null ? com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance() : settings_;
      }
      /**
       * <pre>
       * Settings at the begining of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder getSettingsOrBuilder() {
        return settings_ == null ? com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance() : settings_;
      }

      public static final int SERVICE_STATE_FIELD_NUMBER = 4;
      private com.android.internal.telephony.TelephonyProto.TelephonyServiceState serviceState_;
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
       */
      public boolean hasServiceState() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState getServiceState() {
        return serviceState_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance() : serviceState_;
      }
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder getServiceStateOrBuilder() {
        return serviceState_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance() : serviceState_;
      }

      public static final int IMS_CONNECTION_STATE_FIELD_NUMBER = 5;
      private com.android.internal.telephony.TelephonyProto.ImsConnectionState imsConnectionState_;
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
       */
      public boolean hasImsConnectionState() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsConnectionState getImsConnectionState() {
        return imsConnectionState_ == null ? com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance() : imsConnectionState_;
      }
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder getImsConnectionStateOrBuilder() {
        return imsConnectionState_ == null ? com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance() : imsConnectionState_;
      }

      public static final int IMS_CAPABILITIES_FIELD_NUMBER = 6;
      private com.android.internal.telephony.TelephonyProto.ImsCapabilities imsCapabilities_;
      /**
       * <pre>
       * Capabilities at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
       */
      public boolean hasImsCapabilities() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * Capabilities at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsCapabilities getImsCapabilities() {
        return imsCapabilities_ == null ? com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance() : imsCapabilities_;
      }
      /**
       * <pre>
       * Capabilities at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder getImsCapabilitiesOrBuilder() {
        return imsCapabilities_ == null ? com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance() : imsCapabilities_;
      }

      public static final int DATA_CALLS_FIELD_NUMBER = 7;
      private java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall> dataCalls_;
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall> getDataCallsList() {
        return dataCalls_;
      }
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      public java.util.List<? extends com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> 
          getDataCallsOrBuilderList() {
        return dataCalls_;
      }
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      public int getDataCallsCount() {
        return dataCalls_.size();
      }
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      public com.android.internal.telephony.TelephonyProto.RilDataCall getDataCalls(int index) {
        return dataCalls_.get(index);
      }
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      public com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder getDataCallsOrBuilder(
          int index) {
        return dataCalls_.get(index);
      }

      public static final int PHONE_STATE_FIELD_NUMBER = 8;
      private int phoneState_;
      /**
       * <pre>
       * New state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;</code>
       */
      public boolean hasPhoneState() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * New state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState getPhoneState() {
        com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState.valueOf(phoneState_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState.STATE_UNKNOWN : result;
      }

      public static final int CALL_STATE_FIELD_NUMBER = 9;
      private int callState_;
      /**
       * <pre>
       * New state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;</code>
       */
      public boolean hasCallState() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * New state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState getCallState() {
        com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.valueOf(callState_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN : result;
      }

      public static final int CALL_INDEX_FIELD_NUMBER = 10;
      private int callIndex_;
      /**
       * <pre>
       * CS or IMS Voice call index
       * </pre>
       *
       * <code>optional int32 call_index = 10;</code>
       */
      public boolean hasCallIndex() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * CS or IMS Voice call index
       * </pre>
       *
       * <code>optional int32 call_index = 10;</code>
       */
      public int getCallIndex() {
        return callIndex_;
      }

      public static final int MERGED_CALL_INDEX_FIELD_NUMBER = 11;
      private int mergedCallIndex_;
      /**
       * <pre>
       * New merged call
       * </pre>
       *
       * <code>optional int32 merged_call_index = 11;</code>
       */
      public boolean hasMergedCallIndex() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * New merged call
       * </pre>
       *
       * <code>optional int32 merged_call_index = 11;</code>
       */
      public int getMergedCallIndex() {
        return mergedCallIndex_;
      }

      public static final int CALLS_FIELD_NUMBER = 12;
      private java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall> calls_;
      /**
       * <pre>
       * Active CS Voice calls
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall> getCallsList() {
        return calls_;
      }
      /**
       * <pre>
       * Active CS Voice calls
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
       */
      public java.util.List<? extends com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCallOrBuilder> 
          getCallsOrBuilderList() {
        return calls_;
      }
      /**
       * <pre>
       * Active CS Voice calls
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
       */
      public int getCallsCount() {
        return calls_.size();
      }
      /**
       * <pre>
       * Active CS Voice calls
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall getCalls(int index) {
        return calls_.get(index);
      }
      /**
       * <pre>
       * Active CS Voice calls
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCallOrBuilder getCallsOrBuilder(
          int index) {
        return calls_.get(index);
      }

      public static final int ERROR_FIELD_NUMBER = 13;
      private int error_;
      /**
       * <pre>
       * RIL error code
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RilErrno error = 13;</code>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       * RIL error code
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RilErrno error = 13;</code>
       */
      public com.android.internal.telephony.TelephonyProto.RilErrno getError() {
        com.android.internal.telephony.TelephonyProto.RilErrno result = com.android.internal.telephony.TelephonyProto.RilErrno.valueOf(error_);
        return result == null ? com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_UNKNOWN : result;
      }

      public static final int RIL_REQUEST_FIELD_NUMBER = 14;
      private int rilRequest_;
      /**
       * <pre>
       * RIL request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;</code>
       */
      public boolean hasRilRequest() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       * RIL request
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest getRilRequest() {
        com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest.valueOf(rilRequest_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_UNKNOWN : result;
      }

      public static final int RIL_REQUEST_ID_FIELD_NUMBER = 15;
      private int rilRequestId_;
      /**
       * <pre>
       * Numeric ID
       * </pre>
       *
       * <code>optional int32 ril_request_id = 15;</code>
       */
      public boolean hasRilRequestId() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <pre>
       * Numeric ID
       * </pre>
       *
       * <code>optional int32 ril_request_id = 15;</code>
       */
      public int getRilRequestId() {
        return rilRequestId_;
      }

      public static final int SRVCC_STATE_FIELD_NUMBER = 16;
      private int srvccState_;
      /**
       * <pre>
       * New SRVCC state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;</code>
       */
      public boolean hasSrvccState() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <pre>
       * New SRVCC state
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState getSrvccState() {
        com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.valueOf(srvccState_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_UNKNOWN : result;
      }

      public static final int IMS_COMMAND_FIELD_NUMBER = 17;
      private int imsCommand_;
      /**
       * <pre>
       * IMS command
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;</code>
       */
      public boolean hasImsCommand() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <pre>
       * IMS command
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand getImsCommand() {
        com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.valueOf(imsCommand_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_UNKNOWN : result;
      }

      public static final int REASON_INFO_FIELD_NUMBER = 18;
      private com.android.internal.telephony.TelephonyProto.ImsReasonInfo reasonInfo_;
      /**
       * <pre>
       * IMS Failure reason
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;</code>
       */
      public boolean hasReasonInfo() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <pre>
       * IMS Failure reason
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsReasonInfo getReasonInfo() {
        return reasonInfo_ == null ? com.android.internal.telephony.TelephonyProto.ImsReasonInfo.getDefaultInstance() : reasonInfo_;
      }
      /**
       * <pre>
       * IMS Failure reason
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsReasonInfoOrBuilder getReasonInfoOrBuilder() {
        return reasonInfo_ == null ? com.android.internal.telephony.TelephonyProto.ImsReasonInfo.getDefaultInstance() : reasonInfo_;
      }

      public static final int SRC_ACCESS_TECH_FIELD_NUMBER = 19;
      private int srcAccessTech_;
      /**
       * <pre>
       * Original access technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];</code>
       */
      public boolean hasSrcAccessTech() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <pre>
       * Original access technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];</code>
       */
      public com.android.internal.telephony.TelephonyProto.RadioAccessTechnology getSrcAccessTech() {
        com.android.internal.telephony.TelephonyProto.RadioAccessTechnology result = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.valueOf(srcAccessTech_);
        return result == null ? com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.UNKNOWN : result;
      }

      public static final int TARGET_ACCESS_TECH_FIELD_NUMBER = 20;
      private int targetAccessTech_;
      /**
       * <pre>
       * New access technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];</code>
       */
      public boolean hasTargetAccessTech() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <pre>
       * New access technology
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];</code>
       */
      public com.android.internal.telephony.TelephonyProto.RadioAccessTechnology getTargetAccessTech() {
        com.android.internal.telephony.TelephonyProto.RadioAccessTechnology result = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.valueOf(targetAccessTech_);
        return result == null ? com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.UNKNOWN : result;
      }

      public static final int NITZ_TIMESTAMP_MILLIS_FIELD_NUMBER = 21;
      private long nitzTimestampMillis_;
      /**
       * <pre>
       * NITZ time in milliseconds
       * </pre>
       *
       * <code>optional int64 nitz_timestamp_millis = 21;</code>
       */
      public boolean hasNitzTimestampMillis() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <pre>
       * NITZ time in milliseconds
       * </pre>
       *
       * <code>optional int64 nitz_timestamp_millis = 21;</code>
       */
      public long getNitzTimestampMillis() {
        return nitzTimestampMillis_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, type_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeEnum(2, delay_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeMessage(3, getSettings());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeMessage(4, getServiceState());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeMessage(5, getImsConnectionState());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeMessage(6, getImsCapabilities());
        }
        for (int i = 0; i < dataCalls_.size(); i++) {
          output.writeMessage(7, dataCalls_.get(i));
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          output.writeEnum(8, phoneState_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          output.writeEnum(9, callState_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          output.writeInt32(10, callIndex_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          output.writeInt32(11, mergedCallIndex_);
        }
        for (int i = 0; i < calls_.size(); i++) {
          output.writeMessage(12, calls_.get(i));
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          output.writeEnum(13, error_);
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          output.writeEnum(14, rilRequest_);
        }
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          output.writeInt32(15, rilRequestId_);
        }
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          output.writeEnum(16, srvccState_);
        }
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          output.writeEnum(17, imsCommand_);
        }
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          output.writeMessage(18, getReasonInfo());
        }
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          output.writeEnum(19, srcAccessTech_);
        }
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          output.writeEnum(20, targetAccessTech_);
        }
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          output.writeInt64(21, nitzTimestampMillis_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, type_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(2, delay_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getSettings());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, getServiceState());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, getImsConnectionState());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, getImsCapabilities());
        }
        for (int i = 0; i < dataCalls_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, dataCalls_.get(i));
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(8, phoneState_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(9, callState_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(10, callIndex_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(11, mergedCallIndex_);
        }
        for (int i = 0; i < calls_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(12, calls_.get(i));
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(13, error_);
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(14, rilRequest_);
        }
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(15, rilRequestId_);
        }
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(16, srvccState_);
        }
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(17, imsCommand_);
        }
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(18, getReasonInfo());
        }
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(19, srcAccessTech_);
        }
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(20, targetAccessTech_);
        }
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(21, nitzTimestampMillis_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event)) {
          return super.equals(obj);
        }
        com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event other = (com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event) obj;

        boolean result = true;
        result = result && (hasType() == other.hasType());
        if (hasType()) {
          result = result && type_ == other.type_;
        }
        result = result && (hasDelay() == other.hasDelay());
        if (hasDelay()) {
          result = result && delay_ == other.delay_;
        }
        result = result && (hasSettings() == other.hasSettings());
        if (hasSettings()) {
          result = result && getSettings()
              .equals(other.getSettings());
        }
        result = result && (hasServiceState() == other.hasServiceState());
        if (hasServiceState()) {
          result = result && getServiceState()
              .equals(other.getServiceState());
        }
        result = result && (hasImsConnectionState() == other.hasImsConnectionState());
        if (hasImsConnectionState()) {
          result = result && getImsConnectionState()
              .equals(other.getImsConnectionState());
        }
        result = result && (hasImsCapabilities() == other.hasImsCapabilities());
        if (hasImsCapabilities()) {
          result = result && getImsCapabilities()
              .equals(other.getImsCapabilities());
        }
        result = result && getDataCallsList()
            .equals(other.getDataCallsList());
        result = result && (hasPhoneState() == other.hasPhoneState());
        if (hasPhoneState()) {
          result = result && phoneState_ == other.phoneState_;
        }
        result = result && (hasCallState() == other.hasCallState());
        if (hasCallState()) {
          result = result && callState_ == other.callState_;
        }
        result = result && (hasCallIndex() == other.hasCallIndex());
        if (hasCallIndex()) {
          result = result && (getCallIndex()
              == other.getCallIndex());
        }
        result = result && (hasMergedCallIndex() == other.hasMergedCallIndex());
        if (hasMergedCallIndex()) {
          result = result && (getMergedCallIndex()
              == other.getMergedCallIndex());
        }
        result = result && getCallsList()
            .equals(other.getCallsList());
        result = result && (hasError() == other.hasError());
        if (hasError()) {
          result = result && error_ == other.error_;
        }
        result = result && (hasRilRequest() == other.hasRilRequest());
        if (hasRilRequest()) {
          result = result && rilRequest_ == other.rilRequest_;
        }
        result = result && (hasRilRequestId() == other.hasRilRequestId());
        if (hasRilRequestId()) {
          result = result && (getRilRequestId()
              == other.getRilRequestId());
        }
        result = result && (hasSrvccState() == other.hasSrvccState());
        if (hasSrvccState()) {
          result = result && srvccState_ == other.srvccState_;
        }
        result = result && (hasImsCommand() == other.hasImsCommand());
        if (hasImsCommand()) {
          result = result && imsCommand_ == other.imsCommand_;
        }
        result = result && (hasReasonInfo() == other.hasReasonInfo());
        if (hasReasonInfo()) {
          result = result && getReasonInfo()
              .equals(other.getReasonInfo());
        }
        result = result && (hasSrcAccessTech() == other.hasSrcAccessTech());
        if (hasSrcAccessTech()) {
          result = result && srcAccessTech_ == other.srcAccessTech_;
        }
        result = result && (hasTargetAccessTech() == other.hasTargetAccessTech());
        if (hasTargetAccessTech()) {
          result = result && targetAccessTech_ == other.targetAccessTech_;
        }
        result = result && (hasNitzTimestampMillis() == other.hasNitzTimestampMillis());
        if (hasNitzTimestampMillis()) {
          result = result && (getNitzTimestampMillis()
              == other.getNitzTimestampMillis());
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptorForType().hashCode();
        if (hasType()) {
          hash = (37 * hash) + TYPE_FIELD_NUMBER;
          hash = (53 * hash) + type_;
        }
        if (hasDelay()) {
          hash = (37 * hash) + DELAY_FIELD_NUMBER;
          hash = (53 * hash) + delay_;
        }
        if (hasSettings()) {
          hash = (37 * hash) + SETTINGS_FIELD_NUMBER;
          hash = (53 * hash) + getSettings().hashCode();
        }
        if (hasServiceState()) {
          hash = (37 * hash) + SERVICE_STATE_FIELD_NUMBER;
          hash = (53 * hash) + getServiceState().hashCode();
        }
        if (hasImsConnectionState()) {
          hash = (37 * hash) + IMS_CONNECTION_STATE_FIELD_NUMBER;
          hash = (53 * hash) + getImsConnectionState().hashCode();
        }
        if (hasImsCapabilities()) {
          hash = (37 * hash) + IMS_CAPABILITIES_FIELD_NUMBER;
          hash = (53 * hash) + getImsCapabilities().hashCode();
        }
        if (getDataCallsCount() > 0) {
          hash = (37 * hash) + DATA_CALLS_FIELD_NUMBER;
          hash = (53 * hash) + getDataCallsList().hashCode();
        }
        if (hasPhoneState()) {
          hash = (37 * hash) + PHONE_STATE_FIELD_NUMBER;
          hash = (53 * hash) + phoneState_;
        }
        if (hasCallState()) {
          hash = (37 * hash) + CALL_STATE_FIELD_NUMBER;
          hash = (53 * hash) + callState_;
        }
        if (hasCallIndex()) {
          hash = (37 * hash) + CALL_INDEX_FIELD_NUMBER;
          hash = (53 * hash) + getCallIndex();
        }
        if (hasMergedCallIndex()) {
          hash = (37 * hash) + MERGED_CALL_INDEX_FIELD_NUMBER;
          hash = (53 * hash) + getMergedCallIndex();
        }
        if (getCallsCount() > 0) {
          hash = (37 * hash) + CALLS_FIELD_NUMBER;
          hash = (53 * hash) + getCallsList().hashCode();
        }
        if (hasError()) {
          hash = (37 * hash) + ERROR_FIELD_NUMBER;
          hash = (53 * hash) + error_;
        }
        if (hasRilRequest()) {
          hash = (37 * hash) + RIL_REQUEST_FIELD_NUMBER;
          hash = (53 * hash) + rilRequest_;
        }
        if (hasRilRequestId()) {
          hash = (37 * hash) + RIL_REQUEST_ID_FIELD_NUMBER;
          hash = (53 * hash) + getRilRequestId();
        }
        if (hasSrvccState()) {
          hash = (37 * hash) + SRVCC_STATE_FIELD_NUMBER;
          hash = (53 * hash) + srvccState_;
        }
        if (hasImsCommand()) {
          hash = (37 * hash) + IMS_COMMAND_FIELD_NUMBER;
          hash = (53 * hash) + imsCommand_;
        }
        if (hasReasonInfo()) {
          hash = (37 * hash) + REASON_INFO_FIELD_NUMBER;
          hash = (53 * hash) + getReasonInfo().hashCode();
        }
        if (hasSrcAccessTech()) {
          hash = (37 * hash) + SRC_ACCESS_TECH_FIELD_NUMBER;
          hash = (53 * hash) + srcAccessTech_;
        }
        if (hasTargetAccessTech()) {
          hash = (37 * hash) + TARGET_ACCESS_TECH_FIELD_NUMBER;
          hash = (53 * hash) + targetAccessTech_;
        }
        if (hasNitzTimestampMillis()) {
          hash = (37 * hash) + NITZ_TIMESTAMP_MILLIS_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getNitzTimestampMillis());
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code clearcut.connectivity.TelephonyCallSession.Event}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:clearcut.connectivity.TelephonyCallSession.Event)
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.EventOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyCallSession_Event_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyCallSession_Event_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.class, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Builder.class);
        }

        // Construct using com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getSettingsFieldBuilder();
            getServiceStateFieldBuilder();
            getImsConnectionStateFieldBuilder();
            getImsCapabilitiesFieldBuilder();
            getDataCallsFieldBuilder();
            getCallsFieldBuilder();
            getReasonInfoFieldBuilder();
          }
        }
        public Builder clear() {
          super.clear();
          type_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          delay_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          if (settingsBuilder_ == null) {
            settings_ = null;
          } else {
            settingsBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          if (serviceStateBuilder_ == null) {
            serviceState_ = null;
          } else {
            serviceStateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          if (imsConnectionStateBuilder_ == null) {
            imsConnectionState_ = null;
          } else {
            imsConnectionStateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          if (imsCapabilitiesBuilder_ == null) {
            imsCapabilities_ = null;
          } else {
            imsCapabilitiesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000020);
          if (dataCallsBuilder_ == null) {
            dataCalls_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            dataCallsBuilder_.clear();
          }
          phoneState_ = 0;
          bitField0_ = (bitField0_ & ~0x00000080);
          callState_ = 0;
          bitField0_ = (bitField0_ & ~0x00000100);
          callIndex_ = 0;
          bitField0_ = (bitField0_ & ~0x00000200);
          mergedCallIndex_ = 0;
          bitField0_ = (bitField0_ & ~0x00000400);
          if (callsBuilder_ == null) {
            calls_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            callsBuilder_.clear();
          }
          error_ = 0;
          bitField0_ = (bitField0_ & ~0x00001000);
          rilRequest_ = 0;
          bitField0_ = (bitField0_ & ~0x00002000);
          rilRequestId_ = 0;
          bitField0_ = (bitField0_ & ~0x00004000);
          srvccState_ = 0;
          bitField0_ = (bitField0_ & ~0x00008000);
          imsCommand_ = 0;
          bitField0_ = (bitField0_ & ~0x00010000);
          if (reasonInfoBuilder_ == null) {
            reasonInfo_ = null;
          } else {
            reasonInfoBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00020000);
          srcAccessTech_ = -1;
          bitField0_ = (bitField0_ & ~0x00040000);
          targetAccessTech_ = -1;
          bitField0_ = (bitField0_ & ~0x00080000);
          nitzTimestampMillis_ = 0L;
          bitField0_ = (bitField0_ & ~0x00100000);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyCallSession_Event_descriptor;
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event getDefaultInstanceForType() {
          return com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.getDefaultInstance();
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event build() {
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event buildPartial() {
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event result = new com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.type_ = type_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.delay_ = delay_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          if (settingsBuilder_ == null) {
            result.settings_ = settings_;
          } else {
            result.settings_ = settingsBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          if (serviceStateBuilder_ == null) {
            result.serviceState_ = serviceState_;
          } else {
            result.serviceState_ = serviceStateBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          if (imsConnectionStateBuilder_ == null) {
            result.imsConnectionState_ = imsConnectionState_;
          } else {
            result.imsConnectionState_ = imsConnectionStateBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          if (imsCapabilitiesBuilder_ == null) {
            result.imsCapabilities_ = imsCapabilities_;
          } else {
            result.imsCapabilities_ = imsCapabilitiesBuilder_.build();
          }
          if (dataCallsBuilder_ == null) {
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
              dataCalls_ = java.util.Collections.unmodifiableList(dataCalls_);
              bitField0_ = (bitField0_ & ~0x00000040);
            }
            result.dataCalls_ = dataCalls_;
          } else {
            result.dataCalls_ = dataCallsBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
            to_bitField0_ |= 0x00000040;
          }
          result.phoneState_ = phoneState_;
          if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
            to_bitField0_ |= 0x00000080;
          }
          result.callState_ = callState_;
          if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
            to_bitField0_ |= 0x00000100;
          }
          result.callIndex_ = callIndex_;
          if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
            to_bitField0_ |= 0x00000200;
          }
          result.mergedCallIndex_ = mergedCallIndex_;
          if (callsBuilder_ == null) {
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
              calls_ = java.util.Collections.unmodifiableList(calls_);
              bitField0_ = (bitField0_ & ~0x00000800);
            }
            result.calls_ = calls_;
          } else {
            result.calls_ = callsBuilder_.build();
          }
          if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
            to_bitField0_ |= 0x00000400;
          }
          result.error_ = error_;
          if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
            to_bitField0_ |= 0x00000800;
          }
          result.rilRequest_ = rilRequest_;
          if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
            to_bitField0_ |= 0x00001000;
          }
          result.rilRequestId_ = rilRequestId_;
          if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
            to_bitField0_ |= 0x00002000;
          }
          result.srvccState_ = srvccState_;
          if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
            to_bitField0_ |= 0x00004000;
          }
          result.imsCommand_ = imsCommand_;
          if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
            to_bitField0_ |= 0x00008000;
          }
          if (reasonInfoBuilder_ == null) {
            result.reasonInfo_ = reasonInfo_;
          } else {
            result.reasonInfo_ = reasonInfoBuilder_.build();
          }
          if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
            to_bitField0_ |= 0x00010000;
          }
          result.srcAccessTech_ = srcAccessTech_;
          if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
            to_bitField0_ |= 0x00020000;
          }
          result.targetAccessTech_ = targetAccessTech_;
          if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
            to_bitField0_ |= 0x00040000;
          }
          result.nitzTimestampMillis_ = nitzTimestampMillis_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event) {
            return mergeFrom((com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event other) {
          if (other == com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.getDefaultInstance()) return this;
          if (other.hasType()) {
            setType(other.getType());
          }
          if (other.hasDelay()) {
            setDelay(other.getDelay());
          }
          if (other.hasSettings()) {
            mergeSettings(other.getSettings());
          }
          if (other.hasServiceState()) {
            mergeServiceState(other.getServiceState());
          }
          if (other.hasImsConnectionState()) {
            mergeImsConnectionState(other.getImsConnectionState());
          }
          if (other.hasImsCapabilities()) {
            mergeImsCapabilities(other.getImsCapabilities());
          }
          if (dataCallsBuilder_ == null) {
            if (!other.dataCalls_.isEmpty()) {
              if (dataCalls_.isEmpty()) {
                dataCalls_ = other.dataCalls_;
                bitField0_ = (bitField0_ & ~0x00000040);
              } else {
                ensureDataCallsIsMutable();
                dataCalls_.addAll(other.dataCalls_);
              }
              onChanged();
            }
          } else {
            if (!other.dataCalls_.isEmpty()) {
              if (dataCallsBuilder_.isEmpty()) {
                dataCallsBuilder_.dispose();
                dataCallsBuilder_ = null;
                dataCalls_ = other.dataCalls_;
                bitField0_ = (bitField0_ & ~0x00000040);
                dataCallsBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getDataCallsFieldBuilder() : null;
              } else {
                dataCallsBuilder_.addAllMessages(other.dataCalls_);
              }
            }
          }
          if (other.hasPhoneState()) {
            setPhoneState(other.getPhoneState());
          }
          if (other.hasCallState()) {
            setCallState(other.getCallState());
          }
          if (other.hasCallIndex()) {
            setCallIndex(other.getCallIndex());
          }
          if (other.hasMergedCallIndex()) {
            setMergedCallIndex(other.getMergedCallIndex());
          }
          if (callsBuilder_ == null) {
            if (!other.calls_.isEmpty()) {
              if (calls_.isEmpty()) {
                calls_ = other.calls_;
                bitField0_ = (bitField0_ & ~0x00000800);
              } else {
                ensureCallsIsMutable();
                calls_.addAll(other.calls_);
              }
              onChanged();
            }
          } else {
            if (!other.calls_.isEmpty()) {
              if (callsBuilder_.isEmpty()) {
                callsBuilder_.dispose();
                callsBuilder_ = null;
                calls_ = other.calls_;
                bitField0_ = (bitField0_ & ~0x00000800);
                callsBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getCallsFieldBuilder() : null;
              } else {
                callsBuilder_.addAllMessages(other.calls_);
              }
            }
          }
          if (other.hasError()) {
            setError(other.getError());
          }
          if (other.hasRilRequest()) {
            setRilRequest(other.getRilRequest());
          }
          if (other.hasRilRequestId()) {
            setRilRequestId(other.getRilRequestId());
          }
          if (other.hasSrvccState()) {
            setSrvccState(other.getSrvccState());
          }
          if (other.hasImsCommand()) {
            setImsCommand(other.getImsCommand());
          }
          if (other.hasReasonInfo()) {
            mergeReasonInfo(other.getReasonInfo());
          }
          if (other.hasSrcAccessTech()) {
            setSrcAccessTech(other.getSrcAccessTech());
          }
          if (other.hasTargetAccessTech()) {
            setTargetAccessTech(other.getTargetAccessTech());
          }
          if (other.hasNitzTimestampMillis()) {
            setNitzTimestampMillis(other.getNitzTimestampMillis());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int type_ = 0;
        /**
         * <pre>
         * Event type
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;</code>
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <pre>
         * Event type
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type getType() {
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.valueOf(type_);
          return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type.EVENT_UNKNOWN : result;
        }
        /**
         * <pre>
         * Event type
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;</code>
         */
        public Builder setType(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Type value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          type_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Event type
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;</code>
         */
        public Builder clearType() {
          bitField0_ = (bitField0_ & ~0x00000001);
          type_ = 0;
          onChanged();
          return this;
        }

        private int delay_ = 0;
        /**
         * <pre>
         * Time since previous event
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
         */
        public boolean hasDelay() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <pre>
         * Time since previous event
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TimeInterval getDelay() {
          com.android.internal.telephony.TelephonyProto.TimeInterval result = com.android.internal.telephony.TelephonyProto.TimeInterval.valueOf(delay_);
          return result == null ? com.android.internal.telephony.TelephonyProto.TimeInterval.TI_UNKNOWN : result;
        }
        /**
         * <pre>
         * Time since previous event
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
         */
        public Builder setDelay(com.android.internal.telephony.TelephonyProto.TimeInterval value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000002;
          delay_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Time since previous event
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
         */
        public Builder clearDelay() {
          bitField0_ = (bitField0_ & ~0x00000002);
          delay_ = 0;
          onChanged();
          return this;
        }

        private com.android.internal.telephony.TelephonyProto.TelephonySettings settings_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.TelephonySettings, com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder, com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder> settingsBuilder_;
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public boolean hasSettings() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonySettings getSettings() {
          if (settingsBuilder_ == null) {
            return settings_ == null ? com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance() : settings_;
          } else {
            return settingsBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public Builder setSettings(com.android.internal.telephony.TelephonyProto.TelephonySettings value) {
          if (settingsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            settings_ = value;
            onChanged();
          } else {
            settingsBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public Builder setSettings(
            com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder builderForValue) {
          if (settingsBuilder_ == null) {
            settings_ = builderForValue.build();
            onChanged();
          } else {
            settingsBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public Builder mergeSettings(com.android.internal.telephony.TelephonyProto.TelephonySettings value) {
          if (settingsBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004) &&
                settings_ != null &&
                settings_ != com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance()) {
              settings_ =
                com.android.internal.telephony.TelephonyProto.TelephonySettings.newBuilder(settings_).mergeFrom(value).buildPartial();
            } else {
              settings_ = value;
            }
            onChanged();
          } else {
            settingsBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public Builder clearSettings() {
          if (settingsBuilder_ == null) {
            settings_ = null;
            onChanged();
          } else {
            settingsBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder getSettingsBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getSettingsFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder getSettingsOrBuilder() {
          if (settingsBuilder_ != null) {
            return settingsBuilder_.getMessageOrBuilder();
          } else {
            return settings_ == null ?
                com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance() : settings_;
          }
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.TelephonySettings, com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder, com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder> 
            getSettingsFieldBuilder() {
          if (settingsBuilder_ == null) {
            settingsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.android.internal.telephony.TelephonyProto.TelephonySettings, com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder, com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder>(
                    getSettings(),
                    getParentForChildren(),
                    isClean());
            settings_ = null;
          }
          return settingsBuilder_;
        }

        private com.android.internal.telephony.TelephonyProto.TelephonyServiceState serviceState_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.TelephonyServiceState, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder, com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder> serviceStateBuilder_;
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public boolean hasServiceState() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyServiceState getServiceState() {
          if (serviceStateBuilder_ == null) {
            return serviceState_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance() : serviceState_;
          } else {
            return serviceStateBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public Builder setServiceState(com.android.internal.telephony.TelephonyProto.TelephonyServiceState value) {
          if (serviceStateBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            serviceState_ = value;
            onChanged();
          } else {
            serviceStateBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public Builder setServiceState(
            com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder builderForValue) {
          if (serviceStateBuilder_ == null) {
            serviceState_ = builderForValue.build();
            onChanged();
          } else {
            serviceStateBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public Builder mergeServiceState(com.android.internal.telephony.TelephonyProto.TelephonyServiceState value) {
          if (serviceStateBuilder_ == null) {
            if (((bitField0_ & 0x00000008) == 0x00000008) &&
                serviceState_ != null &&
                serviceState_ != com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance()) {
              serviceState_ =
                com.android.internal.telephony.TelephonyProto.TelephonyServiceState.newBuilder(serviceState_).mergeFrom(value).buildPartial();
            } else {
              serviceState_ = value;
            }
            onChanged();
          } else {
            serviceStateBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public Builder clearServiceState() {
          if (serviceStateBuilder_ == null) {
            serviceState_ = null;
            onChanged();
          } else {
            serviceStateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder getServiceStateBuilder() {
          bitField0_ |= 0x00000008;
          onChanged();
          return getServiceStateFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder getServiceStateOrBuilder() {
          if (serviceStateBuilder_ != null) {
            return serviceStateBuilder_.getMessageOrBuilder();
          } else {
            return serviceState_ == null ?
                com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance() : serviceState_;
          }
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.TelephonyServiceState, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder, com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder> 
            getServiceStateFieldBuilder() {
          if (serviceStateBuilder_ == null) {
            serviceStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.android.internal.telephony.TelephonyProto.TelephonyServiceState, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder, com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder>(
                    getServiceState(),
                    getParentForChildren(),
                    isClean());
            serviceState_ = null;
          }
          return serviceStateBuilder_;
        }

        private com.android.internal.telephony.TelephonyProto.ImsConnectionState imsConnectionState_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.ImsConnectionState, com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder, com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder> imsConnectionStateBuilder_;
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public boolean hasImsConnectionState() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public com.android.internal.telephony.TelephonyProto.ImsConnectionState getImsConnectionState() {
          if (imsConnectionStateBuilder_ == null) {
            return imsConnectionState_ == null ? com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance() : imsConnectionState_;
          } else {
            return imsConnectionStateBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public Builder setImsConnectionState(com.android.internal.telephony.TelephonyProto.ImsConnectionState value) {
          if (imsConnectionStateBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            imsConnectionState_ = value;
            onChanged();
          } else {
            imsConnectionStateBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public Builder setImsConnectionState(
            com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder builderForValue) {
          if (imsConnectionStateBuilder_ == null) {
            imsConnectionState_ = builderForValue.build();
            onChanged();
          } else {
            imsConnectionStateBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public Builder mergeImsConnectionState(com.android.internal.telephony.TelephonyProto.ImsConnectionState value) {
          if (imsConnectionStateBuilder_ == null) {
            if (((bitField0_ & 0x00000010) == 0x00000010) &&
                imsConnectionState_ != null &&
                imsConnectionState_ != com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance()) {
              imsConnectionState_ =
                com.android.internal.telephony.TelephonyProto.ImsConnectionState.newBuilder(imsConnectionState_).mergeFrom(value).buildPartial();
            } else {
              imsConnectionState_ = value;
            }
            onChanged();
          } else {
            imsConnectionStateBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public Builder clearImsConnectionState() {
          if (imsConnectionStateBuilder_ == null) {
            imsConnectionState_ = null;
            onChanged();
          } else {
            imsConnectionStateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder getImsConnectionStateBuilder() {
          bitField0_ |= 0x00000010;
          onChanged();
          return getImsConnectionStateFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder getImsConnectionStateOrBuilder() {
          if (imsConnectionStateBuilder_ != null) {
            return imsConnectionStateBuilder_.getMessageOrBuilder();
          } else {
            return imsConnectionState_ == null ?
                com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance() : imsConnectionState_;
          }
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.ImsConnectionState, com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder, com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder> 
            getImsConnectionStateFieldBuilder() {
          if (imsConnectionStateBuilder_ == null) {
            imsConnectionStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.android.internal.telephony.TelephonyProto.ImsConnectionState, com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder, com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder>(
                    getImsConnectionState(),
                    getParentForChildren(),
                    isClean());
            imsConnectionState_ = null;
          }
          return imsConnectionStateBuilder_;
        }

        private com.android.internal.telephony.TelephonyProto.ImsCapabilities imsCapabilities_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.ImsCapabilities, com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder, com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder> imsCapabilitiesBuilder_;
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public boolean hasImsCapabilities() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public com.android.internal.telephony.TelephonyProto.ImsCapabilities getImsCapabilities() {
          if (imsCapabilitiesBuilder_ == null) {
            return imsCapabilities_ == null ? com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance() : imsCapabilities_;
          } else {
            return imsCapabilitiesBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public Builder setImsCapabilities(com.android.internal.telephony.TelephonyProto.ImsCapabilities value) {
          if (imsCapabilitiesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            imsCapabilities_ = value;
            onChanged();
          } else {
            imsCapabilitiesBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public Builder setImsCapabilities(
            com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder builderForValue) {
          if (imsCapabilitiesBuilder_ == null) {
            imsCapabilities_ = builderForValue.build();
            onChanged();
          } else {
            imsCapabilitiesBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public Builder mergeImsCapabilities(com.android.internal.telephony.TelephonyProto.ImsCapabilities value) {
          if (imsCapabilitiesBuilder_ == null) {
            if (((bitField0_ & 0x00000020) == 0x00000020) &&
                imsCapabilities_ != null &&
                imsCapabilities_ != com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance()) {
              imsCapabilities_ =
                com.android.internal.telephony.TelephonyProto.ImsCapabilities.newBuilder(imsCapabilities_).mergeFrom(value).buildPartial();
            } else {
              imsCapabilities_ = value;
            }
            onChanged();
          } else {
            imsCapabilitiesBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public Builder clearImsCapabilities() {
          if (imsCapabilitiesBuilder_ == null) {
            imsCapabilities_ = null;
            onChanged();
          } else {
            imsCapabilitiesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder getImsCapabilitiesBuilder() {
          bitField0_ |= 0x00000020;
          onChanged();
          return getImsCapabilitiesFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder getImsCapabilitiesOrBuilder() {
          if (imsCapabilitiesBuilder_ != null) {
            return imsCapabilitiesBuilder_.getMessageOrBuilder();
          } else {
            return imsCapabilities_ == null ?
                com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance() : imsCapabilities_;
          }
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.ImsCapabilities, com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder, com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder> 
            getImsCapabilitiesFieldBuilder() {
          if (imsCapabilitiesBuilder_ == null) {
            imsCapabilitiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.android.internal.telephony.TelephonyProto.ImsCapabilities, com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder, com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder>(
                    getImsCapabilities(),
                    getParentForChildren(),
                    isClean());
            imsCapabilities_ = null;
          }
          return imsCapabilitiesBuilder_;
        }

        private java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall> dataCalls_ =
          java.util.Collections.emptyList();
        private void ensureDataCallsIsMutable() {
          if (!((bitField0_ & 0x00000040) == 0x00000040)) {
            dataCalls_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.RilDataCall>(dataCalls_);
            bitField0_ |= 0x00000040;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.RilDataCall, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder, com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> dataCallsBuilder_;

        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall> getDataCallsList() {
          if (dataCallsBuilder_ == null) {
            return java.util.Collections.unmodifiableList(dataCalls_);
          } else {
            return dataCallsBuilder_.getMessageList();
          }
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public int getDataCallsCount() {
          if (dataCallsBuilder_ == null) {
            return dataCalls_.size();
          } else {
            return dataCallsBuilder_.getCount();
          }
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public com.android.internal.telephony.TelephonyProto.RilDataCall getDataCalls(int index) {
          if (dataCallsBuilder_ == null) {
            return dataCalls_.get(index);
          } else {
            return dataCallsBuilder_.getMessage(index);
          }
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder setDataCalls(
            int index, com.android.internal.telephony.TelephonyProto.RilDataCall value) {
          if (dataCallsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureDataCallsIsMutable();
            dataCalls_.set(index, value);
            onChanged();
          } else {
            dataCallsBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder setDataCalls(
            int index, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder builderForValue) {
          if (dataCallsBuilder_ == null) {
            ensureDataCallsIsMutable();
            dataCalls_.set(index, builderForValue.build());
            onChanged();
          } else {
            dataCallsBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder addDataCalls(com.android.internal.telephony.TelephonyProto.RilDataCall value) {
          if (dataCallsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureDataCallsIsMutable();
            dataCalls_.add(value);
            onChanged();
          } else {
            dataCallsBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder addDataCalls(
            int index, com.android.internal.telephony.TelephonyProto.RilDataCall value) {
          if (dataCallsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureDataCallsIsMutable();
            dataCalls_.add(index, value);
            onChanged();
          } else {
            dataCallsBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder addDataCalls(
            com.android.internal.telephony.TelephonyProto.RilDataCall.Builder builderForValue) {
          if (dataCallsBuilder_ == null) {
            ensureDataCallsIsMutable();
            dataCalls_.add(builderForValue.build());
            onChanged();
          } else {
            dataCallsBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder addDataCalls(
            int index, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder builderForValue) {
          if (dataCallsBuilder_ == null) {
            ensureDataCallsIsMutable();
            dataCalls_.add(index, builderForValue.build());
            onChanged();
          } else {
            dataCallsBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder addAllDataCalls(
            java.lang.Iterable<? extends com.android.internal.telephony.TelephonyProto.RilDataCall> values) {
          if (dataCallsBuilder_ == null) {
            ensureDataCallsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, dataCalls_);
            onChanged();
          } else {
            dataCallsBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder clearDataCalls() {
          if (dataCallsBuilder_ == null) {
            dataCalls_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000040);
            onChanged();
          } else {
            dataCallsBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder removeDataCalls(int index) {
          if (dataCallsBuilder_ == null) {
            ensureDataCallsIsMutable();
            dataCalls_.remove(index);
            onChanged();
          } else {
            dataCallsBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public com.android.internal.telephony.TelephonyProto.RilDataCall.Builder getDataCallsBuilder(
            int index) {
          return getDataCallsFieldBuilder().getBuilder(index);
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder getDataCallsOrBuilder(
            int index) {
          if (dataCallsBuilder_ == null) {
            return dataCalls_.get(index);  } else {
            return dataCallsBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public java.util.List<? extends com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> 
             getDataCallsOrBuilderList() {
          if (dataCallsBuilder_ != null) {
            return dataCallsBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(dataCalls_);
          }
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public com.android.internal.telephony.TelephonyProto.RilDataCall.Builder addDataCallsBuilder() {
          return getDataCallsFieldBuilder().addBuilder(
              com.android.internal.telephony.TelephonyProto.RilDataCall.getDefaultInstance());
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public com.android.internal.telephony.TelephonyProto.RilDataCall.Builder addDataCallsBuilder(
            int index) {
          return getDataCallsFieldBuilder().addBuilder(
              index, com.android.internal.telephony.TelephonyProto.RilDataCall.getDefaultInstance());
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall.Builder> 
             getDataCallsBuilderList() {
          return getDataCallsFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.RilDataCall, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder, com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> 
            getDataCallsFieldBuilder() {
          if (dataCallsBuilder_ == null) {
            dataCallsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                com.android.internal.telephony.TelephonyProto.RilDataCall, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder, com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder>(
                    dataCalls_,
                    ((bitField0_ & 0x00000040) == 0x00000040),
                    getParentForChildren(),
                    isClean());
            dataCalls_ = null;
          }
          return dataCallsBuilder_;
        }

        private int phoneState_ = 0;
        /**
         * <pre>
         * New state
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;</code>
         */
        public boolean hasPhoneState() {
          return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        /**
         * <pre>
         * New state
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState getPhoneState() {
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState.valueOf(phoneState_);
          return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState.STATE_UNKNOWN : result;
        }
        /**
         * <pre>
         * New state
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;</code>
         */
        public Builder setPhoneState(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.PhoneState value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000080;
          phoneState_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * New state
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;</code>
         */
        public Builder clearPhoneState() {
          bitField0_ = (bitField0_ & ~0x00000080);
          phoneState_ = 0;
          onChanged();
          return this;
        }

        private int callState_ = 0;
        /**
         * <pre>
         * New state
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;</code>
         */
        public boolean hasCallState() {
          return ((bitField0_ & 0x00000100) == 0x00000100);
        }
        /**
         * <pre>
         * New state
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState getCallState() {
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.valueOf(callState_);
          return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN : result;
        }
        /**
         * <pre>
         * New state
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;</code>
         */
        public Builder setCallState(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.CallState value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000100;
          callState_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * New state
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;</code>
         */
        public Builder clearCallState() {
          bitField0_ = (bitField0_ & ~0x00000100);
          callState_ = 0;
          onChanged();
          return this;
        }

        private int callIndex_ ;
        /**
         * <pre>
         * CS or IMS Voice call index
         * </pre>
         *
         * <code>optional int32 call_index = 10;</code>
         */
        public boolean hasCallIndex() {
          return ((bitField0_ & 0x00000200) == 0x00000200);
        }
        /**
         * <pre>
         * CS or IMS Voice call index
         * </pre>
         *
         * <code>optional int32 call_index = 10;</code>
         */
        public int getCallIndex() {
          return callIndex_;
        }
        /**
         * <pre>
         * CS or IMS Voice call index
         * </pre>
         *
         * <code>optional int32 call_index = 10;</code>
         */
        public Builder setCallIndex(int value) {
          bitField0_ |= 0x00000200;
          callIndex_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * CS or IMS Voice call index
         * </pre>
         *
         * <code>optional int32 call_index = 10;</code>
         */
        public Builder clearCallIndex() {
          bitField0_ = (bitField0_ & ~0x00000200);
          callIndex_ = 0;
          onChanged();
          return this;
        }

        private int mergedCallIndex_ ;
        /**
         * <pre>
         * New merged call
         * </pre>
         *
         * <code>optional int32 merged_call_index = 11;</code>
         */
        public boolean hasMergedCallIndex() {
          return ((bitField0_ & 0x00000400) == 0x00000400);
        }
        /**
         * <pre>
         * New merged call
         * </pre>
         *
         * <code>optional int32 merged_call_index = 11;</code>
         */
        public int getMergedCallIndex() {
          return mergedCallIndex_;
        }
        /**
         * <pre>
         * New merged call
         * </pre>
         *
         * <code>optional int32 merged_call_index = 11;</code>
         */
        public Builder setMergedCallIndex(int value) {
          bitField0_ |= 0x00000400;
          mergedCallIndex_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * New merged call
         * </pre>
         *
         * <code>optional int32 merged_call_index = 11;</code>
         */
        public Builder clearMergedCallIndex() {
          bitField0_ = (bitField0_ & ~0x00000400);
          mergedCallIndex_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall> calls_ =
          java.util.Collections.emptyList();
        private void ensureCallsIsMutable() {
          if (!((bitField0_ & 0x00000800) == 0x00000800)) {
            calls_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall>(calls_);
            bitField0_ |= 0x00000800;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Builder, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCallOrBuilder> callsBuilder_;

        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall> getCallsList() {
          if (callsBuilder_ == null) {
            return java.util.Collections.unmodifiableList(calls_);
          } else {
            return callsBuilder_.getMessageList();
          }
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public int getCallsCount() {
          if (callsBuilder_ == null) {
            return calls_.size();
          } else {
            return callsBuilder_.getCount();
          }
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall getCalls(int index) {
          if (callsBuilder_ == null) {
            return calls_.get(index);
          } else {
            return callsBuilder_.getMessage(index);
          }
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public Builder setCalls(
            int index, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall value) {
          if (callsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureCallsIsMutable();
            calls_.set(index, value);
            onChanged();
          } else {
            callsBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public Builder setCalls(
            int index, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Builder builderForValue) {
          if (callsBuilder_ == null) {
            ensureCallsIsMutable();
            calls_.set(index, builderForValue.build());
            onChanged();
          } else {
            callsBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public Builder addCalls(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall value) {
          if (callsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureCallsIsMutable();
            calls_.add(value);
            onChanged();
          } else {
            callsBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public Builder addCalls(
            int index, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall value) {
          if (callsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureCallsIsMutable();
            calls_.add(index, value);
            onChanged();
          } else {
            callsBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public Builder addCalls(
            com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Builder builderForValue) {
          if (callsBuilder_ == null) {
            ensureCallsIsMutable();
            calls_.add(builderForValue.build());
            onChanged();
          } else {
            callsBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public Builder addCalls(
            int index, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Builder builderForValue) {
          if (callsBuilder_ == null) {
            ensureCallsIsMutable();
            calls_.add(index, builderForValue.build());
            onChanged();
          } else {
            callsBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public Builder addAllCalls(
            java.lang.Iterable<? extends com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall> values) {
          if (callsBuilder_ == null) {
            ensureCallsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, calls_);
            onChanged();
          } else {
            callsBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public Builder clearCalls() {
          if (callsBuilder_ == null) {
            calls_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000800);
            onChanged();
          } else {
            callsBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public Builder removeCalls(int index) {
          if (callsBuilder_ == null) {
            ensureCallsIsMutable();
            calls_.remove(index);
            onChanged();
          } else {
            callsBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Builder getCallsBuilder(
            int index) {
          return getCallsFieldBuilder().getBuilder(index);
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCallOrBuilder getCallsOrBuilder(
            int index) {
          if (callsBuilder_ == null) {
            return calls_.get(index);  } else {
            return callsBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public java.util.List<? extends com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCallOrBuilder> 
             getCallsOrBuilderList() {
          if (callsBuilder_ != null) {
            return callsBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(calls_);
          }
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Builder addCallsBuilder() {
          return getCallsFieldBuilder().addBuilder(
              com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.getDefaultInstance());
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Builder addCallsBuilder(
            int index) {
          return getCallsFieldBuilder().addBuilder(
              index, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.getDefaultInstance());
        }
        /**
         * <pre>
         * Active CS Voice calls
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;</code>
         */
        public java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Builder> 
             getCallsBuilderList() {
          return getCallsFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Builder, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCallOrBuilder> 
            getCallsFieldBuilder() {
          if (callsBuilder_ == null) {
            callsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCall.Builder, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilCallOrBuilder>(
                    calls_,
                    ((bitField0_ & 0x00000800) == 0x00000800),
                    getParentForChildren(),
                    isClean());
            calls_ = null;
          }
          return callsBuilder_;
        }

        private int error_ = 0;
        /**
         * <pre>
         * RIL error code
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RilErrno error = 13;</code>
         */
        public boolean hasError() {
          return ((bitField0_ & 0x00001000) == 0x00001000);
        }
        /**
         * <pre>
         * RIL error code
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RilErrno error = 13;</code>
         */
        public com.android.internal.telephony.TelephonyProto.RilErrno getError() {
          com.android.internal.telephony.TelephonyProto.RilErrno result = com.android.internal.telephony.TelephonyProto.RilErrno.valueOf(error_);
          return result == null ? com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_UNKNOWN : result;
        }
        /**
         * <pre>
         * RIL error code
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RilErrno error = 13;</code>
         */
        public Builder setError(com.android.internal.telephony.TelephonyProto.RilErrno value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00001000;
          error_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * RIL error code
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RilErrno error = 13;</code>
         */
        public Builder clearError() {
          bitField0_ = (bitField0_ & ~0x00001000);
          error_ = 0;
          onChanged();
          return this;
        }

        private int rilRequest_ = 0;
        /**
         * <pre>
         * RIL request
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;</code>
         */
        public boolean hasRilRequest() {
          return ((bitField0_ & 0x00002000) == 0x00002000);
        }
        /**
         * <pre>
         * RIL request
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest getRilRequest() {
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest.valueOf(rilRequest_);
          return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_UNKNOWN : result;
        }
        /**
         * <pre>
         * RIL request
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;</code>
         */
        public Builder setRilRequest(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilRequest value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00002000;
          rilRequest_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * RIL request
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;</code>
         */
        public Builder clearRilRequest() {
          bitField0_ = (bitField0_ & ~0x00002000);
          rilRequest_ = 0;
          onChanged();
          return this;
        }

        private int rilRequestId_ ;
        /**
         * <pre>
         * Numeric ID
         * </pre>
         *
         * <code>optional int32 ril_request_id = 15;</code>
         */
        public boolean hasRilRequestId() {
          return ((bitField0_ & 0x00004000) == 0x00004000);
        }
        /**
         * <pre>
         * Numeric ID
         * </pre>
         *
         * <code>optional int32 ril_request_id = 15;</code>
         */
        public int getRilRequestId() {
          return rilRequestId_;
        }
        /**
         * <pre>
         * Numeric ID
         * </pre>
         *
         * <code>optional int32 ril_request_id = 15;</code>
         */
        public Builder setRilRequestId(int value) {
          bitField0_ |= 0x00004000;
          rilRequestId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Numeric ID
         * </pre>
         *
         * <code>optional int32 ril_request_id = 15;</code>
         */
        public Builder clearRilRequestId() {
          bitField0_ = (bitField0_ & ~0x00004000);
          rilRequestId_ = 0;
          onChanged();
          return this;
        }

        private int srvccState_ = 0;
        /**
         * <pre>
         * New SRVCC state
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;</code>
         */
        public boolean hasSrvccState() {
          return ((bitField0_ & 0x00008000) == 0x00008000);
        }
        /**
         * <pre>
         * New SRVCC state
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState getSrvccState() {
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.valueOf(srvccState_);
          return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_UNKNOWN : result;
        }
        /**
         * <pre>
         * New SRVCC state
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;</code>
         */
        public Builder setSrvccState(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.RilSrvccState value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00008000;
          srvccState_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * New SRVCC state
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;</code>
         */
        public Builder clearSrvccState() {
          bitField0_ = (bitField0_ & ~0x00008000);
          srvccState_ = 0;
          onChanged();
          return this;
        }

        private int imsCommand_ = 0;
        /**
         * <pre>
         * IMS command
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;</code>
         */
        public boolean hasImsCommand() {
          return ((bitField0_ & 0x00010000) == 0x00010000);
        }
        /**
         * <pre>
         * IMS command
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand getImsCommand() {
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand result = com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.valueOf(imsCommand_);
          return result == null ? com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_UNKNOWN : result;
        }
        /**
         * <pre>
         * IMS command
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;</code>
         */
        public Builder setImsCommand(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.ImsCommand value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00010000;
          imsCommand_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * IMS command
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;</code>
         */
        public Builder clearImsCommand() {
          bitField0_ = (bitField0_ & ~0x00010000);
          imsCommand_ = 0;
          onChanged();
          return this;
        }

        private com.android.internal.telephony.TelephonyProto.ImsReasonInfo reasonInfo_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.ImsReasonInfo, com.android.internal.telephony.TelephonyProto.ImsReasonInfo.Builder, com.android.internal.telephony.TelephonyProto.ImsReasonInfoOrBuilder> reasonInfoBuilder_;
        /**
         * <pre>
         * IMS Failure reason
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;</code>
         */
        public boolean hasReasonInfo() {
          return ((bitField0_ & 0x00020000) == 0x00020000);
        }
        /**
         * <pre>
         * IMS Failure reason
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;</code>
         */
        public com.android.internal.telephony.TelephonyProto.ImsReasonInfo getReasonInfo() {
          if (reasonInfoBuilder_ == null) {
            return reasonInfo_ == null ? com.android.internal.telephony.TelephonyProto.ImsReasonInfo.getDefaultInstance() : reasonInfo_;
          } else {
            return reasonInfoBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * IMS Failure reason
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;</code>
         */
        public Builder setReasonInfo(com.android.internal.telephony.TelephonyProto.ImsReasonInfo value) {
          if (reasonInfoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            reasonInfo_ = value;
            onChanged();
          } else {
            reasonInfoBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00020000;
          return this;
        }
        /**
         * <pre>
         * IMS Failure reason
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;</code>
         */
        public Builder setReasonInfo(
            com.android.internal.telephony.TelephonyProto.ImsReasonInfo.Builder builderForValue) {
          if (reasonInfoBuilder_ == null) {
            reasonInfo_ = builderForValue.build();
            onChanged();
          } else {
            reasonInfoBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00020000;
          return this;
        }
        /**
         * <pre>
         * IMS Failure reason
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;</code>
         */
        public Builder mergeReasonInfo(com.android.internal.telephony.TelephonyProto.ImsReasonInfo value) {
          if (reasonInfoBuilder_ == null) {
            if (((bitField0_ & 0x00020000) == 0x00020000) &&
                reasonInfo_ != null &&
                reasonInfo_ != com.android.internal.telephony.TelephonyProto.ImsReasonInfo.getDefaultInstance()) {
              reasonInfo_ =
                com.android.internal.telephony.TelephonyProto.ImsReasonInfo.newBuilder(reasonInfo_).mergeFrom(value).buildPartial();
            } else {
              reasonInfo_ = value;
            }
            onChanged();
          } else {
            reasonInfoBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00020000;
          return this;
        }
        /**
         * <pre>
         * IMS Failure reason
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;</code>
         */
        public Builder clearReasonInfo() {
          if (reasonInfoBuilder_ == null) {
            reasonInfo_ = null;
            onChanged();
          } else {
            reasonInfoBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00020000);
          return this;
        }
        /**
         * <pre>
         * IMS Failure reason
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;</code>
         */
        public com.android.internal.telephony.TelephonyProto.ImsReasonInfo.Builder getReasonInfoBuilder() {
          bitField0_ |= 0x00020000;
          onChanged();
          return getReasonInfoFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * IMS Failure reason
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;</code>
         */
        public com.android.internal.telephony.TelephonyProto.ImsReasonInfoOrBuilder getReasonInfoOrBuilder() {
          if (reasonInfoBuilder_ != null) {
            return reasonInfoBuilder_.getMessageOrBuilder();
          } else {
            return reasonInfo_ == null ?
                com.android.internal.telephony.TelephonyProto.ImsReasonInfo.getDefaultInstance() : reasonInfo_;
          }
        }
        /**
         * <pre>
         * IMS Failure reason
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.ImsReasonInfo, com.android.internal.telephony.TelephonyProto.ImsReasonInfo.Builder, com.android.internal.telephony.TelephonyProto.ImsReasonInfoOrBuilder> 
            getReasonInfoFieldBuilder() {
          if (reasonInfoBuilder_ == null) {
            reasonInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.android.internal.telephony.TelephonyProto.ImsReasonInfo, com.android.internal.telephony.TelephonyProto.ImsReasonInfo.Builder, com.android.internal.telephony.TelephonyProto.ImsReasonInfoOrBuilder>(
                    getReasonInfo(),
                    getParentForChildren(),
                    isClean());
            reasonInfo_ = null;
          }
          return reasonInfoBuilder_;
        }

        private int srcAccessTech_ = -1;
        /**
         * <pre>
         * Original access technology
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];</code>
         */
        public boolean hasSrcAccessTech() {
          return ((bitField0_ & 0x00040000) == 0x00040000);
        }
        /**
         * <pre>
         * Original access technology
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];</code>
         */
        public com.android.internal.telephony.TelephonyProto.RadioAccessTechnology getSrcAccessTech() {
          com.android.internal.telephony.TelephonyProto.RadioAccessTechnology result = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.valueOf(srcAccessTech_);
          return result == null ? com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.UNKNOWN : result;
        }
        /**
         * <pre>
         * Original access technology
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];</code>
         */
        public Builder setSrcAccessTech(com.android.internal.telephony.TelephonyProto.RadioAccessTechnology value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00040000;
          srcAccessTech_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Original access technology
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];</code>
         */
        public Builder clearSrcAccessTech() {
          bitField0_ = (bitField0_ & ~0x00040000);
          srcAccessTech_ = -1;
          onChanged();
          return this;
        }

        private int targetAccessTech_ = -1;
        /**
         * <pre>
         * New access technology
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];</code>
         */
        public boolean hasTargetAccessTech() {
          return ((bitField0_ & 0x00080000) == 0x00080000);
        }
        /**
         * <pre>
         * New access technology
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];</code>
         */
        public com.android.internal.telephony.TelephonyProto.RadioAccessTechnology getTargetAccessTech() {
          com.android.internal.telephony.TelephonyProto.RadioAccessTechnology result = com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.valueOf(targetAccessTech_);
          return result == null ? com.android.internal.telephony.TelephonyProto.RadioAccessTechnology.UNKNOWN : result;
        }
        /**
         * <pre>
         * New access technology
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];</code>
         */
        public Builder setTargetAccessTech(com.android.internal.telephony.TelephonyProto.RadioAccessTechnology value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00080000;
          targetAccessTech_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * New access technology
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];</code>
         */
        public Builder clearTargetAccessTech() {
          bitField0_ = (bitField0_ & ~0x00080000);
          targetAccessTech_ = -1;
          onChanged();
          return this;
        }

        private long nitzTimestampMillis_ ;
        /**
         * <pre>
         * NITZ time in milliseconds
         * </pre>
         *
         * <code>optional int64 nitz_timestamp_millis = 21;</code>
         */
        public boolean hasNitzTimestampMillis() {
          return ((bitField0_ & 0x00100000) == 0x00100000);
        }
        /**
         * <pre>
         * NITZ time in milliseconds
         * </pre>
         *
         * <code>optional int64 nitz_timestamp_millis = 21;</code>
         */
        public long getNitzTimestampMillis() {
          return nitzTimestampMillis_;
        }
        /**
         * <pre>
         * NITZ time in milliseconds
         * </pre>
         *
         * <code>optional int64 nitz_timestamp_millis = 21;</code>
         */
        public Builder setNitzTimestampMillis(long value) {
          bitField0_ |= 0x00100000;
          nitzTimestampMillis_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * NITZ time in milliseconds
         * </pre>
         *
         * <code>optional int64 nitz_timestamp_millis = 21;</code>
         */
        public Builder clearNitzTimestampMillis() {
          bitField0_ = (bitField0_ & ~0x00100000);
          nitzTimestampMillis_ = 0L;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:clearcut.connectivity.TelephonyCallSession.Event)
      }

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyCallSession.Event)
      private static final com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event();
      }

      public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Event>
          PARSER = new com.google.protobuf.AbstractParser<Event>() {
        public Event parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new Event(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Event> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Event> getParserForType() {
        return PARSER;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int START_TIME_MINUTES_FIELD_NUMBER = 1;
    private int startTimeMinutes_;
    /**
     * <pre>
     * Time when call has started, in minutes since epoch,
     * with 5 minutes precision
     * </pre>
     *
     * <code>optional int32 start_time_minutes = 1;</code>
     */
    public boolean hasStartTimeMinutes() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Time when call has started, in minutes since epoch,
     * with 5 minutes precision
     * </pre>
     *
     * <code>optional int32 start_time_minutes = 1;</code>
     */
    public int getStartTimeMinutes() {
      return startTimeMinutes_;
    }

    public static final int PHONE_ID_FIELD_NUMBER = 2;
    private int phoneId_;
    /**
     * <pre>
     * In Multi-SIM devices this indicates SIM slot
     * </pre>
     *
     * <code>optional int32 phone_id = 2;</code>
     */
    public boolean hasPhoneId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * In Multi-SIM devices this indicates SIM slot
     * </pre>
     *
     * <code>optional int32 phone_id = 2;</code>
     */
    public int getPhoneId() {
      return phoneId_;
    }

    public static final int EVENTS_FIELD_NUMBER = 3;
    private java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event> events_;
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
     */
    public java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event> getEventsList() {
      return events_;
    }
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
     */
    public java.util.List<? extends com.android.internal.telephony.TelephonyProto.TelephonyCallSession.EventOrBuilder> 
        getEventsOrBuilderList() {
      return events_;
    }
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
     */
    public int getEventsCount() {
      return events_.size();
    }
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event getEvents(int index) {
      return events_.get(index);
    }
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
     */
    public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.EventOrBuilder getEventsOrBuilder(
        int index) {
      return events_.get(index);
    }

    public static final int EVENTS_DROPPED_FIELD_NUMBER = 4;
    private boolean eventsDropped_;
    /**
     * <pre>
     * Indicating some call events are dropped
     * </pre>
     *
     * <code>optional bool events_dropped = 4;</code>
     */
    public boolean hasEventsDropped() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Indicating some call events are dropped
     * </pre>
     *
     * <code>optional bool events_dropped = 4;</code>
     */
    public boolean getEventsDropped() {
      return eventsDropped_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, startTimeMinutes_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, phoneId_);
      }
      for (int i = 0; i < events_.size(); i++) {
        output.writeMessage(3, events_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(4, eventsDropped_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, startTimeMinutes_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, phoneId_);
      }
      for (int i = 0; i < events_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, events_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, eventsDropped_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.internal.telephony.TelephonyProto.TelephonyCallSession)) {
        return super.equals(obj);
      }
      com.android.internal.telephony.TelephonyProto.TelephonyCallSession other = (com.android.internal.telephony.TelephonyProto.TelephonyCallSession) obj;

      boolean result = true;
      result = result && (hasStartTimeMinutes() == other.hasStartTimeMinutes());
      if (hasStartTimeMinutes()) {
        result = result && (getStartTimeMinutes()
            == other.getStartTimeMinutes());
      }
      result = result && (hasPhoneId() == other.hasPhoneId());
      if (hasPhoneId()) {
        result = result && (getPhoneId()
            == other.getPhoneId());
      }
      result = result && getEventsList()
          .equals(other.getEventsList());
      result = result && (hasEventsDropped() == other.hasEventsDropped());
      if (hasEventsDropped()) {
        result = result && (getEventsDropped()
            == other.getEventsDropped());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasStartTimeMinutes()) {
        hash = (37 * hash) + START_TIME_MINUTES_FIELD_NUMBER;
        hash = (53 * hash) + getStartTimeMinutes();
      }
      if (hasPhoneId()) {
        hash = (37 * hash) + PHONE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getPhoneId();
      }
      if (getEventsCount() > 0) {
        hash = (37 * hash) + EVENTS_FIELD_NUMBER;
        hash = (53 * hash) + getEventsList().hashCode();
      }
      if (hasEventsDropped()) {
        hash = (37 * hash) + EVENTS_DROPPED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEventsDropped());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.TelephonyCallSession prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Information about CS and/or PS call session.
     * Session starts when call is placed or accepted and
     * ends when there are no more active calls.
     * </pre>
     *
     * Protobuf type {@code clearcut.connectivity.TelephonyCallSession}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clearcut.connectivity.TelephonyCallSession)
        com.android.internal.telephony.TelephonyProto.TelephonyCallSessionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyCallSession_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyCallSession_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.TelephonyCallSession.class, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Builder.class);
      }

      // Construct using com.android.internal.telephony.TelephonyProto.TelephonyCallSession.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getEventsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        startTimeMinutes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        phoneId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (eventsBuilder_ == null) {
          events_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          eventsBuilder_.clear();
        }
        eventsDropped_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_TelephonyCallSession_descriptor;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession getDefaultInstanceForType() {
        return com.android.internal.telephony.TelephonyProto.TelephonyCallSession.getDefaultInstance();
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession build() {
        com.android.internal.telephony.TelephonyProto.TelephonyCallSession result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession buildPartial() {
        com.android.internal.telephony.TelephonyProto.TelephonyCallSession result = new com.android.internal.telephony.TelephonyProto.TelephonyCallSession(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.startTimeMinutes_ = startTimeMinutes_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.phoneId_ = phoneId_;
        if (eventsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            events_ = java.util.Collections.unmodifiableList(events_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.events_ = events_;
        } else {
          result.events_ = eventsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.eventsDropped_ = eventsDropped_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.internal.telephony.TelephonyProto.TelephonyCallSession) {
          return mergeFrom((com.android.internal.telephony.TelephonyProto.TelephonyCallSession)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.TelephonyCallSession other) {
        if (other == com.android.internal.telephony.TelephonyProto.TelephonyCallSession.getDefaultInstance()) return this;
        if (other.hasStartTimeMinutes()) {
          setStartTimeMinutes(other.getStartTimeMinutes());
        }
        if (other.hasPhoneId()) {
          setPhoneId(other.getPhoneId());
        }
        if (eventsBuilder_ == null) {
          if (!other.events_.isEmpty()) {
            if (events_.isEmpty()) {
              events_ = other.events_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureEventsIsMutable();
              events_.addAll(other.events_);
            }
            onChanged();
          }
        } else {
          if (!other.events_.isEmpty()) {
            if (eventsBuilder_.isEmpty()) {
              eventsBuilder_.dispose();
              eventsBuilder_ = null;
              events_ = other.events_;
              bitField0_ = (bitField0_ & ~0x00000004);
              eventsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getEventsFieldBuilder() : null;
            } else {
              eventsBuilder_.addAllMessages(other.events_);
            }
          }
        }
        if (other.hasEventsDropped()) {
          setEventsDropped(other.getEventsDropped());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.android.internal.telephony.TelephonyProto.TelephonyCallSession parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.android.internal.telephony.TelephonyProto.TelephonyCallSession) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int startTimeMinutes_ ;
      /**
       * <pre>
       * Time when call has started, in minutes since epoch,
       * with 5 minutes precision
       * </pre>
       *
       * <code>optional int32 start_time_minutes = 1;</code>
       */
      public boolean hasStartTimeMinutes() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Time when call has started, in minutes since epoch,
       * with 5 minutes precision
       * </pre>
       *
       * <code>optional int32 start_time_minutes = 1;</code>
       */
      public int getStartTimeMinutes() {
        return startTimeMinutes_;
      }
      /**
       * <pre>
       * Time when call has started, in minutes since epoch,
       * with 5 minutes precision
       * </pre>
       *
       * <code>optional int32 start_time_minutes = 1;</code>
       */
      public Builder setStartTimeMinutes(int value) {
        bitField0_ |= 0x00000001;
        startTimeMinutes_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Time when call has started, in minutes since epoch,
       * with 5 minutes precision
       * </pre>
       *
       * <code>optional int32 start_time_minutes = 1;</code>
       */
      public Builder clearStartTimeMinutes() {
        bitField0_ = (bitField0_ & ~0x00000001);
        startTimeMinutes_ = 0;
        onChanged();
        return this;
      }

      private int phoneId_ ;
      /**
       * <pre>
       * In Multi-SIM devices this indicates SIM slot
       * </pre>
       *
       * <code>optional int32 phone_id = 2;</code>
       */
      public boolean hasPhoneId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * In Multi-SIM devices this indicates SIM slot
       * </pre>
       *
       * <code>optional int32 phone_id = 2;</code>
       */
      public int getPhoneId() {
        return phoneId_;
      }
      /**
       * <pre>
       * In Multi-SIM devices this indicates SIM slot
       * </pre>
       *
       * <code>optional int32 phone_id = 2;</code>
       */
      public Builder setPhoneId(int value) {
        bitField0_ |= 0x00000002;
        phoneId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In Multi-SIM devices this indicates SIM slot
       * </pre>
       *
       * <code>optional int32 phone_id = 2;</code>
       */
      public Builder clearPhoneId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        phoneId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event> events_ =
        java.util.Collections.emptyList();
      private void ensureEventsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          events_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event>(events_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Builder, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.EventOrBuilder> eventsBuilder_;

      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event> getEventsList() {
        if (eventsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(events_);
        } else {
          return eventsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public int getEventsCount() {
        if (eventsBuilder_ == null) {
          return events_.size();
        } else {
          return eventsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event getEvents(int index) {
        if (eventsBuilder_ == null) {
          return events_.get(index);
        } else {
          return eventsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public Builder setEvents(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event value) {
        if (eventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEventsIsMutable();
          events_.set(index, value);
          onChanged();
        } else {
          eventsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public Builder setEvents(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Builder builderForValue) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.set(index, builderForValue.build());
          onChanged();
        } else {
          eventsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public Builder addEvents(com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event value) {
        if (eventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEventsIsMutable();
          events_.add(value);
          onChanged();
        } else {
          eventsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public Builder addEvents(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event value) {
        if (eventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEventsIsMutable();
          events_.add(index, value);
          onChanged();
        } else {
          eventsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public Builder addEvents(
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Builder builderForValue) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.add(builderForValue.build());
          onChanged();
        } else {
          eventsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public Builder addEvents(
          int index, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Builder builderForValue) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.add(index, builderForValue.build());
          onChanged();
        } else {
          eventsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public Builder addAllEvents(
          java.lang.Iterable<? extends com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event> values) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, events_);
          onChanged();
        } else {
          eventsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public Builder clearEvents() {
        if (eventsBuilder_ == null) {
          events_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          eventsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public Builder removeEvents(int index) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.remove(index);
          onChanged();
        } else {
          eventsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Builder getEventsBuilder(
          int index) {
        return getEventsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.EventOrBuilder getEventsOrBuilder(
          int index) {
        if (eventsBuilder_ == null) {
          return events_.get(index);  } else {
          return eventsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public java.util.List<? extends com.android.internal.telephony.TelephonyProto.TelephonyCallSession.EventOrBuilder> 
           getEventsOrBuilderList() {
        if (eventsBuilder_ != null) {
          return eventsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(events_);
        }
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Builder addEventsBuilder() {
        return getEventsFieldBuilder().addBuilder(
            com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.getDefaultInstance());
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Builder addEventsBuilder(
          int index) {
        return getEventsFieldBuilder().addBuilder(
            index, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.getDefaultInstance());
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Builder> 
           getEventsBuilderList() {
        return getEventsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Builder, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.EventOrBuilder> 
          getEventsFieldBuilder() {
        if (eventsBuilder_ == null) {
          eventsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.Event.Builder, com.android.internal.telephony.TelephonyProto.TelephonyCallSession.EventOrBuilder>(
                  events_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          events_ = null;
        }
        return eventsBuilder_;
      }

      private boolean eventsDropped_ ;
      /**
       * <pre>
       * Indicating some call events are dropped
       * </pre>
       *
       * <code>optional bool events_dropped = 4;</code>
       */
      public boolean hasEventsDropped() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * Indicating some call events are dropped
       * </pre>
       *
       * <code>optional bool events_dropped = 4;</code>
       */
      public boolean getEventsDropped() {
        return eventsDropped_;
      }
      /**
       * <pre>
       * Indicating some call events are dropped
       * </pre>
       *
       * <code>optional bool events_dropped = 4;</code>
       */
      public Builder setEventsDropped(boolean value) {
        bitField0_ |= 0x00000008;
        eventsDropped_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Indicating some call events are dropped
       * </pre>
       *
       * <code>optional bool events_dropped = 4;</code>
       */
      public Builder clearEventsDropped() {
        bitField0_ = (bitField0_ & ~0x00000008);
        eventsDropped_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clearcut.connectivity.TelephonyCallSession)
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.TelephonyCallSession)
    private static final com.android.internal.telephony.TelephonyProto.TelephonyCallSession DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.TelephonyCallSession();
    }

    public static com.android.internal.telephony.TelephonyProto.TelephonyCallSession getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<TelephonyCallSession>
        PARSER = new com.google.protobuf.AbstractParser<TelephonyCallSession>() {
      public TelephonyCallSession parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new TelephonyCallSession(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TelephonyCallSession> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TelephonyCallSession> getParserForType() {
      return PARSER;
    }

    public com.android.internal.telephony.TelephonyProto.TelephonyCallSession getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SmsSessionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clearcut.connectivity.SmsSession)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Time when session has started, in minutes since epoch,
     * with 5 minutes precision
     * </pre>
     *
     * <code>optional int32 start_time_minutes = 1;</code>
     */
    boolean hasStartTimeMinutes();
    /**
     * <pre>
     * Time when session has started, in minutes since epoch,
     * with 5 minutes precision
     * </pre>
     *
     * <code>optional int32 start_time_minutes = 1;</code>
     */
    int getStartTimeMinutes();

    /**
     * <pre>
     * In Multi-SIM devices this indicates SIM slot
     * </pre>
     *
     * <code>optional int32 phone_id = 2;</code>
     */
    boolean hasPhoneId();
    /**
     * <pre>
     * In Multi-SIM devices this indicates SIM slot
     * </pre>
     *
     * <code>optional int32 phone_id = 2;</code>
     */
    int getPhoneId();

    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
     */
    java.util.List<com.android.internal.telephony.TelephonyProto.SmsSession.Event> 
        getEventsList();
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
     */
    com.android.internal.telephony.TelephonyProto.SmsSession.Event getEvents(int index);
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
     */
    int getEventsCount();
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
     */
    java.util.List<? extends com.android.internal.telephony.TelephonyProto.SmsSession.EventOrBuilder> 
        getEventsOrBuilderList();
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
     */
    com.android.internal.telephony.TelephonyProto.SmsSession.EventOrBuilder getEventsOrBuilder(
        int index);

    /**
     * <pre>
     * Indicating some sms session events are dropped
     * </pre>
     *
     * <code>optional bool events_dropped = 4;</code>
     */
    boolean hasEventsDropped();
    /**
     * <pre>
     * Indicating some sms session events are dropped
     * </pre>
     *
     * <code>optional bool events_dropped = 4;</code>
     */
    boolean getEventsDropped();
  }
  /**
   * Protobuf type {@code clearcut.connectivity.SmsSession}
   */
  public  static final class SmsSession extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clearcut.connectivity.SmsSession)
      SmsSessionOrBuilder {
    // Use SmsSession.newBuilder() to construct.
    private SmsSession(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SmsSession() {
      startTimeMinutes_ = 0;
      phoneId_ = 0;
      events_ = java.util.Collections.emptyList();
      eventsDropped_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SmsSession(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              startTimeMinutes_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              phoneId_ = input.readInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                events_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.SmsSession.Event>();
                mutable_bitField0_ |= 0x00000004;
              }
              events_.add(
                  input.readMessage(com.android.internal.telephony.TelephonyProto.SmsSession.Event.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              eventsDropped_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          events_ = java.util.Collections.unmodifiableList(events_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_SmsSession_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_SmsSession_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.internal.telephony.TelephonyProto.SmsSession.class, com.android.internal.telephony.TelephonyProto.SmsSession.Builder.class);
    }

    public interface EventOrBuilder extends
        // @@protoc_insertion_point(interface_extends:clearcut.connectivity.SmsSession.Event)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Event type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.SmsSession.Event.Type type = 1;</code>
       */
      boolean hasType();
      /**
       * <pre>
       * Event type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.SmsSession.Event.Type type = 1;</code>
       */
      com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type getType();

      /**
       * <pre>
       * Time since previous event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
       */
      boolean hasDelay();
      /**
       * <pre>
       * Time since previous event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
       */
      com.android.internal.telephony.TelephonyProto.TimeInterval getDelay();

      /**
       * <pre>
       * Settings at the begining of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
       */
      boolean hasSettings();
      /**
       * <pre>
       * Settings at the begining of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonySettings getSettings();
      /**
       * <pre>
       * Settings at the begining of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder getSettingsOrBuilder();

      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
       */
      boolean hasServiceState();
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonyServiceState getServiceState();
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
       */
      com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder getServiceStateOrBuilder();

      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
       */
      boolean hasImsConnectionState();
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
       */
      com.android.internal.telephony.TelephonyProto.ImsConnectionState getImsConnectionState();
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
       */
      com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder getImsConnectionStateOrBuilder();

      /**
       * <pre>
       * Capabilities at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
       */
      boolean hasImsCapabilities();
      /**
       * <pre>
       * Capabilities at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
       */
      com.android.internal.telephony.TelephonyProto.ImsCapabilities getImsCapabilities();
      /**
       * <pre>
       * Capabilities at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
       */
      com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder getImsCapabilitiesOrBuilder();

      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall> 
          getDataCallsList();
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      com.android.internal.telephony.TelephonyProto.RilDataCall getDataCalls(int index);
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      int getDataCallsCount();
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      java.util.List<? extends com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> 
          getDataCallsOrBuilderList();
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder getDataCallsOrBuilder(
          int index);

      /**
       * <pre>
       * Format of the message
       * </pre>
       *
       * <code>optional .clearcut.connectivity.SmsSession.Event.Format format = 8;</code>
       */
      boolean hasFormat();
      /**
       * <pre>
       * Format of the message
       * </pre>
       *
       * <code>optional .clearcut.connectivity.SmsSession.Event.Format format = 8;</code>
       */
      com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format getFormat();

      /**
       * <pre>
       * Technology used to send/receive SMS
       * </pre>
       *
       * <code>optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;</code>
       */
      boolean hasTech();
      /**
       * <pre>
       * Technology used to send/receive SMS
       * </pre>
       *
       * <code>optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;</code>
       */
      com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech getTech();

      /**
       * <pre>
       * See 3GPP 27.005, 3.2.5 for GSM/UMTS,
       * 3GPP2 N.S0005 (IS-41C) Table 171 for CDMA,
       * -1 if unknown or not applicable
       * </pre>
       *
       * <code>optional int32 error_code = 10;</code>
       */
      boolean hasErrorCode();
      /**
       * <pre>
       * See 3GPP 27.005, 3.2.5 for GSM/UMTS,
       * 3GPP2 N.S0005 (IS-41C) Table 171 for CDMA,
       * -1 if unknown or not applicable
       * </pre>
       *
       * <code>optional int32 error_code = 10;</code>
       */
      int getErrorCode();

      /**
       * <pre>
       * RIL error code
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RilErrno error = 11;</code>
       */
      boolean hasError();
      /**
       * <pre>
       * RIL error code
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RilErrno error = 11;</code>
       */
      com.android.internal.telephony.TelephonyProto.RilErrno getError();

      /**
       * <pre>
       * Numeric ID
       * </pre>
       *
       * <code>optional int32 ril_request_id = 12;</code>
       */
      boolean hasRilRequestId();
      /**
       * <pre>
       * Numeric ID
       * </pre>
       *
       * <code>optional int32 ril_request_id = 12;</code>
       */
      int getRilRequestId();
    }
    /**
     * Protobuf type {@code clearcut.connectivity.SmsSession.Event}
     */
    public  static final class Event extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:clearcut.connectivity.SmsSession.Event)
        EventOrBuilder {
      // Use Event.newBuilder() to construct.
      private Event(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Event() {
        type_ = 0;
        delay_ = 0;
        dataCalls_ = java.util.Collections.emptyList();
        format_ = 0;
        tech_ = 0;
        errorCode_ = 0;
        error_ = 0;
        rilRequestId_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Event(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type value = com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  type_ = rawValue;
                }
                break;
              }
              case 16: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.TimeInterval value = com.android.internal.telephony.TelephonyProto.TimeInterval.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(2, rawValue);
                } else {
                  bitField0_ |= 0x00000002;
                  delay_ = rawValue;
                }
                break;
              }
              case 26: {
                com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = settings_.toBuilder();
                }
                settings_ = input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonySettings.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(settings_);
                  settings_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
              case 34: {
                com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder subBuilder = null;
                if (((bitField0_ & 0x00000008) == 0x00000008)) {
                  subBuilder = serviceState_.toBuilder();
                }
                serviceState_ = input.readMessage(com.android.internal.telephony.TelephonyProto.TelephonyServiceState.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(serviceState_);
                  serviceState_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000008;
                break;
              }
              case 42: {
                com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder subBuilder = null;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                  subBuilder = imsConnectionState_.toBuilder();
                }
                imsConnectionState_ = input.readMessage(com.android.internal.telephony.TelephonyProto.ImsConnectionState.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(imsConnectionState_);
                  imsConnectionState_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000010;
                break;
              }
              case 50: {
                com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder subBuilder = null;
                if (((bitField0_ & 0x00000020) == 0x00000020)) {
                  subBuilder = imsCapabilities_.toBuilder();
                }
                imsCapabilities_ = input.readMessage(com.android.internal.telephony.TelephonyProto.ImsCapabilities.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(imsCapabilities_);
                  imsCapabilities_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000020;
                break;
              }
              case 58: {
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                  dataCalls_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.RilDataCall>();
                  mutable_bitField0_ |= 0x00000040;
                }
                dataCalls_.add(
                    input.readMessage(com.android.internal.telephony.TelephonyProto.RilDataCall.PARSER, extensionRegistry));
                break;
              }
              case 64: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format value = com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(8, rawValue);
                } else {
                  bitField0_ |= 0x00000040;
                  format_ = rawValue;
                }
                break;
              }
              case 72: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech value = com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(9, rawValue);
                } else {
                  bitField0_ |= 0x00000080;
                  tech_ = rawValue;
                }
                break;
              }
              case 80: {
                bitField0_ |= 0x00000100;
                errorCode_ = input.readInt32();
                break;
              }
              case 88: {
                int rawValue = input.readEnum();
                com.android.internal.telephony.TelephonyProto.RilErrno value = com.android.internal.telephony.TelephonyProto.RilErrno.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(11, rawValue);
                } else {
                  bitField0_ |= 0x00000200;
                  error_ = rawValue;
                }
                break;
              }
              case 96: {
                bitField0_ |= 0x00000400;
                rilRequestId_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
            dataCalls_ = java.util.Collections.unmodifiableList(dataCalls_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_SmsSession_Event_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_SmsSession_Event_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.SmsSession.Event.class, com.android.internal.telephony.TelephonyProto.SmsSession.Event.Builder.class);
      }

      /**
       * Protobuf enum {@code clearcut.connectivity.SmsSession.Event.Type}
       */
      public enum Type
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * Unknown event
         * </pre>
         *
         * <code>EVENT_UNKNOWN = 0;</code>
         */
        EVENT_UNKNOWN(0),
        /**
         * <pre>
         * Telephony related user settings changed
         * </pre>
         *
         * <code>SETTINGS_CHANGED = 1;</code>
         */
        SETTINGS_CHANGED(1),
        /**
         * <pre>
         * Phone state changed
         * </pre>
         *
         * <code>RIL_SERVICE_STATE_CHANGED = 2;</code>
         */
        RIL_SERVICE_STATE_CHANGED(2),
        /**
         * <pre>
         * IMS connected/disconnected
         * </pre>
         *
         * <code>IMS_CONNECTION_STATE_CHANGED = 3;</code>
         */
        IMS_CONNECTION_STATE_CHANGED(3),
        /**
         * <pre>
         * IMS Voice, Video and Ut capabilities changed
         * </pre>
         *
         * <code>IMS_CAPABILITIES_CHANGED = 4;</code>
         */
        IMS_CAPABILITIES_CHANGED(4),
        /**
         * <pre>
         * Notification that new data call has appeared in the list
         * or old data call has removed.
         * </pre>
         *
         * <code>DATA_CALL_LIST_CHANGED = 5;</code>
         */
        DATA_CALL_LIST_CHANGED(5),
        /**
         * <pre>
         * Send a SMS message
         * </pre>
         *
         * <code>SMS_SEND = 6;</code>
         */
        SMS_SEND(6),
        /**
         * <pre>
         * Message has been sent to network
         * </pre>
         *
         * <code>SMS_SEND_RESULT = 7;</code>
         */
        SMS_SEND_RESULT(7),
        /**
         * <pre>
         * Notification about received SMS
         * </pre>
         *
         * <code>SMS_RECEIVED = 8;</code>
         */
        SMS_RECEIVED(8),
        ;

        /**
         * <pre>
         * Unknown event
         * </pre>
         *
         * <code>EVENT_UNKNOWN = 0;</code>
         */
        public static final int EVENT_UNKNOWN_VALUE = 0;
        /**
         * <pre>
         * Telephony related user settings changed
         * </pre>
         *
         * <code>SETTINGS_CHANGED = 1;</code>
         */
        public static final int SETTINGS_CHANGED_VALUE = 1;
        /**
         * <pre>
         * Phone state changed
         * </pre>
         *
         * <code>RIL_SERVICE_STATE_CHANGED = 2;</code>
         */
        public static final int RIL_SERVICE_STATE_CHANGED_VALUE = 2;
        /**
         * <pre>
         * IMS connected/disconnected
         * </pre>
         *
         * <code>IMS_CONNECTION_STATE_CHANGED = 3;</code>
         */
        public static final int IMS_CONNECTION_STATE_CHANGED_VALUE = 3;
        /**
         * <pre>
         * IMS Voice, Video and Ut capabilities changed
         * </pre>
         *
         * <code>IMS_CAPABILITIES_CHANGED = 4;</code>
         */
        public static final int IMS_CAPABILITIES_CHANGED_VALUE = 4;
        /**
         * <pre>
         * Notification that new data call has appeared in the list
         * or old data call has removed.
         * </pre>
         *
         * <code>DATA_CALL_LIST_CHANGED = 5;</code>
         */
        public static final int DATA_CALL_LIST_CHANGED_VALUE = 5;
        /**
         * <pre>
         * Send a SMS message
         * </pre>
         *
         * <code>SMS_SEND = 6;</code>
         */
        public static final int SMS_SEND_VALUE = 6;
        /**
         * <pre>
         * Message has been sent to network
         * </pre>
         *
         * <code>SMS_SEND_RESULT = 7;</code>
         */
        public static final int SMS_SEND_RESULT_VALUE = 7;
        /**
         * <pre>
         * Notification about received SMS
         * </pre>
         *
         * <code>SMS_RECEIVED = 8;</code>
         */
        public static final int SMS_RECEIVED_VALUE = 8;


        public final int getNumber() {
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Type valueOf(int value) {
          return forNumber(value);
        }

        public static Type forNumber(int value) {
          switch (value) {
            case 0: return EVENT_UNKNOWN;
            case 1: return SETTINGS_CHANGED;
            case 2: return RIL_SERVICE_STATE_CHANGED;
            case 3: return IMS_CONNECTION_STATE_CHANGED;
            case 4: return IMS_CAPABILITIES_CHANGED;
            case 5: return DATA_CALL_LIST_CHANGED;
            case 6: return SMS_SEND;
            case 7: return SMS_SEND_RESULT;
            case 8: return SMS_RECEIVED;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Type>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            Type> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Type>() {
                public Type findValueByNumber(int number) {
                  return Type.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.SmsSession.Event.getDescriptor().getEnumTypes().get(0);
        }

        private static final Type[] VALUES = values();

        public static Type valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Type(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:clearcut.connectivity.SmsSession.Event.Type)
      }

      /**
       * <pre>
       * Formats used to encode SMS messages
       * </pre>
       *
       * Protobuf enum {@code clearcut.connectivity.SmsSession.Event.Format}
       */
      public enum Format
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * State is unknown.
         * </pre>
         *
         * <code>SMS_FORMAT_UNKNOWN = 0;</code>
         */
        SMS_FORMAT_UNKNOWN(0),
        /**
         * <pre>
         * GSM, WCDMA
         * </pre>
         *
         * <code>SMS_FORMAT_3GPP = 1;</code>
         */
        SMS_FORMAT_3GPP(1),
        /**
         * <pre>
         * CDMA
         * </pre>
         *
         * <code>SMS_FORMAT_3GPP2 = 2;</code>
         */
        SMS_FORMAT_3GPP2(2),
        ;

        /**
         * <pre>
         * State is unknown.
         * </pre>
         *
         * <code>SMS_FORMAT_UNKNOWN = 0;</code>
         */
        public static final int SMS_FORMAT_UNKNOWN_VALUE = 0;
        /**
         * <pre>
         * GSM, WCDMA
         * </pre>
         *
         * <code>SMS_FORMAT_3GPP = 1;</code>
         */
        public static final int SMS_FORMAT_3GPP_VALUE = 1;
        /**
         * <pre>
         * CDMA
         * </pre>
         *
         * <code>SMS_FORMAT_3GPP2 = 2;</code>
         */
        public static final int SMS_FORMAT_3GPP2_VALUE = 2;


        public final int getNumber() {
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Format valueOf(int value) {
          return forNumber(value);
        }

        public static Format forNumber(int value) {
          switch (value) {
            case 0: return SMS_FORMAT_UNKNOWN;
            case 1: return SMS_FORMAT_3GPP;
            case 2: return SMS_FORMAT_3GPP2;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Format>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            Format> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Format>() {
                public Format findValueByNumber(int number) {
                  return Format.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.SmsSession.Event.getDescriptor().getEnumTypes().get(1);
        }

        private static final Format[] VALUES = values();

        public static Format valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Format(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:clearcut.connectivity.SmsSession.Event.Format)
      }

      /**
       * Protobuf enum {@code clearcut.connectivity.SmsSession.Event.Tech}
       */
      public enum Tech
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>SMS_UNKNOWN = 0;</code>
         */
        SMS_UNKNOWN(0),
        /**
         * <code>SMS_GSM = 1;</code>
         */
        SMS_GSM(1),
        /**
         * <code>SMS_CDMA = 2;</code>
         */
        SMS_CDMA(2),
        /**
         * <code>SMS_IMS = 3;</code>
         */
        SMS_IMS(3),
        ;

        /**
         * <code>SMS_UNKNOWN = 0;</code>
         */
        public static final int SMS_UNKNOWN_VALUE = 0;
        /**
         * <code>SMS_GSM = 1;</code>
         */
        public static final int SMS_GSM_VALUE = 1;
        /**
         * <code>SMS_CDMA = 2;</code>
         */
        public static final int SMS_CDMA_VALUE = 2;
        /**
         * <code>SMS_IMS = 3;</code>
         */
        public static final int SMS_IMS_VALUE = 3;


        public final int getNumber() {
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Tech valueOf(int value) {
          return forNumber(value);
        }

        public static Tech forNumber(int value) {
          switch (value) {
            case 0: return SMS_UNKNOWN;
            case 1: return SMS_GSM;
            case 2: return SMS_CDMA;
            case 3: return SMS_IMS;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Tech>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            Tech> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Tech>() {
                public Tech findValueByNumber(int number) {
                  return Tech.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.SmsSession.Event.getDescriptor().getEnumTypes().get(2);
        }

        private static final Tech[] VALUES = values();

        public static Tech valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Tech(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:clearcut.connectivity.SmsSession.Event.Tech)
      }

      private int bitField0_;
      public static final int TYPE_FIELD_NUMBER = 1;
      private int type_;
      /**
       * <pre>
       * Event type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.SmsSession.Event.Type type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Event type
       * </pre>
       *
       * <code>optional .clearcut.connectivity.SmsSession.Event.Type type = 1;</code>
       */
      public com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type getType() {
        com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type result = com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.valueOf(type_);
        return result == null ? com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.EVENT_UNKNOWN : result;
      }

      public static final int DELAY_FIELD_NUMBER = 2;
      private int delay_;
      /**
       * <pre>
       * Time since previous event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
       */
      public boolean hasDelay() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * Time since previous event
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TimeInterval getDelay() {
        com.android.internal.telephony.TelephonyProto.TimeInterval result = com.android.internal.telephony.TelephonyProto.TimeInterval.valueOf(delay_);
        return result == null ? com.android.internal.telephony.TelephonyProto.TimeInterval.TI_UNKNOWN : result;
      }

      public static final int SETTINGS_FIELD_NUMBER = 3;
      private com.android.internal.telephony.TelephonyProto.TelephonySettings settings_;
      /**
       * <pre>
       * Settings at the begining of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
       */
      public boolean hasSettings() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * Settings at the begining of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonySettings getSettings() {
        return settings_ == null ? com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance() : settings_;
      }
      /**
       * <pre>
       * Settings at the begining of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder getSettingsOrBuilder() {
        return settings_ == null ? com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance() : settings_;
      }

      public static final int SERVICE_STATE_FIELD_NUMBER = 4;
      private com.android.internal.telephony.TelephonyProto.TelephonyServiceState serviceState_;
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
       */
      public boolean hasServiceState() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceState getServiceState() {
        return serviceState_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance() : serviceState_;
      }
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
       */
      public com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder getServiceStateOrBuilder() {
        return serviceState_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance() : serviceState_;
      }

      public static final int IMS_CONNECTION_STATE_FIELD_NUMBER = 5;
      private com.android.internal.telephony.TelephonyProto.ImsConnectionState imsConnectionState_;
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
       */
      public boolean hasImsConnectionState() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsConnectionState getImsConnectionState() {
        return imsConnectionState_ == null ? com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance() : imsConnectionState_;
      }
      /**
       * <pre>
       * State at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder getImsConnectionStateOrBuilder() {
        return imsConnectionState_ == null ? com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance() : imsConnectionState_;
      }

      public static final int IMS_CAPABILITIES_FIELD_NUMBER = 6;
      private com.android.internal.telephony.TelephonyProto.ImsCapabilities imsCapabilities_;
      /**
       * <pre>
       * Capabilities at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
       */
      public boolean hasImsCapabilities() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * Capabilities at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsCapabilities getImsCapabilities() {
        return imsCapabilities_ == null ? com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance() : imsCapabilities_;
      }
      /**
       * <pre>
       * Capabilities at the beginning of the session or when changed
       * </pre>
       *
       * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
       */
      public com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder getImsCapabilitiesOrBuilder() {
        return imsCapabilities_ == null ? com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance() : imsCapabilities_;
      }

      public static final int DATA_CALLS_FIELD_NUMBER = 7;
      private java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall> dataCalls_;
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall> getDataCallsList() {
        return dataCalls_;
      }
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      public java.util.List<? extends com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> 
          getDataCallsOrBuilderList() {
        return dataCalls_;
      }
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      public int getDataCallsCount() {
        return dataCalls_.size();
      }
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      public com.android.internal.telephony.TelephonyProto.RilDataCall getDataCalls(int index) {
        return dataCalls_.get(index);
      }
      /**
       * <pre>
       * List of data calls at the beginning of the session or when changed
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
       */
      public com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder getDataCallsOrBuilder(
          int index) {
        return dataCalls_.get(index);
      }

      public static final int FORMAT_FIELD_NUMBER = 8;
      private int format_;
      /**
       * <pre>
       * Format of the message
       * </pre>
       *
       * <code>optional .clearcut.connectivity.SmsSession.Event.Format format = 8;</code>
       */
      public boolean hasFormat() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * Format of the message
       * </pre>
       *
       * <code>optional .clearcut.connectivity.SmsSession.Event.Format format = 8;</code>
       */
      public com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format getFormat() {
        com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format result = com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format.valueOf(format_);
        return result == null ? com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format.SMS_FORMAT_UNKNOWN : result;
      }

      public static final int TECH_FIELD_NUMBER = 9;
      private int tech_;
      /**
       * <pre>
       * Technology used to send/receive SMS
       * </pre>
       *
       * <code>optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;</code>
       */
      public boolean hasTech() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * Technology used to send/receive SMS
       * </pre>
       *
       * <code>optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;</code>
       */
      public com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech getTech() {
        com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech result = com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech.valueOf(tech_);
        return result == null ? com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech.SMS_UNKNOWN : result;
      }

      public static final int ERROR_CODE_FIELD_NUMBER = 10;
      private int errorCode_;
      /**
       * <pre>
       * See 3GPP 27.005, 3.2.5 for GSM/UMTS,
       * 3GPP2 N.S0005 (IS-41C) Table 171 for CDMA,
       * -1 if unknown or not applicable
       * </pre>
       *
       * <code>optional int32 error_code = 10;</code>
       */
      public boolean hasErrorCode() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * See 3GPP 27.005, 3.2.5 for GSM/UMTS,
       * 3GPP2 N.S0005 (IS-41C) Table 171 for CDMA,
       * -1 if unknown or not applicable
       * </pre>
       *
       * <code>optional int32 error_code = 10;</code>
       */
      public int getErrorCode() {
        return errorCode_;
      }

      public static final int ERROR_FIELD_NUMBER = 11;
      private int error_;
      /**
       * <pre>
       * RIL error code
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RilErrno error = 11;</code>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * RIL error code
       * </pre>
       *
       * <code>optional .clearcut.connectivity.RilErrno error = 11;</code>
       */
      public com.android.internal.telephony.TelephonyProto.RilErrno getError() {
        com.android.internal.telephony.TelephonyProto.RilErrno result = com.android.internal.telephony.TelephonyProto.RilErrno.valueOf(error_);
        return result == null ? com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_UNKNOWN : result;
      }

      public static final int RIL_REQUEST_ID_FIELD_NUMBER = 12;
      private int rilRequestId_;
      /**
       * <pre>
       * Numeric ID
       * </pre>
       *
       * <code>optional int32 ril_request_id = 12;</code>
       */
      public boolean hasRilRequestId() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <pre>
       * Numeric ID
       * </pre>
       *
       * <code>optional int32 ril_request_id = 12;</code>
       */
      public int getRilRequestId() {
        return rilRequestId_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, type_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeEnum(2, delay_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeMessage(3, getSettings());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeMessage(4, getServiceState());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeMessage(5, getImsConnectionState());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeMessage(6, getImsCapabilities());
        }
        for (int i = 0; i < dataCalls_.size(); i++) {
          output.writeMessage(7, dataCalls_.get(i));
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          output.writeEnum(8, format_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          output.writeEnum(9, tech_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          output.writeInt32(10, errorCode_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          output.writeEnum(11, error_);
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          output.writeInt32(12, rilRequestId_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, type_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(2, delay_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getSettings());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, getServiceState());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, getImsConnectionState());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, getImsCapabilities());
        }
        for (int i = 0; i < dataCalls_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, dataCalls_.get(i));
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(8, format_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(9, tech_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(10, errorCode_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(11, error_);
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(12, rilRequestId_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.android.internal.telephony.TelephonyProto.SmsSession.Event)) {
          return super.equals(obj);
        }
        com.android.internal.telephony.TelephonyProto.SmsSession.Event other = (com.android.internal.telephony.TelephonyProto.SmsSession.Event) obj;

        boolean result = true;
        result = result && (hasType() == other.hasType());
        if (hasType()) {
          result = result && type_ == other.type_;
        }
        result = result && (hasDelay() == other.hasDelay());
        if (hasDelay()) {
          result = result && delay_ == other.delay_;
        }
        result = result && (hasSettings() == other.hasSettings());
        if (hasSettings()) {
          result = result && getSettings()
              .equals(other.getSettings());
        }
        result = result && (hasServiceState() == other.hasServiceState());
        if (hasServiceState()) {
          result = result && getServiceState()
              .equals(other.getServiceState());
        }
        result = result && (hasImsConnectionState() == other.hasImsConnectionState());
        if (hasImsConnectionState()) {
          result = result && getImsConnectionState()
              .equals(other.getImsConnectionState());
        }
        result = result && (hasImsCapabilities() == other.hasImsCapabilities());
        if (hasImsCapabilities()) {
          result = result && getImsCapabilities()
              .equals(other.getImsCapabilities());
        }
        result = result && getDataCallsList()
            .equals(other.getDataCallsList());
        result = result && (hasFormat() == other.hasFormat());
        if (hasFormat()) {
          result = result && format_ == other.format_;
        }
        result = result && (hasTech() == other.hasTech());
        if (hasTech()) {
          result = result && tech_ == other.tech_;
        }
        result = result && (hasErrorCode() == other.hasErrorCode());
        if (hasErrorCode()) {
          result = result && (getErrorCode()
              == other.getErrorCode());
        }
        result = result && (hasError() == other.hasError());
        if (hasError()) {
          result = result && error_ == other.error_;
        }
        result = result && (hasRilRequestId() == other.hasRilRequestId());
        if (hasRilRequestId()) {
          result = result && (getRilRequestId()
              == other.getRilRequestId());
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptorForType().hashCode();
        if (hasType()) {
          hash = (37 * hash) + TYPE_FIELD_NUMBER;
          hash = (53 * hash) + type_;
        }
        if (hasDelay()) {
          hash = (37 * hash) + DELAY_FIELD_NUMBER;
          hash = (53 * hash) + delay_;
        }
        if (hasSettings()) {
          hash = (37 * hash) + SETTINGS_FIELD_NUMBER;
          hash = (53 * hash) + getSettings().hashCode();
        }
        if (hasServiceState()) {
          hash = (37 * hash) + SERVICE_STATE_FIELD_NUMBER;
          hash = (53 * hash) + getServiceState().hashCode();
        }
        if (hasImsConnectionState()) {
          hash = (37 * hash) + IMS_CONNECTION_STATE_FIELD_NUMBER;
          hash = (53 * hash) + getImsConnectionState().hashCode();
        }
        if (hasImsCapabilities()) {
          hash = (37 * hash) + IMS_CAPABILITIES_FIELD_NUMBER;
          hash = (53 * hash) + getImsCapabilities().hashCode();
        }
        if (getDataCallsCount() > 0) {
          hash = (37 * hash) + DATA_CALLS_FIELD_NUMBER;
          hash = (53 * hash) + getDataCallsList().hashCode();
        }
        if (hasFormat()) {
          hash = (37 * hash) + FORMAT_FIELD_NUMBER;
          hash = (53 * hash) + format_;
        }
        if (hasTech()) {
          hash = (37 * hash) + TECH_FIELD_NUMBER;
          hash = (53 * hash) + tech_;
        }
        if (hasErrorCode()) {
          hash = (37 * hash) + ERROR_CODE_FIELD_NUMBER;
          hash = (53 * hash) + getErrorCode();
        }
        if (hasError()) {
          hash = (37 * hash) + ERROR_FIELD_NUMBER;
          hash = (53 * hash) + error_;
        }
        if (hasRilRequestId()) {
          hash = (37 * hash) + RIL_REQUEST_ID_FIELD_NUMBER;
          hash = (53 * hash) + getRilRequestId();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.android.internal.telephony.TelephonyProto.SmsSession.Event parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.android.internal.telephony.TelephonyProto.SmsSession.Event parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.SmsSession.Event parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.android.internal.telephony.TelephonyProto.SmsSession.Event parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.SmsSession.Event parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.SmsSession.Event parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.SmsSession.Event parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.SmsSession.Event parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.android.internal.telephony.TelephonyProto.SmsSession.Event parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.android.internal.telephony.TelephonyProto.SmsSession.Event parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.SmsSession.Event prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code clearcut.connectivity.SmsSession.Event}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:clearcut.connectivity.SmsSession.Event)
          com.android.internal.telephony.TelephonyProto.SmsSession.EventOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_SmsSession_Event_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_SmsSession_Event_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.android.internal.telephony.TelephonyProto.SmsSession.Event.class, com.android.internal.telephony.TelephonyProto.SmsSession.Event.Builder.class);
        }

        // Construct using com.android.internal.telephony.TelephonyProto.SmsSession.Event.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getSettingsFieldBuilder();
            getServiceStateFieldBuilder();
            getImsConnectionStateFieldBuilder();
            getImsCapabilitiesFieldBuilder();
            getDataCallsFieldBuilder();
          }
        }
        public Builder clear() {
          super.clear();
          type_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          delay_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          if (settingsBuilder_ == null) {
            settings_ = null;
          } else {
            settingsBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          if (serviceStateBuilder_ == null) {
            serviceState_ = null;
          } else {
            serviceStateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          if (imsConnectionStateBuilder_ == null) {
            imsConnectionState_ = null;
          } else {
            imsConnectionStateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          if (imsCapabilitiesBuilder_ == null) {
            imsCapabilities_ = null;
          } else {
            imsCapabilitiesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000020);
          if (dataCallsBuilder_ == null) {
            dataCalls_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            dataCallsBuilder_.clear();
          }
          format_ = 0;
          bitField0_ = (bitField0_ & ~0x00000080);
          tech_ = 0;
          bitField0_ = (bitField0_ & ~0x00000100);
          errorCode_ = 0;
          bitField0_ = (bitField0_ & ~0x00000200);
          error_ = 0;
          bitField0_ = (bitField0_ & ~0x00000400);
          rilRequestId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000800);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_SmsSession_Event_descriptor;
        }

        public com.android.internal.telephony.TelephonyProto.SmsSession.Event getDefaultInstanceForType() {
          return com.android.internal.telephony.TelephonyProto.SmsSession.Event.getDefaultInstance();
        }

        public com.android.internal.telephony.TelephonyProto.SmsSession.Event build() {
          com.android.internal.telephony.TelephonyProto.SmsSession.Event result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.android.internal.telephony.TelephonyProto.SmsSession.Event buildPartial() {
          com.android.internal.telephony.TelephonyProto.SmsSession.Event result = new com.android.internal.telephony.TelephonyProto.SmsSession.Event(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.type_ = type_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.delay_ = delay_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          if (settingsBuilder_ == null) {
            result.settings_ = settings_;
          } else {
            result.settings_ = settingsBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          if (serviceStateBuilder_ == null) {
            result.serviceState_ = serviceState_;
          } else {
            result.serviceState_ = serviceStateBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          if (imsConnectionStateBuilder_ == null) {
            result.imsConnectionState_ = imsConnectionState_;
          } else {
            result.imsConnectionState_ = imsConnectionStateBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          if (imsCapabilitiesBuilder_ == null) {
            result.imsCapabilities_ = imsCapabilities_;
          } else {
            result.imsCapabilities_ = imsCapabilitiesBuilder_.build();
          }
          if (dataCallsBuilder_ == null) {
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
              dataCalls_ = java.util.Collections.unmodifiableList(dataCalls_);
              bitField0_ = (bitField0_ & ~0x00000040);
            }
            result.dataCalls_ = dataCalls_;
          } else {
            result.dataCalls_ = dataCallsBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
            to_bitField0_ |= 0x00000040;
          }
          result.format_ = format_;
          if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
            to_bitField0_ |= 0x00000080;
          }
          result.tech_ = tech_;
          if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
            to_bitField0_ |= 0x00000100;
          }
          result.errorCode_ = errorCode_;
          if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
            to_bitField0_ |= 0x00000200;
          }
          result.error_ = error_;
          if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
            to_bitField0_ |= 0x00000400;
          }
          result.rilRequestId_ = rilRequestId_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.android.internal.telephony.TelephonyProto.SmsSession.Event) {
            return mergeFrom((com.android.internal.telephony.TelephonyProto.SmsSession.Event)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.SmsSession.Event other) {
          if (other == com.android.internal.telephony.TelephonyProto.SmsSession.Event.getDefaultInstance()) return this;
          if (other.hasType()) {
            setType(other.getType());
          }
          if (other.hasDelay()) {
            setDelay(other.getDelay());
          }
          if (other.hasSettings()) {
            mergeSettings(other.getSettings());
          }
          if (other.hasServiceState()) {
            mergeServiceState(other.getServiceState());
          }
          if (other.hasImsConnectionState()) {
            mergeImsConnectionState(other.getImsConnectionState());
          }
          if (other.hasImsCapabilities()) {
            mergeImsCapabilities(other.getImsCapabilities());
          }
          if (dataCallsBuilder_ == null) {
            if (!other.dataCalls_.isEmpty()) {
              if (dataCalls_.isEmpty()) {
                dataCalls_ = other.dataCalls_;
                bitField0_ = (bitField0_ & ~0x00000040);
              } else {
                ensureDataCallsIsMutable();
                dataCalls_.addAll(other.dataCalls_);
              }
              onChanged();
            }
          } else {
            if (!other.dataCalls_.isEmpty()) {
              if (dataCallsBuilder_.isEmpty()) {
                dataCallsBuilder_.dispose();
                dataCallsBuilder_ = null;
                dataCalls_ = other.dataCalls_;
                bitField0_ = (bitField0_ & ~0x00000040);
                dataCallsBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getDataCallsFieldBuilder() : null;
              } else {
                dataCallsBuilder_.addAllMessages(other.dataCalls_);
              }
            }
          }
          if (other.hasFormat()) {
            setFormat(other.getFormat());
          }
          if (other.hasTech()) {
            setTech(other.getTech());
          }
          if (other.hasErrorCode()) {
            setErrorCode(other.getErrorCode());
          }
          if (other.hasError()) {
            setError(other.getError());
          }
          if (other.hasRilRequestId()) {
            setRilRequestId(other.getRilRequestId());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.android.internal.telephony.TelephonyProto.SmsSession.Event parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.android.internal.telephony.TelephonyProto.SmsSession.Event) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int type_ = 0;
        /**
         * <pre>
         * Event type
         * </pre>
         *
         * <code>optional .clearcut.connectivity.SmsSession.Event.Type type = 1;</code>
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <pre>
         * Event type
         * </pre>
         *
         * <code>optional .clearcut.connectivity.SmsSession.Event.Type type = 1;</code>
         */
        public com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type getType() {
          com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type result = com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.valueOf(type_);
          return result == null ? com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type.EVENT_UNKNOWN : result;
        }
        /**
         * <pre>
         * Event type
         * </pre>
         *
         * <code>optional .clearcut.connectivity.SmsSession.Event.Type type = 1;</code>
         */
        public Builder setType(com.android.internal.telephony.TelephonyProto.SmsSession.Event.Type value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          type_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Event type
         * </pre>
         *
         * <code>optional .clearcut.connectivity.SmsSession.Event.Type type = 1;</code>
         */
        public Builder clearType() {
          bitField0_ = (bitField0_ & ~0x00000001);
          type_ = 0;
          onChanged();
          return this;
        }

        private int delay_ = 0;
        /**
         * <pre>
         * Time since previous event
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
         */
        public boolean hasDelay() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <pre>
         * Time since previous event
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TimeInterval getDelay() {
          com.android.internal.telephony.TelephonyProto.TimeInterval result = com.android.internal.telephony.TelephonyProto.TimeInterval.valueOf(delay_);
          return result == null ? com.android.internal.telephony.TelephonyProto.TimeInterval.TI_UNKNOWN : result;
        }
        /**
         * <pre>
         * Time since previous event
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
         */
        public Builder setDelay(com.android.internal.telephony.TelephonyProto.TimeInterval value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000002;
          delay_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Time since previous event
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TimeInterval delay = 2;</code>
         */
        public Builder clearDelay() {
          bitField0_ = (bitField0_ & ~0x00000002);
          delay_ = 0;
          onChanged();
          return this;
        }

        private com.android.internal.telephony.TelephonyProto.TelephonySettings settings_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.TelephonySettings, com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder, com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder> settingsBuilder_;
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public boolean hasSettings() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonySettings getSettings() {
          if (settingsBuilder_ == null) {
            return settings_ == null ? com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance() : settings_;
          } else {
            return settingsBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public Builder setSettings(com.android.internal.telephony.TelephonyProto.TelephonySettings value) {
          if (settingsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            settings_ = value;
            onChanged();
          } else {
            settingsBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public Builder setSettings(
            com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder builderForValue) {
          if (settingsBuilder_ == null) {
            settings_ = builderForValue.build();
            onChanged();
          } else {
            settingsBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public Builder mergeSettings(com.android.internal.telephony.TelephonyProto.TelephonySettings value) {
          if (settingsBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004) &&
                settings_ != null &&
                settings_ != com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance()) {
              settings_ =
                com.android.internal.telephony.TelephonyProto.TelephonySettings.newBuilder(settings_).mergeFrom(value).buildPartial();
            } else {
              settings_ = value;
            }
            onChanged();
          } else {
            settingsBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public Builder clearSettings() {
          if (settingsBuilder_ == null) {
            settings_ = null;
            onChanged();
          } else {
            settingsBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder getSettingsBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getSettingsFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder getSettingsOrBuilder() {
          if (settingsBuilder_ != null) {
            return settingsBuilder_.getMessageOrBuilder();
          } else {
            return settings_ == null ?
                com.android.internal.telephony.TelephonyProto.TelephonySettings.getDefaultInstance() : settings_;
          }
        }
        /**
         * <pre>
         * Settings at the begining of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonySettings settings = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.TelephonySettings, com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder, com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder> 
            getSettingsFieldBuilder() {
          if (settingsBuilder_ == null) {
            settingsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.android.internal.telephony.TelephonyProto.TelephonySettings, com.android.internal.telephony.TelephonyProto.TelephonySettings.Builder, com.android.internal.telephony.TelephonyProto.TelephonySettingsOrBuilder>(
                    getSettings(),
                    getParentForChildren(),
                    isClean());
            settings_ = null;
          }
          return settingsBuilder_;
        }

        private com.android.internal.telephony.TelephonyProto.TelephonyServiceState serviceState_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.TelephonyServiceState, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder, com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder> serviceStateBuilder_;
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public boolean hasServiceState() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyServiceState getServiceState() {
          if (serviceStateBuilder_ == null) {
            return serviceState_ == null ? com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance() : serviceState_;
          } else {
            return serviceStateBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public Builder setServiceState(com.android.internal.telephony.TelephonyProto.TelephonyServiceState value) {
          if (serviceStateBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            serviceState_ = value;
            onChanged();
          } else {
            serviceStateBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public Builder setServiceState(
            com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder builderForValue) {
          if (serviceStateBuilder_ == null) {
            serviceState_ = builderForValue.build();
            onChanged();
          } else {
            serviceStateBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public Builder mergeServiceState(com.android.internal.telephony.TelephonyProto.TelephonyServiceState value) {
          if (serviceStateBuilder_ == null) {
            if (((bitField0_ & 0x00000008) == 0x00000008) &&
                serviceState_ != null &&
                serviceState_ != com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance()) {
              serviceState_ =
                com.android.internal.telephony.TelephonyProto.TelephonyServiceState.newBuilder(serviceState_).mergeFrom(value).buildPartial();
            } else {
              serviceState_ = value;
            }
            onChanged();
          } else {
            serviceStateBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public Builder clearServiceState() {
          if (serviceStateBuilder_ == null) {
            serviceState_ = null;
            onChanged();
          } else {
            serviceStateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder getServiceStateBuilder() {
          bitField0_ |= 0x00000008;
          onChanged();
          return getServiceStateFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        public com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder getServiceStateOrBuilder() {
          if (serviceStateBuilder_ != null) {
            return serviceStateBuilder_.getMessageOrBuilder();
          } else {
            return serviceState_ == null ?
                com.android.internal.telephony.TelephonyProto.TelephonyServiceState.getDefaultInstance() : serviceState_;
          }
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.TelephonyServiceState service_state = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.TelephonyServiceState, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder, com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder> 
            getServiceStateFieldBuilder() {
          if (serviceStateBuilder_ == null) {
            serviceStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.android.internal.telephony.TelephonyProto.TelephonyServiceState, com.android.internal.telephony.TelephonyProto.TelephonyServiceState.Builder, com.android.internal.telephony.TelephonyProto.TelephonyServiceStateOrBuilder>(
                    getServiceState(),
                    getParentForChildren(),
                    isClean());
            serviceState_ = null;
          }
          return serviceStateBuilder_;
        }

        private com.android.internal.telephony.TelephonyProto.ImsConnectionState imsConnectionState_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.ImsConnectionState, com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder, com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder> imsConnectionStateBuilder_;
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public boolean hasImsConnectionState() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public com.android.internal.telephony.TelephonyProto.ImsConnectionState getImsConnectionState() {
          if (imsConnectionStateBuilder_ == null) {
            return imsConnectionState_ == null ? com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance() : imsConnectionState_;
          } else {
            return imsConnectionStateBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public Builder setImsConnectionState(com.android.internal.telephony.TelephonyProto.ImsConnectionState value) {
          if (imsConnectionStateBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            imsConnectionState_ = value;
            onChanged();
          } else {
            imsConnectionStateBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public Builder setImsConnectionState(
            com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder builderForValue) {
          if (imsConnectionStateBuilder_ == null) {
            imsConnectionState_ = builderForValue.build();
            onChanged();
          } else {
            imsConnectionStateBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public Builder mergeImsConnectionState(com.android.internal.telephony.TelephonyProto.ImsConnectionState value) {
          if (imsConnectionStateBuilder_ == null) {
            if (((bitField0_ & 0x00000010) == 0x00000010) &&
                imsConnectionState_ != null &&
                imsConnectionState_ != com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance()) {
              imsConnectionState_ =
                com.android.internal.telephony.TelephonyProto.ImsConnectionState.newBuilder(imsConnectionState_).mergeFrom(value).buildPartial();
            } else {
              imsConnectionState_ = value;
            }
            onChanged();
          } else {
            imsConnectionStateBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public Builder clearImsConnectionState() {
          if (imsConnectionStateBuilder_ == null) {
            imsConnectionState_ = null;
            onChanged();
          } else {
            imsConnectionStateBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder getImsConnectionStateBuilder() {
          bitField0_ |= 0x00000010;
          onChanged();
          return getImsConnectionStateFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        public com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder getImsConnectionStateOrBuilder() {
          if (imsConnectionStateBuilder_ != null) {
            return imsConnectionStateBuilder_.getMessageOrBuilder();
          } else {
            return imsConnectionState_ == null ?
                com.android.internal.telephony.TelephonyProto.ImsConnectionState.getDefaultInstance() : imsConnectionState_;
          }
        }
        /**
         * <pre>
         * State at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.ImsConnectionState, com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder, com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder> 
            getImsConnectionStateFieldBuilder() {
          if (imsConnectionStateBuilder_ == null) {
            imsConnectionStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.android.internal.telephony.TelephonyProto.ImsConnectionState, com.android.internal.telephony.TelephonyProto.ImsConnectionState.Builder, com.android.internal.telephony.TelephonyProto.ImsConnectionStateOrBuilder>(
                    getImsConnectionState(),
                    getParentForChildren(),
                    isClean());
            imsConnectionState_ = null;
          }
          return imsConnectionStateBuilder_;
        }

        private com.android.internal.telephony.TelephonyProto.ImsCapabilities imsCapabilities_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.ImsCapabilities, com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder, com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder> imsCapabilitiesBuilder_;
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public boolean hasImsCapabilities() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public com.android.internal.telephony.TelephonyProto.ImsCapabilities getImsCapabilities() {
          if (imsCapabilitiesBuilder_ == null) {
            return imsCapabilities_ == null ? com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance() : imsCapabilities_;
          } else {
            return imsCapabilitiesBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public Builder setImsCapabilities(com.android.internal.telephony.TelephonyProto.ImsCapabilities value) {
          if (imsCapabilitiesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            imsCapabilities_ = value;
            onChanged();
          } else {
            imsCapabilitiesBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public Builder setImsCapabilities(
            com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder builderForValue) {
          if (imsCapabilitiesBuilder_ == null) {
            imsCapabilities_ = builderForValue.build();
            onChanged();
          } else {
            imsCapabilitiesBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public Builder mergeImsCapabilities(com.android.internal.telephony.TelephonyProto.ImsCapabilities value) {
          if (imsCapabilitiesBuilder_ == null) {
            if (((bitField0_ & 0x00000020) == 0x00000020) &&
                imsCapabilities_ != null &&
                imsCapabilities_ != com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance()) {
              imsCapabilities_ =
                com.android.internal.telephony.TelephonyProto.ImsCapabilities.newBuilder(imsCapabilities_).mergeFrom(value).buildPartial();
            } else {
              imsCapabilities_ = value;
            }
            onChanged();
          } else {
            imsCapabilitiesBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000020;
          return this;
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public Builder clearImsCapabilities() {
          if (imsCapabilitiesBuilder_ == null) {
            imsCapabilities_ = null;
            onChanged();
          } else {
            imsCapabilitiesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder getImsCapabilitiesBuilder() {
          bitField0_ |= 0x00000020;
          onChanged();
          return getImsCapabilitiesFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        public com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder getImsCapabilitiesOrBuilder() {
          if (imsCapabilitiesBuilder_ != null) {
            return imsCapabilitiesBuilder_.getMessageOrBuilder();
          } else {
            return imsCapabilities_ == null ?
                com.android.internal.telephony.TelephonyProto.ImsCapabilities.getDefaultInstance() : imsCapabilities_;
          }
        }
        /**
         * <pre>
         * Capabilities at the beginning of the session or when changed
         * </pre>
         *
         * <code>optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.ImsCapabilities, com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder, com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder> 
            getImsCapabilitiesFieldBuilder() {
          if (imsCapabilitiesBuilder_ == null) {
            imsCapabilitiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.android.internal.telephony.TelephonyProto.ImsCapabilities, com.android.internal.telephony.TelephonyProto.ImsCapabilities.Builder, com.android.internal.telephony.TelephonyProto.ImsCapabilitiesOrBuilder>(
                    getImsCapabilities(),
                    getParentForChildren(),
                    isClean());
            imsCapabilities_ = null;
          }
          return imsCapabilitiesBuilder_;
        }

        private java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall> dataCalls_ =
          java.util.Collections.emptyList();
        private void ensureDataCallsIsMutable() {
          if (!((bitField0_ & 0x00000040) == 0x00000040)) {
            dataCalls_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.RilDataCall>(dataCalls_);
            bitField0_ |= 0x00000040;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.RilDataCall, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder, com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> dataCallsBuilder_;

        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall> getDataCallsList() {
          if (dataCallsBuilder_ == null) {
            return java.util.Collections.unmodifiableList(dataCalls_);
          } else {
            return dataCallsBuilder_.getMessageList();
          }
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public int getDataCallsCount() {
          if (dataCallsBuilder_ == null) {
            return dataCalls_.size();
          } else {
            return dataCallsBuilder_.getCount();
          }
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public com.android.internal.telephony.TelephonyProto.RilDataCall getDataCalls(int index) {
          if (dataCallsBuilder_ == null) {
            return dataCalls_.get(index);
          } else {
            return dataCallsBuilder_.getMessage(index);
          }
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder setDataCalls(
            int index, com.android.internal.telephony.TelephonyProto.RilDataCall value) {
          if (dataCallsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureDataCallsIsMutable();
            dataCalls_.set(index, value);
            onChanged();
          } else {
            dataCallsBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder setDataCalls(
            int index, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder builderForValue) {
          if (dataCallsBuilder_ == null) {
            ensureDataCallsIsMutable();
            dataCalls_.set(index, builderForValue.build());
            onChanged();
          } else {
            dataCallsBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder addDataCalls(com.android.internal.telephony.TelephonyProto.RilDataCall value) {
          if (dataCallsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureDataCallsIsMutable();
            dataCalls_.add(value);
            onChanged();
          } else {
            dataCallsBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder addDataCalls(
            int index, com.android.internal.telephony.TelephonyProto.RilDataCall value) {
          if (dataCallsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureDataCallsIsMutable();
            dataCalls_.add(index, value);
            onChanged();
          } else {
            dataCallsBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder addDataCalls(
            com.android.internal.telephony.TelephonyProto.RilDataCall.Builder builderForValue) {
          if (dataCallsBuilder_ == null) {
            ensureDataCallsIsMutable();
            dataCalls_.add(builderForValue.build());
            onChanged();
          } else {
            dataCallsBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder addDataCalls(
            int index, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder builderForValue) {
          if (dataCallsBuilder_ == null) {
            ensureDataCallsIsMutable();
            dataCalls_.add(index, builderForValue.build());
            onChanged();
          } else {
            dataCallsBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder addAllDataCalls(
            java.lang.Iterable<? extends com.android.internal.telephony.TelephonyProto.RilDataCall> values) {
          if (dataCallsBuilder_ == null) {
            ensureDataCallsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, dataCalls_);
            onChanged();
          } else {
            dataCallsBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder clearDataCalls() {
          if (dataCallsBuilder_ == null) {
            dataCalls_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000040);
            onChanged();
          } else {
            dataCallsBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public Builder removeDataCalls(int index) {
          if (dataCallsBuilder_ == null) {
            ensureDataCallsIsMutable();
            dataCalls_.remove(index);
            onChanged();
          } else {
            dataCallsBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public com.android.internal.telephony.TelephonyProto.RilDataCall.Builder getDataCallsBuilder(
            int index) {
          return getDataCallsFieldBuilder().getBuilder(index);
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder getDataCallsOrBuilder(
            int index) {
          if (dataCallsBuilder_ == null) {
            return dataCalls_.get(index);  } else {
            return dataCallsBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public java.util.List<? extends com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> 
             getDataCallsOrBuilderList() {
          if (dataCallsBuilder_ != null) {
            return dataCallsBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(dataCalls_);
          }
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public com.android.internal.telephony.TelephonyProto.RilDataCall.Builder addDataCallsBuilder() {
          return getDataCallsFieldBuilder().addBuilder(
              com.android.internal.telephony.TelephonyProto.RilDataCall.getDefaultInstance());
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public com.android.internal.telephony.TelephonyProto.RilDataCall.Builder addDataCallsBuilder(
            int index) {
          return getDataCallsFieldBuilder().addBuilder(
              index, com.android.internal.telephony.TelephonyProto.RilDataCall.getDefaultInstance());
        }
        /**
         * <pre>
         * List of data calls at the beginning of the session or when changed
         * </pre>
         *
         * <code>repeated .clearcut.connectivity.RilDataCall data_calls = 7;</code>
         */
        public java.util.List<com.android.internal.telephony.TelephonyProto.RilDataCall.Builder> 
             getDataCallsBuilderList() {
          return getDataCallsFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            com.android.internal.telephony.TelephonyProto.RilDataCall, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder, com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder> 
            getDataCallsFieldBuilder() {
          if (dataCallsBuilder_ == null) {
            dataCallsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                com.android.internal.telephony.TelephonyProto.RilDataCall, com.android.internal.telephony.TelephonyProto.RilDataCall.Builder, com.android.internal.telephony.TelephonyProto.RilDataCallOrBuilder>(
                    dataCalls_,
                    ((bitField0_ & 0x00000040) == 0x00000040),
                    getParentForChildren(),
                    isClean());
            dataCalls_ = null;
          }
          return dataCallsBuilder_;
        }

        private int format_ = 0;
        /**
         * <pre>
         * Format of the message
         * </pre>
         *
         * <code>optional .clearcut.connectivity.SmsSession.Event.Format format = 8;</code>
         */
        public boolean hasFormat() {
          return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        /**
         * <pre>
         * Format of the message
         * </pre>
         *
         * <code>optional .clearcut.connectivity.SmsSession.Event.Format format = 8;</code>
         */
        public com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format getFormat() {
          com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format result = com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format.valueOf(format_);
          return result == null ? com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format.SMS_FORMAT_UNKNOWN : result;
        }
        /**
         * <pre>
         * Format of the message
         * </pre>
         *
         * <code>optional .clearcut.connectivity.SmsSession.Event.Format format = 8;</code>
         */
        public Builder setFormat(com.android.internal.telephony.TelephonyProto.SmsSession.Event.Format value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000080;
          format_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Format of the message
         * </pre>
         *
         * <code>optional .clearcut.connectivity.SmsSession.Event.Format format = 8;</code>
         */
        public Builder clearFormat() {
          bitField0_ = (bitField0_ & ~0x00000080);
          format_ = 0;
          onChanged();
          return this;
        }

        private int tech_ = 0;
        /**
         * <pre>
         * Technology used to send/receive SMS
         * </pre>
         *
         * <code>optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;</code>
         */
        public boolean hasTech() {
          return ((bitField0_ & 0x00000100) == 0x00000100);
        }
        /**
         * <pre>
         * Technology used to send/receive SMS
         * </pre>
         *
         * <code>optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;</code>
         */
        public com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech getTech() {
          com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech result = com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech.valueOf(tech_);
          return result == null ? com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech.SMS_UNKNOWN : result;
        }
        /**
         * <pre>
         * Technology used to send/receive SMS
         * </pre>
         *
         * <code>optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;</code>
         */
        public Builder setTech(com.android.internal.telephony.TelephonyProto.SmsSession.Event.Tech value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000100;
          tech_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Technology used to send/receive SMS
         * </pre>
         *
         * <code>optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;</code>
         */
        public Builder clearTech() {
          bitField0_ = (bitField0_ & ~0x00000100);
          tech_ = 0;
          onChanged();
          return this;
        }

        private int errorCode_ ;
        /**
         * <pre>
         * See 3GPP 27.005, 3.2.5 for GSM/UMTS,
         * 3GPP2 N.S0005 (IS-41C) Table 171 for CDMA,
         * -1 if unknown or not applicable
         * </pre>
         *
         * <code>optional int32 error_code = 10;</code>
         */
        public boolean hasErrorCode() {
          return ((bitField0_ & 0x00000200) == 0x00000200);
        }
        /**
         * <pre>
         * See 3GPP 27.005, 3.2.5 for GSM/UMTS,
         * 3GPP2 N.S0005 (IS-41C) Table 171 for CDMA,
         * -1 if unknown or not applicable
         * </pre>
         *
         * <code>optional int32 error_code = 10;</code>
         */
        public int getErrorCode() {
          return errorCode_;
        }
        /**
         * <pre>
         * See 3GPP 27.005, 3.2.5 for GSM/UMTS,
         * 3GPP2 N.S0005 (IS-41C) Table 171 for CDMA,
         * -1 if unknown or not applicable
         * </pre>
         *
         * <code>optional int32 error_code = 10;</code>
         */
        public Builder setErrorCode(int value) {
          bitField0_ |= 0x00000200;
          errorCode_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * See 3GPP 27.005, 3.2.5 for GSM/UMTS,
         * 3GPP2 N.S0005 (IS-41C) Table 171 for CDMA,
         * -1 if unknown or not applicable
         * </pre>
         *
         * <code>optional int32 error_code = 10;</code>
         */
        public Builder clearErrorCode() {
          bitField0_ = (bitField0_ & ~0x00000200);
          errorCode_ = 0;
          onChanged();
          return this;
        }

        private int error_ = 0;
        /**
         * <pre>
         * RIL error code
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RilErrno error = 11;</code>
         */
        public boolean hasError() {
          return ((bitField0_ & 0x00000400) == 0x00000400);
        }
        /**
         * <pre>
         * RIL error code
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RilErrno error = 11;</code>
         */
        public com.android.internal.telephony.TelephonyProto.RilErrno getError() {
          com.android.internal.telephony.TelephonyProto.RilErrno result = com.android.internal.telephony.TelephonyProto.RilErrno.valueOf(error_);
          return result == null ? com.android.internal.telephony.TelephonyProto.RilErrno.RIL_E_UNKNOWN : result;
        }
        /**
         * <pre>
         * RIL error code
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RilErrno error = 11;</code>
         */
        public Builder setError(com.android.internal.telephony.TelephonyProto.RilErrno value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000400;
          error_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * RIL error code
         * </pre>
         *
         * <code>optional .clearcut.connectivity.RilErrno error = 11;</code>
         */
        public Builder clearError() {
          bitField0_ = (bitField0_ & ~0x00000400);
          error_ = 0;
          onChanged();
          return this;
        }

        private int rilRequestId_ ;
        /**
         * <pre>
         * Numeric ID
         * </pre>
         *
         * <code>optional int32 ril_request_id = 12;</code>
         */
        public boolean hasRilRequestId() {
          return ((bitField0_ & 0x00000800) == 0x00000800);
        }
        /**
         * <pre>
         * Numeric ID
         * </pre>
         *
         * <code>optional int32 ril_request_id = 12;</code>
         */
        public int getRilRequestId() {
          return rilRequestId_;
        }
        /**
         * <pre>
         * Numeric ID
         * </pre>
         *
         * <code>optional int32 ril_request_id = 12;</code>
         */
        public Builder setRilRequestId(int value) {
          bitField0_ |= 0x00000800;
          rilRequestId_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Numeric ID
         * </pre>
         *
         * <code>optional int32 ril_request_id = 12;</code>
         */
        public Builder clearRilRequestId() {
          bitField0_ = (bitField0_ & ~0x00000800);
          rilRequestId_ = 0;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:clearcut.connectivity.SmsSession.Event)
      }

      // @@protoc_insertion_point(class_scope:clearcut.connectivity.SmsSession.Event)
      private static final com.android.internal.telephony.TelephonyProto.SmsSession.Event DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.SmsSession.Event();
      }

      public static com.android.internal.telephony.TelephonyProto.SmsSession.Event getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Event>
          PARSER = new com.google.protobuf.AbstractParser<Event>() {
        public Event parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new Event(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Event> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Event> getParserForType() {
        return PARSER;
      }

      public com.android.internal.telephony.TelephonyProto.SmsSession.Event getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int START_TIME_MINUTES_FIELD_NUMBER = 1;
    private int startTimeMinutes_;
    /**
     * <pre>
     * Time when session has started, in minutes since epoch,
     * with 5 minutes precision
     * </pre>
     *
     * <code>optional int32 start_time_minutes = 1;</code>
     */
    public boolean hasStartTimeMinutes() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Time when session has started, in minutes since epoch,
     * with 5 minutes precision
     * </pre>
     *
     * <code>optional int32 start_time_minutes = 1;</code>
     */
    public int getStartTimeMinutes() {
      return startTimeMinutes_;
    }

    public static final int PHONE_ID_FIELD_NUMBER = 2;
    private int phoneId_;
    /**
     * <pre>
     * In Multi-SIM devices this indicates SIM slot
     * </pre>
     *
     * <code>optional int32 phone_id = 2;</code>
     */
    public boolean hasPhoneId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * In Multi-SIM devices this indicates SIM slot
     * </pre>
     *
     * <code>optional int32 phone_id = 2;</code>
     */
    public int getPhoneId() {
      return phoneId_;
    }

    public static final int EVENTS_FIELD_NUMBER = 3;
    private java.util.List<com.android.internal.telephony.TelephonyProto.SmsSession.Event> events_;
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
     */
    public java.util.List<com.android.internal.telephony.TelephonyProto.SmsSession.Event> getEventsList() {
      return events_;
    }
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
     */
    public java.util.List<? extends com.android.internal.telephony.TelephonyProto.SmsSession.EventOrBuilder> 
        getEventsOrBuilderList() {
      return events_;
    }
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
     */
    public int getEventsCount() {
      return events_.size();
    }
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
     */
    public com.android.internal.telephony.TelephonyProto.SmsSession.Event getEvents(int index) {
      return events_.get(index);
    }
    /**
     * <pre>
     * List of events happened during the call
     * </pre>
     *
     * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
     */
    public com.android.internal.telephony.TelephonyProto.SmsSession.EventOrBuilder getEventsOrBuilder(
        int index) {
      return events_.get(index);
    }

    public static final int EVENTS_DROPPED_FIELD_NUMBER = 4;
    private boolean eventsDropped_;
    /**
     * <pre>
     * Indicating some sms session events are dropped
     * </pre>
     *
     * <code>optional bool events_dropped = 4;</code>
     */
    public boolean hasEventsDropped() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Indicating some sms session events are dropped
     * </pre>
     *
     * <code>optional bool events_dropped = 4;</code>
     */
    public boolean getEventsDropped() {
      return eventsDropped_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, startTimeMinutes_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, phoneId_);
      }
      for (int i = 0; i < events_.size(); i++) {
        output.writeMessage(3, events_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(4, eventsDropped_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, startTimeMinutes_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, phoneId_);
      }
      for (int i = 0; i < events_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, events_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, eventsDropped_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.internal.telephony.TelephonyProto.SmsSession)) {
        return super.equals(obj);
      }
      com.android.internal.telephony.TelephonyProto.SmsSession other = (com.android.internal.telephony.TelephonyProto.SmsSession) obj;

      boolean result = true;
      result = result && (hasStartTimeMinutes() == other.hasStartTimeMinutes());
      if (hasStartTimeMinutes()) {
        result = result && (getStartTimeMinutes()
            == other.getStartTimeMinutes());
      }
      result = result && (hasPhoneId() == other.hasPhoneId());
      if (hasPhoneId()) {
        result = result && (getPhoneId()
            == other.getPhoneId());
      }
      result = result && getEventsList()
          .equals(other.getEventsList());
      result = result && (hasEventsDropped() == other.hasEventsDropped());
      if (hasEventsDropped()) {
        result = result && (getEventsDropped()
            == other.getEventsDropped());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasStartTimeMinutes()) {
        hash = (37 * hash) + START_TIME_MINUTES_FIELD_NUMBER;
        hash = (53 * hash) + getStartTimeMinutes();
      }
      if (hasPhoneId()) {
        hash = (37 * hash) + PHONE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getPhoneId();
      }
      if (getEventsCount() > 0) {
        hash = (37 * hash) + EVENTS_FIELD_NUMBER;
        hash = (53 * hash) + getEventsList().hashCode();
      }
      if (hasEventsDropped()) {
        hash = (37 * hash) + EVENTS_DROPPED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEventsDropped());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.internal.telephony.TelephonyProto.SmsSession parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.SmsSession parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.SmsSession parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.internal.telephony.TelephonyProto.SmsSession parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.SmsSession parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.SmsSession parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.SmsSession parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.SmsSession parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.internal.telephony.TelephonyProto.SmsSession parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.internal.telephony.TelephonyProto.SmsSession parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.internal.telephony.TelephonyProto.SmsSession prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code clearcut.connectivity.SmsSession}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clearcut.connectivity.SmsSession)
        com.android.internal.telephony.TelephonyProto.SmsSessionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_SmsSession_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_SmsSession_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.internal.telephony.TelephonyProto.SmsSession.class, com.android.internal.telephony.TelephonyProto.SmsSession.Builder.class);
      }

      // Construct using com.android.internal.telephony.TelephonyProto.SmsSession.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getEventsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        startTimeMinutes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        phoneId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (eventsBuilder_ == null) {
          events_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          eventsBuilder_.clear();
        }
        eventsDropped_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.internal.telephony.TelephonyProto.internal_static_clearcut_connectivity_SmsSession_descriptor;
      }

      public com.android.internal.telephony.TelephonyProto.SmsSession getDefaultInstanceForType() {
        return com.android.internal.telephony.TelephonyProto.SmsSession.getDefaultInstance();
      }

      public com.android.internal.telephony.TelephonyProto.SmsSession build() {
        com.android.internal.telephony.TelephonyProto.SmsSession result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.android.internal.telephony.TelephonyProto.SmsSession buildPartial() {
        com.android.internal.telephony.TelephonyProto.SmsSession result = new com.android.internal.telephony.TelephonyProto.SmsSession(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.startTimeMinutes_ = startTimeMinutes_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.phoneId_ = phoneId_;
        if (eventsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            events_ = java.util.Collections.unmodifiableList(events_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.events_ = events_;
        } else {
          result.events_ = eventsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.eventsDropped_ = eventsDropped_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.internal.telephony.TelephonyProto.SmsSession) {
          return mergeFrom((com.android.internal.telephony.TelephonyProto.SmsSession)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.internal.telephony.TelephonyProto.SmsSession other) {
        if (other == com.android.internal.telephony.TelephonyProto.SmsSession.getDefaultInstance()) return this;
        if (other.hasStartTimeMinutes()) {
          setStartTimeMinutes(other.getStartTimeMinutes());
        }
        if (other.hasPhoneId()) {
          setPhoneId(other.getPhoneId());
        }
        if (eventsBuilder_ == null) {
          if (!other.events_.isEmpty()) {
            if (events_.isEmpty()) {
              events_ = other.events_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureEventsIsMutable();
              events_.addAll(other.events_);
            }
            onChanged();
          }
        } else {
          if (!other.events_.isEmpty()) {
            if (eventsBuilder_.isEmpty()) {
              eventsBuilder_.dispose();
              eventsBuilder_ = null;
              events_ = other.events_;
              bitField0_ = (bitField0_ & ~0x00000004);
              eventsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getEventsFieldBuilder() : null;
            } else {
              eventsBuilder_.addAllMessages(other.events_);
            }
          }
        }
        if (other.hasEventsDropped()) {
          setEventsDropped(other.getEventsDropped());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.android.internal.telephony.TelephonyProto.SmsSession parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.android.internal.telephony.TelephonyProto.SmsSession) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int startTimeMinutes_ ;
      /**
       * <pre>
       * Time when session has started, in minutes since epoch,
       * with 5 minutes precision
       * </pre>
       *
       * <code>optional int32 start_time_minutes = 1;</code>
       */
      public boolean hasStartTimeMinutes() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * Time when session has started, in minutes since epoch,
       * with 5 minutes precision
       * </pre>
       *
       * <code>optional int32 start_time_minutes = 1;</code>
       */
      public int getStartTimeMinutes() {
        return startTimeMinutes_;
      }
      /**
       * <pre>
       * Time when session has started, in minutes since epoch,
       * with 5 minutes precision
       * </pre>
       *
       * <code>optional int32 start_time_minutes = 1;</code>
       */
      public Builder setStartTimeMinutes(int value) {
        bitField0_ |= 0x00000001;
        startTimeMinutes_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Time when session has started, in minutes since epoch,
       * with 5 minutes precision
       * </pre>
       *
       * <code>optional int32 start_time_minutes = 1;</code>
       */
      public Builder clearStartTimeMinutes() {
        bitField0_ = (bitField0_ & ~0x00000001);
        startTimeMinutes_ = 0;
        onChanged();
        return this;
      }

      private int phoneId_ ;
      /**
       * <pre>
       * In Multi-SIM devices this indicates SIM slot
       * </pre>
       *
       * <code>optional int32 phone_id = 2;</code>
       */
      public boolean hasPhoneId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * In Multi-SIM devices this indicates SIM slot
       * </pre>
       *
       * <code>optional int32 phone_id = 2;</code>
       */
      public int getPhoneId() {
        return phoneId_;
      }
      /**
       * <pre>
       * In Multi-SIM devices this indicates SIM slot
       * </pre>
       *
       * <code>optional int32 phone_id = 2;</code>
       */
      public Builder setPhoneId(int value) {
        bitField0_ |= 0x00000002;
        phoneId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In Multi-SIM devices this indicates SIM slot
       * </pre>
       *
       * <code>optional int32 phone_id = 2;</code>
       */
      public Builder clearPhoneId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        phoneId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<com.android.internal.telephony.TelephonyProto.SmsSession.Event> events_ =
        java.util.Collections.emptyList();
      private void ensureEventsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          events_ = new java.util.ArrayList<com.android.internal.telephony.TelephonyProto.SmsSession.Event>(events_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.SmsSession.Event, com.android.internal.telephony.TelephonyProto.SmsSession.Event.Builder, com.android.internal.telephony.TelephonyProto.SmsSession.EventOrBuilder> eventsBuilder_;

      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.SmsSession.Event> getEventsList() {
        if (eventsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(events_);
        } else {
          return eventsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public int getEventsCount() {
        if (eventsBuilder_ == null) {
          return events_.size();
        } else {
          return eventsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.SmsSession.Event getEvents(int index) {
        if (eventsBuilder_ == null) {
          return events_.get(index);
        } else {
          return eventsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public Builder setEvents(
          int index, com.android.internal.telephony.TelephonyProto.SmsSession.Event value) {
        if (eventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEventsIsMutable();
          events_.set(index, value);
          onChanged();
        } else {
          eventsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public Builder setEvents(
          int index, com.android.internal.telephony.TelephonyProto.SmsSession.Event.Builder builderForValue) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.set(index, builderForValue.build());
          onChanged();
        } else {
          eventsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public Builder addEvents(com.android.internal.telephony.TelephonyProto.SmsSession.Event value) {
        if (eventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEventsIsMutable();
          events_.add(value);
          onChanged();
        } else {
          eventsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public Builder addEvents(
          int index, com.android.internal.telephony.TelephonyProto.SmsSession.Event value) {
        if (eventsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEventsIsMutable();
          events_.add(index, value);
          onChanged();
        } else {
          eventsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public Builder addEvents(
          com.android.internal.telephony.TelephonyProto.SmsSession.Event.Builder builderForValue) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.add(builderForValue.build());
          onChanged();
        } else {
          eventsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public Builder addEvents(
          int index, com.android.internal.telephony.TelephonyProto.SmsSession.Event.Builder builderForValue) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.add(index, builderForValue.build());
          onChanged();
        } else {
          eventsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public Builder addAllEvents(
          java.lang.Iterable<? extends com.android.internal.telephony.TelephonyProto.SmsSession.Event> values) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, events_);
          onChanged();
        } else {
          eventsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public Builder clearEvents() {
        if (eventsBuilder_ == null) {
          events_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          eventsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public Builder removeEvents(int index) {
        if (eventsBuilder_ == null) {
          ensureEventsIsMutable();
          events_.remove(index);
          onChanged();
        } else {
          eventsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.SmsSession.Event.Builder getEventsBuilder(
          int index) {
        return getEventsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.SmsSession.EventOrBuilder getEventsOrBuilder(
          int index) {
        if (eventsBuilder_ == null) {
          return events_.get(index);  } else {
          return eventsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public java.util.List<? extends com.android.internal.telephony.TelephonyProto.SmsSession.EventOrBuilder> 
           getEventsOrBuilderList() {
        if (eventsBuilder_ != null) {
          return eventsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(events_);
        }
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.SmsSession.Event.Builder addEventsBuilder() {
        return getEventsFieldBuilder().addBuilder(
            com.android.internal.telephony.TelephonyProto.SmsSession.Event.getDefaultInstance());
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public com.android.internal.telephony.TelephonyProto.SmsSession.Event.Builder addEventsBuilder(
          int index) {
        return getEventsFieldBuilder().addBuilder(
            index, com.android.internal.telephony.TelephonyProto.SmsSession.Event.getDefaultInstance());
      }
      /**
       * <pre>
       * List of events happened during the call
       * </pre>
       *
       * <code>repeated .clearcut.connectivity.SmsSession.Event events = 3;</code>
       */
      public java.util.List<com.android.internal.telephony.TelephonyProto.SmsSession.Event.Builder> 
           getEventsBuilderList() {
        return getEventsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.android.internal.telephony.TelephonyProto.SmsSession.Event, com.android.internal.telephony.TelephonyProto.SmsSession.Event.Builder, com.android.internal.telephony.TelephonyProto.SmsSession.EventOrBuilder> 
          getEventsFieldBuilder() {
        if (eventsBuilder_ == null) {
          eventsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.android.internal.telephony.TelephonyProto.SmsSession.Event, com.android.internal.telephony.TelephonyProto.SmsSession.Event.Builder, com.android.internal.telephony.TelephonyProto.SmsSession.EventOrBuilder>(
                  events_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          events_ = null;
        }
        return eventsBuilder_;
      }

      private boolean eventsDropped_ ;
      /**
       * <pre>
       * Indicating some sms session events are dropped
       * </pre>
       *
       * <code>optional bool events_dropped = 4;</code>
       */
      public boolean hasEventsDropped() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * Indicating some sms session events are dropped
       * </pre>
       *
       * <code>optional bool events_dropped = 4;</code>
       */
      public boolean getEventsDropped() {
        return eventsDropped_;
      }
      /**
       * <pre>
       * Indicating some sms session events are dropped
       * </pre>
       *
       * <code>optional bool events_dropped = 4;</code>
       */
      public Builder setEventsDropped(boolean value) {
        bitField0_ |= 0x00000008;
        eventsDropped_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Indicating some sms session events are dropped
       * </pre>
       *
       * <code>optional bool events_dropped = 4;</code>
       */
      public Builder clearEventsDropped() {
        bitField0_ = (bitField0_ & ~0x00000008);
        eventsDropped_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clearcut.connectivity.SmsSession)
    }

    // @@protoc_insertion_point(class_scope:clearcut.connectivity.SmsSession)
    private static final com.android.internal.telephony.TelephonyProto.SmsSession DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.internal.telephony.TelephonyProto.SmsSession();
    }

    public static com.android.internal.telephony.TelephonyProto.SmsSession getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<SmsSession>
        PARSER = new com.google.protobuf.AbstractParser<SmsSession>() {
      public SmsSession parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new SmsSession(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SmsSession> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SmsSession> getParserForType() {
      return PARSER;
    }

    public com.android.internal.telephony.TelephonyProto.SmsSession getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_TelephonyLog_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_TelephonyLog_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_Time_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_Time_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_TelephonyHistogram_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_TelephonyHistogram_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_TelephonySettings_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_TelephonySettings_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_TelephonyServiceState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_TelephonyServiceState_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_TelephonyServiceState_TelephonyOperator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_TelephonyServiceState_TelephonyOperator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_ImsReasonInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_ImsReasonInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_ImsConnectionState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_ImsConnectionState_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_ImsCapabilities_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_ImsCapabilities_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_RilDataCall_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_RilDataCall_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_TelephonyEvent_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_TelephonyEvent_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCall_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCall_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCallResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCallResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_TelephonyEvent_RilDeactivateDataCall_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_TelephonyEvent_RilDeactivateDataCall_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_TelephonyEvent_ModemRestart_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_TelephonyEvent_ModemRestart_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_TelephonyCallSession_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_TelephonyCallSession_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_TelephonyCallSession_Event_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_TelephonyCallSession_Event_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_TelephonyCallSession_Event_RilCall_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_TelephonyCallSession_Event_RilCall_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_SmsSession_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_SmsSession_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clearcut_connectivity_SmsSession_Event_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clearcut_connectivity_SmsSession_Event_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n.com/android/internal/telephony/telepho" +
      "ny.proto\022\025clearcut.connectivity\"\371\002\n\014Tele" +
      "phonyLog\0225\n\006events\030\001 \003(\0132%.clearcut.conn" +
      "ectivity.TelephonyEvent\022B\n\rcall_sessions" +
      "\030\002 \003(\0132+.clearcut.connectivity.Telephony" +
      "CallSession\0227\n\014sms_sessions\030\003 \003(\0132!.clea" +
      "rcut.connectivity.SmsSession\022=\n\nhistogra" +
      "ms\030\004 \003(\0132).clearcut.connectivity.Telepho" +
      "nyHistogram\022\026\n\016events_dropped\030\005 \001(\010\022/\n\ns" +
      "tart_time\030\006 \001(\0132\033.clearcut.connectivity.",
      "Time\022-\n\010end_time\030\007 \001(\0132\033.clearcut.connec" +
      "tivity.Time\"I\n\004Time\022\037\n\027system_timestamp_" +
      "millis\030\001 \001(\003\022 \n\030elapsed_timestamp_millis" +
      "\030\002 \001(\003\"\326\001\n\022TelephonyHistogram\022\020\n\010categor" +
      "y\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\027\n\017min_time_millis\030\003" +
      " \001(\005\022\027\n\017max_time_millis\030\004 \001(\005\022\027\n\017avg_tim" +
      "e_millis\030\005 \001(\005\022\r\n\005count\030\006 \001(\005\022\024\n\014bucket_" +
      "count\030\007 \001(\005\022\031\n\021bucket_end_points\030\010 \003(\005\022\027" +
      "\n\017bucket_counters\030\t \003(\005\"\332\n\n\021TelephonySet" +
      "tings\022\030\n\020is_airplane_mode\030\001 \001(\010\022 \n\030is_ce",
      "llular_data_enabled\030\002 \001(\010\022\037\n\027is_data_roa" +
      "ming_enabled\030\003 \001(\010\022W\n\026preferred_network_" +
      "mode\030\004 \001(\01627.clearcut.connectivity.Telep" +
      "honySettings.RilNetworkMode\022\'\n\037is_enhanc" +
      "ed_4g_lte_mode_enabled\030\005 \001(\010\022\027\n\017is_wifi_" +
      "enabled\030\006 \001(\010\022\037\n\027is_wifi_calling_enabled" +
      "\030\007 \001(\010\022S\n\021wifi_calling_mode\030\010 \001(\01628.clea" +
      "rcut.connectivity.TelephonySettings.WiFi" +
      "CallingMode\022\036\n\026is_vt_over_lte_enabled\030\t " +
      "\001(\010\022\037\n\027is_vt_over_wifi_enabled\030\n \001(\010\"\226\006\n",
      "\016RilNetworkMode\022\030\n\024NETWORK_MODE_UNKNOWN\020" +
      "\000\022\033\n\027NETWORK_MODE_WCDMA_PREF\020\001\022\031\n\025NETWOR" +
      "K_MODE_GSM_ONLY\020\002\022\033\n\027NETWORK_MODE_WCDMA_" +
      "ONLY\020\003\022\031\n\025NETWORK_MODE_GSM_UMTS\020\004\022\025\n\021NET" +
      "WORK_MODE_CDMA\020\005\022\035\n\031NETWORK_MODE_CDMA_NO" +
      "_EVDO\020\006\022\035\n\031NETWORK_MODE_EVDO_NO_CDMA\020\007\022\027" +
      "\n\023NETWORK_MODE_GLOBAL\020\010\022\036\n\032NETWORK_MODE_" +
      "LTE_CDMA_EVDO\020\t\022\036\n\032NETWORK_MODE_LTE_GSM_" +
      "WCDMA\020\n\022(\n$NETWORK_MODE_LTE_CDMA_EVDO_GS" +
      "M_WCDMA\020\013\022\031\n\025NETWORK_MODE_LTE_ONLY\020\014\022\032\n\026",
      "NETWORK_MODE_LTE_WCDMA\020\r\022\035\n\031NETWORK_MODE" +
      "_TDSCDMA_ONLY\020\016\022\036\n\032NETWORK_MODE_TDSCDMA_" +
      "WCDMA\020\017\022\034\n\030NETWORK_MODE_LTE_TDSCDMA\020\020\022\034\n" +
      "\030NETWORK_MODE_TDSCDMA_GSM\020\021\022 \n\034NETWORK_M" +
      "ODE_LTE_TDSCDMA_GSM\020\022\022\"\n\036NETWORK_MODE_TD" +
      "SCDMA_GSM_WCDMA\020\023\022\"\n\036NETWORK_MODE_LTE_TD" +
      "SCDMA_WCDMA\020\024\022&\n\"NETWORK_MODE_LTE_TDSCDM" +
      "A_GSM_WCDMA\020\025\022,\n(NETWORK_MODE_TDSCDMA_CD" +
      "MA_EVDO_GSM_WCDMA\020\026\0220\n,NETWORK_MODE_LTE_" +
      "TDSCDMA_CDMA_EVDO_GSM_WCDMA\020\027\"}\n\017WiFiCal",
      "lingMode\022\024\n\020WFC_MODE_UNKNOWN\020\000\022\026\n\022WFC_MO" +
      "DE_WIFI_ONLY\020\001\022\037\n\033WFC_MODE_CELLULAR_PREF" +
      "ERRED\020\002\022\033\n\027WFC_MODE_WIFI_PREFERRED\020\003\"\343\005\n" +
      "\025TelephonyServiceState\022V\n\016voice_operator" +
      "\030\001 \001(\0132>.clearcut.connectivity.Telephony" +
      "ServiceState.TelephonyOperator\022U\n\rdata_o" +
      "perator\030\002 \001(\0132>.clearcut.connectivity.Te" +
      "lephonyServiceState.TelephonyOperator\022]\n" +
      "\022voice_roaming_type\030\003 \001(\01628.clearcut.con" +
      "nectivity.TelephonyServiceState.RoamingT",
      "ype:\007UNKNOWN\022\\\n\021data_roaming_type\030\004 \001(\0162" +
      "8.clearcut.connectivity.TelephonyService" +
      "State.RoamingType:\007UNKNOWN\022H\n\tvoice_rat\030" +
      "\005 \001(\0162,.clearcut.connectivity.RadioAcces" +
      "sTechnology:\007UNKNOWN\022G\n\010data_rat\030\006 \001(\0162," +
      ".clearcut.connectivity.RadioAccessTechno" +
      "logy:\007UNKNOWN\032M\n\021TelephonyOperator\022\022\n\nal" +
      "pha_long\030\001 \001(\t\022\023\n\013alpha_short\030\002 \001(\t\022\017\n\007n" +
      "umeric\030\003 \001(\t\"|\n\013RoamingType\022\024\n\007UNKNOWN\020\377" +
      "\377\377\377\377\377\377\377\377\001\022\034\n\030ROAMING_TYPE_NOT_ROAMING\020\000\022",
      "\031\n\025ROAMING_TYPE_DOMESTIC\020\002\022\036\n\032ROAMING_TY" +
      "PE_INTERNATIONAL\020\003\"O\n\rImsReasonInfo\022\023\n\013r" +
      "eason_code\030\001 \001(\005\022\022\n\nextra_code\030\002 \001(\005\022\025\n\r" +
      "extra_message\030\003 \001(\t\"\371\001\n\022ImsConnectionSta" +
      "te\022>\n\005state\030\001 \001(\0162/.clearcut.connectivit" +
      "y.ImsConnectionState.State\0229\n\013reason_inf" +
      "o\030\002 \001(\0132$.clearcut.connectivity.ImsReaso" +
      "nInfo\"h\n\005State\022\021\n\rSTATE_UNKNOWN\020\000\022\r\n\tCON" +
      "NECTED\020\001\022\017\n\013PROGRESSING\020\002\022\020\n\014DISCONNECTE" +
      "D\020\003\022\013\n\007RESUMED\020\004\022\r\n\tSUSPENDED\020\005\"\236\001\n\017ImsC",
      "apabilities\022\026\n\016voice_over_lte\030\001 \001(\010\022\027\n\017v" +
      "oice_over_wifi\030\002 \001(\010\022\026\n\016video_over_lte\030\003" +
      " \001(\010\022\027\n\017video_over_wifi\030\004 \001(\010\022\023\n\013ut_over" +
      "_lte\030\005 \001(\010\022\024\n\014ut_over_wifi\030\006 \001(\010\"X\n\013RilD" +
      "ataCall\022\013\n\003cid\030\001 \001(\005\022,\n\004type\030\002 \001(\0162\036.cle" +
      "arcut.connectivity.PdpType\022\016\n\006iframe\030\003 \001" +
      "(\t\"\274#\n\016TelephonyEvent\022\030\n\020timestamp_milli" +
      "s\030\001 \001(\003\022\020\n\010phone_id\030\002 \001(\005\0228\n\004type\030\003 \001(\0162" +
      "*.clearcut.connectivity.TelephonyEvent.T" +
      "ype\022:\n\010settings\030\004 \001(\0132(.clearcut.connect",
      "ivity.TelephonySettings\022C\n\rservice_state" +
      "\030\005 \001(\0132,.clearcut.connectivity.Telephony" +
      "ServiceState\022G\n\024ims_connection_state\030\006 \001" +
      "(\0132).clearcut.connectivity.ImsConnection" +
      "State\022@\n\020ims_capabilities\030\007 \001(\0132&.clearc" +
      "ut.connectivity.ImsCapabilities\0226\n\ndata_" +
      "calls\030\010 \003(\0132\".clearcut.connectivity.RilD" +
      "ataCall\022.\n\005error\030\t \001(\0162\037.clearcut.connec" +
      "tivity.RilErrno\022O\n\017setup_data_call\030\n \001(\013" +
      "26.clearcut.connectivity.TelephonyEvent.",
      "RilSetupDataCall\022`\n\030setup_data_call_resp" +
      "onse\030\013 \001(\0132>.clearcut.connectivity.Telep" +
      "honyEvent.RilSetupDataCallResponse\022Y\n\024de" +
      "activate_data_call\030\014 \001(\0132;.clearcut.conn" +
      "ectivity.TelephonyEvent.RilDeactivateDat" +
      "aCall\022\031\n\021data_stall_action\030\r \001(\005\022I\n\rmode" +
      "m_restart\030\016 \001(\01322.clearcut.connectivity." +
      "TelephonyEvent.ModemRestart\022\035\n\025nitz_time" +
      "stamp_millis\030\017 \001(\003\032\340\003\n\020RilSetupDataCall\022" +
      "B\n\003rat\030\001 \001(\0162,.clearcut.connectivity.Rad",
      "ioAccessTechnology:\007UNKNOWN\022[\n\014data_prof" +
      "ile\030\002 \001(\0162E.clearcut.connectivity.Teleph" +
      "onyEvent.RilSetupDataCall.RilDataProfile" +
      "\022\013\n\003apn\030\003 \001(\t\022,\n\004type\030\004 \001(\0162\036.clearcut.c" +
      "onnectivity.PdpType\"\357\001\n\016RilDataProfile\022\024" +
      "\n\020RIL_DATA_UNKNOWN\020\000\022\034\n\030RIL_DATA_PROFILE" +
      "_DEFAULT\020\001\022\035\n\031RIL_DATA_PROFILE_TETHERED\020" +
      "\002\022\030\n\024RIL_DATA_PROFILE_IMS\020\003\022\031\n\025RIL_DATA_" +
      "PROFILE_FOTA\020\004\022\030\n\024RIL_DATA_PROFILE_CBS\020\005" +
      "\022\035\n\031RIL_DATA_PROFILE_OEM_BASE\020\006\022\034\n\030RIL_D",
      "ATA_PROFILE_INVALID\020\007\032\270\023\n\030RilSetupDataCa" +
      "llResponse\022c\n\006status\030\001 \001(\0162S.clearcut.co" +
      "nnectivity.TelephonyEvent.RilSetupDataCa" +
      "llResponse.RilDataCallFailCause\022#\n\033sugge" +
      "sted_retry_time_millis\030\002 \001(\005\0220\n\004call\030\003 \001" +
      "(\0132\".clearcut.connectivity.RilDataCall\"\337" +
      "\021\n\024RilDataCallFailCause\022\024\n\020PDP_FAIL_UNKN" +
      "OWN\020\000\022\021\n\rPDP_FAIL_NONE\020\001\022\034\n\030PDP_FAIL_OPE" +
      "RATOR_BARRED\020\010\022\033\n\027PDP_FAIL_NAS_SIGNALLIN" +
      "G\020\016\022\026\n\022PDP_FAIL_LLC_SNDCP\020\031\022#\n\037PDP_FAIL_",
      "INSUFFICIENT_RESOURCES\020\032\022\037\n\033PDP_FAIL_MIS" +
      "SING_UKNOWN_APN\020\033\022%\n!PDP_FAIL_UNKNOWN_PD" +
      "P_ADDRESS_TYPE\020\034\022 \n\034PDP_FAIL_USER_AUTHEN" +
      "TICATION\020\035\022#\n\037PDP_FAIL_ACTIVATION_REJECT" +
      "_GGSN\020\036\022*\n&PDP_FAIL_ACTIVATION_REJECT_UN" +
      "SPECIFIED\020\037\022)\n%PDP_FAIL_SERVICE_OPTION_N" +
      "OT_SUPPORTED\020 \022*\n&PDP_FAIL_SERVICE_OPTIO" +
      "N_NOT_SUBSCRIBED\020!\022(\n$PDP_FAIL_SERVICE_O" +
      "PTION_OUT_OF_ORDER\020\"\022\031\n\025PDP_FAIL_NSAPI_I" +
      "N_USE\020#\022!\n\035PDP_FAIL_REGULAR_DEACTIVATION",
      "\020$\022\035\n\031PDP_FAIL_QOS_NOT_ACCEPTED\020%\022\034\n\030PDP" +
      "_FAIL_NETWORK_FAILURE\020&\022\"\n\036PDP_FAIL_UMTS" +
      "_REACTIVATION_REQ\020\'\022\035\n\031PDP_FAIL_FEATURE_" +
      "NOT_SUPP\020(\022\037\n\033PDP_FAIL_TFT_SEMANTIC_ERRO" +
      "R\020)\022\034\n\030PDP_FAIL_TFT_SYTAX_ERROR\020*\022 \n\034PDP" +
      "_FAIL_UNKNOWN_PDP_CONTEXT\020+\022\"\n\036PDP_FAIL_" +
      "FILTER_SEMANTIC_ERROR\020,\022\037\n\033PDP_FAIL_FILT" +
      "ER_SYTAX_ERROR\020-\022#\n\037PDP_FAIL_PDP_WITHOUT" +
      "_ACTIVE_TFT\020.\022\036\n\032PDP_FAIL_ONLY_IPV4_ALLO" +
      "WED\0202\022\036\n\032PDP_FAIL_ONLY_IPV6_ALLOWED\0203\022\'\n",
      "#PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED\0204\022\"" +
      "\n\036PDP_FAIL_ESM_INFO_NOT_RECEIVED\0205\022$\n PD" +
      "P_FAIL_PDN_CONN_DOES_NOT_EXIST\0206\022/\n+PDP_" +
      "FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED\020" +
      "7\022+\n\'PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REA" +
      "CHED\020A\022,\n(PDP_FAIL_UNSUPPORTED_APN_IN_CU" +
      "RRENT_PLMN\020B\022#\n\037PDP_FAIL_INVALID_TRANSAC" +
      "TION_ID\020Q\022\'\n#PDP_FAIL_MESSAGE_INCORRECT_" +
      "SEMANTIC\020_\022#\n\037PDP_FAIL_INVALID_MANDATORY" +
      "_INFO\020`\022%\n!PDP_FAIL_MESSAGE_TYPE_UNSUPPO",
      "RTED\020a\022)\n%PDP_FAIL_MSG_TYPE_NONCOMPATIBL" +
      "E_STATE\020b\022!\n\035PDP_FAIL_UNKNOWN_INFO_ELEME" +
      "NT\020c\022!\n\035PDP_FAIL_CONDITIONAL_IE_ERROR\020d\022" +
      "0\n,PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOM" +
      "PATIBLE\020e\022\034\n\030PDP_FAIL_PROTOCOL_ERRORS\020o\022" +
      "\036\n\032PDP_FAIL_APN_TYPE_CONFLICT\020p\022\037\n\033PDP_F" +
      "AIL_INVALID_PCSCF_ADDR\020q\0223\n/PDP_FAIL_INT" +
      "ERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN\020r\022\036\n" +
      "\032PDP_FAIL_EMM_ACCESS_BARRED\020s\022!\n\035PDP_FAI" +
      "L_EMERGENCY_IFACE_ONLY\020t\022\033\n\027PDP_FAIL_IFA",
      "CE_MISMATCH\020u\022#\n\037PDP_FAIL_COMPANION_IFAC" +
      "E_IN_USE\020v\022 \n\034PDP_FAIL_IP_ADDRESS_MISMAT" +
      "CH\020w\022*\n&PDP_FAIL_IFACE_AND_POL_FAMILY_MI" +
      "SMATCH\020x\022-\n)PDP_FAIL_EMM_ACCESS_BARRED_I" +
      "NFINITE_RETRY\020y\022+\n\'PDP_FAIL_AUTH_FAILURE" +
      "_ON_EMERGENCY_CALL\020z\022-\n PDP_FAIL_VOICE_R" +
      "EGISTRATION_FAIL\020\377\377\377\377\377\377\377\377\377\001\022,\n\037PDP_FAIL_" +
      "DATA_REGISTRATION_FAIL\020\376\377\377\377\377\377\377\377\377\001\022!\n\024PDP" +
      "_FAIL_SIGNAL_LOST\020\375\377\377\377\377\377\377\377\377\001\022-\n PDP_FAIL" +
      "_PREF_RADIO_TECH_CHANGED\020\374\377\377\377\377\377\377\377\377\001\022%\n\030P",
      "DP_FAIL_RADIO_POWER_OFF\020\373\377\377\377\377\377\377\377\377\001\022*\n\035PD" +
      "P_FAIL_TETHERED_CALL_ACTIVE\020\372\377\377\377\377\377\377\377\377\001\022 " +
      "\n\032PDP_FAIL_ERROR_UNSPECIFIED\020\377\377\003\032\224\002\n\025Ril" +
      "DeactivateDataCall\022\013\n\003cid\030\001 \001(\005\022\\\n\006reaso" +
      "n\030\002 \001(\0162L.clearcut.connectivity.Telephon" +
      "yEvent.RilDeactivateDataCall.DeactivateR" +
      "eason\"\217\001\n\020DeactivateReason\022\035\n\031DEACTIVATE" +
      "_REASON_UNKNOWN\020\000\022\032\n\026DEACTIVATE_REASON_N" +
      "ONE\020\001\022\037\n\033DEACTIVATE_REASON_RADIO_OFF\020\002\022\037" +
      "\n\033DEACTIVATE_REASON_PDP_RESET\020\003\0328\n\014Modem",
      "Restart\022\030\n\020baseband_version\030\001 \001(\t\022\016\n\006rea" +
      "son\030\002 \001(\t\"\315\002\n\004Type\022\013\n\007UNKNOWN\020\000\022\024\n\020SETTI" +
      "NGS_CHANGED\020\001\022\035\n\031RIL_SERVICE_STATE_CHANG" +
      "ED\020\002\022 \n\034IMS_CONNECTION_STATE_CHANGED\020\003\022\034" +
      "\n\030IMS_CAPABILITIES_CHANGED\020\004\022\023\n\017DATA_CAL" +
      "L_SETUP\020\005\022\034\n\030DATA_CALL_SETUP_RESPONSE\020\006\022" +
      "\032\n\026DATA_CALL_LIST_CHANGED\020\007\022\030\n\024DATA_CALL" +
      "_DEACTIVATE\020\010\022!\n\035DATA_CALL_DEACTIVATE_RE" +
      "SPONSE\020\t\022\025\n\021DATA_STALL_ACTION\020\n\022\021\n\rMODEM" +
      "_RESTART\020\013\022\r\n\tNITZ_TIME\020\014\"\236\031\n\024TelephonyC",
      "allSession\022\032\n\022start_time_minutes\030\001 \001(\005\022\020" +
      "\n\010phone_id\030\002 \001(\005\022A\n\006events\030\003 \003(\01321.clear" +
      "cut.connectivity.TelephonyCallSession.Ev" +
      "ent\022\026\n\016events_dropped\030\004 \001(\010\032\374\027\n\005Event\022D\n" +
      "\004type\030\001 \001(\01626.clearcut.connectivity.Tele" +
      "phonyCallSession.Event.Type\0222\n\005delay\030\002 \001" +
      "(\0162#.clearcut.connectivity.TimeInterval\022" +
      ":\n\010settings\030\003 \001(\0132(.clearcut.connectivit" +
      "y.TelephonySettings\022C\n\rservice_state\030\004 \001" +
      "(\0132,.clearcut.connectivity.TelephonyServ",
      "iceState\022G\n\024ims_connection_state\030\005 \001(\0132)" +
      ".clearcut.connectivity.ImsConnectionStat" +
      "e\022@\n\020ims_capabilities\030\006 \001(\0132&.clearcut.c" +
      "onnectivity.ImsCapabilities\0226\n\ndata_call" +
      "s\030\007 \003(\0132\".clearcut.connectivity.RilDataC" +
      "all\022Q\n\013phone_state\030\010 \001(\0162<.clearcut.conn" +
      "ectivity.TelephonyCallSession.Event.Phon" +
      "eState\022O\n\ncall_state\030\t \001(\0162;.clearcut.co" +
      "nnectivity.TelephonyCallSession.Event.Ca" +
      "llState\022\022\n\ncall_index\030\n \001(\005\022\031\n\021merged_ca",
      "ll_index\030\013 \001(\005\022H\n\005calls\030\014 \003(\01329.clearcut" +
      ".connectivity.TelephonyCallSession.Event" +
      ".RilCall\022.\n\005error\030\r \001(\0162\037.clearcut.conne" +
      "ctivity.RilErrno\022Q\n\013ril_request\030\016 \001(\0162<." +
      "clearcut.connectivity.TelephonyCallSessi" +
      "on.Event.RilRequest\022\026\n\016ril_request_id\030\017 " +
      "\001(\005\022T\n\013srvcc_state\030\020 \001(\0162?.clearcut.conn" +
      "ectivity.TelephonyCallSession.Event.RilS" +
      "rvccState\022Q\n\013ims_command\030\021 \001(\0162<.clearcu" +
      "t.connectivity.TelephonyCallSession.Even",
      "t.ImsCommand\0229\n\013reason_info\030\022 \001(\0132$.clea" +
      "rcut.connectivity.ImsReasonInfo\022N\n\017src_a" +
      "ccess_tech\030\023 \001(\0162,.clearcut.connectivity" +
      ".RadioAccessTechnology:\007UNKNOWN\022Q\n\022targe" +
      "t_access_tech\030\024 \001(\0162,.clearcut.connectiv" +
      "ity.RadioAccessTechnology:\007UNKNOWN\022\035\n\025ni" +
      "tz_timestamp_millis\030\025 \001(\003\032\207\002\n\007RilCall\022\r\n" +
      "\005index\030\001 \001(\005\022J\n\005state\030\002 \001(\0162;.clearcut.c" +
      "onnectivity.TelephonyCallSession.Event.C" +
      "allState\022L\n\004type\030\003 \001(\0162>.clearcut.connec",
      "tivity.TelephonyCallSession.Event.RilCal" +
      "l.Type\022\027\n\017call_end_reason\030\004 \001(\005\022\025\n\ris_mu" +
      "ltiparty\030\005 \001(\010\"#\n\004Type\022\013\n\007UNKNOWN\020\000\022\006\n\002M" +
      "O\020\001\022\006\n\002MT\020\002\"\224\004\n\004Type\022\021\n\rEVENT_UNKNOWN\020\000\022" +
      "\024\n\020SETTINGS_CHANGED\020\001\022\035\n\031RIL_SERVICE_STA" +
      "TE_CHANGED\020\002\022 \n\034IMS_CONNECTION_STATE_CHA" +
      "NGED\020\003\022\034\n\030IMS_CAPABILITIES_CHANGED\020\004\022\032\n\026" +
      "DATA_CALL_LIST_CHANGED\020\005\022\017\n\013RIL_REQUEST\020" +
      "\006\022\020\n\014RIL_RESPONSE\020\007\022\021\n\rRIL_CALL_RING\020\010\022\022" +
      "\n\016RIL_CALL_SRVCC\020\t\022\031\n\025RIL_CALL_LIST_CHAN",
      "GED\020\n\022\017\n\013IMS_COMMAND\020\013\022\030\n\024IMS_COMMAND_RE" +
      "CEIVED\020\014\022\026\n\022IMS_COMMAND_FAILED\020\r\022\030\n\024IMS_" +
      "COMMAND_COMPLETE\020\016\022\024\n\020IMS_CALL_RECEIVE\020\017" +
      "\022\032\n\026IMS_CALL_STATE_CHANGED\020\020\022\027\n\023IMS_CALL" +
      "_TERMINATED\020\021\022\025\n\021IMS_CALL_HANDOVER\020\022\022\034\n\030" +
      "IMS_CALL_HANDOVER_FAILED\020\023\022\027\n\023PHONE_STAT" +
      "E_CHANGED\020\024\022\r\n\tNITZ_TIME\020\025\"\360\001\n\nRilReques" +
      "t\022\027\n\023RIL_REQUEST_UNKNOWN\020\000\022\024\n\020RIL_REQUES" +
      "T_DIAL\020\001\022\026\n\022RIL_REQUEST_ANSWER\020\002\022\026\n\022RIL_" +
      "REQUEST_HANGUP\020\003\022 \n\034RIL_REQUEST_SET_CALL",
      "_WAITING\020\004\022)\n%RIL_REQUEST_SWITCH_HOLDING" +
      "_AND_ACTIVE\020\005\022\032\n\026RIL_REQUEST_CDMA_FLASH\020" +
      "\006\022\032\n\026RIL_REQUEST_CONFERENCE\020\007\"\237\002\n\nImsCom" +
      "mand\022\023\n\017IMS_CMD_UNKNOWN\020\000\022\021\n\rIMS_CMD_STA" +
      "RT\020\001\022\022\n\016IMS_CMD_ACCEPT\020\002\022\022\n\016IMS_CMD_REJE" +
      "CT\020\003\022\025\n\021IMS_CMD_TERMINATE\020\004\022\020\n\014IMS_CMD_H" +
      "OLD\020\005\022\022\n\016IMS_CMD_RESUME\020\006\022\021\n\rIMS_CMD_MER" +
      "GE\020\007\022\022\n\016IMS_CMD_UPDATE\020\010\022\035\n\031IMS_CMD_CONF" +
      "ERENCE_EXTEND\020\t\022\036\n\032IMS_CMD_INVITE_PARTIC" +
      "IPANT\020\n\022\036\n\032IMS_CMD_REMOVE_PARTICIPANT\020\013\"",
      "U\n\nPhoneState\022\021\n\rSTATE_UNKNOWN\020\000\022\016\n\nSTAT" +
      "E_IDLE\020\001\022\021\n\rSTATE_RINGING\020\002\022\021\n\rSTATE_OFF" +
      "HOOK\020\003\"\310\001\n\tCallState\022\020\n\014CALL_UNKNOWN\020\000\022\r" +
      "\n\tCALL_IDLE\020\001\022\017\n\013CALL_ACTIVE\020\002\022\020\n\014CALL_H" +
      "OLDING\020\003\022\020\n\014CALL_DIALING\020\004\022\021\n\rCALL_ALERT" +
      "ING\020\005\022\021\n\rCALL_INCOMING\020\006\022\020\n\014CALL_WAITING" +
      "\020\007\022\025\n\021CALL_DISCONNECTED\020\010\022\026\n\022CALL_DISCON" +
      "NECTING\020\t\"\177\n\rRilSrvccState\022\024\n\020HANDOVER_U" +
      "NKNOWN\020\000\022\024\n\020HANDOVER_STARTED\020\001\022\026\n\022HANDOV" +
      "ER_COMPLETED\020\002\022\023\n\017HANDOVER_FAILED\020\003\022\025\n\021H",
      "ANDOVER_CANCELED\020\004\"\221\t\n\nSmsSession\022\032\n\022sta" +
      "rt_time_minutes\030\001 \001(\005\022\020\n\010phone_id\030\002 \001(\005\022" +
      "7\n\006events\030\003 \003(\0132\'.clearcut.connectivity." +
      "SmsSession.Event\022\026\n\016events_dropped\030\004 \001(\010" +
      "\032\203\010\n\005Event\022:\n\004type\030\001 \001(\0162,.clearcut.conn" +
      "ectivity.SmsSession.Event.Type\0222\n\005delay\030" +
      "\002 \001(\0162#.clearcut.connectivity.TimeInterv" +
      "al\022:\n\010settings\030\003 \001(\0132(.clearcut.connecti" +
      "vity.TelephonySettings\022C\n\rservice_state\030" +
      "\004 \001(\0132,.clearcut.connectivity.TelephonyS",
      "erviceState\022G\n\024ims_connection_state\030\005 \001(" +
      "\0132).clearcut.connectivity.ImsConnectionS" +
      "tate\022@\n\020ims_capabilities\030\006 \001(\0132&.clearcu" +
      "t.connectivity.ImsCapabilities\0226\n\ndata_c" +
      "alls\030\007 \003(\0132\".clearcut.connectivity.RilDa" +
      "taCall\022>\n\006format\030\010 \001(\0162..clearcut.connec" +
      "tivity.SmsSession.Event.Format\022:\n\004tech\030\t" +
      " \001(\0162,.clearcut.connectivity.SmsSession." +
      "Event.Tech\022\022\n\nerror_code\030\n \001(\005\022.\n\005error\030" +
      "\013 \001(\0162\037.clearcut.connectivity.RilErrno\022\026",
      "\n\016ril_request_id\030\014 \001(\005\"\337\001\n\004Type\022\021\n\rEVENT" +
      "_UNKNOWN\020\000\022\024\n\020SETTINGS_CHANGED\020\001\022\035\n\031RIL_" +
      "SERVICE_STATE_CHANGED\020\002\022 \n\034IMS_CONNECTIO" +
      "N_STATE_CHANGED\020\003\022\034\n\030IMS_CAPABILITIES_CH" +
      "ANGED\020\004\022\032\n\026DATA_CALL_LIST_CHANGED\020\005\022\014\n\010S" +
      "MS_SEND\020\006\022\023\n\017SMS_SEND_RESULT\020\007\022\020\n\014SMS_RE" +
      "CEIVED\020\010\"K\n\006Format\022\026\n\022SMS_FORMAT_UNKNOWN" +
      "\020\000\022\023\n\017SMS_FORMAT_3GPP\020\001\022\024\n\020SMS_FORMAT_3G" +
      "PP2\020\002\"?\n\004Tech\022\017\n\013SMS_UNKNOWN\020\000\022\013\n\007SMS_GS" +
      "M\020\001\022\014\n\010SMS_CDMA\020\002\022\013\n\007SMS_IMS\020\003*\332\002\n\025Radio",
      "AccessTechnology\022\024\n\007UNKNOWN\020\377\377\377\377\377\377\377\377\377\001\022\017" +
      "\n\013RAT_UNKNOWN\020\000\022\014\n\010RAT_GPRS\020\001\022\014\n\010RAT_EDG" +
      "E\020\002\022\014\n\010RAT_UMTS\020\003\022\r\n\tRAT_IS95A\020\004\022\r\n\tRAT_" +
      "IS95B\020\005\022\r\n\tRAT_1XRTT\020\006\022\016\n\nRAT_EVDO_0\020\007\022\016" +
      "\n\nRAT_EVDO_A\020\010\022\r\n\tRAT_HSDPA\020\t\022\r\n\tRAT_HSU" +
      "PA\020\n\022\014\n\010RAT_HSPA\020\013\022\016\n\nRAT_EVDO_B\020\014\022\r\n\tRA" +
      "T_EHRPD\020\r\022\013\n\007RAT_LTE\020\016\022\r\n\tRAT_HSPAP\020\017\022\013\n" +
      "\007RAT_GSM\020\020\022\020\n\014RAT_TD_SCDMA\020\021\022\r\n\tRAT_IWLA" +
      "N\020\022\022\016\n\nRAT_LTE_CA\020\023*\254\007\n\010RilErrno\022\021\n\rRIL_" +
      "E_UNKNOWN\020\000\022\021\n\rRIL_E_SUCCESS\020\001\022\035\n\031RIL_E_",
      "RADIO_NOT_AVAILABLE\020\002\022\031\n\025RIL_E_GENERIC_F" +
      "AILURE\020\003\022\034\n\030RIL_E_PASSWORD_INCORRECT\020\004\022\022" +
      "\n\016RIL_E_SIM_PIN2\020\005\022\022\n\016RIL_E_SIM_PUK2\020\006\022\037" +
      "\n\033RIL_E_REQUEST_NOT_SUPPORTED\020\007\022\023\n\017RIL_E" +
      "_CANCELLED\020\010\022*\n&RIL_E_OP_NOT_ALLOWED_DUR" +
      "ING_VOICE_CALL\020\t\022)\n%RIL_E_OP_NOT_ALLOWED" +
      "_BEFORE_REG_TO_NW\020\n\022\035\n\031RIL_E_SMS_SEND_FA" +
      "IL_RETRY\020\013\022\024\n\020RIL_E_SIM_ABSENT\020\014\022$\n RIL_" +
      "E_SUBSCRIPTION_NOT_AVAILABLE\020\r\022\034\n\030RIL_E_" +
      "MODE_NOT_SUPPORTED\020\016\022\033\n\027RIL_E_FDN_CHECK_",
      "FAILURE\020\017\022\033\n\027RIL_E_ILLEGAL_SIM_OR_ME\020\020\022\032" +
      "\n\026RIL_E_MISSING_RESOURCE\020\021\022\031\n\025RIL_E_NO_S" +
      "UCH_ELEMENT\020\022\022\037\n\033RIL_E_DIAL_MODIFIED_TO_" +
      "USSD\020\023\022\035\n\031RIL_E_DIAL_MODIFIED_TO_SS\020\024\022\037\n" +
      "\033RIL_E_DIAL_MODIFIED_TO_DIAL\020\025\022\037\n\033RIL_E_" +
      "USSD_MODIFIED_TO_DIAL\020\026\022\035\n\031RIL_E_USSD_MO" +
      "DIFIED_TO_SS\020\027\022\037\n\033RIL_E_USSD_MODIFIED_TO" +
      "_USSD\020\030\022\035\n\031RIL_E_SS_MODIFIED_TO_DIAL\020\031\022\035" +
      "\n\031RIL_E_SS_MODIFIED_TO_USSD\020\032\022$\n RIL_E_S" +
      "UBSCRIPTION_NOT_SUPPORTED\020\033\022\033\n\027RIL_E_SS_",
      "MODIFIED_TO_SS\020\034\022\037\n\027RIL_E_LCE_NOT_SUPPOR" +
      "TED\020$\032\002\010\001\022\037\n\033RIL_E_LCE_NOT_SUPPORTED_NEW" +
      "\020%*e\n\007PdpType\022\017\n\013PDP_UNKNOWN\020\000\022\017\n\013PDP_TY" +
      "PE_IP\020\001\022\021\n\rPDP_TYPE_IPV6\020\002\022\023\n\017PDP_TYPE_I" +
      "PV4V6\020\003\022\020\n\014PDP_TYPE_PPP\020\004*\340\002\n\014TimeInterv" +
      "al\022\016\n\nTI_UNKNOWN\020\000\022\020\n\014TI_10_MILLIS\020\001\022\020\n\014" +
      "TI_20_MILLIS\020\002\022\020\n\014TI_50_MILLIS\020\003\022\021\n\rTI_1" +
      "00_MILLIS\020\004\022\021\n\rTI_200_MILLIS\020\005\022\021\n\rTI_500" +
      "_MILLIS\020\006\022\014\n\010TI_1_SEC\020\007\022\014\n\010TI_2_SEC\020\010\022\014\n" +
      "\010TI_5_SEC\020\t\022\r\n\tTI_10_SEC\020\n\022\r\n\tTI_30_SEC\020",
      "\013\022\017\n\013TI_1_MINUTE\020\014\022\020\n\014TI_3_MINUTES\020\r\022\021\n\r" +
      "TI_10_MINUTES\020\016\022\021\n\rTI_30_MINUTES\020\017\022\r\n\tTI" +
      "_1_HOUR\020\020\022\016\n\nTI_2_HOURS\020\021\022\016\n\nTI_4_HOURS\020" +
      "\022\022\021\n\rTI_MANY_HOURS\020\023B0\n\036com.android.inte" +
      "rnal.telephonyB\016TelephonyProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_clearcut_connectivity_TelephonyLog_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_clearcut_connectivity_TelephonyLog_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_TelephonyLog_descriptor,
        new java.lang.String[] { "Events", "CallSessions", "SmsSessions", "Histograms", "EventsDropped", "StartTime", "EndTime", });
    internal_static_clearcut_connectivity_Time_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_clearcut_connectivity_Time_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_Time_descriptor,
        new java.lang.String[] { "SystemTimestampMillis", "ElapsedTimestampMillis", });
    internal_static_clearcut_connectivity_TelephonyHistogram_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_clearcut_connectivity_TelephonyHistogram_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_TelephonyHistogram_descriptor,
        new java.lang.String[] { "Category", "Id", "MinTimeMillis", "MaxTimeMillis", "AvgTimeMillis", "Count", "BucketCount", "BucketEndPoints", "BucketCounters", });
    internal_static_clearcut_connectivity_TelephonySettings_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_clearcut_connectivity_TelephonySettings_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_TelephonySettings_descriptor,
        new java.lang.String[] { "IsAirplaneMode", "IsCellularDataEnabled", "IsDataRoamingEnabled", "PreferredNetworkMode", "IsEnhanced4GLteModeEnabled", "IsWifiEnabled", "IsWifiCallingEnabled", "WifiCallingMode", "IsVtOverLteEnabled", "IsVtOverWifiEnabled", });
    internal_static_clearcut_connectivity_TelephonyServiceState_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_clearcut_connectivity_TelephonyServiceState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_TelephonyServiceState_descriptor,
        new java.lang.String[] { "VoiceOperator", "DataOperator", "VoiceRoamingType", "DataRoamingType", "VoiceRat", "DataRat", });
    internal_static_clearcut_connectivity_TelephonyServiceState_TelephonyOperator_descriptor =
      internal_static_clearcut_connectivity_TelephonyServiceState_descriptor.getNestedTypes().get(0);
    internal_static_clearcut_connectivity_TelephonyServiceState_TelephonyOperator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_TelephonyServiceState_TelephonyOperator_descriptor,
        new java.lang.String[] { "AlphaLong", "AlphaShort", "Numeric", });
    internal_static_clearcut_connectivity_ImsReasonInfo_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_clearcut_connectivity_ImsReasonInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_ImsReasonInfo_descriptor,
        new java.lang.String[] { "ReasonCode", "ExtraCode", "ExtraMessage", });
    internal_static_clearcut_connectivity_ImsConnectionState_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_clearcut_connectivity_ImsConnectionState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_ImsConnectionState_descriptor,
        new java.lang.String[] { "State", "ReasonInfo", });
    internal_static_clearcut_connectivity_ImsCapabilities_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_clearcut_connectivity_ImsCapabilities_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_ImsCapabilities_descriptor,
        new java.lang.String[] { "VoiceOverLte", "VoiceOverWifi", "VideoOverLte", "VideoOverWifi", "UtOverLte", "UtOverWifi", });
    internal_static_clearcut_connectivity_RilDataCall_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_clearcut_connectivity_RilDataCall_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_RilDataCall_descriptor,
        new java.lang.String[] { "Cid", "Type", "Iframe", });
    internal_static_clearcut_connectivity_TelephonyEvent_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_clearcut_connectivity_TelephonyEvent_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_TelephonyEvent_descriptor,
        new java.lang.String[] { "TimestampMillis", "PhoneId", "Type", "Settings", "ServiceState", "ImsConnectionState", "ImsCapabilities", "DataCalls", "Error", "SetupDataCall", "SetupDataCallResponse", "DeactivateDataCall", "DataStallAction", "ModemRestart", "NitzTimestampMillis", });
    internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCall_descriptor =
      internal_static_clearcut_connectivity_TelephonyEvent_descriptor.getNestedTypes().get(0);
    internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCall_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCall_descriptor,
        new java.lang.String[] { "Rat", "DataProfile", "Apn", "Type", });
    internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCallResponse_descriptor =
      internal_static_clearcut_connectivity_TelephonyEvent_descriptor.getNestedTypes().get(1);
    internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCallResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_TelephonyEvent_RilSetupDataCallResponse_descriptor,
        new java.lang.String[] { "Status", "SuggestedRetryTimeMillis", "Call", });
    internal_static_clearcut_connectivity_TelephonyEvent_RilDeactivateDataCall_descriptor =
      internal_static_clearcut_connectivity_TelephonyEvent_descriptor.getNestedTypes().get(2);
    internal_static_clearcut_connectivity_TelephonyEvent_RilDeactivateDataCall_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_TelephonyEvent_RilDeactivateDataCall_descriptor,
        new java.lang.String[] { "Cid", "Reason", });
    internal_static_clearcut_connectivity_TelephonyEvent_ModemRestart_descriptor =
      internal_static_clearcut_connectivity_TelephonyEvent_descriptor.getNestedTypes().get(3);
    internal_static_clearcut_connectivity_TelephonyEvent_ModemRestart_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_TelephonyEvent_ModemRestart_descriptor,
        new java.lang.String[] { "BasebandVersion", "Reason", });
    internal_static_clearcut_connectivity_TelephonyCallSession_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_clearcut_connectivity_TelephonyCallSession_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_TelephonyCallSession_descriptor,
        new java.lang.String[] { "StartTimeMinutes", "PhoneId", "Events", "EventsDropped", });
    internal_static_clearcut_connectivity_TelephonyCallSession_Event_descriptor =
      internal_static_clearcut_connectivity_TelephonyCallSession_descriptor.getNestedTypes().get(0);
    internal_static_clearcut_connectivity_TelephonyCallSession_Event_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_TelephonyCallSession_Event_descriptor,
        new java.lang.String[] { "Type", "Delay", "Settings", "ServiceState", "ImsConnectionState", "ImsCapabilities", "DataCalls", "PhoneState", "CallState", "CallIndex", "MergedCallIndex", "Calls", "Error", "RilRequest", "RilRequestId", "SrvccState", "ImsCommand", "ReasonInfo", "SrcAccessTech", "TargetAccessTech", "NitzTimestampMillis", });
    internal_static_clearcut_connectivity_TelephonyCallSession_Event_RilCall_descriptor =
      internal_static_clearcut_connectivity_TelephonyCallSession_Event_descriptor.getNestedTypes().get(0);
    internal_static_clearcut_connectivity_TelephonyCallSession_Event_RilCall_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_TelephonyCallSession_Event_RilCall_descriptor,
        new java.lang.String[] { "Index", "State", "Type", "CallEndReason", "IsMultiparty", });
    internal_static_clearcut_connectivity_SmsSession_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_clearcut_connectivity_SmsSession_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_SmsSession_descriptor,
        new java.lang.String[] { "StartTimeMinutes", "PhoneId", "Events", "EventsDropped", });
    internal_static_clearcut_connectivity_SmsSession_Event_descriptor =
      internal_static_clearcut_connectivity_SmsSession_descriptor.getNestedTypes().get(0);
    internal_static_clearcut_connectivity_SmsSession_Event_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clearcut_connectivity_SmsSession_Event_descriptor,
        new java.lang.String[] { "Type", "Delay", "Settings", "ServiceState", "ImsConnectionState", "ImsCapabilities", "DataCalls", "Format", "Tech", "ErrorCode", "Error", "RilRequestId", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
