// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.android.internal.telephony.nano;

@SuppressWarnings("hiding")
public interface TelephonyProto {

  // enum RadioAccessTechnology
  public interface RadioAccessTechnology {
    public static final int UNKNOWN = -1;
    public static final int RAT_UNKNOWN = 0;
    public static final int RAT_GPRS = 1;
    public static final int RAT_EDGE = 2;
    public static final int RAT_UMTS = 3;
    public static final int RAT_IS95A = 4;
    public static final int RAT_IS95B = 5;
    public static final int RAT_1XRTT = 6;
    public static final int RAT_EVDO_0 = 7;
    public static final int RAT_EVDO_A = 8;
    public static final int RAT_HSDPA = 9;
    public static final int RAT_HSUPA = 10;
    public static final int RAT_HSPA = 11;
    public static final int RAT_EVDO_B = 12;
    public static final int RAT_EHRPD = 13;
    public static final int RAT_LTE = 14;
    public static final int RAT_HSPAP = 15;
    public static final int RAT_GSM = 16;
    public static final int RAT_TD_SCDMA = 17;
    public static final int RAT_IWLAN = 18;
    public static final int RAT_LTE_CA = 19;
  }

  // enum RilErrno
  public interface RilErrno {
    public static final int RIL_E_UNKNOWN = 0;
    public static final int RIL_E_SUCCESS = 1;
    public static final int RIL_E_RADIO_NOT_AVAILABLE = 2;
    public static final int RIL_E_GENERIC_FAILURE = 3;
    public static final int RIL_E_PASSWORD_INCORRECT = 4;
    public static final int RIL_E_SIM_PIN2 = 5;
    public static final int RIL_E_SIM_PUK2 = 6;
    public static final int RIL_E_REQUEST_NOT_SUPPORTED = 7;
    public static final int RIL_E_CANCELLED = 8;
    public static final int RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL = 9;
    public static final int RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW = 10;
    public static final int RIL_E_SMS_SEND_FAIL_RETRY = 11;
    public static final int RIL_E_SIM_ABSENT = 12;
    public static final int RIL_E_SUBSCRIPTION_NOT_AVAILABLE = 13;
    public static final int RIL_E_MODE_NOT_SUPPORTED = 14;
    public static final int RIL_E_FDN_CHECK_FAILURE = 15;
    public static final int RIL_E_ILLEGAL_SIM_OR_ME = 16;
    public static final int RIL_E_MISSING_RESOURCE = 17;
    public static final int RIL_E_NO_SUCH_ELEMENT = 18;
    public static final int RIL_E_DIAL_MODIFIED_TO_USSD = 19;
    public static final int RIL_E_DIAL_MODIFIED_TO_SS = 20;
    public static final int RIL_E_DIAL_MODIFIED_TO_DIAL = 21;
    public static final int RIL_E_USSD_MODIFIED_TO_DIAL = 22;
    public static final int RIL_E_USSD_MODIFIED_TO_SS = 23;
    public static final int RIL_E_USSD_MODIFIED_TO_USSD = 24;
    public static final int RIL_E_SS_MODIFIED_TO_DIAL = 25;
    public static final int RIL_E_SS_MODIFIED_TO_USSD = 26;
    public static final int RIL_E_SUBSCRIPTION_NOT_SUPPORTED = 27;
    public static final int RIL_E_SS_MODIFIED_TO_SS = 28;
    public static final int RIL_E_LCE_NOT_SUPPORTED = 36;
    public static final int RIL_E_LCE_NOT_SUPPORTED_NEW = 37;
  }

  // enum PdpType
  public interface PdpType {
    public static final int PDP_UNKNOWN = 0;
    public static final int PDP_TYPE_IP = 1;
    public static final int PDP_TYPE_IPV6 = 2;
    public static final int PDP_TYPE_IPV4V6 = 3;
    public static final int PDP_TYPE_PPP = 4;
  }

  // enum TimeInterval
  public interface TimeInterval {
    public static final int TI_UNKNOWN = 0;
    public static final int TI_10_MILLIS = 1;
    public static final int TI_20_MILLIS = 2;
    public static final int TI_50_MILLIS = 3;
    public static final int TI_100_MILLIS = 4;
    public static final int TI_200_MILLIS = 5;
    public static final int TI_500_MILLIS = 6;
    public static final int TI_1_SEC = 7;
    public static final int TI_2_SEC = 8;
    public static final int TI_5_SEC = 9;
    public static final int TI_10_SEC = 10;
    public static final int TI_30_SEC = 11;
    public static final int TI_1_MINUTE = 12;
    public static final int TI_3_MINUTES = 13;
    public static final int TI_10_MINUTES = 14;
    public static final int TI_30_MINUTES = 15;
    public static final int TI_1_HOUR = 16;
    public static final int TI_2_HOURS = 17;
    public static final int TI_4_HOURS = 18;
    public static final int TI_MANY_HOURS = 19;
  }

  public static final class TelephonyLog extends
      com.google.protobuf.nano.ExtendableMessageNano<TelephonyLog> {

    private static volatile TelephonyLog[] _emptyArray;
    public static TelephonyLog[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new TelephonyLog[0];
          }
        }
      }
      return _emptyArray;
    }

    // repeated .clearcut.connectivity.TelephonyEvent events = 1;
    public com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent[] events;

    // repeated .clearcut.connectivity.TelephonyCallSession call_sessions = 2;
    public com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession[] callSessions;

    // repeated .clearcut.connectivity.SmsSession sms_sessions = 3;
    public com.android.internal.telephony.nano.TelephonyProto.SmsSession[] smsSessions;

    // repeated .clearcut.connectivity.TelephonyHistogram histograms = 4;
    public com.android.internal.telephony.nano.TelephonyProto.TelephonyHistogram[] histograms;

    // optional bool events_dropped = 5;
    public boolean eventsDropped;

    // optional .clearcut.connectivity.Time start_time = 6;
    public com.android.internal.telephony.nano.TelephonyProto.Time startTime;

    // optional .clearcut.connectivity.Time end_time = 7;
    public com.android.internal.telephony.nano.TelephonyProto.Time endTime;

    public TelephonyLog() {
      clear();
    }

    public TelephonyLog clear() {
      events = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.emptyArray();
      callSessions = com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.emptyArray();
      smsSessions = com.android.internal.telephony.nano.TelephonyProto.SmsSession.emptyArray();
      histograms = com.android.internal.telephony.nano.TelephonyProto.TelephonyHistogram.emptyArray();
      eventsDropped = false;
      startTime = null;
      endTime = null;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.events != null && this.events.length > 0) {
        for (int i = 0; i < this.events.length; i++) {
          com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent element = this.events[i];
          if (element != null) {
            output.writeMessage(1, element);
          }
        }
      }
      if (this.callSessions != null && this.callSessions.length > 0) {
        for (int i = 0; i < this.callSessions.length; i++) {
          com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession element = this.callSessions[i];
          if (element != null) {
            output.writeMessage(2, element);
          }
        }
      }
      if (this.smsSessions != null && this.smsSessions.length > 0) {
        for (int i = 0; i < this.smsSessions.length; i++) {
          com.android.internal.telephony.nano.TelephonyProto.SmsSession element = this.smsSessions[i];
          if (element != null) {
            output.writeMessage(3, element);
          }
        }
      }
      if (this.histograms != null && this.histograms.length > 0) {
        for (int i = 0; i < this.histograms.length; i++) {
          com.android.internal.telephony.nano.TelephonyProto.TelephonyHistogram element = this.histograms[i];
          if (element != null) {
            output.writeMessage(4, element);
          }
        }
      }
      if (this.eventsDropped != false) {
        output.writeBool(5, this.eventsDropped);
      }
      if (this.startTime != null) {
        output.writeMessage(6, this.startTime);
      }
      if (this.endTime != null) {
        output.writeMessage(7, this.endTime);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.events != null && this.events.length > 0) {
        for (int i = 0; i < this.events.length; i++) {
          com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent element = this.events[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(1, element);
          }
        }
      }
      if (this.callSessions != null && this.callSessions.length > 0) {
        for (int i = 0; i < this.callSessions.length; i++) {
          com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession element = this.callSessions[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(2, element);
          }
        }
      }
      if (this.smsSessions != null && this.smsSessions.length > 0) {
        for (int i = 0; i < this.smsSessions.length; i++) {
          com.android.internal.telephony.nano.TelephonyProto.SmsSession element = this.smsSessions[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(3, element);
          }
        }
      }
      if (this.histograms != null && this.histograms.length > 0) {
        for (int i = 0; i < this.histograms.length; i++) {
          com.android.internal.telephony.nano.TelephonyProto.TelephonyHistogram element = this.histograms[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(4, element);
          }
        }
      }
      if (this.eventsDropped != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(5, this.eventsDropped);
      }
      if (this.startTime != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(6, this.startTime);
      }
      if (this.endTime != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(7, this.endTime);
      }
      return size;
    }

    @Override
    public TelephonyLog mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 10);
            int i = this.events == null ? 0 : this.events.length;
            com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent[] newArray =
                new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.events, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent();
            input.readMessage(newArray[i]);
            this.events = newArray;
            break;
          }
          case 18: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 18);
            int i = this.callSessions == null ? 0 : this.callSessions.length;
            com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession[] newArray =
                new com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.callSessions, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession();
            input.readMessage(newArray[i]);
            this.callSessions = newArray;
            break;
          }
          case 26: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 26);
            int i = this.smsSessions == null ? 0 : this.smsSessions.length;
            com.android.internal.telephony.nano.TelephonyProto.SmsSession[] newArray =
                new com.android.internal.telephony.nano.TelephonyProto.SmsSession[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.smsSessions, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.SmsSession();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.SmsSession();
            input.readMessage(newArray[i]);
            this.smsSessions = newArray;
            break;
          }
          case 34: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 34);
            int i = this.histograms == null ? 0 : this.histograms.length;
            com.android.internal.telephony.nano.TelephonyProto.TelephonyHistogram[] newArray =
                new com.android.internal.telephony.nano.TelephonyProto.TelephonyHistogram[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.histograms, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.TelephonyHistogram();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.TelephonyHistogram();
            input.readMessage(newArray[i]);
            this.histograms = newArray;
            break;
          }
          case 40: {
            this.eventsDropped = input.readBool();
            break;
          }
          case 50: {
            if (this.startTime == null) {
              this.startTime = new com.android.internal.telephony.nano.TelephonyProto.Time();
            }
            input.readMessage(this.startTime);
            break;
          }
          case 58: {
            if (this.endTime == null) {
              this.endTime = new com.android.internal.telephony.nano.TelephonyProto.Time();
            }
            input.readMessage(this.endTime);
            break;
          }
        }
      }
    }

    public static TelephonyLog parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new TelephonyLog(), data);
    }

    public static TelephonyLog parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new TelephonyLog().mergeFrom(input);
    }
  }

  public static final class Time extends
      com.google.protobuf.nano.ExtendableMessageNano<Time> {

    private static volatile Time[] _emptyArray;
    public static Time[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new Time[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int64 system_timestamp_millis = 1;
    public long systemTimestampMillis;

    // optional int64 elapsed_timestamp_millis = 2;
    public long elapsedTimestampMillis;

    public Time() {
      clear();
    }

    public Time clear() {
      systemTimestampMillis = 0L;
      elapsedTimestampMillis = 0L;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.systemTimestampMillis != 0L) {
        output.writeInt64(1, this.systemTimestampMillis);
      }
      if (this.elapsedTimestampMillis != 0L) {
        output.writeInt64(2, this.elapsedTimestampMillis);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.systemTimestampMillis != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(1, this.systemTimestampMillis);
      }
      if (this.elapsedTimestampMillis != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(2, this.elapsedTimestampMillis);
      }
      return size;
    }

    @Override
    public Time mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.systemTimestampMillis = input.readInt64();
            break;
          }
          case 16: {
            this.elapsedTimestampMillis = input.readInt64();
            break;
          }
        }
      }
    }

    public static Time parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new Time(), data);
    }

    public static Time parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new Time().mergeFrom(input);
    }
  }

  public static final class TelephonyHistogram extends
      com.google.protobuf.nano.ExtendableMessageNano<TelephonyHistogram> {

    private static volatile TelephonyHistogram[] _emptyArray;
    public static TelephonyHistogram[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new TelephonyHistogram[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int32 category = 1;
    public int category;

    // optional int32 id = 2;
    public int id;

    // optional int32 min_time_millis = 3;
    public int minTimeMillis;

    // optional int32 max_time_millis = 4;
    public int maxTimeMillis;

    // optional int32 avg_time_millis = 5;
    public int avgTimeMillis;

    // optional int32 count = 6;
    public int count;

    // optional int32 bucket_count = 7;
    public int bucketCount;

    // repeated int32 bucket_end_points = 8;
    public int[] bucketEndPoints;

    // repeated int32 bucket_counters = 9;
    public int[] bucketCounters;

    public TelephonyHistogram() {
      clear();
    }

    public TelephonyHistogram clear() {
      category = 0;
      id = 0;
      minTimeMillis = 0;
      maxTimeMillis = 0;
      avgTimeMillis = 0;
      count = 0;
      bucketCount = 0;
      bucketEndPoints = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
      bucketCounters = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.category != 0) {
        output.writeInt32(1, this.category);
      }
      if (this.id != 0) {
        output.writeInt32(2, this.id);
      }
      if (this.minTimeMillis != 0) {
        output.writeInt32(3, this.minTimeMillis);
      }
      if (this.maxTimeMillis != 0) {
        output.writeInt32(4, this.maxTimeMillis);
      }
      if (this.avgTimeMillis != 0) {
        output.writeInt32(5, this.avgTimeMillis);
      }
      if (this.count != 0) {
        output.writeInt32(6, this.count);
      }
      if (this.bucketCount != 0) {
        output.writeInt32(7, this.bucketCount);
      }
      if (this.bucketEndPoints != null && this.bucketEndPoints.length > 0) {
        for (int i = 0; i < this.bucketEndPoints.length; i++) {
          output.writeInt32(8, this.bucketEndPoints[i]);
        }
      }
      if (this.bucketCounters != null && this.bucketCounters.length > 0) {
        for (int i = 0; i < this.bucketCounters.length; i++) {
          output.writeInt32(9, this.bucketCounters[i]);
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.category != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.category);
      }
      if (this.id != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.id);
      }
      if (this.minTimeMillis != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(3, this.minTimeMillis);
      }
      if (this.maxTimeMillis != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(4, this.maxTimeMillis);
      }
      if (this.avgTimeMillis != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(5, this.avgTimeMillis);
      }
      if (this.count != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(6, this.count);
      }
      if (this.bucketCount != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(7, this.bucketCount);
      }
      if (this.bucketEndPoints != null && this.bucketEndPoints.length > 0) {
        int dataSize = 0;
        for (int i = 0; i < this.bucketEndPoints.length; i++) {
          int element = this.bucketEndPoints[i];
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * this.bucketEndPoints.length;
      }
      if (this.bucketCounters != null && this.bucketCounters.length > 0) {
        int dataSize = 0;
        for (int i = 0; i < this.bucketCounters.length; i++) {
          int element = this.bucketCounters[i];
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * this.bucketCounters.length;
      }
      return size;
    }

    @Override
    public TelephonyHistogram mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.category = input.readInt32();
            break;
          }
          case 16: {
            this.id = input.readInt32();
            break;
          }
          case 24: {
            this.minTimeMillis = input.readInt32();
            break;
          }
          case 32: {
            this.maxTimeMillis = input.readInt32();
            break;
          }
          case 40: {
            this.avgTimeMillis = input.readInt32();
            break;
          }
          case 48: {
            this.count = input.readInt32();
            break;
          }
          case 56: {
            this.bucketCount = input.readInt32();
            break;
          }
          case 64: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 64);
            int i = this.bucketEndPoints == null ? 0 : this.bucketEndPoints.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.bucketEndPoints, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = input.readInt32();
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = input.readInt32();
            this.bucketEndPoints = newArray;
            break;
          }
          case 66: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            // First pass to compute array length.
            int arrayLength = 0;
            int startPos = input.getPosition();
            while (input.getBytesUntilLimit() > 0) {
              input.readInt32();
              arrayLength++;
            }
            input.rewindToPosition(startPos);
            int i = this.bucketEndPoints == null ? 0 : this.bucketEndPoints.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.bucketEndPoints, 0, newArray, 0, i);
            }
            for (; i < newArray.length; i++) {
              newArray[i] = input.readInt32();
            }
            this.bucketEndPoints = newArray;
            input.popLimit(limit);
            break;
          }
          case 72: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 72);
            int i = this.bucketCounters == null ? 0 : this.bucketCounters.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.bucketCounters, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = input.readInt32();
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = input.readInt32();
            this.bucketCounters = newArray;
            break;
          }
          case 74: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            // First pass to compute array length.
            int arrayLength = 0;
            int startPos = input.getPosition();
            while (input.getBytesUntilLimit() > 0) {
              input.readInt32();
              arrayLength++;
            }
            input.rewindToPosition(startPos);
            int i = this.bucketCounters == null ? 0 : this.bucketCounters.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.bucketCounters, 0, newArray, 0, i);
            }
            for (; i < newArray.length; i++) {
              newArray[i] = input.readInt32();
            }
            this.bucketCounters = newArray;
            input.popLimit(limit);
            break;
          }
        }
      }
    }

    public static TelephonyHistogram parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new TelephonyHistogram(), data);
    }

    public static TelephonyHistogram parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new TelephonyHistogram().mergeFrom(input);
    }
  }

  public static final class TelephonySettings extends
      com.google.protobuf.nano.ExtendableMessageNano<TelephonySettings> {

    // enum RilNetworkMode
    public interface RilNetworkMode {
      public static final int NETWORK_MODE_UNKNOWN = 0;
      public static final int NETWORK_MODE_WCDMA_PREF = 1;
      public static final int NETWORK_MODE_GSM_ONLY = 2;
      public static final int NETWORK_MODE_WCDMA_ONLY = 3;
      public static final int NETWORK_MODE_GSM_UMTS = 4;
      public static final int NETWORK_MODE_CDMA = 5;
      public static final int NETWORK_MODE_CDMA_NO_EVDO = 6;
      public static final int NETWORK_MODE_EVDO_NO_CDMA = 7;
      public static final int NETWORK_MODE_GLOBAL = 8;
      public static final int NETWORK_MODE_LTE_CDMA_EVDO = 9;
      public static final int NETWORK_MODE_LTE_GSM_WCDMA = 10;
      public static final int NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA = 11;
      public static final int NETWORK_MODE_LTE_ONLY = 12;
      public static final int NETWORK_MODE_LTE_WCDMA = 13;
      public static final int NETWORK_MODE_TDSCDMA_ONLY = 14;
      public static final int NETWORK_MODE_TDSCDMA_WCDMA = 15;
      public static final int NETWORK_MODE_LTE_TDSCDMA = 16;
      public static final int NETWORK_MODE_TDSCDMA_GSM = 17;
      public static final int NETWORK_MODE_LTE_TDSCDMA_GSM = 18;
      public static final int NETWORK_MODE_TDSCDMA_GSM_WCDMA = 19;
      public static final int NETWORK_MODE_LTE_TDSCDMA_WCDMA = 20;
      public static final int NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA = 21;
      public static final int NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA = 22;
      public static final int NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA = 23;
    }

    // enum WiFiCallingMode
    public interface WiFiCallingMode {
      public static final int WFC_MODE_UNKNOWN = 0;
      public static final int WFC_MODE_WIFI_ONLY = 1;
      public static final int WFC_MODE_CELLULAR_PREFERRED = 2;
      public static final int WFC_MODE_WIFI_PREFERRED = 3;
    }

    private static volatile TelephonySettings[] _emptyArray;
    public static TelephonySettings[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new TelephonySettings[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional bool is_airplane_mode = 1;
    public boolean isAirplaneMode;

    // optional bool is_cellular_data_enabled = 2;
    public boolean isCellularDataEnabled;

    // optional bool is_data_roaming_enabled = 3;
    public boolean isDataRoamingEnabled;

    // optional .clearcut.connectivity.TelephonySettings.RilNetworkMode preferred_network_mode = 4;
    public int preferredNetworkMode;

    // optional bool is_enhanced_4g_lte_mode_enabled = 5;
    public boolean isEnhanced4GLteModeEnabled;

    // optional bool is_wifi_enabled = 6;
    public boolean isWifiEnabled;

    // optional bool is_wifi_calling_enabled = 7;
    public boolean isWifiCallingEnabled;

    // optional .clearcut.connectivity.TelephonySettings.WiFiCallingMode wifi_calling_mode = 8;
    public int wifiCallingMode;

    // optional bool is_vt_over_lte_enabled = 9;
    public boolean isVtOverLteEnabled;

    // optional bool is_vt_over_wifi_enabled = 10;
    public boolean isVtOverWifiEnabled;

    public TelephonySettings() {
      clear();
    }

    public TelephonySettings clear() {
      isAirplaneMode = false;
      isCellularDataEnabled = false;
      isDataRoamingEnabled = false;
      preferredNetworkMode = com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_UNKNOWN;
      isEnhanced4GLteModeEnabled = false;
      isWifiEnabled = false;
      isWifiCallingEnabled = false;
      wifiCallingMode = com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.WiFiCallingMode.WFC_MODE_UNKNOWN;
      isVtOverLteEnabled = false;
      isVtOverWifiEnabled = false;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.isAirplaneMode != false) {
        output.writeBool(1, this.isAirplaneMode);
      }
      if (this.isCellularDataEnabled != false) {
        output.writeBool(2, this.isCellularDataEnabled);
      }
      if (this.isDataRoamingEnabled != false) {
        output.writeBool(3, this.isDataRoamingEnabled);
      }
      if (this.preferredNetworkMode != com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_UNKNOWN) {
        output.writeInt32(4, this.preferredNetworkMode);
      }
      if (this.isEnhanced4GLteModeEnabled != false) {
        output.writeBool(5, this.isEnhanced4GLteModeEnabled);
      }
      if (this.isWifiEnabled != false) {
        output.writeBool(6, this.isWifiEnabled);
      }
      if (this.isWifiCallingEnabled != false) {
        output.writeBool(7, this.isWifiCallingEnabled);
      }
      if (this.wifiCallingMode != com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.WiFiCallingMode.WFC_MODE_UNKNOWN) {
        output.writeInt32(8, this.wifiCallingMode);
      }
      if (this.isVtOverLteEnabled != false) {
        output.writeBool(9, this.isVtOverLteEnabled);
      }
      if (this.isVtOverWifiEnabled != false) {
        output.writeBool(10, this.isVtOverWifiEnabled);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.isAirplaneMode != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(1, this.isAirplaneMode);
      }
      if (this.isCellularDataEnabled != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(2, this.isCellularDataEnabled);
      }
      if (this.isDataRoamingEnabled != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(3, this.isDataRoamingEnabled);
      }
      if (this.preferredNetworkMode != com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(4, this.preferredNetworkMode);
      }
      if (this.isEnhanced4GLteModeEnabled != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(5, this.isEnhanced4GLteModeEnabled);
      }
      if (this.isWifiEnabled != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(6, this.isWifiEnabled);
      }
      if (this.isWifiCallingEnabled != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(7, this.isWifiCallingEnabled);
      }
      if (this.wifiCallingMode != com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.WiFiCallingMode.WFC_MODE_UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(8, this.wifiCallingMode);
      }
      if (this.isVtOverLteEnabled != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(9, this.isVtOverLteEnabled);
      }
      if (this.isVtOverWifiEnabled != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(10, this.isVtOverWifiEnabled);
      }
      return size;
    }

    @Override
    public TelephonySettings mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.isAirplaneMode = input.readBool();
            break;
          }
          case 16: {
            this.isCellularDataEnabled = input.readBool();
            break;
          }
          case 24: {
            this.isDataRoamingEnabled = input.readBool();
            break;
          }
          case 32: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_UNKNOWN:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_WCDMA_PREF:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_GSM_ONLY:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_WCDMA_ONLY:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_GSM_UMTS:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_CDMA:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_CDMA_NO_EVDO:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_EVDO_NO_CDMA:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_GLOBAL:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_CDMA_EVDO:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_GSM_WCDMA:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_ONLY:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_WCDMA:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_TDSCDMA_ONLY:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_TDSCDMA_WCDMA:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_TDSCDMA:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_TDSCDMA_GSM:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_TDSCDMA_GSM:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_TDSCDMA_GSM_WCDMA:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_TDSCDMA_WCDMA:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.RilNetworkMode.NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA:
                this.preferredNetworkMode = value;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 40: {
            this.isEnhanced4GLteModeEnabled = input.readBool();
            break;
          }
          case 48: {
            this.isWifiEnabled = input.readBool();
            break;
          }
          case 56: {
            this.isWifiCallingEnabled = input.readBool();
            break;
          }
          case 64: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.WiFiCallingMode.WFC_MODE_UNKNOWN:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.WiFiCallingMode.WFC_MODE_WIFI_ONLY:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.WiFiCallingMode.WFC_MODE_CELLULAR_PREFERRED:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonySettings.WiFiCallingMode.WFC_MODE_WIFI_PREFERRED:
                this.wifiCallingMode = value;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 72: {
            this.isVtOverLteEnabled = input.readBool();
            break;
          }
          case 80: {
            this.isVtOverWifiEnabled = input.readBool();
            break;
          }
        }
      }
    }

    public static TelephonySettings parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new TelephonySettings(), data);
    }

    public static TelephonySettings parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new TelephonySettings().mergeFrom(input);
    }
  }

  public static final class TelephonyServiceState extends
      com.google.protobuf.nano.ExtendableMessageNano<TelephonyServiceState> {

    // enum RoamingType
    public interface RoamingType {
      public static final int UNKNOWN = -1;
      public static final int ROAMING_TYPE_NOT_ROAMING = 0;
      public static final int ROAMING_TYPE_UNKNOWN = 1;
      public static final int ROAMING_TYPE_DOMESTIC = 2;
      public static final int ROAMING_TYPE_INTERNATIONAL = 3;
    }

    public static final class TelephonyOperator extends
        com.google.protobuf.nano.ExtendableMessageNano<TelephonyOperator> {

      private static volatile TelephonyOperator[] _emptyArray;
      public static TelephonyOperator[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new TelephonyOperator[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional string alpha_long = 1;
      public java.lang.String alphaLong;

      // optional string alpha_short = 2;
      public java.lang.String alphaShort;

      // optional string numeric = 3;
      public java.lang.String numeric;

      public TelephonyOperator() {
        clear();
      }

      public TelephonyOperator clear() {
        alphaLong = "";
        alphaShort = "";
        numeric = "";
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (!this.alphaLong.equals("")) {
          output.writeString(1, this.alphaLong);
        }
        if (!this.alphaShort.equals("")) {
          output.writeString(2, this.alphaShort);
        }
        if (!this.numeric.equals("")) {
          output.writeString(3, this.numeric);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (!this.alphaLong.equals("")) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(1, this.alphaLong);
        }
        if (!this.alphaShort.equals("")) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(2, this.alphaShort);
        }
        if (!this.numeric.equals("")) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(3, this.numeric);
        }
        return size;
      }

      @Override
      public TelephonyOperator mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              this.alphaLong = input.readString();
              break;
            }
            case 18: {
              this.alphaShort = input.readString();
              break;
            }
            case 26: {
              this.numeric = input.readString();
              break;
            }
          }
        }
      }

      public static TelephonyOperator parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new TelephonyOperator(), data);
      }

      public static TelephonyOperator parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new TelephonyOperator().mergeFrom(input);
      }
    }

    private static volatile TelephonyServiceState[] _emptyArray;
    public static TelephonyServiceState[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new TelephonyServiceState[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator voice_operator = 1;
    public com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.TelephonyOperator voiceOperator;

    // optional .clearcut.connectivity.TelephonyServiceState.TelephonyOperator data_operator = 2;
    public com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.TelephonyOperator dataOperator;

    // optional .clearcut.connectivity.TelephonyServiceState.RoamingType voice_roaming_type = 3 [default = UNKNOWN];
    public int voiceRoamingType;

    // optional .clearcut.connectivity.TelephonyServiceState.RoamingType data_roaming_type = 4 [default = UNKNOWN];
    public int dataRoamingType;

    // optional .clearcut.connectivity.RadioAccessTechnology voice_rat = 5 [default = UNKNOWN];
    public int voiceRat;

    // optional .clearcut.connectivity.RadioAccessTechnology data_rat = 6 [default = UNKNOWN];
    public int dataRat;

    public TelephonyServiceState() {
      clear();
    }

    public TelephonyServiceState clear() {
      voiceOperator = null;
      dataOperator = null;
      voiceRoamingType = com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.UNKNOWN;
      dataRoamingType = com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.UNKNOWN;
      voiceRat = com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN;
      dataRat = com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.voiceOperator != null) {
        output.writeMessage(1, this.voiceOperator);
      }
      if (this.dataOperator != null) {
        output.writeMessage(2, this.dataOperator);
      }
      if (this.voiceRoamingType != com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.UNKNOWN) {
        output.writeInt32(3, this.voiceRoamingType);
      }
      if (this.dataRoamingType != com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.UNKNOWN) {
        output.writeInt32(4, this.dataRoamingType);
      }
      if (this.voiceRat != com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN) {
        output.writeInt32(5, this.voiceRat);
      }
      if (this.dataRat != com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN) {
        output.writeInt32(6, this.dataRat);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.voiceOperator != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(1, this.voiceOperator);
      }
      if (this.dataOperator != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(2, this.dataOperator);
      }
      if (this.voiceRoamingType != com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(3, this.voiceRoamingType);
      }
      if (this.dataRoamingType != com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(4, this.dataRoamingType);
      }
      if (this.voiceRat != com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(5, this.voiceRat);
      }
      if (this.dataRat != com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(6, this.dataRat);
      }
      return size;
    }

    @Override
    public TelephonyServiceState mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            if (this.voiceOperator == null) {
              this.voiceOperator = new com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.TelephonyOperator();
            }
            input.readMessage(this.voiceOperator);
            break;
          }
          case 18: {
            if (this.dataOperator == null) {
              this.dataOperator = new com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.TelephonyOperator();
            }
            input.readMessage(this.dataOperator);
            break;
          }
          case 24: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.UNKNOWN:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_NOT_ROAMING:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_UNKNOWN:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_DOMESTIC:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_INTERNATIONAL:
                this.voiceRoamingType = value;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 32: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.UNKNOWN:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_NOT_ROAMING:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_UNKNOWN:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_DOMESTIC:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState.RoamingType.ROAMING_TYPE_INTERNATIONAL:
                this.dataRoamingType = value;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 40: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_GPRS:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EDGE:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_UMTS:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_IS95A:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_IS95B:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_1XRTT:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EVDO_0:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EVDO_A:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSDPA:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSUPA:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSPA:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EVDO_B:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EHRPD:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_LTE:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSPAP:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_GSM:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_TD_SCDMA:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_IWLAN:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_LTE_CA:
                this.voiceRat = value;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 48: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_GPRS:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EDGE:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_UMTS:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_IS95A:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_IS95B:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_1XRTT:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EVDO_0:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EVDO_A:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSDPA:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSUPA:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSPA:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EVDO_B:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EHRPD:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_LTE:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSPAP:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_GSM:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_TD_SCDMA:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_IWLAN:
              case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_LTE_CA:
                this.dataRat = value;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
        }
      }
    }

    public static TelephonyServiceState parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new TelephonyServiceState(), data);
    }

    public static TelephonyServiceState parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new TelephonyServiceState().mergeFrom(input);
    }
  }

  public static final class ImsReasonInfo extends
      com.google.protobuf.nano.ExtendableMessageNano<ImsReasonInfo> {

    private static volatile ImsReasonInfo[] _emptyArray;
    public static ImsReasonInfo[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ImsReasonInfo[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int32 reason_code = 1;
    public int reasonCode;

    // optional int32 extra_code = 2;
    public int extraCode;

    // optional string extra_message = 3;
    public java.lang.String extraMessage;

    public ImsReasonInfo() {
      clear();
    }

    public ImsReasonInfo clear() {
      reasonCode = 0;
      extraCode = 0;
      extraMessage = "";
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.reasonCode != 0) {
        output.writeInt32(1, this.reasonCode);
      }
      if (this.extraCode != 0) {
        output.writeInt32(2, this.extraCode);
      }
      if (!this.extraMessage.equals("")) {
        output.writeString(3, this.extraMessage);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.reasonCode != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.reasonCode);
      }
      if (this.extraCode != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.extraCode);
      }
      if (!this.extraMessage.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(3, this.extraMessage);
      }
      return size;
    }

    @Override
    public ImsReasonInfo mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.reasonCode = input.readInt32();
            break;
          }
          case 16: {
            this.extraCode = input.readInt32();
            break;
          }
          case 26: {
            this.extraMessage = input.readString();
            break;
          }
        }
      }
    }

    public static ImsReasonInfo parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ImsReasonInfo(), data);
    }

    public static ImsReasonInfo parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ImsReasonInfo().mergeFrom(input);
    }
  }

  public static final class ImsConnectionState extends
      com.google.protobuf.nano.ExtendableMessageNano<ImsConnectionState> {

    // enum State
    public interface State {
      public static final int STATE_UNKNOWN = 0;
      public static final int CONNECTED = 1;
      public static final int PROGRESSING = 2;
      public static final int DISCONNECTED = 3;
      public static final int RESUMED = 4;
      public static final int SUSPENDED = 5;
    }

    private static volatile ImsConnectionState[] _emptyArray;
    public static ImsConnectionState[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ImsConnectionState[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional .clearcut.connectivity.ImsConnectionState.State state = 1;
    public int state;

    // optional .clearcut.connectivity.ImsReasonInfo reason_info = 2;
    public com.android.internal.telephony.nano.TelephonyProto.ImsReasonInfo reasonInfo;

    public ImsConnectionState() {
      clear();
    }

    public ImsConnectionState clear() {
      state = com.android.internal.telephony.nano.TelephonyProto.ImsConnectionState.State.STATE_UNKNOWN;
      reasonInfo = null;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.state != com.android.internal.telephony.nano.TelephonyProto.ImsConnectionState.State.STATE_UNKNOWN) {
        output.writeInt32(1, this.state);
      }
      if (this.reasonInfo != null) {
        output.writeMessage(2, this.reasonInfo);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.state != com.android.internal.telephony.nano.TelephonyProto.ImsConnectionState.State.STATE_UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(1, this.state);
      }
      if (this.reasonInfo != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(2, this.reasonInfo);
      }
      return size;
    }

    @Override
    public ImsConnectionState mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.nano.TelephonyProto.ImsConnectionState.State.STATE_UNKNOWN:
              case com.android.internal.telephony.nano.TelephonyProto.ImsConnectionState.State.CONNECTED:
              case com.android.internal.telephony.nano.TelephonyProto.ImsConnectionState.State.PROGRESSING:
              case com.android.internal.telephony.nano.TelephonyProto.ImsConnectionState.State.DISCONNECTED:
              case com.android.internal.telephony.nano.TelephonyProto.ImsConnectionState.State.RESUMED:
              case com.android.internal.telephony.nano.TelephonyProto.ImsConnectionState.State.SUSPENDED:
                this.state = value;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 18: {
            if (this.reasonInfo == null) {
              this.reasonInfo = new com.android.internal.telephony.nano.TelephonyProto.ImsReasonInfo();
            }
            input.readMessage(this.reasonInfo);
            break;
          }
        }
      }
    }

    public static ImsConnectionState parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ImsConnectionState(), data);
    }

    public static ImsConnectionState parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ImsConnectionState().mergeFrom(input);
    }
  }

  public static final class ImsCapabilities extends
      com.google.protobuf.nano.ExtendableMessageNano<ImsCapabilities> {

    private static volatile ImsCapabilities[] _emptyArray;
    public static ImsCapabilities[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new ImsCapabilities[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional bool voice_over_lte = 1;
    public boolean voiceOverLte;

    // optional bool voice_over_wifi = 2;
    public boolean voiceOverWifi;

    // optional bool video_over_lte = 3;
    public boolean videoOverLte;

    // optional bool video_over_wifi = 4;
    public boolean videoOverWifi;

    // optional bool ut_over_lte = 5;
    public boolean utOverLte;

    // optional bool ut_over_wifi = 6;
    public boolean utOverWifi;

    public ImsCapabilities() {
      clear();
    }

    public ImsCapabilities clear() {
      voiceOverLte = false;
      voiceOverWifi = false;
      videoOverLte = false;
      videoOverWifi = false;
      utOverLte = false;
      utOverWifi = false;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.voiceOverLte != false) {
        output.writeBool(1, this.voiceOverLte);
      }
      if (this.voiceOverWifi != false) {
        output.writeBool(2, this.voiceOverWifi);
      }
      if (this.videoOverLte != false) {
        output.writeBool(3, this.videoOverLte);
      }
      if (this.videoOverWifi != false) {
        output.writeBool(4, this.videoOverWifi);
      }
      if (this.utOverLte != false) {
        output.writeBool(5, this.utOverLte);
      }
      if (this.utOverWifi != false) {
        output.writeBool(6, this.utOverWifi);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.voiceOverLte != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(1, this.voiceOverLte);
      }
      if (this.voiceOverWifi != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(2, this.voiceOverWifi);
      }
      if (this.videoOverLte != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(3, this.videoOverLte);
      }
      if (this.videoOverWifi != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(4, this.videoOverWifi);
      }
      if (this.utOverLte != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(5, this.utOverLte);
      }
      if (this.utOverWifi != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(6, this.utOverWifi);
      }
      return size;
    }

    @Override
    public ImsCapabilities mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.voiceOverLte = input.readBool();
            break;
          }
          case 16: {
            this.voiceOverWifi = input.readBool();
            break;
          }
          case 24: {
            this.videoOverLte = input.readBool();
            break;
          }
          case 32: {
            this.videoOverWifi = input.readBool();
            break;
          }
          case 40: {
            this.utOverLte = input.readBool();
            break;
          }
          case 48: {
            this.utOverWifi = input.readBool();
            break;
          }
        }
      }
    }

    public static ImsCapabilities parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new ImsCapabilities(), data);
    }

    public static ImsCapabilities parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new ImsCapabilities().mergeFrom(input);
    }
  }

  public static final class RilDataCall extends
      com.google.protobuf.nano.ExtendableMessageNano<RilDataCall> {

    private static volatile RilDataCall[] _emptyArray;
    public static RilDataCall[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new RilDataCall[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int32 cid = 1;
    public int cid;

    // optional .clearcut.connectivity.PdpType type = 2;
    public int type;

    // optional string iframe = 3;
    public java.lang.String iframe;

    public RilDataCall() {
      clear();
    }

    public RilDataCall clear() {
      cid = 0;
      type = com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_UNKNOWN;
      iframe = "";
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.cid != 0) {
        output.writeInt32(1, this.cid);
      }
      if (this.type != com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_UNKNOWN) {
        output.writeInt32(2, this.type);
      }
      if (!this.iframe.equals("")) {
        output.writeString(3, this.iframe);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.cid != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.cid);
      }
      if (this.type != com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(2, this.type);
      }
      if (!this.iframe.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(3, this.iframe);
      }
      return size;
    }

    @Override
    public RilDataCall mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.cid = input.readInt32();
            break;
          }
          case 16: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_UNKNOWN:
              case com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_TYPE_IP:
              case com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_TYPE_IPV6:
              case com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_TYPE_IPV4V6:
              case com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_TYPE_PPP:
                this.type = value;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 26: {
            this.iframe = input.readString();
            break;
          }
        }
      }
    }

    public static RilDataCall parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new RilDataCall(), data);
    }

    public static RilDataCall parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new RilDataCall().mergeFrom(input);
    }
  }

  public static final class TelephonyEvent extends
      com.google.protobuf.nano.ExtendableMessageNano<TelephonyEvent> {

    // enum Type
    public interface Type {
      public static final int UNKNOWN = 0;
      public static final int SETTINGS_CHANGED = 1;
      public static final int RIL_SERVICE_STATE_CHANGED = 2;
      public static final int IMS_CONNECTION_STATE_CHANGED = 3;
      public static final int IMS_CAPABILITIES_CHANGED = 4;
      public static final int DATA_CALL_SETUP = 5;
      public static final int DATA_CALL_SETUP_RESPONSE = 6;
      public static final int DATA_CALL_LIST_CHANGED = 7;
      public static final int DATA_CALL_DEACTIVATE = 8;
      public static final int DATA_CALL_DEACTIVATE_RESPONSE = 9;
      public static final int DATA_STALL_ACTION = 10;
      public static final int MODEM_RESTART = 11;
      public static final int NITZ_TIME = 12;
    }

    public static final class RilSetupDataCall extends
        com.google.protobuf.nano.ExtendableMessageNano<RilSetupDataCall> {

      // enum RilDataProfile
      public interface RilDataProfile {
        public static final int RIL_DATA_UNKNOWN = 0;
        public static final int RIL_DATA_PROFILE_DEFAULT = 1;
        public static final int RIL_DATA_PROFILE_TETHERED = 2;
        public static final int RIL_DATA_PROFILE_IMS = 3;
        public static final int RIL_DATA_PROFILE_FOTA = 4;
        public static final int RIL_DATA_PROFILE_CBS = 5;
        public static final int RIL_DATA_PROFILE_OEM_BASE = 6;
        public static final int RIL_DATA_PROFILE_INVALID = 7;
      }

      private static volatile RilSetupDataCall[] _emptyArray;
      public static RilSetupDataCall[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new RilSetupDataCall[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional .clearcut.connectivity.RadioAccessTechnology rat = 1 [default = UNKNOWN];
      public int rat;

      // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall.RilDataProfile data_profile = 2;
      public int dataProfile;

      // optional string apn = 3;
      public java.lang.String apn;

      // optional .clearcut.connectivity.PdpType type = 4;
      public int type;

      public RilSetupDataCall() {
        clear();
      }

      public RilSetupDataCall clear() {
        rat = com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN;
        dataProfile = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_UNKNOWN;
        apn = "";
        type = com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_UNKNOWN;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (this.rat != com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN) {
          output.writeInt32(1, this.rat);
        }
        if (this.dataProfile != com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_UNKNOWN) {
          output.writeInt32(2, this.dataProfile);
        }
        if (!this.apn.equals("")) {
          output.writeString(3, this.apn);
        }
        if (this.type != com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_UNKNOWN) {
          output.writeInt32(4, this.type);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (this.rat != com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.rat);
        }
        if (this.dataProfile != com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.dataProfile);
        }
        if (!this.apn.equals("")) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(3, this.apn);
        }
        if (this.type != com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(4, this.type);
        }
        return size;
      }

      @Override
      public RilSetupDataCall mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_GPRS:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EDGE:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_UMTS:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_IS95A:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_IS95B:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_1XRTT:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EVDO_0:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EVDO_A:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSDPA:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSUPA:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSPA:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EVDO_B:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EHRPD:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_LTE:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSPAP:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_GSM:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_TD_SCDMA:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_IWLAN:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_LTE_CA:
                  this.rat = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 16: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_PROFILE_DEFAULT:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_PROFILE_TETHERED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_PROFILE_IMS:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_PROFILE_FOTA:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_PROFILE_CBS:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_PROFILE_OEM_BASE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall.RilDataProfile.RIL_DATA_PROFILE_INVALID:
                  this.dataProfile = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 26: {
              this.apn = input.readString();
              break;
            }
            case 32: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_TYPE_IP:
                case com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_TYPE_IPV6:
                case com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_TYPE_IPV4V6:
                case com.android.internal.telephony.nano.TelephonyProto.PdpType.PDP_TYPE_PPP:
                  this.type = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
          }
        }
      }

      public static RilSetupDataCall parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new RilSetupDataCall(), data);
      }

      public static RilSetupDataCall parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new RilSetupDataCall().mergeFrom(input);
      }
    }

    public static final class RilSetupDataCallResponse extends
        com.google.protobuf.nano.ExtendableMessageNano<RilSetupDataCallResponse> {

      // enum RilDataCallFailCause
      public interface RilDataCallFailCause {
        public static final int PDP_FAIL_UNKNOWN = 0;
        public static final int PDP_FAIL_NONE = 1;
        public static final int PDP_FAIL_OPERATOR_BARRED = 8;
        public static final int PDP_FAIL_NAS_SIGNALLING = 14;
        public static final int PDP_FAIL_LLC_SNDCP = 25;
        public static final int PDP_FAIL_INSUFFICIENT_RESOURCES = 26;
        public static final int PDP_FAIL_MISSING_UKNOWN_APN = 27;
        public static final int PDP_FAIL_UNKNOWN_PDP_ADDRESS_TYPE = 28;
        public static final int PDP_FAIL_USER_AUTHENTICATION = 29;
        public static final int PDP_FAIL_ACTIVATION_REJECT_GGSN = 30;
        public static final int PDP_FAIL_ACTIVATION_REJECT_UNSPECIFIED = 31;
        public static final int PDP_FAIL_SERVICE_OPTION_NOT_SUPPORTED = 32;
        public static final int PDP_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED = 33;
        public static final int PDP_FAIL_SERVICE_OPTION_OUT_OF_ORDER = 34;
        public static final int PDP_FAIL_NSAPI_IN_USE = 35;
        public static final int PDP_FAIL_REGULAR_DEACTIVATION = 36;
        public static final int PDP_FAIL_QOS_NOT_ACCEPTED = 37;
        public static final int PDP_FAIL_NETWORK_FAILURE = 38;
        public static final int PDP_FAIL_UMTS_REACTIVATION_REQ = 39;
        public static final int PDP_FAIL_FEATURE_NOT_SUPP = 40;
        public static final int PDP_FAIL_TFT_SEMANTIC_ERROR = 41;
        public static final int PDP_FAIL_TFT_SYTAX_ERROR = 42;
        public static final int PDP_FAIL_UNKNOWN_PDP_CONTEXT = 43;
        public static final int PDP_FAIL_FILTER_SEMANTIC_ERROR = 44;
        public static final int PDP_FAIL_FILTER_SYTAX_ERROR = 45;
        public static final int PDP_FAIL_PDP_WITHOUT_ACTIVE_TFT = 46;
        public static final int PDP_FAIL_ONLY_IPV4_ALLOWED = 50;
        public static final int PDP_FAIL_ONLY_IPV6_ALLOWED = 51;
        public static final int PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED = 52;
        public static final int PDP_FAIL_ESM_INFO_NOT_RECEIVED = 53;
        public static final int PDP_FAIL_PDN_CONN_DOES_NOT_EXIST = 54;
        public static final int PDP_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED = 55;
        public static final int PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED = 65;
        public static final int PDP_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN = 66;
        public static final int PDP_FAIL_INVALID_TRANSACTION_ID = 81;
        public static final int PDP_FAIL_MESSAGE_INCORRECT_SEMANTIC = 95;
        public static final int PDP_FAIL_INVALID_MANDATORY_INFO = 96;
        public static final int PDP_FAIL_MESSAGE_TYPE_UNSUPPORTED = 97;
        public static final int PDP_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE = 98;
        public static final int PDP_FAIL_UNKNOWN_INFO_ELEMENT = 99;
        public static final int PDP_FAIL_CONDITIONAL_IE_ERROR = 100;
        public static final int PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE = 101;
        public static final int PDP_FAIL_PROTOCOL_ERRORS = 111;
        public static final int PDP_FAIL_APN_TYPE_CONFLICT = 112;
        public static final int PDP_FAIL_INVALID_PCSCF_ADDR = 113;
        public static final int PDP_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN = 114;
        public static final int PDP_FAIL_EMM_ACCESS_BARRED = 115;
        public static final int PDP_FAIL_EMERGENCY_IFACE_ONLY = 116;
        public static final int PDP_FAIL_IFACE_MISMATCH = 117;
        public static final int PDP_FAIL_COMPANION_IFACE_IN_USE = 118;
        public static final int PDP_FAIL_IP_ADDRESS_MISMATCH = 119;
        public static final int PDP_FAIL_IFACE_AND_POL_FAMILY_MISMATCH = 120;
        public static final int PDP_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY = 121;
        public static final int PDP_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL = 122;
        public static final int PDP_FAIL_VOICE_REGISTRATION_FAIL = -1;
        public static final int PDP_FAIL_DATA_REGISTRATION_FAIL = -2;
        public static final int PDP_FAIL_SIGNAL_LOST = -3;
        public static final int PDP_FAIL_PREF_RADIO_TECH_CHANGED = -4;
        public static final int PDP_FAIL_RADIO_POWER_OFF = -5;
        public static final int PDP_FAIL_TETHERED_CALL_ACTIVE = -6;
        public static final int PDP_FAIL_ERROR_UNSPECIFIED = 65535;
      }

      private static volatile RilSetupDataCallResponse[] _emptyArray;
      public static RilSetupDataCallResponse[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new RilSetupDataCallResponse[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause status = 1;
      public int status;

      // optional int32 suggested_retry_time_millis = 2;
      public int suggestedRetryTimeMillis;

      // optional .clearcut.connectivity.RilDataCall call = 3;
      public com.android.internal.telephony.nano.TelephonyProto.RilDataCall call;

      public RilSetupDataCallResponse() {
        clear();
      }

      public RilSetupDataCallResponse clear() {
        status = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNKNOWN;
        suggestedRetryTimeMillis = 0;
        call = null;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (this.status != com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNKNOWN) {
          output.writeInt32(1, this.status);
        }
        if (this.suggestedRetryTimeMillis != 0) {
          output.writeInt32(2, this.suggestedRetryTimeMillis);
        }
        if (this.call != null) {
          output.writeMessage(3, this.call);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (this.status != com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.status);
        }
        if (this.suggestedRetryTimeMillis != 0) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(2, this.suggestedRetryTimeMillis);
        }
        if (this.call != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(3, this.call);
        }
        return size;
      }

      @Override
      public RilSetupDataCallResponse mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_NONE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_OPERATOR_BARRED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_NAS_SIGNALLING:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_LLC_SNDCP:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_INSUFFICIENT_RESOURCES:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_MISSING_UKNOWN_APN:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNKNOWN_PDP_ADDRESS_TYPE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_USER_AUTHENTICATION:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_ACTIVATION_REJECT_GGSN:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_ACTIVATION_REJECT_UNSPECIFIED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_SERVICE_OPTION_NOT_SUPPORTED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_SERVICE_OPTION_OUT_OF_ORDER:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_NSAPI_IN_USE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_REGULAR_DEACTIVATION:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_QOS_NOT_ACCEPTED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_NETWORK_FAILURE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UMTS_REACTIVATION_REQ:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_FEATURE_NOT_SUPP:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_TFT_SEMANTIC_ERROR:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_TFT_SYTAX_ERROR:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNKNOWN_PDP_CONTEXT:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_FILTER_SEMANTIC_ERROR:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_FILTER_SYTAX_ERROR:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_PDP_WITHOUT_ACTIVE_TFT:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_ONLY_IPV4_ALLOWED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_ONLY_IPV6_ALLOWED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_ESM_INFO_NOT_RECEIVED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_PDN_CONN_DOES_NOT_EXIST:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_INVALID_TRANSACTION_ID:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_MESSAGE_INCORRECT_SEMANTIC:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_INVALID_MANDATORY_INFO:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_MESSAGE_TYPE_UNSUPPORTED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_UNKNOWN_INFO_ELEMENT:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_CONDITIONAL_IE_ERROR:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_PROTOCOL_ERRORS:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_APN_TYPE_CONFLICT:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_INVALID_PCSCF_ADDR:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_EMM_ACCESS_BARRED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_EMERGENCY_IFACE_ONLY:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_IFACE_MISMATCH:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_COMPANION_IFACE_IN_USE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_IP_ADDRESS_MISMATCH:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_IFACE_AND_POL_FAMILY_MISMATCH:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_VOICE_REGISTRATION_FAIL:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_DATA_REGISTRATION_FAIL:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_SIGNAL_LOST:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_PREF_RADIO_TECH_CHANGED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_RADIO_POWER_OFF:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_TETHERED_CALL_ACTIVE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse.RilDataCallFailCause.PDP_FAIL_ERROR_UNSPECIFIED:
                  this.status = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 16: {
              this.suggestedRetryTimeMillis = input.readInt32();
              break;
            }
            case 26: {
              if (this.call == null) {
                this.call = new com.android.internal.telephony.nano.TelephonyProto.RilDataCall();
              }
              input.readMessage(this.call);
              break;
            }
          }
        }
      }

      public static RilSetupDataCallResponse parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new RilSetupDataCallResponse(), data);
      }

      public static RilSetupDataCallResponse parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new RilSetupDataCallResponse().mergeFrom(input);
      }
    }

    public static final class RilDeactivateDataCall extends
        com.google.protobuf.nano.ExtendableMessageNano<RilDeactivateDataCall> {

      // enum DeactivateReason
      public interface DeactivateReason {
        public static final int DEACTIVATE_REASON_UNKNOWN = 0;
        public static final int DEACTIVATE_REASON_NONE = 1;
        public static final int DEACTIVATE_REASON_RADIO_OFF = 2;
        public static final int DEACTIVATE_REASON_PDP_RESET = 3;
      }

      private static volatile RilDeactivateDataCall[] _emptyArray;
      public static RilDeactivateDataCall[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new RilDeactivateDataCall[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional int32 cid = 1;
      public int cid;

      // optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall.DeactivateReason reason = 2;
      public int reason;

      public RilDeactivateDataCall() {
        clear();
      }

      public RilDeactivateDataCall clear() {
        cid = 0;
        reason = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_UNKNOWN;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (this.cid != 0) {
          output.writeInt32(1, this.cid);
        }
        if (this.reason != com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_UNKNOWN) {
          output.writeInt32(2, this.reason);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (this.cid != 0) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(1, this.cid);
        }
        if (this.reason != com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.reason);
        }
        return size;
      }

      @Override
      public RilDeactivateDataCall mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              this.cid = input.readInt32();
              break;
            }
            case 16: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_NONE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_RADIO_OFF:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall.DeactivateReason.DEACTIVATE_REASON_PDP_RESET:
                  this.reason = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
          }
        }
      }

      public static RilDeactivateDataCall parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new RilDeactivateDataCall(), data);
      }

      public static RilDeactivateDataCall parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new RilDeactivateDataCall().mergeFrom(input);
      }
    }

    public static final class ModemRestart extends
        com.google.protobuf.nano.ExtendableMessageNano<ModemRestart> {

      private static volatile ModemRestart[] _emptyArray;
      public static ModemRestart[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new ModemRestart[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional string baseband_version = 1;
      public java.lang.String basebandVersion;

      // optional string reason = 2;
      public java.lang.String reason;

      public ModemRestart() {
        clear();
      }

      public ModemRestart clear() {
        basebandVersion = "";
        reason = "";
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (!this.basebandVersion.equals("")) {
          output.writeString(1, this.basebandVersion);
        }
        if (!this.reason.equals("")) {
          output.writeString(2, this.reason);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (!this.basebandVersion.equals("")) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(1, this.basebandVersion);
        }
        if (!this.reason.equals("")) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(2, this.reason);
        }
        return size;
      }

      @Override
      public ModemRestart mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              this.basebandVersion = input.readString();
              break;
            }
            case 18: {
              this.reason = input.readString();
              break;
            }
          }
        }
      }

      public static ModemRestart parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new ModemRestart(), data);
      }

      public static ModemRestart parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new ModemRestart().mergeFrom(input);
      }
    }

    private static volatile TelephonyEvent[] _emptyArray;
    public static TelephonyEvent[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new TelephonyEvent[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int64 timestamp_millis = 1;
    public long timestampMillis;

    // optional int32 phone_id = 2;
    public int phoneId;

    // optional .clearcut.connectivity.TelephonyEvent.Type type = 3;
    public int type;

    // optional .clearcut.connectivity.TelephonySettings settings = 4;
    public com.android.internal.telephony.nano.TelephonyProto.TelephonySettings settings;

    // optional .clearcut.connectivity.TelephonyServiceState service_state = 5;
    public com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState serviceState;

    // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 6;
    public com.android.internal.telephony.nano.TelephonyProto.ImsConnectionState imsConnectionState;

    // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 7;
    public com.android.internal.telephony.nano.TelephonyProto.ImsCapabilities imsCapabilities;

    // repeated .clearcut.connectivity.RilDataCall data_calls = 8;
    public com.android.internal.telephony.nano.TelephonyProto.RilDataCall[] dataCalls;

    // optional .clearcut.connectivity.RilErrno error = 9;
    public int error;

    // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCall setup_data_call = 10;
    public com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall setupDataCall;

    // optional .clearcut.connectivity.TelephonyEvent.RilSetupDataCallResponse setup_data_call_response = 11;
    public com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse setupDataCallResponse;

    // optional .clearcut.connectivity.TelephonyEvent.RilDeactivateDataCall deactivate_data_call = 12;
    public com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall deactivateDataCall;

    // optional int32 data_stall_action = 13;
    public int dataStallAction;

    // optional .clearcut.connectivity.TelephonyEvent.ModemRestart modem_restart = 14;
    public com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.ModemRestart modemRestart;

    // optional int64 nitz_timestamp_millis = 15;
    public long nitzTimestampMillis;

    public TelephonyEvent() {
      clear();
    }

    public TelephonyEvent clear() {
      timestampMillis = 0L;
      phoneId = 0;
      type = com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.UNKNOWN;
      settings = null;
      serviceState = null;
      imsConnectionState = null;
      imsCapabilities = null;
      dataCalls = com.android.internal.telephony.nano.TelephonyProto.RilDataCall.emptyArray();
      error = com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_UNKNOWN;
      setupDataCall = null;
      setupDataCallResponse = null;
      deactivateDataCall = null;
      dataStallAction = 0;
      modemRestart = null;
      nitzTimestampMillis = 0L;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.timestampMillis != 0L) {
        output.writeInt64(1, this.timestampMillis);
      }
      if (this.phoneId != 0) {
        output.writeInt32(2, this.phoneId);
      }
      if (this.type != com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.UNKNOWN) {
        output.writeInt32(3, this.type);
      }
      if (this.settings != null) {
        output.writeMessage(4, this.settings);
      }
      if (this.serviceState != null) {
        output.writeMessage(5, this.serviceState);
      }
      if (this.imsConnectionState != null) {
        output.writeMessage(6, this.imsConnectionState);
      }
      if (this.imsCapabilities != null) {
        output.writeMessage(7, this.imsCapabilities);
      }
      if (this.dataCalls != null && this.dataCalls.length > 0) {
        for (int i = 0; i < this.dataCalls.length; i++) {
          com.android.internal.telephony.nano.TelephonyProto.RilDataCall element = this.dataCalls[i];
          if (element != null) {
            output.writeMessage(8, element);
          }
        }
      }
      if (this.error != com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_UNKNOWN) {
        output.writeInt32(9, this.error);
      }
      if (this.setupDataCall != null) {
        output.writeMessage(10, this.setupDataCall);
      }
      if (this.setupDataCallResponse != null) {
        output.writeMessage(11, this.setupDataCallResponse);
      }
      if (this.deactivateDataCall != null) {
        output.writeMessage(12, this.deactivateDataCall);
      }
      if (this.dataStallAction != 0) {
        output.writeInt32(13, this.dataStallAction);
      }
      if (this.modemRestart != null) {
        output.writeMessage(14, this.modemRestart);
      }
      if (this.nitzTimestampMillis != 0L) {
        output.writeInt64(15, this.nitzTimestampMillis);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.timestampMillis != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(1, this.timestampMillis);
      }
      if (this.phoneId != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.phoneId);
      }
      if (this.type != com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(3, this.type);
      }
      if (this.settings != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(4, this.settings);
      }
      if (this.serviceState != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(5, this.serviceState);
      }
      if (this.imsConnectionState != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(6, this.imsConnectionState);
      }
      if (this.imsCapabilities != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(7, this.imsCapabilities);
      }
      if (this.dataCalls != null && this.dataCalls.length > 0) {
        for (int i = 0; i < this.dataCalls.length; i++) {
          com.android.internal.telephony.nano.TelephonyProto.RilDataCall element = this.dataCalls[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(8, element);
          }
        }
      }
      if (this.error != com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(9, this.error);
      }
      if (this.setupDataCall != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(10, this.setupDataCall);
      }
      if (this.setupDataCallResponse != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(11, this.setupDataCallResponse);
      }
      if (this.deactivateDataCall != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(12, this.deactivateDataCall);
      }
      if (this.dataStallAction != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(13, this.dataStallAction);
      }
      if (this.modemRestart != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(14, this.modemRestart);
      }
      if (this.nitzTimestampMillis != 0L) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt64Size(15, this.nitzTimestampMillis);
      }
      return size;
    }

    @Override
    public TelephonyEvent mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.timestampMillis = input.readInt64();
            break;
          }
          case 16: {
            this.phoneId = input.readInt32();
            break;
          }
          case 24: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.UNKNOWN:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.SETTINGS_CHANGED:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.RIL_SERVICE_STATE_CHANGED:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.IMS_CONNECTION_STATE_CHANGED:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.IMS_CAPABILITIES_CHANGED:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.DATA_CALL_SETUP:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.DATA_CALL_SETUP_RESPONSE:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.DATA_CALL_LIST_CHANGED:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.DATA_CALL_DEACTIVATE:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.DATA_CALL_DEACTIVATE_RESPONSE:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.DATA_STALL_ACTION:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.MODEM_RESTART:
              case com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.Type.NITZ_TIME:
                this.type = value;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 34: {
            if (this.settings == null) {
              this.settings = new com.android.internal.telephony.nano.TelephonyProto.TelephonySettings();
            }
            input.readMessage(this.settings);
            break;
          }
          case 42: {
            if (this.serviceState == null) {
              this.serviceState = new com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState();
            }
            input.readMessage(this.serviceState);
            break;
          }
          case 50: {
            if (this.imsConnectionState == null) {
              this.imsConnectionState = new com.android.internal.telephony.nano.TelephonyProto.ImsConnectionState();
            }
            input.readMessage(this.imsConnectionState);
            break;
          }
          case 58: {
            if (this.imsCapabilities == null) {
              this.imsCapabilities = new com.android.internal.telephony.nano.TelephonyProto.ImsCapabilities();
            }
            input.readMessage(this.imsCapabilities);
            break;
          }
          case 66: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 66);
            int i = this.dataCalls == null ? 0 : this.dataCalls.length;
            com.android.internal.telephony.nano.TelephonyProto.RilDataCall[] newArray =
                new com.android.internal.telephony.nano.TelephonyProto.RilDataCall[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.dataCalls, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.RilDataCall();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.RilDataCall();
            input.readMessage(newArray[i]);
            this.dataCalls = newArray;
            break;
          }
          case 72: {
            int initialPos = input.getPosition();
            int value = input.readInt32();
            switch (value) {
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_UNKNOWN:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SUCCESS:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_RADIO_NOT_AVAILABLE:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_GENERIC_FAILURE:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_PASSWORD_INCORRECT:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SIM_PIN2:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SIM_PUK2:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_REQUEST_NOT_SUPPORTED:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_CANCELLED:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SMS_SEND_FAIL_RETRY:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SIM_ABSENT:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SUBSCRIPTION_NOT_AVAILABLE:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_MODE_NOT_SUPPORTED:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_FDN_CHECK_FAILURE:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_ILLEGAL_SIM_OR_ME:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_MISSING_RESOURCE:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_NO_SUCH_ELEMENT:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_USSD:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_SS:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_DIAL:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_DIAL:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_SS:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_USSD:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_DIAL:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_USSD:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SUBSCRIPTION_NOT_SUPPORTED:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_SS:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_LCE_NOT_SUPPORTED:
              case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_LCE_NOT_SUPPORTED_NEW:
                this.error = value;
                break;
              default:
                input.rewindToPosition(initialPos);
                storeUnknownField(input, tag);
                break;
            }
            break;
          }
          case 82: {
            if (this.setupDataCall == null) {
              this.setupDataCall = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCall();
            }
            input.readMessage(this.setupDataCall);
            break;
          }
          case 90: {
            if (this.setupDataCallResponse == null) {
              this.setupDataCallResponse = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilSetupDataCallResponse();
            }
            input.readMessage(this.setupDataCallResponse);
            break;
          }
          case 98: {
            if (this.deactivateDataCall == null) {
              this.deactivateDataCall = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.RilDeactivateDataCall();
            }
            input.readMessage(this.deactivateDataCall);
            break;
          }
          case 104: {
            this.dataStallAction = input.readInt32();
            break;
          }
          case 114: {
            if (this.modemRestart == null) {
              this.modemRestart = new com.android.internal.telephony.nano.TelephonyProto.TelephonyEvent.ModemRestart();
            }
            input.readMessage(this.modemRestart);
            break;
          }
          case 120: {
            this.nitzTimestampMillis = input.readInt64();
            break;
          }
        }
      }
    }

    public static TelephonyEvent parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new TelephonyEvent(), data);
    }

    public static TelephonyEvent parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new TelephonyEvent().mergeFrom(input);
    }
  }

  public static final class TelephonyCallSession extends
      com.google.protobuf.nano.ExtendableMessageNano<TelephonyCallSession> {

    public static final class Event extends
        com.google.protobuf.nano.ExtendableMessageNano<Event> {

      // enum Type
      public interface Type {
        public static final int EVENT_UNKNOWN = 0;
        public static final int SETTINGS_CHANGED = 1;
        public static final int RIL_SERVICE_STATE_CHANGED = 2;
        public static final int IMS_CONNECTION_STATE_CHANGED = 3;
        public static final int IMS_CAPABILITIES_CHANGED = 4;
        public static final int DATA_CALL_LIST_CHANGED = 5;
        public static final int RIL_REQUEST = 6;
        public static final int RIL_RESPONSE = 7;
        public static final int RIL_CALL_RING = 8;
        public static final int RIL_CALL_SRVCC = 9;
        public static final int RIL_CALL_LIST_CHANGED = 10;
        public static final int IMS_COMMAND = 11;
        public static final int IMS_COMMAND_RECEIVED = 12;
        public static final int IMS_COMMAND_FAILED = 13;
        public static final int IMS_COMMAND_COMPLETE = 14;
        public static final int IMS_CALL_RECEIVE = 15;
        public static final int IMS_CALL_STATE_CHANGED = 16;
        public static final int IMS_CALL_TERMINATED = 17;
        public static final int IMS_CALL_HANDOVER = 18;
        public static final int IMS_CALL_HANDOVER_FAILED = 19;
        public static final int PHONE_STATE_CHANGED = 20;
        public static final int NITZ_TIME = 21;
      }

      // enum RilRequest
      public interface RilRequest {
        public static final int RIL_REQUEST_UNKNOWN = 0;
        public static final int RIL_REQUEST_DIAL = 1;
        public static final int RIL_REQUEST_ANSWER = 2;
        public static final int RIL_REQUEST_HANGUP = 3;
        public static final int RIL_REQUEST_SET_CALL_WAITING = 4;
        public static final int RIL_REQUEST_SWITCH_HOLDING_AND_ACTIVE = 5;
        public static final int RIL_REQUEST_CDMA_FLASH = 6;
        public static final int RIL_REQUEST_CONFERENCE = 7;
      }

      // enum ImsCommand
      public interface ImsCommand {
        public static final int IMS_CMD_UNKNOWN = 0;
        public static final int IMS_CMD_START = 1;
        public static final int IMS_CMD_ACCEPT = 2;
        public static final int IMS_CMD_REJECT = 3;
        public static final int IMS_CMD_TERMINATE = 4;
        public static final int IMS_CMD_HOLD = 5;
        public static final int IMS_CMD_RESUME = 6;
        public static final int IMS_CMD_MERGE = 7;
        public static final int IMS_CMD_UPDATE = 8;
        public static final int IMS_CMD_CONFERENCE_EXTEND = 9;
        public static final int IMS_CMD_INVITE_PARTICIPANT = 10;
        public static final int IMS_CMD_REMOVE_PARTICIPANT = 11;
      }

      // enum PhoneState
      public interface PhoneState {
        public static final int STATE_UNKNOWN = 0;
        public static final int STATE_IDLE = 1;
        public static final int STATE_RINGING = 2;
        public static final int STATE_OFFHOOK = 3;
      }

      // enum CallState
      public interface CallState {
        public static final int CALL_UNKNOWN = 0;
        public static final int CALL_IDLE = 1;
        public static final int CALL_ACTIVE = 2;
        public static final int CALL_HOLDING = 3;
        public static final int CALL_DIALING = 4;
        public static final int CALL_ALERTING = 5;
        public static final int CALL_INCOMING = 6;
        public static final int CALL_WAITING = 7;
        public static final int CALL_DISCONNECTED = 8;
        public static final int CALL_DISCONNECTING = 9;
      }

      // enum RilSrvccState
      public interface RilSrvccState {
        public static final int HANDOVER_UNKNOWN = 0;
        public static final int HANDOVER_STARTED = 1;
        public static final int HANDOVER_COMPLETED = 2;
        public static final int HANDOVER_FAILED = 3;
        public static final int HANDOVER_CANCELED = 4;
      }

      public static final class RilCall extends
          com.google.protobuf.nano.ExtendableMessageNano<RilCall> {

        // enum Type
        public interface Type {
          public static final int UNKNOWN = 0;
          public static final int MO = 1;
          public static final int MT = 2;
        }

        private static volatile RilCall[] _emptyArray;
        public static RilCall[] emptyArray() {
          // Lazily initializes the empty array
          if (_emptyArray == null) {
            synchronized (
                com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
              if (_emptyArray == null) {
                _emptyArray = new RilCall[0];
              }
            }
          }
          return _emptyArray;
        }

        // optional int32 index = 1;
        public int index;

        // optional .clearcut.connectivity.TelephonyCallSession.Event.CallState state = 2;
        public int state;

        // optional .clearcut.connectivity.TelephonyCallSession.Event.RilCall.Type type = 3;
        public int type;

        // optional int32 call_end_reason = 4;
        public int callEndReason;

        // optional bool is_multiparty = 5;
        public boolean isMultiparty;

        public RilCall() {
          clear();
        }

        public RilCall clear() {
          index = 0;
          state = com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN;
          type = com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.UNKNOWN;
          callEndReason = 0;
          isMultiparty = false;
          unknownFieldData = null;
          cachedSize = -1;
          return this;
        }

        @Override
        public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
            throws java.io.IOException {
          if (this.index != 0) {
            output.writeInt32(1, this.index);
          }
          if (this.state != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN) {
            output.writeInt32(2, this.state);
          }
          if (this.type != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.UNKNOWN) {
            output.writeInt32(3, this.type);
          }
          if (this.callEndReason != 0) {
            output.writeInt32(4, this.callEndReason);
          }
          if (this.isMultiparty != false) {
            output.writeBool(5, this.isMultiparty);
          }
          super.writeTo(output);
        }

        @Override
        protected int computeSerializedSize() {
          int size = super.computeSerializedSize();
          if (this.index != 0) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeInt32Size(1, this.index);
          }
          if (this.state != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(2, this.state);
          }
          if (this.type != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.UNKNOWN) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(3, this.type);
          }
          if (this.callEndReason != 0) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeInt32Size(4, this.callEndReason);
          }
          if (this.isMultiparty != false) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeBoolSize(5, this.isMultiparty);
          }
          return size;
        }

        @Override
        public RilCall mergeFrom(
                com.google.protobuf.nano.CodedInputByteBufferNano input)
            throws java.io.IOException {
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                return this;
              default: {
                if (!storeUnknownField(input, tag)) {
                  return this;
                }
                break;
              }
              case 8: {
                this.index = input.readInt32();
                break;
              }
              case 16: {
                int initialPos = input.getPosition();
                int value = input.readInt32();
                switch (value) {
                  case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN:
                  case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_IDLE:
                  case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_ACTIVE:
                  case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_HOLDING:
                  case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_DIALING:
                  case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_ALERTING:
                  case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_INCOMING:
                  case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_WAITING:
                  case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_DISCONNECTED:
                  case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_DISCONNECTING:
                    this.state = value;
                    break;
                  default:
                    input.rewindToPosition(initialPos);
                    storeUnknownField(input, tag);
                    break;
                }
                break;
              }
              case 24: {
                int initialPos = input.getPosition();
                int value = input.readInt32();
                switch (value) {
                  case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.UNKNOWN:
                  case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.MO:
                  case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall.Type.MT:
                    this.type = value;
                    break;
                  default:
                    input.rewindToPosition(initialPos);
                    storeUnknownField(input, tag);
                    break;
                }
                break;
              }
              case 32: {
                this.callEndReason = input.readInt32();
                break;
              }
              case 40: {
                this.isMultiparty = input.readBool();
                break;
              }
            }
          }
        }

        public static RilCall parseFrom(byte[] data)
            throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
          return com.google.protobuf.nano.MessageNano.mergeFrom(new RilCall(), data);
        }

        public static RilCall parseFrom(
                com.google.protobuf.nano.CodedInputByteBufferNano input)
            throws java.io.IOException {
          return new RilCall().mergeFrom(input);
        }
      }

      private static volatile Event[] _emptyArray;
      public static Event[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new Event[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional .clearcut.connectivity.TelephonyCallSession.Event.Type type = 1;
      public int type;

      // optional .clearcut.connectivity.TimeInterval delay = 2;
      public int delay;

      // optional .clearcut.connectivity.TelephonySettings settings = 3;
      public com.android.internal.telephony.nano.TelephonyProto.TelephonySettings settings;

      // optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
      public com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState serviceState;

      // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
      public com.android.internal.telephony.nano.TelephonyProto.ImsConnectionState imsConnectionState;

      // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
      public com.android.internal.telephony.nano.TelephonyProto.ImsCapabilities imsCapabilities;

      // repeated .clearcut.connectivity.RilDataCall data_calls = 7;
      public com.android.internal.telephony.nano.TelephonyProto.RilDataCall[] dataCalls;

      // optional .clearcut.connectivity.TelephonyCallSession.Event.PhoneState phone_state = 8;
      public int phoneState;

      // optional .clearcut.connectivity.TelephonyCallSession.Event.CallState call_state = 9;
      public int callState;

      // optional int32 call_index = 10;
      public int callIndex;

      // optional int32 merged_call_index = 11;
      public int mergedCallIndex;

      // repeated .clearcut.connectivity.TelephonyCallSession.Event.RilCall calls = 12;
      public com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall[] calls;

      // optional .clearcut.connectivity.RilErrno error = 13;
      public int error;

      // optional .clearcut.connectivity.TelephonyCallSession.Event.RilRequest ril_request = 14;
      public int rilRequest;

      // optional int32 ril_request_id = 15;
      public int rilRequestId;

      // optional .clearcut.connectivity.TelephonyCallSession.Event.RilSrvccState srvcc_state = 16;
      public int srvccState;

      // optional .clearcut.connectivity.TelephonyCallSession.Event.ImsCommand ims_command = 17;
      public int imsCommand;

      // optional .clearcut.connectivity.ImsReasonInfo reason_info = 18;
      public com.android.internal.telephony.nano.TelephonyProto.ImsReasonInfo reasonInfo;

      // optional .clearcut.connectivity.RadioAccessTechnology src_access_tech = 19 [default = UNKNOWN];
      public int srcAccessTech;

      // optional .clearcut.connectivity.RadioAccessTechnology target_access_tech = 20 [default = UNKNOWN];
      public int targetAccessTech;

      // optional int64 nitz_timestamp_millis = 21;
      public long nitzTimestampMillis;

      public Event() {
        clear();
      }

      public Event clear() {
        type = com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.EVENT_UNKNOWN;
        delay = com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_UNKNOWN;
        settings = null;
        serviceState = null;
        imsConnectionState = null;
        imsCapabilities = null;
        dataCalls = com.android.internal.telephony.nano.TelephonyProto.RilDataCall.emptyArray();
        phoneState = com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.PhoneState.STATE_UNKNOWN;
        callState = com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN;
        callIndex = 0;
        mergedCallIndex = 0;
        calls = com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall.emptyArray();
        error = com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_UNKNOWN;
        rilRequest = com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_UNKNOWN;
        rilRequestId = 0;
        srvccState = com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_UNKNOWN;
        imsCommand = com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_UNKNOWN;
        reasonInfo = null;
        srcAccessTech = com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN;
        targetAccessTech = com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN;
        nitzTimestampMillis = 0L;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (this.type != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.EVENT_UNKNOWN) {
          output.writeInt32(1, this.type);
        }
        if (this.delay != com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_UNKNOWN) {
          output.writeInt32(2, this.delay);
        }
        if (this.settings != null) {
          output.writeMessage(3, this.settings);
        }
        if (this.serviceState != null) {
          output.writeMessage(4, this.serviceState);
        }
        if (this.imsConnectionState != null) {
          output.writeMessage(5, this.imsConnectionState);
        }
        if (this.imsCapabilities != null) {
          output.writeMessage(6, this.imsCapabilities);
        }
        if (this.dataCalls != null && this.dataCalls.length > 0) {
          for (int i = 0; i < this.dataCalls.length; i++) {
            com.android.internal.telephony.nano.TelephonyProto.RilDataCall element = this.dataCalls[i];
            if (element != null) {
              output.writeMessage(7, element);
            }
          }
        }
        if (this.phoneState != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.PhoneState.STATE_UNKNOWN) {
          output.writeInt32(8, this.phoneState);
        }
        if (this.callState != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN) {
          output.writeInt32(9, this.callState);
        }
        if (this.callIndex != 0) {
          output.writeInt32(10, this.callIndex);
        }
        if (this.mergedCallIndex != 0) {
          output.writeInt32(11, this.mergedCallIndex);
        }
        if (this.calls != null && this.calls.length > 0) {
          for (int i = 0; i < this.calls.length; i++) {
            com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall element = this.calls[i];
            if (element != null) {
              output.writeMessage(12, element);
            }
          }
        }
        if (this.error != com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_UNKNOWN) {
          output.writeInt32(13, this.error);
        }
        if (this.rilRequest != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_UNKNOWN) {
          output.writeInt32(14, this.rilRequest);
        }
        if (this.rilRequestId != 0) {
          output.writeInt32(15, this.rilRequestId);
        }
        if (this.srvccState != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_UNKNOWN) {
          output.writeInt32(16, this.srvccState);
        }
        if (this.imsCommand != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_UNKNOWN) {
          output.writeInt32(17, this.imsCommand);
        }
        if (this.reasonInfo != null) {
          output.writeMessage(18, this.reasonInfo);
        }
        if (this.srcAccessTech != com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN) {
          output.writeInt32(19, this.srcAccessTech);
        }
        if (this.targetAccessTech != com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN) {
          output.writeInt32(20, this.targetAccessTech);
        }
        if (this.nitzTimestampMillis != 0L) {
          output.writeInt64(21, this.nitzTimestampMillis);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (this.type != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.EVENT_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.type);
        }
        if (this.delay != com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.delay);
        }
        if (this.settings != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(3, this.settings);
        }
        if (this.serviceState != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(4, this.serviceState);
        }
        if (this.imsConnectionState != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(5, this.imsConnectionState);
        }
        if (this.imsCapabilities != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(6, this.imsCapabilities);
        }
        if (this.dataCalls != null && this.dataCalls.length > 0) {
          for (int i = 0; i < this.dataCalls.length; i++) {
            com.android.internal.telephony.nano.TelephonyProto.RilDataCall element = this.dataCalls[i];
            if (element != null) {
              size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeMessageSize(7, element);
            }
          }
        }
        if (this.phoneState != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.PhoneState.STATE_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(8, this.phoneState);
        }
        if (this.callState != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(9, this.callState);
        }
        if (this.callIndex != 0) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(10, this.callIndex);
        }
        if (this.mergedCallIndex != 0) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(11, this.mergedCallIndex);
        }
        if (this.calls != null && this.calls.length > 0) {
          for (int i = 0; i < this.calls.length; i++) {
            com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall element = this.calls[i];
            if (element != null) {
              size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeMessageSize(12, element);
            }
          }
        }
        if (this.error != com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(13, this.error);
        }
        if (this.rilRequest != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(14, this.rilRequest);
        }
        if (this.rilRequestId != 0) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(15, this.rilRequestId);
        }
        if (this.srvccState != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(16, this.srvccState);
        }
        if (this.imsCommand != com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(17, this.imsCommand);
        }
        if (this.reasonInfo != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(18, this.reasonInfo);
        }
        if (this.srcAccessTech != com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(19, this.srcAccessTech);
        }
        if (this.targetAccessTech != com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(20, this.targetAccessTech);
        }
        if (this.nitzTimestampMillis != 0L) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt64Size(21, this.nitzTimestampMillis);
        }
        return size;
      }

      @Override
      public Event mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.EVENT_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.SETTINGS_CHANGED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.RIL_SERVICE_STATE_CHANGED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.IMS_CONNECTION_STATE_CHANGED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.IMS_CAPABILITIES_CHANGED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.DATA_CALL_LIST_CHANGED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.RIL_REQUEST:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.RIL_RESPONSE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.RIL_CALL_RING:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.RIL_CALL_SRVCC:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.RIL_CALL_LIST_CHANGED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.IMS_COMMAND:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.IMS_COMMAND_RECEIVED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.IMS_COMMAND_FAILED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.IMS_COMMAND_COMPLETE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.IMS_CALL_RECEIVE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.IMS_CALL_STATE_CHANGED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.IMS_CALL_TERMINATED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.IMS_CALL_HANDOVER:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.IMS_CALL_HANDOVER_FAILED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.PHONE_STATE_CHANGED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.Type.NITZ_TIME:
                  this.type = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 16: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_10_MILLIS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_20_MILLIS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_50_MILLIS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_100_MILLIS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_200_MILLIS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_500_MILLIS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_1_SEC:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_2_SEC:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_5_SEC:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_10_SEC:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_30_SEC:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_1_MINUTE:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_3_MINUTES:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_10_MINUTES:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_30_MINUTES:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_1_HOUR:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_2_HOURS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_4_HOURS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_MANY_HOURS:
                  this.delay = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 26: {
              if (this.settings == null) {
                this.settings = new com.android.internal.telephony.nano.TelephonyProto.TelephonySettings();
              }
              input.readMessage(this.settings);
              break;
            }
            case 34: {
              if (this.serviceState == null) {
                this.serviceState = new com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState();
              }
              input.readMessage(this.serviceState);
              break;
            }
            case 42: {
              if (this.imsConnectionState == null) {
                this.imsConnectionState = new com.android.internal.telephony.nano.TelephonyProto.ImsConnectionState();
              }
              input.readMessage(this.imsConnectionState);
              break;
            }
            case 50: {
              if (this.imsCapabilities == null) {
                this.imsCapabilities = new com.android.internal.telephony.nano.TelephonyProto.ImsCapabilities();
              }
              input.readMessage(this.imsCapabilities);
              break;
            }
            case 58: {
              int arrayLength = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 58);
              int i = this.dataCalls == null ? 0 : this.dataCalls.length;
              com.android.internal.telephony.nano.TelephonyProto.RilDataCall[] newArray =
                  new com.android.internal.telephony.nano.TelephonyProto.RilDataCall[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.dataCalls, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.RilDataCall();
                input.readMessage(newArray[i]);
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.RilDataCall();
              input.readMessage(newArray[i]);
              this.dataCalls = newArray;
              break;
            }
            case 64: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.PhoneState.STATE_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.PhoneState.STATE_IDLE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.PhoneState.STATE_RINGING:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.PhoneState.STATE_OFFHOOK:
                  this.phoneState = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 72: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_IDLE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_ACTIVE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_HOLDING:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_DIALING:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_ALERTING:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_INCOMING:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_WAITING:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_DISCONNECTED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.CallState.CALL_DISCONNECTING:
                  this.callState = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 80: {
              this.callIndex = input.readInt32();
              break;
            }
            case 88: {
              this.mergedCallIndex = input.readInt32();
              break;
            }
            case 98: {
              int arrayLength = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 98);
              int i = this.calls == null ? 0 : this.calls.length;
              com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall[] newArray =
                  new com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.calls, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall();
                input.readMessage(newArray[i]);
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilCall();
              input.readMessage(newArray[i]);
              this.calls = newArray;
              break;
            }
            case 104: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SUCCESS:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_RADIO_NOT_AVAILABLE:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_GENERIC_FAILURE:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_PASSWORD_INCORRECT:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SIM_PIN2:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SIM_PUK2:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_REQUEST_NOT_SUPPORTED:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_CANCELLED:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SMS_SEND_FAIL_RETRY:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SIM_ABSENT:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SUBSCRIPTION_NOT_AVAILABLE:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_MODE_NOT_SUPPORTED:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_FDN_CHECK_FAILURE:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_ILLEGAL_SIM_OR_ME:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_MISSING_RESOURCE:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_NO_SUCH_ELEMENT:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_USSD:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_SS:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_DIAL:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_DIAL:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_SS:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_USSD:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_DIAL:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_USSD:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SUBSCRIPTION_NOT_SUPPORTED:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_SS:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_LCE_NOT_SUPPORTED:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_LCE_NOT_SUPPORTED_NEW:
                  this.error = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 112: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_DIAL:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_ANSWER:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_HANGUP:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_SET_CALL_WAITING:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_SWITCH_HOLDING_AND_ACTIVE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_CDMA_FLASH:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilRequest.RIL_REQUEST_CONFERENCE:
                  this.rilRequest = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 120: {
              this.rilRequestId = input.readInt32();
              break;
            }
            case 128: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_STARTED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_COMPLETED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_FAILED:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.RilSrvccState.HANDOVER_CANCELED:
                  this.srvccState = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 136: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_START:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_ACCEPT:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_REJECT:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_TERMINATE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_HOLD:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_RESUME:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_MERGE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_UPDATE:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_CONFERENCE_EXTEND:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_INVITE_PARTICIPANT:
                case com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.ImsCommand.IMS_CMD_REMOVE_PARTICIPANT:
                  this.imsCommand = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 146: {
              if (this.reasonInfo == null) {
                this.reasonInfo = new com.android.internal.telephony.nano.TelephonyProto.ImsReasonInfo();
              }
              input.readMessage(this.reasonInfo);
              break;
            }
            case 152: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_GPRS:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EDGE:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_UMTS:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_IS95A:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_IS95B:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_1XRTT:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EVDO_0:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EVDO_A:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSDPA:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSUPA:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSPA:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EVDO_B:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EHRPD:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_LTE:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSPAP:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_GSM:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_TD_SCDMA:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_IWLAN:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_LTE_CA:
                  this.srcAccessTech = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 160: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_GPRS:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EDGE:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_UMTS:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_IS95A:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_IS95B:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_1XRTT:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EVDO_0:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EVDO_A:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSDPA:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSUPA:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSPA:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EVDO_B:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_EHRPD:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_LTE:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_HSPAP:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_GSM:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_TD_SCDMA:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_IWLAN:
                case com.android.internal.telephony.nano.TelephonyProto.RadioAccessTechnology.RAT_LTE_CA:
                  this.targetAccessTech = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 168: {
              this.nitzTimestampMillis = input.readInt64();
              break;
            }
          }
        }
      }

      public static Event parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new Event(), data);
      }

      public static Event parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new Event().mergeFrom(input);
      }
    }

    private static volatile TelephonyCallSession[] _emptyArray;
    public static TelephonyCallSession[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new TelephonyCallSession[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int32 start_time_minutes = 1;
    public int startTimeMinutes;

    // optional int32 phone_id = 2;
    public int phoneId;

    // repeated .clearcut.connectivity.TelephonyCallSession.Event events = 3;
    public com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event[] events;

    // optional bool events_dropped = 4;
    public boolean eventsDropped;

    public TelephonyCallSession() {
      clear();
    }

    public TelephonyCallSession clear() {
      startTimeMinutes = 0;
      phoneId = 0;
      events = com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event.emptyArray();
      eventsDropped = false;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.startTimeMinutes != 0) {
        output.writeInt32(1, this.startTimeMinutes);
      }
      if (this.phoneId != 0) {
        output.writeInt32(2, this.phoneId);
      }
      if (this.events != null && this.events.length > 0) {
        for (int i = 0; i < this.events.length; i++) {
          com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event element = this.events[i];
          if (element != null) {
            output.writeMessage(3, element);
          }
        }
      }
      if (this.eventsDropped != false) {
        output.writeBool(4, this.eventsDropped);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.startTimeMinutes != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.startTimeMinutes);
      }
      if (this.phoneId != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.phoneId);
      }
      if (this.events != null && this.events.length > 0) {
        for (int i = 0; i < this.events.length; i++) {
          com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event element = this.events[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(3, element);
          }
        }
      }
      if (this.eventsDropped != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(4, this.eventsDropped);
      }
      return size;
    }

    @Override
    public TelephonyCallSession mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.startTimeMinutes = input.readInt32();
            break;
          }
          case 16: {
            this.phoneId = input.readInt32();
            break;
          }
          case 26: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 26);
            int i = this.events == null ? 0 : this.events.length;
            com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event[] newArray =
                new com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.events, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.TelephonyCallSession.Event();
            input.readMessage(newArray[i]);
            this.events = newArray;
            break;
          }
          case 32: {
            this.eventsDropped = input.readBool();
            break;
          }
        }
      }
    }

    public static TelephonyCallSession parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new TelephonyCallSession(), data);
    }

    public static TelephonyCallSession parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new TelephonyCallSession().mergeFrom(input);
    }
  }

  public static final class SmsSession extends
      com.google.protobuf.nano.ExtendableMessageNano<SmsSession> {

    public static final class Event extends
        com.google.protobuf.nano.ExtendableMessageNano<Event> {

      // enum Type
      public interface Type {
        public static final int EVENT_UNKNOWN = 0;
        public static final int SETTINGS_CHANGED = 1;
        public static final int RIL_SERVICE_STATE_CHANGED = 2;
        public static final int IMS_CONNECTION_STATE_CHANGED = 3;
        public static final int IMS_CAPABILITIES_CHANGED = 4;
        public static final int DATA_CALL_LIST_CHANGED = 5;
        public static final int SMS_SEND = 6;
        public static final int SMS_SEND_RESULT = 7;
        public static final int SMS_RECEIVED = 8;
      }

      // enum Format
      public interface Format {
        public static final int SMS_FORMAT_UNKNOWN = 0;
        public static final int SMS_FORMAT_3GPP = 1;
        public static final int SMS_FORMAT_3GPP2 = 2;
      }

      // enum Tech
      public interface Tech {
        public static final int SMS_UNKNOWN = 0;
        public static final int SMS_GSM = 1;
        public static final int SMS_CDMA = 2;
        public static final int SMS_IMS = 3;
      }

      private static volatile Event[] _emptyArray;
      public static Event[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new Event[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional .clearcut.connectivity.SmsSession.Event.Type type = 1;
      public int type;

      // optional .clearcut.connectivity.TimeInterval delay = 2;
      public int delay;

      // optional .clearcut.connectivity.TelephonySettings settings = 3;
      public com.android.internal.telephony.nano.TelephonyProto.TelephonySettings settings;

      // optional .clearcut.connectivity.TelephonyServiceState service_state = 4;
      public com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState serviceState;

      // optional .clearcut.connectivity.ImsConnectionState ims_connection_state = 5;
      public com.android.internal.telephony.nano.TelephonyProto.ImsConnectionState imsConnectionState;

      // optional .clearcut.connectivity.ImsCapabilities ims_capabilities = 6;
      public com.android.internal.telephony.nano.TelephonyProto.ImsCapabilities imsCapabilities;

      // repeated .clearcut.connectivity.RilDataCall data_calls = 7;
      public com.android.internal.telephony.nano.TelephonyProto.RilDataCall[] dataCalls;

      // optional .clearcut.connectivity.SmsSession.Event.Format format = 8;
      public int format;

      // optional .clearcut.connectivity.SmsSession.Event.Tech tech = 9;
      public int tech;

      // optional int32 error_code = 10;
      public int errorCode;

      // optional .clearcut.connectivity.RilErrno error = 11;
      public int error;

      // optional int32 ril_request_id = 12;
      public int rilRequestId;

      public Event() {
        clear();
      }

      public Event clear() {
        type = com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Type.EVENT_UNKNOWN;
        delay = com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_UNKNOWN;
        settings = null;
        serviceState = null;
        imsConnectionState = null;
        imsCapabilities = null;
        dataCalls = com.android.internal.telephony.nano.TelephonyProto.RilDataCall.emptyArray();
        format = com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Format.SMS_FORMAT_UNKNOWN;
        tech = com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Tech.SMS_UNKNOWN;
        errorCode = 0;
        error = com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_UNKNOWN;
        rilRequestId = 0;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (this.type != com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Type.EVENT_UNKNOWN) {
          output.writeInt32(1, this.type);
        }
        if (this.delay != com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_UNKNOWN) {
          output.writeInt32(2, this.delay);
        }
        if (this.settings != null) {
          output.writeMessage(3, this.settings);
        }
        if (this.serviceState != null) {
          output.writeMessage(4, this.serviceState);
        }
        if (this.imsConnectionState != null) {
          output.writeMessage(5, this.imsConnectionState);
        }
        if (this.imsCapabilities != null) {
          output.writeMessage(6, this.imsCapabilities);
        }
        if (this.dataCalls != null && this.dataCalls.length > 0) {
          for (int i = 0; i < this.dataCalls.length; i++) {
            com.android.internal.telephony.nano.TelephonyProto.RilDataCall element = this.dataCalls[i];
            if (element != null) {
              output.writeMessage(7, element);
            }
          }
        }
        if (this.format != com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Format.SMS_FORMAT_UNKNOWN) {
          output.writeInt32(8, this.format);
        }
        if (this.tech != com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Tech.SMS_UNKNOWN) {
          output.writeInt32(9, this.tech);
        }
        if (this.errorCode != 0) {
          output.writeInt32(10, this.errorCode);
        }
        if (this.error != com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_UNKNOWN) {
          output.writeInt32(11, this.error);
        }
        if (this.rilRequestId != 0) {
          output.writeInt32(12, this.rilRequestId);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (this.type != com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Type.EVENT_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.type);
        }
        if (this.delay != com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.delay);
        }
        if (this.settings != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(3, this.settings);
        }
        if (this.serviceState != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(4, this.serviceState);
        }
        if (this.imsConnectionState != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(5, this.imsConnectionState);
        }
        if (this.imsCapabilities != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(6, this.imsCapabilities);
        }
        if (this.dataCalls != null && this.dataCalls.length > 0) {
          for (int i = 0; i < this.dataCalls.length; i++) {
            com.android.internal.telephony.nano.TelephonyProto.RilDataCall element = this.dataCalls[i];
            if (element != null) {
              size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeMessageSize(7, element);
            }
          }
        }
        if (this.format != com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Format.SMS_FORMAT_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(8, this.format);
        }
        if (this.tech != com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Tech.SMS_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(9, this.tech);
        }
        if (this.errorCode != 0) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(10, this.errorCode);
        }
        if (this.error != com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_UNKNOWN) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(11, this.error);
        }
        if (this.rilRequestId != 0) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(12, this.rilRequestId);
        }
        return size;
      }

      @Override
      public Event mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Type.EVENT_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Type.SETTINGS_CHANGED:
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Type.RIL_SERVICE_STATE_CHANGED:
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Type.IMS_CONNECTION_STATE_CHANGED:
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Type.IMS_CAPABILITIES_CHANGED:
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Type.DATA_CALL_LIST_CHANGED:
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Type.SMS_SEND:
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Type.SMS_SEND_RESULT:
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Type.SMS_RECEIVED:
                  this.type = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 16: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_10_MILLIS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_20_MILLIS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_50_MILLIS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_100_MILLIS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_200_MILLIS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_500_MILLIS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_1_SEC:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_2_SEC:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_5_SEC:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_10_SEC:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_30_SEC:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_1_MINUTE:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_3_MINUTES:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_10_MINUTES:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_30_MINUTES:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_1_HOUR:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_2_HOURS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_4_HOURS:
                case com.android.internal.telephony.nano.TelephonyProto.TimeInterval.TI_MANY_HOURS:
                  this.delay = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 26: {
              if (this.settings == null) {
                this.settings = new com.android.internal.telephony.nano.TelephonyProto.TelephonySettings();
              }
              input.readMessage(this.settings);
              break;
            }
            case 34: {
              if (this.serviceState == null) {
                this.serviceState = new com.android.internal.telephony.nano.TelephonyProto.TelephonyServiceState();
              }
              input.readMessage(this.serviceState);
              break;
            }
            case 42: {
              if (this.imsConnectionState == null) {
                this.imsConnectionState = new com.android.internal.telephony.nano.TelephonyProto.ImsConnectionState();
              }
              input.readMessage(this.imsConnectionState);
              break;
            }
            case 50: {
              if (this.imsCapabilities == null) {
                this.imsCapabilities = new com.android.internal.telephony.nano.TelephonyProto.ImsCapabilities();
              }
              input.readMessage(this.imsCapabilities);
              break;
            }
            case 58: {
              int arrayLength = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 58);
              int i = this.dataCalls == null ? 0 : this.dataCalls.length;
              com.android.internal.telephony.nano.TelephonyProto.RilDataCall[] newArray =
                  new com.android.internal.telephony.nano.TelephonyProto.RilDataCall[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.dataCalls, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.RilDataCall();
                input.readMessage(newArray[i]);
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.RilDataCall();
              input.readMessage(newArray[i]);
              this.dataCalls = newArray;
              break;
            }
            case 64: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Format.SMS_FORMAT_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Format.SMS_FORMAT_3GPP:
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Format.SMS_FORMAT_3GPP2:
                  this.format = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 72: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Tech.SMS_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Tech.SMS_GSM:
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Tech.SMS_CDMA:
                case com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.Tech.SMS_IMS:
                  this.tech = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 80: {
              this.errorCode = input.readInt32();
              break;
            }
            case 88: {
              int initialPos = input.getPosition();
              int value = input.readInt32();
              switch (value) {
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_UNKNOWN:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SUCCESS:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_RADIO_NOT_AVAILABLE:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_GENERIC_FAILURE:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_PASSWORD_INCORRECT:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SIM_PIN2:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SIM_PUK2:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_REQUEST_NOT_SUPPORTED:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_CANCELLED:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SMS_SEND_FAIL_RETRY:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SIM_ABSENT:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SUBSCRIPTION_NOT_AVAILABLE:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_MODE_NOT_SUPPORTED:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_FDN_CHECK_FAILURE:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_ILLEGAL_SIM_OR_ME:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_MISSING_RESOURCE:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_NO_SUCH_ELEMENT:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_USSD:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_SS:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_DIAL_MODIFIED_TO_DIAL:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_DIAL:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_SS:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_USSD_MODIFIED_TO_USSD:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_DIAL:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_USSD:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SUBSCRIPTION_NOT_SUPPORTED:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_SS_MODIFIED_TO_SS:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_LCE_NOT_SUPPORTED:
                case com.android.internal.telephony.nano.TelephonyProto.RilErrno.RIL_E_LCE_NOT_SUPPORTED_NEW:
                  this.error = value;
                  break;
                default:
                  input.rewindToPosition(initialPos);
                  storeUnknownField(input, tag);
                  break;
              }
              break;
            }
            case 96: {
              this.rilRequestId = input.readInt32();
              break;
            }
          }
        }
      }

      public static Event parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new Event(), data);
      }

      public static Event parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new Event().mergeFrom(input);
      }
    }

    private static volatile SmsSession[] _emptyArray;
    public static SmsSession[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new SmsSession[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int32 start_time_minutes = 1;
    public int startTimeMinutes;

    // optional int32 phone_id = 2;
    public int phoneId;

    // repeated .clearcut.connectivity.SmsSession.Event events = 3;
    public com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event[] events;

    // optional bool events_dropped = 4;
    public boolean eventsDropped;

    public SmsSession() {
      clear();
    }

    public SmsSession clear() {
      startTimeMinutes = 0;
      phoneId = 0;
      events = com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event.emptyArray();
      eventsDropped = false;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.startTimeMinutes != 0) {
        output.writeInt32(1, this.startTimeMinutes);
      }
      if (this.phoneId != 0) {
        output.writeInt32(2, this.phoneId);
      }
      if (this.events != null && this.events.length > 0) {
        for (int i = 0; i < this.events.length; i++) {
          com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event element = this.events[i];
          if (element != null) {
            output.writeMessage(3, element);
          }
        }
      }
      if (this.eventsDropped != false) {
        output.writeBool(4, this.eventsDropped);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.startTimeMinutes != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.startTimeMinutes);
      }
      if (this.phoneId != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.phoneId);
      }
      if (this.events != null && this.events.length > 0) {
        for (int i = 0; i < this.events.length; i++) {
          com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event element = this.events[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(3, element);
          }
        }
      }
      if (this.eventsDropped != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(4, this.eventsDropped);
      }
      return size;
    }

    @Override
    public SmsSession mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.startTimeMinutes = input.readInt32();
            break;
          }
          case 16: {
            this.phoneId = input.readInt32();
            break;
          }
          case 26: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 26);
            int i = this.events == null ? 0 : this.events.length;
            com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event[] newArray =
                new com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.events, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.internal.telephony.nano.TelephonyProto.SmsSession.Event();
            input.readMessage(newArray[i]);
            this.events = newArray;
            break;
          }
          case 32: {
            this.eventsDropped = input.readBool();
            break;
          }
        }
      }
    }

    public static SmsSession parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new SmsSession(), data);
    }

    public static SmsSession parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new SmsSession().mergeFrom(input);
    }
  }
}
